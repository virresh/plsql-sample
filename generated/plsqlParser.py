# Generated from ./simple_source/plsql.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0292")
        buf.write("\u1f8f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\4\u0142\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144")
        buf.write("\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148")
        buf.write("\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b")
        buf.write("\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f")
        buf.write("\t\u014f\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152")
        buf.write("\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156")
        buf.write("\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159")
        buf.write("\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d")
        buf.write("\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160")
        buf.write("\4\u0161\t\u0161\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164")
        buf.write("\t\u0164\4\u0165\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167")
        buf.write("\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b")
        buf.write("\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e")
        buf.write("\4\u016f\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172")
        buf.write("\t\u0172\4\u0173\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175")
        buf.write("\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179")
        buf.write("\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c")
        buf.write("\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180")
        buf.write("\t\u0180\4\u0181\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183")
        buf.write("\4\u0184\t\u0184\4\u0185\t\u0185\4\u0186\t\u0186\4\u0187")
        buf.write("\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a\t\u018a")
        buf.write("\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e")
        buf.write("\t\u018e\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191")
        buf.write("\4\u0192\t\u0192\4\u0193\t\u0193\4\u0194\t\u0194\4\u0195")
        buf.write("\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197\4\u0198\t\u0198")
        buf.write("\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c")
        buf.write("\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f")
        buf.write("\4\u01a0\t\u01a0\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3")
        buf.write("\t\u01a3\4\u01a4\t\u01a4\4\u01a5\t\u01a5\4\u01a6\t\u01a6")
        buf.write("\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9\4\u01aa")
        buf.write("\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad")
        buf.write("\4\u01ae\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1")
        buf.write("\t\u01b1\4\u01b2\t\u01b2\4\u01b3\t\u01b3\4\u01b4\t\u01b4")
        buf.write("\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7\t\u01b7\4\u01b8")
        buf.write("\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb")
        buf.write("\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf")
        buf.write("\t\u01bf\4\u01c0\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2")
        buf.write("\4\u01c3\t\u01c3\4\u01c4\t\u01c4\4\u01c5\t\u01c5\4\u01c6")
        buf.write("\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9\t\u01c9")
        buf.write("\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd")
        buf.write("\t\u01cd\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0")
        buf.write("\4\u01d1\t\u01d1\4\u01d2\t\u01d2\4\u01d3\t\u01d3\4\u01d4")
        buf.write("\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6\4\u01d7\t\u01d7")
        buf.write("\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db")
        buf.write("\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de")
        buf.write("\4\u01df\t\u01df\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2")
        buf.write("\t\u01e2\4\u01e3\t\u01e3\4\u01e4\t\u01e4\4\u01e5\t\u01e5")
        buf.write("\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8\4\u01e9")
        buf.write("\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec")
        buf.write("\4\u01ed\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0")
        buf.write("\t\u01f0\4\u01f1\t\u01f1\4\u01f2\t\u01f2\4\u01f3\t\u01f3")
        buf.write("\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6\t\u01f6\4\u01f7")
        buf.write("\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa")
        buf.write("\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe")
        buf.write("\t\u01fe\4\u01ff\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201")
        buf.write("\4\u0202\t\u0202\4\u0203\t\u0203\4\u0204\t\u0204\4\u0205")
        buf.write("\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208\t\u0208")
        buf.write("\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c")
        buf.write("\t\u020c\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f")
        buf.write("\4\u0210\t\u0210\4\u0211\t\u0211\4\u0212\t\u0212\4\u0213")
        buf.write("\t\u0213\4\u0214\t\u0214\3\2\6\2\u042a\n\2\r\2\16\2\u042b")
        buf.write("\3\3\7\3\u042f\n\3\f\3\16\3\u0432\13\3\3\3\3\3\3\4\3\4")
        buf.write("\5\4\u0438\n\4\3\4\3\4\3\4\5\4\u043d\n\4\7\4\u043f\n\4")
        buf.write("\f\4\16\4\u0442\13\4\3\4\5\4\u0445\n\4\5\4\u0447\n\4\3")
        buf.write("\4\3\4\3\5\3\5\5\5\u044d\n\5\3\5\5\5\u0450\n\5\3\6\5\6")
        buf.write("\u0453\n\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\5\7\u046e\n\7\3\b\3\b\5\b\u0472\n\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\5\b\u047a\n\b\3\b\5\b\u047d\n\b\3\t\3\t\3\t\5")
        buf.write("\t\u0482\n\t\3\n\3\n\3\n\5\n\u0487\n\n\3\n\3\n\3\13\3")
        buf.write("\13\3\13\3\13\3\13\5\13\u0490\n\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\6\13\u0497\n\13\r\13\16\13\u0498\3\f\3\f\3\r\3\r")
        buf.write("\3\r\5\r\u04a0\n\r\3\16\3\16\3\17\3\17\3\20\3\20\3\20")
        buf.write("\5\20\u04a9\n\20\5\20\u04ab\n\20\3\21\3\21\5\21\u04af")
        buf.write("\n\21\3\21\3\21\5\21\u04b3\n\21\3\21\3\21\5\21\u04b7\n")
        buf.write("\21\6\21\u04b9\n\21\r\21\16\21\u04ba\3\21\3\21\5\21\u04bf")
        buf.write("\n\21\3\22\3\22\5\22\u04c3\n\22\3\23\3\23\3\23\6\23\u04c8")
        buf.write("\n\23\r\23\16\23\u04c9\3\23\3\23\3\23\3\23\5\23\u04d0")
        buf.write("\n\23\5\23\u04d2\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u04e1\n\24\5\24")
        buf.write("\u04e3\n\24\3\25\3\25\5\25\u04e7\n\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\5\25\u04ee\n\25\3\25\6\25\u04f1\n\25\r\25\16")
        buf.write("\25\u04f2\3\25\3\25\5\25\u04f7\n\25\3\26\3\26\3\27\3\27")
        buf.write("\3\27\3\27\5\27\u04ff\n\27\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\5\30\u0508\n\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\5\30\u0511\n\30\3\30\3\30\5\30\u0515\n\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\5\30\u051e\n\30\3\30\3\30")
        buf.write("\5\30\u0522\n\30\3\30\3\30\5\30\u0526\n\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\5\30\u0540\n\30\3\30\5\30\u0543\n\30\3\30\5\30\u0546")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u0550")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u0558\n\30\3")
        buf.write("\30\3\30\6\30\u055c\n\30\r\30\16\30\u055d\3\30\3\30\5")
        buf.write("\30\u0562\n\30\3\30\3\30\5\30\u0566\n\30\3\31\3\31\3\31")
        buf.write("\7\31\u056b\n\31\f\31\16\31\u056e\13\31\3\32\3\32\5\32")
        buf.write("\u0572\n\32\3\32\3\32\5\32\u0576\n\32\3\32\5\32\u0579")
        buf.write("\n\32\6\32\u057b\n\32\r\32\16\32\u057c\3\32\3\32\3\33")
        buf.write("\3\33\3\33\3\33\3\33\5\33\u0586\n\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\5\33\u0590\n\33\3\33\3\33\3\33")
        buf.write("\6\33\u0595\n\33\r\33\16\33\u0596\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\5\34\u059f\n\34\5\34\u05a1\n\34\5\34\u05a3")
        buf.write("\n\34\3\34\5\34\u05a6\n\34\3\35\3\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\5\35\u05af\n\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\5\35\u05b7\n\35\3\35\3\35\3\35\3\35\3\35\5\35\u05be\n")
        buf.write("\35\3\36\3\36\3\37\3\37\3 \3 \3 \5 \u05c7\n \3 \3 \3 ")
        buf.write("\5 \u05cc\n \3 \3 \3!\3!\3!\3!\3!\3!\5!\u05d6\n!\3!\6")
        buf.write("!\u05d9\n!\r!\16!\u05da\3!\3!\5!\u05df\n!\3!\3!\5!\u05e3")
        buf.write("\n!\3!\3!\3!\3!\3!\5!\u05ea\n!\3!\6!\u05ed\n!\r!\16!\u05ee")
        buf.write("\3!\3!\5!\u05f3\n!\3\"\3\"\3#\3#\3#\3#\3#\5#\u05fc\n#")
        buf.write("\3$\3$\5$\u0600\n$\3$\3$\5$\u0604\n$\3$\3$\6$\u0608\n")
        buf.write("$\r$\16$\u0609\5$\u060c\n$\3$\5$\u060f\n$\6$\u0611\n$")
        buf.write("\r$\16$\u0612\3$\3$\3%\3%\5%\u0619\n%\3%\3%\5%\u061d\n")
        buf.write("%\3%\3%\6%\u0621\n%\r%\16%\u0622\5%\u0625\n%\3%\5%\u0628")
        buf.write("\n%\6%\u062a\n%\r%\16%\u062b\3%\3%\3&\3&\3&\3&\5&\u0634")
        buf.write("\n&\3&\6&\u0637\n&\r&\16&\u0638\3&\3&\3&\3&\5&\u063f\n")
        buf.write("&\3&\3&\5&\u0643\n&\3&\3&\5&\u0647\n&\3&\5&\u064a\n&\3")
        buf.write("&\5&\u064d\n&\6&\u064f\n&\r&\16&\u0650\3&\5&\u0654\n&")
        buf.write("\3\'\3\'\3\'\3\'\5\'\u065a\n\'\3\'\6\'\u065d\n\'\r\'\16")
        buf.write("\'\u065e\3\'\3\'\5\'\u0663\n\'\3\'\3\'\5\'\u0667\n\'\3")
        buf.write("\'\3\'\5\'\u066b\n\'\3\'\3\'\6\'\u066f\n\'\r\'\16\'\u0670")
        buf.write("\5\'\u0673\n\'\3\'\3\'\5\'\u0677\n\'\6\'\u0679\n\'\r\'")
        buf.write("\16\'\u067a\3\'\3\'\3(\3(\3(\3(\5(\u0683\n(\3(\6(\u0686")
        buf.write("\n(\r(\16(\u0687\3(\3(\3(\3(\5(\u068e\n(\3(\3(\5(\u0692")
        buf.write("\n(\3(\3(\5(\u0696\n(\3(\5(\u0699\n(\3(\5(\u069c\n(\6")
        buf.write("(\u069e\n(\r(\16(\u069f\3(\5(\u06a3\n(\3)\3)\3*\3*\5*")
        buf.write("\u06a9\n*\3*\5*\u06ac\n*\3*\3*\3*\3*\3*\5*\u06b3\n*\3")
        buf.write("+\3+\3+\5+\u06b8\n+\3+\3+\3,\3,\3-\3-\3-\5-\u06c1\n-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\5-\u06ca\n-\6-\u06cc\n-\r-\16-\u06cd")
        buf.write("\3-\3-\5-\u06d2\n-\3.\3.\5.\u06d6\n.\3.\3.\5.\u06da\n")
        buf.write(".\3.\5.\u06dd\n.\3/\3/\3/\5/\u06e2\n/\3/\3/\6/\u06e6\n")
        buf.write("/\r/\16/\u06e7\3/\3/\5/\u06ec\n/\3\60\3\60\3\60\5\60\u06f1")
        buf.write("\n\60\3\60\3\60\5\60\u06f5\n\60\3\60\3\60\5\60\u06f9\n")
        buf.write("\60\6\60\u06fb\n\60\r\60\16\60\u06fc\3\60\3\60\3\60\5")
        buf.write("\60\u0702\n\60\3\60\3\60\3\60\6\60\u0707\n\60\r\60\16")
        buf.write("\60\u0708\3\60\3\60\5\60\u070d\n\60\3\60\5\60\u0710\n")
        buf.write("\60\3\61\3\61\5\61\u0714\n\61\3\61\5\61\u0717\n\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\5\61\u071e\n\61\3\61\3\61\5\61\u0722")
        buf.write("\n\61\3\62\3\62\3\62\3\62\5\62\u0728\n\62\3\62\3\62\3")
        buf.write("\62\3\62\5\62\u072e\n\62\3\62\5\62\u0731\n\62\3\62\5\62")
        buf.write("\u0734\n\62\3\62\5\62\u0737\n\62\3\62\5\62\u073a\n\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\5\62\u0741\n\62\3\62\5\62\u0744")
        buf.write("\n\62\3\62\5\62\u0747\n\62\3\62\6\62\u074a\n\62\r\62\16")
        buf.write("\62\u074b\5\62\u074e\n\62\3\62\5\62\u0751\n\62\3\62\5")
        buf.write("\62\u0754\n\62\3\63\5\63\u0757\n\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\5\63\u075e\n\63\6\63\u0760\n\63\r\63\16\63\u0761")
        buf.write("\3\64\3\64\3\64\5\64\u0767\n\64\3\64\5\64\u076a\n\64\3")
        buf.write("\64\3\64\5\64\u076e\n\64\3\64\3\64\3\64\5\64\u0773\n\64")
        buf.write("\3\64\3\64\3\64\5\64\u0778\n\64\3\64\5\64\u077b\n\64\3")
        buf.write("\64\5\64\u077e\n\64\3\64\5\64\u0781\n\64\5\64\u0783\n")
        buf.write("\64\3\64\7\64\u0786\n\64\f\64\16\64\u0789\13\64\3\64\5")
        buf.write("\64\u078c\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65")
        buf.write("\u0795\n\65\3\65\3\65\5\65\u0799\n\65\5\65\u079b\n\65")
        buf.write("\3\66\3\66\5\66\u079f\n\66\3\66\3\66\5\66\u07a3\n\66\3")
        buf.write("\66\3\66\3\66\3\66\3\66\5\66\u07aa\n\66\3\66\7\66\u07ad")
        buf.write("\n\66\f\66\16\66\u07b0\13\66\3\67\3\67\5\67\u07b4\n\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\5\67\u07c1\n\67\3\67\5\67\u07c4\n\67\38\38\38\38\38\5")
        buf.write("8\u07cb\n8\39\39\39\39\39\59\u07d2\n9\3:\3:\3:\3:\3:\3")
        buf.write(":\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\5:\u07e5\n:\3:\3:\3")
        buf.write(":\3:\5:\u07eb\n:\3:\6:\u07ee\n:\r:\16:\u07ef\3:\3:\3:")
        buf.write("\5:\u07f5\n:\5:\u07f7\n:\3;\3;\3;\3;\5;\u07fd\n;\3<\3")
        buf.write("<\3<\3<\5<\u0803\n<\3<\3<\3<\5<\u0808\n<\6<\u080a\n<\r")
        buf.write("<\16<\u080b\3<\3<\5<\u0810\n<\3=\3=\3>\3>\3>\5>\u0817")
        buf.write("\n>\3>\3>\3>\3>\3>\3>\5>\u081f\n>\6>\u0821\n>\r>\16>\u0822")
        buf.write("\3>\3>\3>\3?\5?\u0829\n?\3?\3?\5?\u082d\n?\3@\3@\3@\3")
        buf.write("@\3A\3A\3A\3A\6A\u0837\nA\rA\16A\u0838\3B\3B\3B\3B\3B")
        buf.write("\3B\3B\6B\u0842\nB\rB\16B\u0843\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u085a\nC\3C\3")
        buf.write("C\3C\3C\3C\6C\u0861\nC\rC\16C\u0862\3C\3C\3D\3D\5D\u0869")
        buf.write("\nD\3E\3E\3F\3F\3F\3F\5F\u0871\nF\3F\5F\u0874\nF\3G\3")
        buf.write("G\3G\3G\3H\5H\u087b\nH\3H\3H\3H\5H\u0880\nH\3H\3H\3H\3")
        buf.write("H\3H\5H\u0887\nH\3H\3H\3H\3H\5H\u088d\nH\3I\3I\3I\3I\5")
        buf.write("I\u0893\nI\3I\5I\u0896\nI\3I\5I\u0899\nI\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\6I\u08a5\nI\rI\16I\u08a6\3I\3I\5I\u08ab")
        buf.write("\nI\3I\3I\5I\u08af\nI\3I\5I\u08b2\nI\3J\3J\3K\3K\5K\u08b8")
        buf.write("\nK\3K\3K\5K\u08bc\nK\3K\5K\u08bf\nK\3K\6K\u08c2\nK\r")
        buf.write("K\16K\u08c3\3K\5K\u08c7\nK\3K\3K\3K\5K\u08cc\nK\3L\3L")
        buf.write("\5L\u08d0\nL\3L\5L\u08d3\nL\3L\3L\3L\3L\3L\3L\5L\u08db")
        buf.write("\nL\3L\5L\u08de\nL\3M\3M\3M\3M\3N\3N\3N\3N\3O\5O\u08e9")
        buf.write("\nO\3O\6O\u08ec\nO\rO\16O\u08ed\3P\3P\3P\3P\3P\5P\u08f5")
        buf.write("\nP\3Q\5Q\u08f8\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\6Q\u0901\nQ\r")
        buf.write("Q\16Q\u0902\3R\3R\3R\3R\3R\3R\3R\3R\5R\u090d\nR\3S\3S")
        buf.write("\3S\5S\u0912\nS\3S\3S\5S\u0916\nS\3T\3T\3T\5T\u091b\n")
        buf.write("T\3T\3T\5T\u091f\nT\3T\3T\3T\3T\3T\5T\u0926\nT\3U\3U\3")
        buf.write("U\3U\5U\u092c\nU\3U\5U\u092f\nU\3V\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u0945\nV\3V\5")
        buf.write("V\u0948\nV\6V\u094a\nV\rV\16V\u094b\3W\3W\3W\3W\3W\3W")
        buf.write("\5W\u0954\nW\3X\3X\3Y\3Y\3Y\5Y\u095b\nY\5Y\u095d\nY\3")
        buf.write("Z\3Z\5Z\u0961\nZ\3Z\3Z\3Z\5Z\u0966\nZ\3Z\5Z\u0969\nZ\3")
        buf.write("Z\5Z\u096c\nZ\3Z\5Z\u096f\nZ\3[\3[\3[\5[\u0974\n[\3[\6")
        buf.write("[\u0977\n[\r[\16[\u0978\3[\3[\3[\3[\3[\3[\3[\3[\6[\u0983")
        buf.write("\n[\r[\16[\u0984\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\6[\u0992")
        buf.write("\n[\r[\16[\u0993\5[\u0996\n[\3\\\3\\\5\\\u099a\n\\\3\\")
        buf.write("\3\\\5\\\u099e\n\\\3\\\5\\\u09a1\n\\\3]\3]\3]\3]\3]\5")
        buf.write("]\u09a8\n]\3]\3]\3]\5]\u09ad\n]\3]\3]\3]\3]\3]\5]\u09b4")
        buf.write("\n]\3]\3]\3]\3]\5]\u09ba\n]\5]\u09bc\n]\3]\3]\3]\3]\5")
        buf.write("]\u09c2\n]\3^\3^\5^\u09c6\n^\3^\3^\3^\3^\3^\5^\u09cd\n")
        buf.write("^\3^\3^\3^\5^\u09d2\n^\3_\3_\3`\3`\3`\3`\3`\3`\3`\3`\5")
        buf.write("`\u09de\n`\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\5a\u09ec")
        buf.write("\na\3a\6a\u09ef\na\ra\16a\u09f0\3a\3a\5a\u09f5\na\5a\u09f7")
        buf.write("\na\3a\3a\5a\u09fb\na\3a\3a\5a\u09ff\na\3a\3a\3a\6a\u0a04")
        buf.write("\na\ra\16a\u0a05\3a\3a\3b\3b\3b\3b\3b\5b\u0a0f\nb\3b\6")
        buf.write("b\u0a12\nb\rb\16b\u0a13\3b\3b\3c\5c\u0a19\nc\3c\5c\u0a1c")
        buf.write("\nc\3c\3c\5c\u0a20\nc\3c\3c\5c\u0a24\nc\5c\u0a26\nc\3")
        buf.write("c\3c\3c\5c\u0a2b\nc\3d\3d\3d\3d\3d\3d\3d\3d\5d\u0a35\n")
        buf.write("d\3d\3d\5d\u0a39\nd\3d\3d\3d\6d\u0a3e\nd\rd\16d\u0a3f")
        buf.write("\3d\3d\3e\3e\3e\5e\u0a47\ne\3e\6e\u0a4a\ne\re\16e\u0a4b")
        buf.write("\3e\5e\u0a4f\ne\3e\3e\3f\3f\3f\3f\3f\3f\5f\u0a59\nf\3")
        buf.write("g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\5g\u0a67\ng\3g\6g\u0a6a")
        buf.write("\ng\rg\16g\u0a6b\3g\3g\5g\u0a70\ng\5g\u0a72\ng\3g\3g\3")
        buf.write("g\5g\u0a77\ng\3g\3g\5g\u0a7b\ng\3g\6g\u0a7e\ng\rg\16g")
        buf.write("\u0a7f\3g\3g\3h\3h\3h\3h\3h\5h\u0a89\nh\3i\3i\3i\3i\3")
        buf.write("i\3i\3i\5i\u0a92\ni\3j\3j\3j\3j\5j\u0a98\nj\3j\6j\u0a9b")
        buf.write("\nj\rj\16j\u0a9c\3j\5j\u0aa0\nj\3j\6j\u0aa3\nj\rj\16j")
        buf.write("\u0aa4\3j\5j\u0aa8\nj\3j\6j\u0aab\nj\rj\16j\u0aac\5j\u0aaf")
        buf.write("\nj\3j\3j\3j\5j\u0ab4\nj\3k\3k\5k\u0ab8\nk\3k\3k\5k\u0abc")
        buf.write("\nk\3l\3l\5l\u0ac0\nl\3l\3l\5l\u0ac4\nl\3m\3m\5m\u0ac8")
        buf.write("\nm\3m\5m\u0acb\nm\3n\3n\3o\3o\3o\3o\3o\3o\3o\3o\3o\3")
        buf.write("o\5o\u0ad9\no\3o\6o\u0adc\no\ro\16o\u0add\3o\3o\5o\u0ae2")
        buf.write("\no\3o\5o\u0ae5\no\3p\3p\5p\u0ae9\np\3p\3p\3p\3p\5p\u0aef")
        buf.write("\np\3p\6p\u0af2\np\rp\16p\u0af3\3p\5p\u0af7\np\3p\6p\u0afa")
        buf.write("\np\rp\16p\u0afb\3p\5p\u0aff\np\3p\6p\u0b02\np\rp\16p")
        buf.write("\u0b03\5p\u0b06\np\3p\3p\3p\5p\u0b0b\np\5p\u0b0d\np\3")
        buf.write("q\3q\3q\3q\3q\3q\5q\u0b15\nq\3q\6q\u0b18\nq\rq\16q\u0b19")
        buf.write("\3q\3q\5q\u0b1e\nq\3r\3r\3r\3r\3r\3r\3r\3r\3r\5r\u0b29")
        buf.write("\nr\3r\3r\5r\u0b2d\nr\3r\6r\u0b30\nr\rr\16r\u0b31\3r\3")
        buf.write("r\3s\3s\5s\u0b38\ns\3s\3s\3s\3s\5s\u0b3e\ns\3s\6s\u0b41")
        buf.write("\ns\rs\16s\u0b42\3s\5s\u0b46\ns\3s\6s\u0b49\ns\rs\16s")
        buf.write("\u0b4a\3s\5s\u0b4e\ns\3s\6s\u0b51\ns\rs\16s\u0b52\5s\u0b55")
        buf.write("\ns\3s\3s\3s\5s\u0b5a\ns\5s\u0b5c\ns\3t\3t\3t\3t\3t\3")
        buf.write("t\6t\u0b64\nt\rt\16t\u0b65\3t\3t\3t\3t\5t\u0b6c\nt\3t")
        buf.write("\3t\5t\u0b70\nt\3u\3u\3u\3u\3u\3u\3u\3u\5u\u0b7a\nu\3")
        buf.write("u\6u\u0b7d\nu\ru\16u\u0b7e\3u\3u\5u\u0b83\nu\3v\3v\5v")
        buf.write("\u0b87\nv\3v\3v\3w\3w\3w\3w\3w\3w\5w\u0b91\nw\3w\6w\u0b94")
        buf.write("\nw\rw\16w\u0b95\5w\u0b98\nw\3x\3x\5x\u0b9c\nx\3x\3x\3")
        buf.write("x\3x\3x\3x\5x\u0ba4\nx\3x\5x\u0ba7\nx\3x\5x\u0baa\nx\3")
        buf.write("x\5x\u0bad\nx\3x\3x\5x\u0bb1\nx\3y\3y\3y\3y\3z\5z\u0bb8")
        buf.write("\nz\3z\3z\3z\3{\3{\3{\3{\3{\3{\5{\u0bc3\n{\3|\3|\3|\5")
        buf.write("|\u0bc8\n|\3|\3|\5|\u0bcc\n|\3|\6|\u0bcf\n|\r|\16|\u0bd0")
        buf.write("\3|\3|\5|\u0bd5\n|\3|\3|\3|\3|\5|\u0bdb\n|\3|\5|\u0bde")
        buf.write("\n|\3|\5|\u0be1\n|\3|\5|\u0be4\n|\3|\5|\u0be7\n|\3|\5")
        buf.write("|\u0bea\n|\3|\5|\u0bed\n|\3|\3|\3|\3|\3|\5|\u0bf4\n|\3")
        buf.write("|\5|\u0bf7\n|\3|\5|\u0bfa\n|\3|\6|\u0bfd\n|\r|\16|\u0bfe")
        buf.write("\5|\u0c01\n|\3|\5|\u0c04\n|\3|\5|\u0c07\n|\3}\5}\u0c0a")
        buf.write("\n}\3}\3}\3}\3}\3}\3~\3~\3~\3~\3~\3~\3~\5~\u0c18\n~\3")
        buf.write("\177\3\177\5\177\u0c1c\n\177\3\177\3\177\3\177\3\177\6")
        buf.write("\177\u0c22\n\177\r\177\16\177\u0c23\3\177\3\177\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0c2e")
        buf.write("\n\u0080\3\u0080\3\u0080\5\u0080\u0c32\n\u0080\3\u0080")
        buf.write("\5\u0080\u0c35\n\u0080\3\u0080\5\u0080\u0c38\n\u0080\3")
        buf.write("\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0c3e\n\u0080\3")
        buf.write("\u0080\5\u0080\u0c41\n\u0080\3\u0080\5\u0080\u0c44\n\u0080")
        buf.write("\3\u0080\5\u0080\u0c47\n\u0080\3\u0080\5\u0080\u0c4a\n")
        buf.write("\u0080\3\u0080\5\u0080\u0c4d\n\u0080\3\u0080\5\u0080\u0c50")
        buf.write("\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080")
        buf.write("\u0c57\n\u0080\3\u0080\5\u0080\u0c5a\n\u0080\3\u0080\5")
        buf.write("\u0080\u0c5d\n\u0080\3\u0080\6\u0080\u0c60\n\u0080\r\u0080")
        buf.write("\16\u0080\u0c61\5\u0080\u0c64\n\u0080\3\u0080\5\u0080")
        buf.write("\u0c67\n\u0080\3\u0080\5\u0080\u0c6a\n\u0080\3\u0081\3")
        buf.write("\u0081\3\u0081\3\u0081\5\u0081\u0c70\n\u0081\3\u0081\3")
        buf.write("\u0081\3\u0081\3\u0081\3\u0081\3\u0081\6\u0081\u0c78\n")
        buf.write("\u0081\r\u0081\16\u0081\u0c79\3\u0081\3\u0081\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0082\5\u0082\u0c82\n\u0082\3\u0082")
        buf.write("\3\u0082\5\u0082\u0c86\n\u0082\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0c8f\n\u0083")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0c9c\n\u0084")
        buf.write("\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0085\6\u0085\u0caf\n\u0085\r\u0085")
        buf.write("\16\u0085\u0cb0\3\u0085\5\u0085\u0cb4\n\u0085\3\u0086")
        buf.write("\3\u0086\5\u0086\u0cb8\n\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\5\u0086\u0cbe\n\u0086\7\u0086\u0cc0\n\u0086\f")
        buf.write("\u0086\16\u0086\u0cc3\13\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u0cc7\n\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\5\u0086\u0cce\n\u0086\7\u0086\u0cd0\n\u0086\f\u0086\16")
        buf.write("\u0086\u0cd3\13\u0086\5\u0086\u0cd5\n\u0086\3\u0087\3")
        buf.write("\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\6\u0087\u0ce0\n\u0087\r\u0087\16\u0087\u0ce1")
        buf.write("\3\u0087\5\u0087\u0ce5\n\u0087\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\5\u0088\u0ceb\n\u0088\3\u0089\3\u0089\5\u0089")
        buf.write("\u0cef\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u008a\5\u008a\u0cf7\n\u008a\3\u008a\3\u008a\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\5\u008b\u0cff\n\u008b\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008c\5\u008c\u0d05\n\u008c\3\u008c")
        buf.write("\5\u008c\u0d08\n\u008c\3\u008d\3\u008d\3\u008d\5\u008d")
        buf.write("\u0d0d\n\u008d\3\u008e\3\u008e\5\u008e\u0d11\n\u008e\3")
        buf.write("\u008e\3\u008e\5\u008e\u0d15\n\u008e\3\u008f\3\u008f\3")
        buf.write("\u008f\3\u008f\3\u008f\3\u008f\6\u008f\u0d1d\n\u008f\r")
        buf.write("\u008f\16\u008f\u0d1e\5\u008f\u0d21\n\u008f\3\u0090\3")
        buf.write("\u0090\3\u0090\5\u0090\u0d26\n\u0090\3\u0090\3\u0090\5")
        buf.write("\u0090\u0d2a\n\u0090\3\u0090\3\u0090\5\u0090\u0d2e\n\u0090")
        buf.write("\6\u0090\u0d30\n\u0090\r\u0090\16\u0090\u0d31\3\u0090")
        buf.write("\5\u0090\u0d35\n\u0090\3\u0091\3\u0091\3\u0091\5\u0091")
        buf.write("\u0d3a\n\u0091\3\u0091\5\u0091\u0d3d\n\u0091\3\u0092\3")
        buf.write("\u0092\3\u0092\3\u0092\5\u0092\u0d43\n\u0092\3\u0093\3")
        buf.write("\u0093\3\u0093\7\u0093\u0d48\n\u0093\f\u0093\16\u0093")
        buf.write("\u0d4b\13\u0093\3\u0093\5\u0093\u0d4e\n\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\7\u0093\u0d53\n\u0093\f\u0093\16\u0093")
        buf.write("\u0d56\13\u0093\3\u0093\5\u0093\u0d59\n\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093")
        buf.write("\u0d62\n\u0093\3\u0093\3\u0093\5\u0093\u0d66\n\u0093\3")
        buf.write("\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\6\u0093\u0d6f\n\u0093\r\u0093\16\u0093\u0d70\5\u0093")
        buf.write("\u0d73\n\u0093\3\u0094\3\u0094\3\u0095\3\u0095\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097")
        buf.write("\u0d80\n\u0097\3\u0097\5\u0097\u0d83\n\u0097\3\u0097\5")
        buf.write("\u0097\u0d86\n\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0d8b")
        buf.write("\n\u0097\5\u0097\u0d8d\n\u0097\3\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\5\u0098\u0d93\n\u0098\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\6\u0099\u0d99\n\u0099\r\u0099\16\u0099\u0d9a")
        buf.write("\3\u009a\3\u009a\5\u009a\u0d9f\n\u009a\3\u009a\3\u009a")
        buf.write("\5\u009a\u0da3\n\u009a\3\u009a\3\u009a\5\u009a\u0da7\n")
        buf.write("\u009a\3\u009a\6\u009a\u0daa\n\u009a\r\u009a\16\u009a")
        buf.write("\u0dab\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0db2\n")
        buf.write("\u009a\5\u009a\u0db4\n\u009a\3\u009a\5\u009a\u0db7\n\u009a")
        buf.write("\3\u009b\3\u009b\3\u009b\5\u009b\u0dbc\n\u009b\3\u009b")
        buf.write("\6\u009b\u0dbf\n\u009b\r\u009b\16\u009b\u0dc0\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\5\u009b\u0dc7\n\u009b\3\u009c")
        buf.write("\3\u009c\5\u009c\u0dcb\n\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0dd5")
        buf.write("\n\u009c\5\u009c\u0dd7\n\u009c\3\u009d\3\u009d\5\u009d")
        buf.write("\u0ddb\n\u009d\3\u009d\3\u009d\5\u009d\u0ddf\n\u009d\3")
        buf.write("\u009d\3\u009d\3\u009d\5\u009d\u0de4\n\u009d\3\u009d\7")
        buf.write("\u009d\u0de7\n\u009d\f\u009d\16\u009d\u0dea\13\u009d\3")
        buf.write("\u009d\5\u009d\u0ded\n\u009d\3\u009e\3\u009e\3\u009e\5")
        buf.write("\u009e\u0df2\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3")
        buf.write("\u009e\5\u009e\u0df9\n\u009e\3\u009f\3\u009f\3\u009f\3")
        buf.write("\u009f\3\u009f\3\u009f\5\u009f\u0e01\n\u009f\3\u009f\6")
        buf.write("\u009f\u0e04\n\u009f\r\u009f\16\u009f\u0e05\3\u009f\3")
        buf.write("\u009f\5\u009f\u0e0a\n\u009f\3\u009f\3\u009f\3\u009f\7")
        buf.write("\u009f\u0e0f\n\u009f\f\u009f\16\u009f\u0e12\13\u009f\3")
        buf.write("\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0e19\n")
        buf.write("\u009f\3\u009f\6\u009f\u0e1c\n\u009f\r\u009f\16\u009f")
        buf.write("\u0e1d\3\u009f\3\u009f\5\u009f\u0e22\n\u009f\3\u009f\3")
        buf.write("\u009f\3\u009f\7\u009f\u0e27\n\u009f\f\u009f\16\u009f")
        buf.write("\u0e2a\13\u009f\3\u009f\3\u009f\5\u009f\u0e2e\n\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0e35")
        buf.write("\n\u009f\3\u009f\3\u009f\5\u009f\u0e39\n\u009f\3\u00a0")
        buf.write("\3\u00a0\5\u00a0\u0e3d\n\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4")
        buf.write("\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0e6a")
        buf.write("\n\u00a6\3\u00a6\5\u00a6\u0e6d\n\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\6\u00a6\u0e72\n\u00a6\r\u00a6\16\u00a6\u0e73")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\5\u00a8\u0e7f\n\u00a8\3\u00a8\7\u00a8")
        buf.write("\u0e82\n\u00a8\f\u00a8\16\u00a8\u0e85\13\u00a8\3\u00a8")
        buf.write("\3\u00a8\5\u00a8\u0e89\n\u00a8\3\u00a9\3\u00a9\3\u00a9")
        buf.write("\5\u00a9\u0e8e\n\u00a9\5\u00a9\u0e90\n\u00a9\3\u00a9\3")
        buf.write("\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0e98\n")
        buf.write("\u00a9\f\u00a9\16\u00a9\u0e9b\13\u00a9\3\u00a9\3\u00a9")
        buf.write("\5\u00a9\u0e9f\n\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9")
        buf.write("\3\u00a9\3\u00a9\7\u00a9\u0ea7\n\u00a9\f\u00a9\16\u00a9")
        buf.write("\u0eaa\13\u00a9\3\u00a9\5\u00a9\u0ead\n\u00a9\3\u00a9")
        buf.write("\3\u00a9\5\u00a9\u0eb1\n\u00a9\3\u00a9\7\u00a9\u0eb4\n")
        buf.write("\u00a9\f\u00a9\16\u00a9\u0eb7\13\u00a9\3\u00a9\3\u00a9")
        buf.write("\5\u00a9\u0ebb\n\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9")
        buf.write("\u0ec0\n\u00a9\3\u00aa\3\u00aa\5\u00aa\u0ec4\n\u00aa\3")
        buf.write("\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\7\u00ab\u0ed0\n\u00ab\f\u00ab")
        buf.write("\16\u00ab\u0ed3\13\u00ab\3\u00ab\3\u00ab\5\u00ab\u0ed7")
        buf.write("\n\u00ab\3\u00ab\5\u00ab\u0eda\n\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ac\3\u00ac\5\u00ac\u0ee0\n\u00ac\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\7\u00ad\u0ee7\n\u00ad\f\u00ad")
        buf.write("\16\u00ad\u0eea\13\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0ef5")
        buf.write("\n\u00ae\f\u00ae\16\u00ae\u0ef8\13\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00af\3\u00af\3\u00af\5\u00af\u0eff\n\u00af\3\u00af")
        buf.write("\3\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0")
        buf.write("\u0f08\n\u00b0\3\u00b0\5\u00b0\u0f0b\n\u00b0\3\u00b0\7")
        buf.write("\u00b0\u0f0e\n\u00b0\f\u00b0\16\u00b0\u0f11\13\u00b0\3")
        buf.write("\u00b0\3\u00b0\5\u00b0\u0f15\n\u00b0\3\u00b1\3\u00b1\3")
        buf.write("\u00b1\5\u00b1\u0f1a\n\u00b1\3\u00b1\3\u00b1\3\u00b1\5")
        buf.write("\u00b1\u0f1f\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\7")
        buf.write("\u00b2\u0f25\n\u00b2\f\u00b2\16\u00b2\u0f28\13\u00b2\3")
        buf.write("\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0f2e\n\u00b2\5")
        buf.write("\u00b2\u0f30\n\u00b2\3\u00b3\3\u00b3\5\u00b3\u0f34\n\u00b3")
        buf.write("\3\u00b3\3\u00b3\7\u00b3\u0f38\n\u00b3\f\u00b3\16\u00b3")
        buf.write("\u0f3b\13\u00b3\3\u00b3\3\u00b3\5\u00b3\u0f3f\n\u00b3")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\5\u00b4\u0f4a\n\u00b4\3\u00b5\3\u00b5")
        buf.write("\3\u00b5\3\u00b5\3\u00b5\3\u00b5\7\u00b5\u0f52\n\u00b5")
        buf.write("\f\u00b5\16\u00b5\u0f55\13\u00b5\3\u00b5\3\u00b5\5\u00b5")
        buf.write("\u0f59\n\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\7\u00b6\u0f63\n\u00b6\f\u00b6")
        buf.write("\16\u00b6\u0f66\13\u00b6\3\u00b6\3\u00b6\5\u00b6\u0f6a")
        buf.write("\n\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0f6f\n\u00b6")
        buf.write("\3\u00b6\5\u00b6\u0f72\n\u00b6\3\u00b6\3\u00b6\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\5\u00b7\u0f80\n\u00b7\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\5\u00b9\u0f8b\n\u00b9\3\u00b9\7\u00b9\u0f8e\n\u00b9\f")
        buf.write("\u00b9\16\u00b9\u0f91\13\u00b9\3\u00b9\3\u00b9\5\u00b9")
        buf.write("\u0f95\n\u00b9\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u0f9a\n")
        buf.write("\u00ba\5\u00ba\u0f9c\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3")
        buf.write("\u00ba\3\u00ba\3\u00ba\7\u00ba\u0fa4\n\u00ba\f\u00ba\16")
        buf.write("\u00ba\u0fa7\13\u00ba\3\u00ba\3\u00ba\5\u00ba\u0fab\n")
        buf.write("\u00ba\3\u00ba\5\u00ba\u0fae\n\u00ba\3\u00ba\3\u00ba\5")
        buf.write("\u00ba\u0fb2\n\u00ba\3\u00ba\7\u00ba\u0fb5\n\u00ba\f\u00ba")
        buf.write("\16\u00ba\u0fb8\13\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba")
        buf.write("\u0fbd\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bc\5\u00bc\u0fcc\n\u00bc\3\u00bc\7\u00bc\u0fcf\n")
        buf.write("\u00bc\f\u00bc\16\u00bc\u0fd2\13\u00bc\3\u00bc\3\u00bc")
        buf.write("\5\u00bc\u0fd6\n\u00bc\5\u00bc\u0fd8\n\u00bc\3\u00bd\3")
        buf.write("\u00bd\3\u00bd\5\u00bd\u0fdd\n\u00bd\3\u00bd\3\u00bd\3")
        buf.write("\u00bd\3\u00bd\3\u00bd\5\u00bd\u0fe4\n\u00bd\3\u00bd\5")
        buf.write("\u00bd\u0fe7\n\u00bd\3\u00bd\5\u00bd\u0fea\n\u00bd\3\u00bd")
        buf.write("\5\u00bd\u0fed\n\u00bd\3\u00bd\3\u00bd\3\u00be\3\u00be")
        buf.write("\3\u00be\3\u00be\7\u00be\u0ff5\n\u00be\f\u00be\16\u00be")
        buf.write("\u0ff8\13\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u1003\n\u00c0")
        buf.write("\3\u00c0\3\u00c0\5\u00c0\u1007\n\u00c0\3\u00c0\5\u00c0")
        buf.write("\u100a\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\5\u00c2\u1013\n\u00c2\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\7\u00c3\u1019\n\u00c3\f\u00c3\16\u00c3")
        buf.write("\u101c\13\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\5\u00c3\u1023\n\u00c3\3\u00c3\5\u00c3\u1026\n\u00c3\3")
        buf.write("\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u102d\n")
        buf.write("\u00c4\3\u00c5\3\u00c5\5\u00c5\u1031\n\u00c5\3\u00c6\3")
        buf.write("\u00c6\3\u00c6\7\u00c6\u1036\n\u00c6\f\u00c6\16\u00c6")
        buf.write("\u1039\13\u00c6\3\u00c6\6\u00c6\u103c\n\u00c6\r\u00c6")
        buf.write("\16\u00c6\u103d\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7")
        buf.write("\u1067\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\5\u00c8\u1083\n\u00c8\3\u00c9\3\u00c9\3\u00c9\7\u00c9")
        buf.write("\u1088\n\u00c9\f\u00c9\16\u00c9\u108b\13\u00c9\3\u00c9")
        buf.write("\3\u00c9\5\u00c9\u108f\n\u00c9\3\u00c9\3\u00c9\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\7\u00ca\u1098\n\u00ca")
        buf.write("\f\u00ca\16\u00ca\u109b\13\u00ca\5\u00ca\u109d\n\u00ca")
        buf.write("\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc")
        buf.write("\6\u00cc\u10a6\n\u00cc\r\u00cc\16\u00cc\u10a7\3\u00cd")
        buf.write("\3\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u10b0")
        buf.write("\n\u00ce\3\u00ce\3\u00ce\5\u00ce\u10b4\n\u00ce\3\u00cf")
        buf.write("\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf")
        buf.write("\5\u00cf\u10be\n\u00cf\3\u00cf\5\u00cf\u10c1\n\u00cf\3")
        buf.write("\u00d0\3\u00d0\5\u00d0\u10c5\n\u00d0\3\u00d0\5\u00d0\u10c8")
        buf.write("\n\u00d0\3\u00d0\7\u00d0\u10cb\n\u00d0\f\u00d0\16\u00d0")
        buf.write("\u10ce\13\u00d0\3\u00d0\3\u00d0\5\u00d0\u10d2\n\u00d0")
        buf.write("\3\u00d1\3\u00d1\5\u00d1\u10d6\n\u00d1\3\u00d1\3\u00d1")
        buf.write("\3\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u10de\n\u00d1")
        buf.write("\f\u00d1\16\u00d1\u10e1\13\u00d1\3\u00d1\3\u00d1\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\7\u00d2\u10e8\n\u00d2\f\u00d2\16\u00d2")
        buf.write("\u10eb\13\u00d2\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u10f0")
        buf.write("\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\7\u00d4\u10f9\n\u00d4\f\u00d4\16\u00d4\u10fc")
        buf.write("\13\u00d4\3\u00d4\3\u00d4\5\u00d4\u1100\n\u00d4\3\u00d5")
        buf.write("\3\u00d5\5\u00d5\u1104\n\u00d5\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u110c\n\u00d6\3\u00d7")
        buf.write("\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u1114")
        buf.write("\n\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u1119\n\u00d7")
        buf.write("\3\u00d7\5\u00d7\u111c\n\u00d7\5\u00d7\u111e\n\u00d7\3")
        buf.write("\u00d8\5\u00d8\u1121\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3")
        buf.write("\u00d8\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u112a\n\u00d9\3")
        buf.write("\u00d9\3\u00d9\3\u00d9\5\u00d9\u112f\n\u00d9\3\u00da\3")
        buf.write("\u00da\3\u00da\5\u00da\u1134\n\u00da\3\u00da\5\u00da\u1137")
        buf.write("\n\u00da\3\u00db\5\u00db\u113a\n\u00db\3\u00db\3\u00db")
        buf.write("\5\u00db\u113e\n\u00db\3\u00db\5\u00db\u1141\n\u00db\3")
        buf.write("\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u1147\n\u00db\f")
        buf.write("\u00db\16\u00db\u114a\13\u00db\3\u00db\3\u00db\5\u00db")
        buf.write("\u114e\n\u00db\3\u00db\7\u00db\u1151\n\u00db\f\u00db\16")
        buf.write("\u00db\u1154\13\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write("\5\u00dc\u115a\n\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1164\n\u00de")
        buf.write("\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\6\u00e0\u1172")
        buf.write("\n\u00e0\r\u00e0\16\u00e0\u1173\3\u00e0\3\u00e0\3\u00e1")
        buf.write("\3\u00e1\5\u00e1\u117a\n\u00e1\3\u00e2\3\u00e2\3\u00e2")
        buf.write("\3\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u1184")
        buf.write("\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\7\u00e4\u118c\n\u00e4\f\u00e4\16\u00e4\u118f\13\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u1195\n\u00e4")
        buf.write("\3\u00e4\7\u00e4\u1198\n\u00e4\f\u00e4\16\u00e4\u119b")
        buf.write("\13\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u11a0\n\u00e4")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\7\u00e5")
        buf.write("\u11a8\n\u00e5\f\u00e5\16\u00e5\u11ab\13\u00e5\3\u00e5")
        buf.write("\3\u00e5\5\u00e5\u11af\n\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\5\u00e5\u11b6\n\u00e5\3\u00e5\7\u00e5")
        buf.write("\u11b9\n\u00e5\f\u00e5\16\u00e5\u11bc\13\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\5\u00e5\u11c1\n\u00e5\3\u00e6\5\u00e6")
        buf.write("\u11c4\n\u00e6\3\u00e6\5\u00e6\u11c7\n\u00e6\3\u00e6\3")
        buf.write("\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u11d6")
        buf.write("\n\u00e6\f\u00e6\16\u00e6\u11d9\13\u00e6\3\u00e6\3\u00e6")
        buf.write("\5\u00e6\u11dd\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u11e6\n\u00e6\3\u00e6")
        buf.write("\7\u00e6\u11e9\n\u00e6\f\u00e6\16\u00e6\u11ec\13\u00e6")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u11f1\n\u00e6\3\u00e7")
        buf.write("\5\u00e7\u11f4\n\u00e7\3\u00e7\3\u00e7\3\u00e8\3\u00e8")
        buf.write("\3\u00e8\5\u00e8\u11fb\n\u00e8\3\u00e8\5\u00e8\u11fe\n")
        buf.write("\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00ea\5\u00ea")
        buf.write("\u1205\n\u00ea\3\u00ea\6\u00ea\u1208\n\u00ea\r\u00ea\16")
        buf.write("\u00ea\u1209\3\u00ea\3\u00ea\5\u00ea\u120e\n\u00ea\3\u00eb")
        buf.write("\3\u00eb\3\u00eb\5\u00eb\u1213\n\u00eb\3\u00ec\3\u00ec")
        buf.write("\3\u00ec\5\u00ec\u1218\n\u00ec\3\u00ed\3\u00ed\3\u00ed")
        buf.write("\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u1220\n\u00ed\f\u00ed")
        buf.write("\16\u00ed\u1223\13\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed")
        buf.write("\u1228\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee")
        buf.write("\3\u00ee\7\u00ee\u1230\n\u00ee\f\u00ee\16\u00ee\u1233")
        buf.write("\13\u00ee\3\u00ee\3\u00ee\5\u00ee\u1237\n\u00ee\3\u00ee")
        buf.write("\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u123e\n\u00ee")
        buf.write("\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u1244\n\u00ee")
        buf.write("\3\u00ee\3\u00ee\5\u00ee\u1248\n\u00ee\3\u00ef\5\u00ef")
        buf.write("\u124b\n\u00ef\3\u00ef\5\u00ef\u124e\n\u00ef\3\u00ef\3")
        buf.write("\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef")
        buf.write("\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\7\u00ef\u125d")
        buf.write("\n\u00ef\f\u00ef\16\u00ef\u1260\13\u00ef\3\u00ef\3\u00ef")
        buf.write("\5\u00ef\u1264\n\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef")
        buf.write("\3\u00ef\3\u00ef\5\u00ef\u126c\n\u00ef\3\u00f0\3\u00f0")
        buf.write("\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1")
        buf.write("\3\u00f1\7\u00f1\u1278\n\u00f1\f\u00f1\16\u00f1\u127b")
        buf.write("\13\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2\5\u00f2\u1281")
        buf.write("\n\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4\3\u00f4")
        buf.write("\3\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\6\u00f5\u128e")
        buf.write("\n\u00f5\r\u00f5\16\u00f5\u128f\3\u00f6\3\u00f6\3\u00f6")
        buf.write("\3\u00f6\3\u00f6\7\u00f6\u1297\n\u00f6\f\u00f6\16\u00f6")
        buf.write("\u129a\13\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write("\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write("\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u12ac\n\u00f7")
        buf.write("\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb")
        buf.write("\5\u00fb\u12bc\n\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc")
        buf.write("\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u12c5\n\u00fd\3\u00fd")
        buf.write("\3\u00fd\3\u00fd\5\u00fd\u12ca\n\u00fd\3\u00fd\3\u00fd")
        buf.write("\5\u00fd\u12ce\n\u00fd\3\u00fd\5\u00fd\u12d1\n\u00fd\3")
        buf.write("\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\7\u00fe")
        buf.write("\u12d9\n\u00fe\f\u00fe\16\u00fe\u12dc\13\u00fe\3\u00fe")
        buf.write("\3\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\7\u00ff")
        buf.write("\u12e5\n\u00ff\f\u00ff\16\u00ff\u12e8\13\u00ff\3\u00ff")
        buf.write("\3\u00ff\3\u00ff\5\u00ff\u12ed\n\u00ff\3\u00ff\3\u00ff")
        buf.write("\3\u0100\3\u0100\7\u0100\u12f3\n\u0100\f\u0100\16\u0100")
        buf.write("\u12f6\13\u0100\3\u0100\5\u0100\u12f9\n\u0100\3\u0100")
        buf.write("\5\u0100\u12fc\n\u0100\3\u0101\3\u0101\3\u0101\3\u0102")
        buf.write("\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102")
        buf.write("\3\u0102\5\u0102\u130a\n\u0102\3\u0103\3\u0103\5\u0103")
        buf.write("\u130e\n\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u1313\n")
        buf.write("\u0103\3\u0103\5\u0103\u1316\n\u0103\3\u0103\3\u0103\3")
        buf.write("\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104")
        buf.write("\3\u0104\3\u0104\5\u0104\u1323\n\u0104\3\u0104\3\u0104")
        buf.write("\5\u0104\u1327\n\u0104\3\u0104\3\u0104\3\u0105\3\u0105")
        buf.write("\3\u0105\3\u0105\3\u0105\3\u0105\7\u0105\u1331\n\u0105")
        buf.write("\f\u0105\16\u0105\u1334\13\u0105\3\u0105\3\u0105\5\u0105")
        buf.write("\u1338\n\u0105\3\u0105\3\u0105\5\u0105\u133c\n\u0105\3")
        buf.write("\u0105\3\u0105\5\u0105\u1340\n\u0105\3\u0105\3\u0105\3")
        buf.write("\u0106\3\u0106\5\u0106\u1346\n\u0106\3\u0106\5\u0106\u1349")
        buf.write("\n\u0106\3\u0106\5\u0106\u134c\n\u0106\3\u0107\3\u0107")
        buf.write("\3\u0107\3\u0107\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108")
        buf.write("\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108")
        buf.write("\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108")
        buf.write("\3\u0108\3\u0108\5\u0108\u1367\n\u0108\3\u0108\3\u0108")
        buf.write("\6\u0108\u136b\n\u0108\r\u0108\16\u0108\u136c\3\u0108")
        buf.write("\3\u0108\5\u0108\u1371\n\u0108\3\u0108\3\u0108\3\u0109")
        buf.write("\3\u0109\5\u0109\u1377\n\u0109\3\u010a\3\u010a\3\u010a")
        buf.write("\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\7\u010a\u1381")
        buf.write("\n\u010a\f\u010a\16\u010a\u1384\13\u010a\3\u010a\3\u010a")
        buf.write("\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u138c\n\u010a")
        buf.write("\5\u010a\u138e\n\u010a\3\u010a\3\u010a\3\u010b\3\u010b")
        buf.write("\5\u010b\u1394\n\u010b\3\u010b\3\u010b\5\u010b\u1398\n")
        buf.write("\u010b\3\u010b\5\u010b\u139b\n\u010b\3\u010c\3\u010c\3")
        buf.write("\u010c\3\u010c\3\u010c\3\u010d\3\u010d\5\u010d\u13a4\n")
        buf.write("\u010d\3\u010d\3\u010d\3\u010e\3\u010e\3\u010e\3\u010e")
        buf.write("\3\u010e\3\u010e\3\u010e\5\u010e\u13af\n\u010e\3\u010e")
        buf.write("\3\u010e\5\u010e\u13b3\n\u010e\3\u010e\5\u010e\u13b6\n")
        buf.write("\u010e\3\u010f\3\u010f\5\u010f\u13ba\n\u010f\3\u010f\3")
        buf.write("\u010f\3\u010f\3\u0110\3\u0110\3\u0110\5\u0110\u13c2\n")
        buf.write("\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110")
        buf.write("\3\u0110\5\u0110\u13cb\n\u0110\3\u0111\3\u0111\3\u0111")
        buf.write("\3\u0112\3\u0112\3\u0112\3\u0112\6\u0112\u13d4\n\u0112")
        buf.write("\r\u0112\16\u0112\u13d5\3\u0113\3\u0113\3\u0113\3\u0113")
        buf.write("\3\u0113\3\u0113\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\5\u0114\u13e4\n\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\5\u0114\u13f8\n\u0114\3\u0115\3\u0115\5\u0115")
        buf.write("\u13fc\n\u0115\3\u0115\3\u0115\3\u0115\3\u0116\3\u0116")
        buf.write("\5\u0116\u1403\n\u0116\3\u0116\3\u0116\5\u0116\u1407\n")
        buf.write("\u0116\3\u0117\3\u0117\5\u0117\u140b\n\u0117\3\u0117\3")
        buf.write("\u0117\5\u0117\u140f\n\u0117\3\u0118\3\u0118\3\u0118\3")
        buf.write("\u0119\3\u0119\3\u0119\3\u0119\3\u0119\7\u0119\u1419\n")
        buf.write("\u0119\f\u0119\16\u0119\u141c\13\u0119\3\u0119\5\u0119")
        buf.write("\u141f\n\u0119\3\u0119\3\u0119\3\u0119\3\u011a\3\u011a")
        buf.write("\3\u011a\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011c")
        buf.write("\5\u011c\u142d\n\u011c\3\u011c\3\u011c\3\u011c\3\u011c")
        buf.write("\5\u011c\u1433\n\u011c\3\u011c\3\u011c\3\u011c\3\u011c")
        buf.write("\3\u011c\5\u011c\u143a\n\u011c\3\u011d\3\u011d\3\u011d")
        buf.write("\5\u011d\u143f\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d")
        buf.write("\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u1449\n\u011d")
        buf.write("\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u144f\n\u011d")
        buf.write("\5\u011d\u1451\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write("\3\u011e\3\u011e\3\u011e\5\u011e\u145a\n\u011e\3\u011f")
        buf.write("\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write("\5\u011f\u1464\n\u011f\3\u011f\3\u011f\3\u011f\5\u011f")
        buf.write("\u1469\n\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\3\u0121\3\u0121\3\u0122\3\u0122\3\u0123\3\u0123\3\u0124")
        buf.write("\3\u0124\5\u0124\u1478\n\u0124\3\u0125\3\u0125\5\u0125")
        buf.write("\u147c\n\u0125\3\u0126\5\u0126\u147f\n\u0126\3\u0126\3")
        buf.write("\u0126\5\u0126\u1483\n\u0126\3\u0127\3\u0127\3\u0127\3")
        buf.write("\u0127\6\u0127\u1489\n\u0127\r\u0127\16\u0127\u148a\5")
        buf.write("\u0127\u148d\n\u0127\3\u0127\3\u0127\5\u0127\u1491\n\u0127")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\7\u0128\u1497\n\u0128")
        buf.write("\f\u0128\16\u0128\u149a\13\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\3\u0129\5\u0129\u14a0\n\u0129\3\u0129\6\u0129\u14a3\n")
        buf.write("\u0129\r\u0129\16\u0129\u14a4\5\u0129\u14a7\n\u0129\3")
        buf.write("\u0129\3\u0129\3\u012a\5\u012a\u14ac\n\u012a\3\u012a\6")
        buf.write("\u012a\u14af\n\u012a\r\u012a\16\u012a\u14b0\3\u012a\3")
        buf.write("\u012a\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u14b9\n")
        buf.write("\u012b\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c")
        buf.write("\u14c0\n\u012c\3\u012c\3\u012c\5\u012c\u14c4\n\u012c\3")
        buf.write("\u012c\5\u012c\u14c7\n\u012c\3\u012d\3\u012d\3\u012d\3")
        buf.write("\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e")
        buf.write("\5\u012e\u14d3\n\u012e\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write("\5\u012f\u14d9\n\u012f\3\u0130\3\u0130\3\u0130\3\u0131")
        buf.write("\3\u0131\3\u0131\5\u0131\u14e1\n\u0131\3\u0132\3\u0132")
        buf.write("\3\u0132\3\u0132\3\u0132\3\u0132\7\u0132\u14e9\n\u0132")
        buf.write("\f\u0132\16\u0132\u14ec\13\u0132\3\u0132\3\u0132\3\u0132")
        buf.write("\3\u0132\3\u0132\3\u0132\7\u0132\u14f4\n\u0132\f\u0132")
        buf.write("\16\u0132\u14f7\13\u0132\5\u0132\u14f9\n\u0132\3\u0133")
        buf.write("\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133\u1500\n\u0133")
        buf.write("\3\u0133\5\u0133\u1503\n\u0133\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\5\u0134\u150a\n\u0134\3\u0135\3\u0135")
        buf.write("\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write("\5\u0135\u1515\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write("\5\u0135\u151b\n\u0135\3\u0135\3\u0135\5\u0135\u151f\n")
        buf.write("\u0135\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136")
        buf.write("\7\u0136\u1527\n\u0136\f\u0136\16\u0136\u152a\13\u0136")
        buf.write("\5\u0136\u152c\n\u0136\3\u0136\3\u0136\3\u0137\3\u0137")
        buf.write("\5\u0137\u1532\n\u0137\3\u0137\3\u0137\3\u0137\3\u0137")
        buf.write("\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137\u153d")
        buf.write("\n\u0137\5\u0137\u153f\n\u0137\5\u0137\u1541\n\u0137\3")
        buf.write("\u0137\5\u0137\u1544\n\u0137\3\u0138\3\u0138\5\u0138\u1548")
        buf.write("\n\u0138\3\u0138\5\u0138\u154b\n\u0138\3\u0139\3\u0139")
        buf.write("\5\u0139\u154f\n\u0139\3\u0139\3\u0139\5\u0139\u1553\n")
        buf.write("\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1558\n\u0139\3")
        buf.write("\u013a\3\u013a\3\u013a\3\u013b\3\u013b\3\u013b\3\u013b")
        buf.write("\3\u013b\3\u013b\5\u013b\u1563\n\u013b\3\u013b\3\u013b")
        buf.write("\5\u013b\u1567\n\u013b\3\u013b\3\u013b\3\u013b\3\u013b")
        buf.write("\3\u013b\3\u013b\5\u013b\u156f\n\u013b\3\u013c\5\u013c")
        buf.write("\u1572\n\u013c\3\u013c\3\u013c\3\u013d\3\u013d\3\u013d")
        buf.write("\3\u013d\7\u013d\u157a\n\u013d\f\u013d\16\u013d\u157d")
        buf.write("\13\u013d\3\u013e\3\u013e\5\u013e\u1581\n\u013e\3\u013e")
        buf.write("\3\u013e\3\u013e\3\u013e\5\u013e\u1587\n\u013e\3\u013e")
        buf.write("\3\u013e\5\u013e\u158b\n\u013e\3\u013e\5\u013e\u158e\n")
        buf.write("\u013e\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f")
        buf.write("\5\u013f\u1596\n\u013f\3\u013f\5\u013f\u1599\n\u013f\3")
        buf.write("\u013f\3\u013f\5\u013f\u159d\n\u013f\3\u013f\3\u013f\5")
        buf.write("\u013f\u15a1\n\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u15a6")
        buf.write("\n\u013f\3\u013f\5\u013f\u15a9\n\u013f\3\u013f\3\u013f")
        buf.write("\5\u013f\u15ad\n\u013f\3\u013f\3\u013f\5\u013f\u15b1\n")
        buf.write("\u013f\7\u013f\u15b3\n\u013f\f\u013f\16\u013f\u15b6\13")
        buf.write("\u013f\3\u013f\3\u013f\3\u013f\3\u0140\3\u0140\3\u0140")
        buf.write("\3\u0140\7\u0140\u15bf\n\u0140\f\u0140\16\u0140\u15c2")
        buf.write("\13\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140")
        buf.write("\3\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141")
        buf.write("\5\u0141\u15d1\n\u0141\3\u0141\3\u0141\3\u0141\3\u0141")
        buf.write("\5\u0141\u15d7\n\u0141\7\u0141\u15d9\n\u0141\f\u0141\16")
        buf.write("\u0141\u15dc\13\u0141\3\u0142\3\u0142\5\u0142\u15e0\n")
        buf.write("\u0142\3\u0143\3\u0143\5\u0143\u15e4\n\u0143\3\u0143\3")
        buf.write("\u0143\3\u0143\7\u0143\u15e9\n\u0143\f\u0143\16\u0143")
        buf.write("\u15ec\13\u0143\3\u0143\5\u0143\u15ef\n\u0143\3\u0143")
        buf.write("\5\u0143\u15f2\n\u0143\3\u0143\5\u0143\u15f5\n\u0143\3")
        buf.write("\u0143\5\u0143\u15f8\n\u0143\3\u0143\3\u0143\7\u0143\u15fc")
        buf.write("\n\u0143\f\u0143\16\u0143\u15ff\13\u0143\3\u0143\5\u0143")
        buf.write("\u1602\n\u0143\3\u0143\3\u0143\3\u0143\7\u0143\u1607\n")
        buf.write("\u0143\f\u0143\16\u0143\u160a\13\u0143\3\u0144\3\u0144")
        buf.write("\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144")
        buf.write("\u1614\n\u0144\5\u0144\u1616\n\u0144\3\u0145\3\u0145\3")
        buf.write("\u0145\3\u0145\7\u0145\u161c\n\u0145\f\u0145\16\u0145")
        buf.write("\u161f\13\u0145\3\u0146\3\u0146\3\u0146\5\u0146\u1624")
        buf.write("\n\u0146\3\u0147\3\u0147\3\u0147\7\u0147\u1629\n\u0147")
        buf.write("\f\u0147\16\u0147\u162c\13\u0147\3\u0147\3\u0147\7\u0147")
        buf.write("\u1630\n\u0147\f\u0147\16\u0147\u1633\13\u0147\3\u0147")
        buf.write("\5\u0147\u1636\n\u0147\5\u0147\u1638\n\u0147\3\u0147\3")
        buf.write("\u0147\7\u0147\u163c\n\u0147\f\u0147\16\u0147\u163f\13")
        buf.write("\u0147\3\u0148\3\u0148\3\u0148\5\u0148\u1644\n\u0148\3")
        buf.write("\u0148\3\u0148\3\u0148\3\u0148\3\u0148\5\u0148\u164b\n")
        buf.write("\u0148\3\u0149\5\u0149\u164e\n\u0149\3\u0149\5\u0149\u1651")
        buf.write("\n\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u1656\n\u0149")
        buf.write("\3\u0149\3\u0149\5\u0149\u165a\n\u0149\3\u014a\3\u014a")
        buf.write("\3\u014a\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\7\u014b")
        buf.write("\u1664\n\u014b\f\u014b\16\u014b\u1667\13\u014b\3\u014b")
        buf.write("\3\u014b\3\u014c\3\u014c\5\u014c\u166d\n\u014c\3\u014c")
        buf.write("\3\u014c\3\u014c\5\u014c\u1672\n\u014c\5\u014c\u1674\n")
        buf.write("\u014c\5\u014c\u1676\n\u014c\3\u014d\3\u014d\3\u014d\3")
        buf.write("\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d")
        buf.write("\7\u014d\u1682\n\u014d\f\u014d\16\u014d\u1685\13\u014d")
        buf.write("\5\u014d\u1687\n\u014d\3\u014e\3\u014e\3\u014e\3\u014e")
        buf.write("\3\u014e\3\u014e\3\u014e\3\u014e\5\u014e\u1691\n\u014e")
        buf.write("\3\u014f\3\u014f\5\u014f\u1695\n\u014f\3\u014f\3\u014f")
        buf.write("\3\u014f\3\u014f\7\u014f\u169b\n\u014f\f\u014f\16\u014f")
        buf.write("\u169e\13\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u0150")
        buf.write("\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150\u16a9\n\u0150")
        buf.write("\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\7\u0151")
        buf.write("\u16b1\n\u0151\f\u0151\16\u0151\u16b4\13\u0151\3\u0151")
        buf.write("\3\u0151\5\u0151\u16b8\n\u0151\3\u0152\3\u0152\3\u0152")
        buf.write("\3\u0152\3\u0152\3\u0152\7\u0152\u16c0\n\u0152\f\u0152")
        buf.write("\16\u0152\u16c3\13\u0152\3\u0152\3\u0152\3\u0152\7\u0152")
        buf.write("\u16c8\n\u0152\f\u0152\16\u0152\u16cb\13\u0152\5\u0152")
        buf.write("\u16cd\n\u0152\3\u0152\3\u0152\3\u0153\3\u0153\5\u0153")
        buf.write("\u16d3\n\u0153\3\u0154\3\u0154\5\u0154\u16d7\n\u0154\3")
        buf.write("\u0155\3\u0155\3\u0155\5\u0155\u16dc\n\u0155\3\u0155\3")
        buf.write("\u0155\3\u0155\3\u0155\3\u0155\3\u0155\7\u0155\u16e4\n")
        buf.write("\u0155\f\u0155\16\u0155\u16e7\13\u0155\3\u0155\3\u0155")
        buf.write("\5\u0155\u16eb\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155")
        buf.write("\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\7\u0156\u16f6")
        buf.write("\n\u0156\f\u0156\16\u0156\u16f9\13\u0156\3\u0156\3\u0156")
        buf.write("\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\7\u0157\u1702")
        buf.write("\n\u0157\f\u0157\16\u0157\u1705\13\u0157\3\u0157\3\u0157")
        buf.write("\5\u0157\u1709\n\u0157\3\u0157\3\u0157\3\u0157\3\u0157")
        buf.write("\3\u0157\3\u0157\7\u0157\u1711\n\u0157\f\u0157\16\u0157")
        buf.write("\u1714\13\u0157\3\u0157\3\u0157\5\u0157\u1718\n\u0157")
        buf.write("\5\u0157\u171a\n\u0157\3\u0158\3\u0158\3\u0158\5\u0158")
        buf.write("\u171f\n\u0158\3\u0158\3\u0158\5\u0158\u1723\n\u0158\3")
        buf.write("\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u1729\n\u0158\3")
        buf.write("\u0158\3\u0158\5\u0158\u172d\n\u0158\3\u0159\3\u0159\3")
        buf.write("\u0159\3\u0159\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\7\u015a\u1738\n\u015a\f\u015a\16\u015a\u173b\13\u015a")
        buf.write("\3\u015b\3\u015b\3\u015b\5\u015b\u1740\n\u015b\3\u015c")
        buf.write("\3\u015c\3\u015c\3\u015c\3\u015c\7\u015c\u1747\n\u015c")
        buf.write("\f\u015c\16\u015c\u174a\13\u015c\3\u015c\3\u015c\3\u015d")
        buf.write("\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\7\u015d\u1754")
        buf.write("\n\u015d\f\u015d\16\u015d\u1757\13\u015d\3\u015d\3\u015d")
        buf.write("\3\u015e\3\u015e\3\u015e\5\u015e\u175e\n\u015e\3\u015f")
        buf.write("\3\u015f\3\u015f\3\u0160\3\u0160\7\u0160\u1765\n\u0160")
        buf.write("\f\u0160\16\u0160\u1768\13\u0160\3\u0160\5\u0160\u176b")
        buf.write("\n\u0160\3\u0160\7\u0160\u176e\n\u0160\f\u0160\16\u0160")
        buf.write("\u1771\13\u0160\3\u0160\3\u0160\3\u0161\3\u0161\3\u0161")
        buf.write("\3\u0161\3\u0161\3\u0161\5\u0161\u177b\n\u0161\5\u0161")
        buf.write("\u177d\n\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0163")
        buf.write("\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163")
        buf.write("\7\u0163\u178b\n\u0163\f\u0163\16\u0163\u178e\13\u0163")
        buf.write("\3\u0164\3\u0164\5\u0164\u1792\n\u0164\3\u0164\3\u0164")
        buf.write("\7\u0164\u1796\n\u0164\f\u0164\16\u0164\u1799\13\u0164")
        buf.write("\3\u0164\3\u0164\3\u0165\5\u0165\u179e\n\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0166\3\u0166")
        buf.write("\3\u0166\3\u0166\3\u0167\3\u0167\3\u0167\3\u0167\7\u0167")
        buf.write("\u17ae\n\u0167\f\u0167\16\u0167\u17b1\13\u0167\3\u0167")
        buf.write("\3\u0167\3\u0168\3\u0168\5\u0168\u17b7\n\u0168\3\u0169")
        buf.write("\5\u0169\u17ba\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\7\u0169\u17c0\n\u0169\f\u0169\16\u0169\u17c3\13\u0169")
        buf.write("\3\u0169\3\u0169\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a")
        buf.write("\u17cb\n\u016a\5\u016a\u17cd\n\u016a\3\u016a\3\u016a\5")
        buf.write("\u016a\u17d1\n\u016a\3\u016a\5\u016a\u17d4\n\u016a\3\u016b")
        buf.write("\3\u016b\3\u016b\5\u016b\u17d9\n\u016b\5\u016b\u17db\n")
        buf.write("\u016b\3\u016b\3\u016b\5\u016b\u17df\n\u016b\3\u016b\3")
        buf.write("\u016b\3\u016b\3\u016c\3\u016c\3\u016d\3\u016d\3\u016d")
        buf.write("\3\u016d\3\u016d\5\u016d\u17eb\n\u016d\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016f\3\u016f\5\u016f\u17f4")
        buf.write("\n\u016f\3\u016f\3\u016f\3\u016f\3\u016f\7\u016f\u17fa")
        buf.write("\n\u016f\f\u016f\16\u016f\u17fd\13\u016f\3\u0170\3\u0170")
        buf.write("\5\u0170\u1801\n\u0170\3\u0170\3\u0170\5\u0170\u1805\n")
        buf.write("\u0170\3\u0171\3\u0171\3\u0171\5\u0171\u180a\n\u0171\3")
        buf.write("\u0171\5\u0171\u180d\n\u0171\3\u0172\3\u0172\3\u0172\3")
        buf.write("\u0172\7\u0172\u1813\n\u0172\f\u0172\16\u0172\u1816\13")
        buf.write("\u0172\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173")
        buf.write("\u181d\n\u0173\3\u0174\3\u0174\3\u0174\3\u0175\3\u0175")
        buf.write("\3\u0175\3\u0175\5\u0175\u1826\n\u0175\3\u0175\5\u0175")
        buf.write("\u1829\n\u0175\3\u0175\5\u0175\u182c\n\u0175\3\u0175\5")
        buf.write("\u0175\u182f\n\u0175\3\u0176\3\u0176\3\u0176\3\u0176\7")
        buf.write("\u0176\u1835\n\u0176\f\u0176\16\u0176\u1838\13\u0176\3")
        buf.write("\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176")
        buf.write("\5\u0176\u1841\n\u0176\3\u0177\3\u0177\3\u0177\3\u0177")
        buf.write("\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u184b\n\u0177")
        buf.write("\3\u0178\3\u0178\5\u0178\u184f\n\u0178\3\u0178\3\u0178")
        buf.write("\5\u0178\u1853\n\u0178\3\u0178\5\u0178\u1856\n\u0178\3")
        buf.write("\u0178\5\u0178\u1859\n\u0178\3\u0179\3\u0179\3\u0179\5")
        buf.write("\u0179\u185e\n\u0179\3\u017a\3\u017a\3\u017a\5\u017a\u1863")
        buf.write("\n\u017a\3\u017a\5\u017a\u1866\n\u017a\3\u017a\5\u017a")
        buf.write("\u1869\n\u017a\3\u017b\3\u017b\6\u017b\u186d\n\u017b\r")
        buf.write("\u017b\16\u017b\u186e\3\u017b\5\u017b\u1872\n\u017b\3")
        buf.write("\u017b\3\u017b\3\u017c\3\u017c\5\u017c\u1878\n\u017c\3")
        buf.write("\u017c\5\u017c\u187b\n\u017c\3\u017d\5\u017d\u187e\n\u017d")
        buf.write("\3\u017d\6\u017d\u1881\n\u017d\r\u017d\16\u017d\u1882")
        buf.write("\3\u017d\5\u017d\u1886\n\u017d\3\u017e\3\u017e\3\u017e")
        buf.write("\3\u017e\6\u017e\u188c\n\u017e\r\u017e\16\u017e\u188d")
        buf.write("\3\u017f\3\u017f\6\u017f\u1892\n\u017f\r\u017f\16\u017f")
        buf.write("\u1893\3\u0180\3\u0180\3\u0180\5\u0180\u1899\n\u0180\3")
        buf.write("\u0181\3\u0181\3\u0181\3\u0181\7\u0181\u189f\n\u0181\f")
        buf.write("\u0181\16\u0181\u18a2\13\u0181\3\u0182\3\u0182\3\u0182")
        buf.write("\3\u0182\5\u0182\u18a8\n\u0182\3\u0182\3\u0182\3\u0182")
        buf.write("\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\5\u0182\u18b2")
        buf.write("\n\u0182\3\u0182\3\u0182\5\u0182\u18b6\n\u0182\5\u0182")
        buf.write("\u18b8\n\u0182\3\u0182\5\u0182\u18bb\n\u0182\3\u0183\3")
        buf.write("\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183")
        buf.write("\7\u0183\u18c5\n\u0183\f\u0183\16\u0183\u18c8\13\u0183")
        buf.write("\3\u0183\5\u0183\u18cb\n\u0183\3\u0183\5\u0183\u18ce\n")
        buf.write("\u0183\3\u0184\3\u0184\3\u0184\3\u0184\3\u0185\3\u0185")
        buf.write("\3\u0185\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186")
        buf.write("\5\u0186\u18dd\n\u0186\3\u0186\3\u0186\3\u0186\5\u0186")
        buf.write("\u18e2\n\u0186\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187")
        buf.write("\5\u0187\u18e9\n\u0187\3\u0187\5\u0187\u18ec\n\u0187\3")
        buf.write("\u0188\3\u0188\3\u0188\3\u0188\3\u0188\7\u0188\u18f3\n")
        buf.write("\u0188\f\u0188\16\u0188\u18f6\13\u0188\3\u0188\3\u0188")
        buf.write("\3\u0188\3\u0188\5\u0188\u18fc\n\u0188\3\u0189\3\u0189")
        buf.write("\3\u0189\5\u0189\u1901\n\u0189\3\u018a\3\u018a\5\u018a")
        buf.write("\u1905\n\u018a\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b")
        buf.write("\3\u018b\5\u018b\u190d\n\u018b\3\u018b\3\u018b\3\u018b")
        buf.write("\3\u018b\5\u018b\u1913\n\u018b\3\u018c\3\u018c\3\u018c")
        buf.write("\3\u018c\3\u018c\3\u018c\5\u018c\u191b\n\u018c\3\u018c")
        buf.write("\5\u018c\u191e\n\u018c\3\u018d\3\u018d\3\u018d\3\u018d")
        buf.write("\7\u018d\u1924\n\u018d\f\u018d\16\u018d\u1927\13\u018d")
        buf.write("\3\u018d\3\u018d\3\u018e\3\u018e\3\u018e\5\u018e\u192e")
        buf.write("\n\u018e\3\u018e\5\u018e\u1931\n\u018e\3\u018e\5\u018e")
        buf.write("\u1934\n\u018e\3\u018f\3\u018f\3\u018f\3\u0190\3\u0190")
        buf.write("\3\u0190\3\u0190\5\u0190\u193d\n\u0190\3\u0191\3\u0191")
        buf.write("\3\u0191\3\u0191\5\u0191\u1943\n\u0191\3\u0191\3\u0191")
        buf.write("\3\u0191\3\u0191\5\u0191\u1949\n\u0191\5\u0191\u194b\n")
        buf.write("\u0191\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192")
        buf.write("\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u1958")
        buf.write("\n\u0192\5\u0192\u195a\n\u0192\3\u0193\3\u0193\3\u0193")
        buf.write("\3\u0193\3\u0193\3\u0193\3\u0193\5\u0193\u1963\n\u0193")
        buf.write("\5\u0193\u1965\n\u0193\3\u0194\3\u0194\5\u0194\u1969\n")
        buf.write("\u0194\3\u0194\3\u0194\3\u0194\3\u0194\5\u0194\u196f\n")
        buf.write("\u0194\3\u0194\3\u0194\5\u0194\u1973\n\u0194\3\u0195\3")
        buf.write("\u0195\3\u0195\3\u0195\3\u0195\3\u0196\3\u0196\3\u0196")
        buf.write("\3\u0196\3\u0196\3\u0197\3\u0197\5\u0197\u1981\n\u0197")
        buf.write("\3\u0197\3\u0197\7\u0197\u1985\n\u0197\f\u0197\16\u0197")
        buf.write("\u1988\13\u0197\3\u0197\3\u0197\3\u0198\3\u0198\3\u0199")
        buf.write("\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199")
        buf.write("\3\u0199\3\u0199\5\u0199\u1998\n\u0199\3\u0199\3\u0199")
        buf.write("\5\u0199\u199c\n\u0199\3\u0199\3\u0199\3\u0199\3\u0199")
        buf.write("\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199")
        buf.write("\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199")
        buf.write("\3\u0199\3\u0199\5\u0199\u19b2\n\u0199\3\u0199\3\u0199")
        buf.write("\3\u0199\3\u0199\3\u0199\3\u0199\5\u0199\u19ba\n\u0199")
        buf.write("\3\u0199\3\u0199\5\u0199\u19be\n\u0199\3\u0199\3\u0199")
        buf.write("\3\u0199\3\u0199\5\u0199\u19c4\n\u0199\3\u0199\3\u0199")
        buf.write("\3\u0199\5\u0199\u19c9\n\u0199\3\u0199\7\u0199\u19cc\n")
        buf.write("\u0199\f\u0199\16\u0199\u19cf\13\u0199\3\u019a\5\u019a")
        buf.write("\u19d2\n\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a")
        buf.write("\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u19dd\n\u019a")
        buf.write("\3\u019a\3\u019a\5\u019a\u19e1\n\u019a\3\u019a\3\u019a")
        buf.write("\3\u019a\7\u019a\u19e6\n\u019a\f\u019a\16\u019a\u19e9")
        buf.write("\13\u019a\3\u019a\3\u019a\5\u019a\u19ed\n\u019a\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019c\3\u019c\3\u019d\3\u019d")
        buf.write("\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u19fb\n\u019d")
        buf.write("\3\u019e\3\u019e\3\u019f\3\u019f\3\u019f\3\u01a0\3\u01a0")
        buf.write("\3\u01a0\3\u01a0\3\u01a1\3\u01a1\3\u01a2\3\u01a2\3\u01a2")
        buf.write("\3\u01a2\3\u01a2\3\u01a2\5\u01a2\u1a0e\n\u01a2\3\u01a2")
        buf.write("\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write("\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write("\3\u01a2\3\u01a2\3\u01a2\5\u01a2\u1a22\n\u01a2\3\u01a2")
        buf.write("\5\u01a2\u1a25\n\u01a2\7\u01a2\u1a27\n\u01a2\f\u01a2\16")
        buf.write("\u01a2\u1a2a\13\u01a2\3\u01a3\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\5\u01a3\u1a31\n\u01a3\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\5\u01a3\u1a39\n\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\3\u01a3\5\u01a3\u1a40\n\u01a3")
        buf.write("\3\u01a3\3\u01a3\5\u01a3\u1a44\n\u01a3\3\u01a4\3\u01a4")
        buf.write("\3\u01a4\3\u01a4\3\u01a4\3\u01a5\3\u01a5\5\u01a5\u1a4d")
        buf.write("\n\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u1a52\n\u01a5")
        buf.write("\7\u01a5\u1a54\n\u01a5\f\u01a5\16\u01a5\u1a57\13\u01a5")
        buf.write("\3\u01a5\3\u01a5\3\u01a5\7\u01a5\u1a5c\n\u01a5\f\u01a5")
        buf.write("\16\u01a5\u1a5f\13\u01a5\3\u01a5\5\u01a5\u1a62\n\u01a5")
        buf.write("\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u1a69")
        buf.write("\n\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6")
        buf.write("\3\u01a6\5\u01a6\u1a72\n\u01a6\3\u01a7\3\u01a7\3\u01a7")
        buf.write("\3\u01a8\3\u01a8\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9")
        buf.write("\7\u01a9\u1a7e\n\u01a9\f\u01a9\16\u01a9\u1a81\13\u01a9")
        buf.write("\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9")
        buf.write("\3\u01a9\7\u01a9\u1a8b\n\u01a9\f\u01a9\16\u01a9\u1a8e")
        buf.write("\13\u01a9\3\u01a9\3\u01a9\5\u01a9\u1a92\n\u01a9\3\u01a9")
        buf.write("\3\u01a9\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa")
        buf.write("\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa")
        buf.write("\3\u01aa\3\u01aa\3\u01aa\3\u01aa\5\u01aa\u1aa7\n\u01aa")
        buf.write("\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\7\u01aa\u1aae")
        buf.write("\n\u01aa\f\u01aa\16\u01aa\u1ab1\13\u01aa\3\u01ab\3\u01ab")
        buf.write("\5\u01ab\u1ab5\n\u01ab\3\u01ac\5\u01ac\u1ab8\n\u01ac\3")
        buf.write("\u01ac\3\u01ac\3\u01ac\6\u01ac\u1abd\n\u01ac\r\u01ac\16")
        buf.write("\u01ac\u1abe\3\u01ac\5\u01ac\u1ac2\n\u01ac\3\u01ac\3\u01ac")
        buf.write("\5\u01ac\u1ac6\n\u01ac\3\u01ac\5\u01ac\u1ac9\n\u01ac\3")
        buf.write("\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u1ad0\n")
        buf.write("\u01ad\3\u01ae\5\u01ae\u1ad3\n\u01ae\3\u01ae\3\u01ae\6")
        buf.write("\u01ae\u1ad7\n\u01ae\r\u01ae\16\u01ae\u1ad8\3\u01ae\5")
        buf.write("\u01ae\u1adc\n\u01ae\3\u01ae\3\u01ae\5\u01ae\u1ae0\n\u01ae")
        buf.write("\3\u01ae\5\u01ae\u1ae3\n\u01ae\3\u01af\3\u01af\3\u01af")
        buf.write("\3\u01af\3\u01af\5\u01af\u1aea\n\u01af\3\u01b0\3\u01b0")
        buf.write("\3\u01b0\5\u01b0\u1aef\n\u01b0\3\u01b1\3\u01b1\3\u01b1")
        buf.write("\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1")
        buf.write("\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\5\u01b1")
        buf.write("\u1b01\n\u01b1\5\u01b1\u1b03\n\u01b1\3\u01b2\3\u01b2\5")
        buf.write("\u01b2\u1b07\n\u01b2\3\u01b3\3\u01b3\3\u01b3\3\u01b3\7")
        buf.write("\u01b3\u1b0d\n\u01b3\f\u01b3\16\u01b3\u1b10\13\u01b3\3")
        buf.write("\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4")
        buf.write("\3\u01b4\3\u01b4\5\u01b4\u1b1b\n\u01b4\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1b22\n\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\5\u01b5\u1b2d\n\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1b35\n\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1b44")
        buf.write("\n\u01b5\3\u01b5\3\u01b5\5\u01b5\u1b48\n\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\3\u01b5\6\u01b5\u1b4f\n\u01b5")
        buf.write("\r\u01b5\16\u01b5\u1b50\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\5\u01b5\u1b57\n\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\5\u01b5\u1b5f\n\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1b68")
        buf.write("\n\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\7\u01b5\u1b71\n\u01b5\f\u01b5\16\u01b5\u1b74")
        buf.write("\13\u01b5\3\u01b5\5\u01b5\u1b77\n\u01b5\3\u01b5\5\u01b5")
        buf.write("\u1b7a\n\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\5\u01b5\u1b8a\n\u01b5\3\u01b5\3\u01b5")
        buf.write("\7\u01b5\u1b8e\n\u01b5\f\u01b5\16\u01b5\u1b91\13\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\5\u01b5\u1b9a\n\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\5\u01b5\u1ba2\n\u01b5\3\u01b5\5\u01b5")
        buf.write("\u1ba5\n\u01b5\3\u01b5\5\u01b5\u1ba8\n\u01b5\3\u01b5\3")
        buf.write("\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5")
        buf.write("\u1bb1\n\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1bb6\n")
        buf.write("\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\7\u01b5")
        buf.write("\u1bbd\n\u01b5\f\u01b5\16\u01b5\u1bc0\13\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\5\u01b5\u1bc5\n\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\5\u01b5\u1bca\n\u01b5\3\u01b5\5\u01b5\u1bcd\n")
        buf.write("\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1bd2\n\u01b5\3")
        buf.write("\u01b5\3\u01b5\3\u01b5\5\u01b5\u1bd7\n\u01b5\7\u01b5\u1bd9")
        buf.write("\n\u01b5\f\u01b5\16\u01b5\u1bdc\13\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\5\u01b5\u1be1\n\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\5\u01b5\u1be7\n\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1bf0\n\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1bf5\n\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1bfd")
        buf.write("\n\u01b5\3\u01b5\3\u01b5\5\u01b5\u1c01\n\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\5\u01b5\u1c06\n\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\5\u01b5\u1c0c\n\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1c13\n\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\5\u01b5\u1c18\n\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1c1f\n\u01b5\3\u01b5")
        buf.write("\3\u01b5\5\u01b5\u1c23\n\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\5\u01b5\u1c28\n\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\5\u01b5\u1c30\n\u01b5\3\u01b5\5\u01b5")
        buf.write("\u1c33\n\u01b5\3\u01b5\5\u01b5\u1c36\n\u01b5\3\u01b5\5")
        buf.write("\u01b5\u1c39\n\u01b5\3\u01b5\3\u01b5\5\u01b5\u1c3d\n\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1c42\n\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\5\u01b5\u1c47\n\u01b5\3\u01b5\3\u01b5")
        buf.write("\5\u01b5\u1c4b\n\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\5\u01b5\u1c52\n\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\5\u01b5\u1c57\n\u01b5\5\u01b5\u1c59\n\u01b5\3\u01b5\3")
        buf.write("\u01b5\3\u01b5\7\u01b5\u1c5e\n\u01b5\f\u01b5\16\u01b5")
        buf.write("\u1c61\13\u01b5\3\u01b6\3\u01b6\3\u01b6\5\u01b6\u1c66")
        buf.write("\n\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6\u1c6c")
        buf.write("\n\u01b6\3\u01b6\5\u01b6\u1c6f\n\u01b6\3\u01b6\3\u01b6")
        buf.write("\5\u01b6\u1c73\n\u01b6\5\u01b6\u1c75\n\u01b6\3\u01b7\3")
        buf.write("\u01b7\3\u01b8\3\u01b8\3\u01b9\3\u01b9\3\u01ba\3\u01ba")
        buf.write("\3\u01ba\5\u01ba\u1c80\n\u01ba\3\u01ba\3\u01ba\5\u01ba")
        buf.write("\u1c84\n\u01ba\5\u01ba\u1c86\n\u01ba\3\u01ba\3\u01ba\3")
        buf.write("\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb")
        buf.write("\5\u01bb\u1c91\n\u01bb\3\u01bc\3\u01bc\3\u01bd\3\u01bd")
        buf.write("\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u1c9c")
        buf.write("\n\u01bd\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\7\u01be")
        buf.write("\u1ca3\n\u01be\f\u01be\16\u01be\u1ca6\13\u01be\5\u01be")
        buf.write("\u1ca8\n\u01be\3\u01bf\3\u01bf\5\u01bf\u1cac\n\u01bf\3")
        buf.write("\u01bf\5\u01bf\u1caf\n\u01bf\3\u01bf\3\u01bf\5\u01bf\u1cb3")
        buf.write("\n\u01bf\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c1\3\u01c1")
        buf.write("\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u1cc0")
        buf.write("\n\u01c1\3\u01c2\3\u01c2\3\u01c2\5\u01c2\u1cc5\n\u01c2")
        buf.write("\3\u01c2\3\u01c2\3\u01c2\3\u01c2\7\u01c2\u1ccb\n\u01c2")
        buf.write("\f\u01c2\16\u01c2\u1cce\13\u01c2\3\u01c2\3\u01c2\3\u01c2")
        buf.write("\3\u01c2\5\u01c2\u1cd4\n\u01c2\3\u01c3\3\u01c3\3\u01c3")
        buf.write("\5\u01c3\u1cd9\n\u01c3\3\u01c3\3\u01c3\5\u01c3\u1cdd\n")
        buf.write("\u01c3\3\u01c3\3\u01c3\3\u01c3\5\u01c3\u1ce2\n\u01c3\3")
        buf.write("\u01c4\3\u01c4\3\u01c4\5\u01c4\u1ce7\n\u01c4\3\u01c4\5")
        buf.write("\u01c4\u1cea\n\u01c4\3\u01c4\3\u01c4\3\u01c4\7\u01c4\u1cef")
        buf.write("\n\u01c4\f\u01c4\16\u01c4\u1cf2\13\u01c4\3\u01c4\3\u01c4")
        buf.write("\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\5\u01c5\u1cfb")
        buf.write("\n\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\7\u01c5\u1d01")
        buf.write("\n\u01c5\f\u01c5\16\u01c5\u1d04\13\u01c5\3\u01c5\5\u01c5")
        buf.write("\u1d07\n\u01c5\3\u01c5\3\u01c5\3\u01c6\3\u01c6\3\u01c6")
        buf.write("\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u1d11\n\u01c6\3\u01c6")
        buf.write("\5\u01c6\u1d14\n\u01c6\5\u01c6\u1d16\n\u01c6\3\u01c7\3")
        buf.write("\u01c7\3\u01c7\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8")
        buf.write("\5\u01c8\u1d20\n\u01c8\5\u01c8\u1d22\n\u01c8\3\u01c9\3")
        buf.write("\u01c9\3\u01c9\3\u01c9\5\u01c9\u1d28\n\u01c9\3\u01ca\3")
        buf.write("\u01ca\3\u01ca\3\u01ca\5\u01ca\u1d2e\n\u01ca\5\u01ca\u1d30")
        buf.write("\n\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cc\3\u01cc\3\u01cc")
        buf.write("\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd")
        buf.write("\u1d3e\n\u01cd\5\u01cd\u1d40\n\u01cd\3\u01ce\3\u01ce\3")
        buf.write("\u01ce\3\u01ce\3\u01ce\3\u01ce\5\u01ce\u1d48\n\u01ce\3")
        buf.write("\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf")
        buf.write("\5\u01cf\u1d51\n\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0")
        buf.write("\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u1d5a\n\u01d0\3\u01d1")
        buf.write("\3\u01d1\3\u01d2\3\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3")
        buf.write("\5\u01d3\u1d64\n\u01d3\3\u01d4\3\u01d4\5\u01d4\u1d68\n")
        buf.write("\u01d4\3\u01d4\3\u01d4\3\u01d5\5\u01d5\u1d6d\n\u01d5\3")
        buf.write("\u01d5\3\u01d5\5\u01d5\u1d71\n\u01d5\3\u01d5\5\u01d5\u1d74")
        buf.write("\n\u01d5\3\u01d6\5\u01d6\u1d77\n\u01d6\3\u01d6\3\u01d6")
        buf.write("\5\u01d6\u1d7b\n\u01d6\3\u01d7\3\u01d7\3\u01d8\3\u01d8")
        buf.write("\3\u01d8\5\u01d8\u1d82\n\u01d8\3\u01d9\3\u01d9\3\u01d9")
        buf.write("\3\u01d9\3\u01da\3\u01da\3\u01da\3\u01da\7\u01da\u1d8c")
        buf.write("\n\u01da\f\u01da\16\u01da\u1d8f\13\u01da\3\u01da\3\u01da")
        buf.write("\3\u01da\3\u01da\3\u01da\3\u01da\7\u01da\u1d97\n\u01da")
        buf.write("\f\u01da\16\u01da\u1d9a\13\u01da\5\u01da\u1d9c\n\u01da")
        buf.write("\3\u01db\3\u01db\5\u01db\u1da0\n\u01db\3\u01dc\3\u01dc")
        buf.write("\3\u01dd\3\u01dd\3\u01de\3\u01de\3\u01df\3\u01df\3\u01e0")
        buf.write("\3\u01e0\3\u01e1\3\u01e1\3\u01e2\3\u01e2\3\u01e2\7\u01e2")
        buf.write("\u1db1\n\u01e2\f\u01e2\16\u01e2\u1db4\13\u01e2\3\u01e2")
        buf.write("\3\u01e2\5\u01e2\u1db8\n\u01e2\3\u01e3\3\u01e3\3\u01e4")
        buf.write("\3\u01e4\3\u01e4\5\u01e4\u1dbf\n\u01e4\3\u01e5\3\u01e5")
        buf.write("\3\u01e6\3\u01e6\3\u01e7\3\u01e7\3\u01e8\3\u01e8\3\u01e8")
        buf.write("\7\u01e8\u1dca\n\u01e8\f\u01e8\16\u01e8\u1dcd\13\u01e8")
        buf.write("\3\u01e9\3\u01e9\3\u01ea\3\u01ea\3\u01ea\7\u01ea\u1dd4")
        buf.write("\n\u01ea\f\u01ea\16\u01ea\u1dd7\13\u01ea\3\u01ea\3\u01ea")
        buf.write("\5\u01ea\u1ddb\n\u01ea\3\u01eb\3\u01eb\3\u01ec\3\u01ec")
        buf.write("\3\u01ec\7\u01ec\u1de2\n\u01ec\f\u01ec\16\u01ec\u1de5")
        buf.write("\13\u01ec\3\u01ed\3\u01ed\3\u01ed\7\u01ed\u1dea\n\u01ed")
        buf.write("\f\u01ed\16\u01ed\u1ded\13\u01ed\3\u01ee\3\u01ee\3\u01ee")
        buf.write("\7\u01ee\u1df2\n\u01ee\f\u01ee\16\u01ee\u1df5\13\u01ee")
        buf.write("\3\u01ef\3\u01ef\3\u01ef\5\u01ef\u1dfa\n\u01ef\3\u01f0")
        buf.write("\3\u01f0\3\u01f0\5\u01f0\u1dff\n\u01f0\3\u01f1\3\u01f1")
        buf.write("\3\u01f1\5\u01f1\u1e04\n\u01f1\3\u01f2\3\u01f2\5\u01f2")
        buf.write("\u1e08\n\u01f2\3\u01f3\3\u01f3\3\u01f4\3\u01f4\5\u01f4")
        buf.write("\u1e0e\n\u01f4\3\u01f5\3\u01f5\5\u01f5\u1e12\n\u01f5\3")
        buf.write("\u01f6\3\u01f6\3\u01f6\5\u01f6\u1e17\n\u01f6\3\u01f7\3")
        buf.write("\u01f7\3\u01f8\3\u01f8\3\u01f8\7\u01f8\u1e1e\n\u01f8\f")
        buf.write("\u01f8\16\u01f8\u1e21\13\u01f8\3\u01f9\3\u01f9\3\u01f9")
        buf.write("\3\u01f9\5\u01f9\u1e27\n\u01f9\3\u01fa\3\u01fa\3\u01fa")
        buf.write("\7\u01fa\u1e2c\n\u01fa\f\u01fa\16\u01fa\u1e2f\13\u01fa")
        buf.write("\3\u01fb\3\u01fb\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc")
        buf.write("\3\u01fc\3\u01fc\5\u01fc\u1e3a\n\u01fc\3\u01fd\3\u01fd")
        buf.write("\5\u01fd\u1e3e\n\u01fd\3\u01fd\3\u01fd\7\u01fd\u1e42\n")
        buf.write("\u01fd\f\u01fd\16\u01fd\u1e45\13\u01fd\3\u01fd\3\u01fd")
        buf.write("\5\u01fd\u1e49\n\u01fd\3\u01fe\3\u01fe\3\u01fe\5\u01fe")
        buf.write("\u1e4e\n\u01fe\5\u01fe\u1e50\n\u01fe\3\u01fe\3\u01fe\3")
        buf.write("\u01fe\5\u01fe\u1e55\n\u01fe\7\u01fe\u1e57\n\u01fe\f\u01fe")
        buf.write("\16\u01fe\u1e5a\13\u01fe\3\u01fe\3\u01fe\5\u01fe\u1e5e")
        buf.write("\n\u01fe\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\5\u01ff")
        buf.write("\u1e65\n\u01ff\3\u01ff\3\u01ff\3\u01ff\5\u01ff\u1e6a\n")
        buf.write("\u01ff\5\u01ff\u1e6c\n\u01ff\5\u01ff\u1e6e\n\u01ff\3\u01ff")
        buf.write("\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff")
        buf.write("\5\u01ff\u1e78\n\u01ff\3\u01ff\3\u01ff\3\u01ff\5\u01ff")
        buf.write("\u1e7d\n\u01ff\7\u01ff\u1e7f\n\u01ff\f\u01ff\16\u01ff")
        buf.write("\u1e82\13\u01ff\5\u01ff\u1e84\n\u01ff\3\u01ff\3\u01ff")
        buf.write("\5\u01ff\u1e88\n\u01ff\3\u0200\3\u0200\3\u0200\3\u0201")
        buf.write("\3\u0201\3\u0201\3\u0201\5\u0201\u1e91\n\u0201\3\u0201")
        buf.write("\3\u0201\3\u0202\3\u0202\5\u0202\u1e97\n\u0202\3\u0202")
        buf.write("\3\u0202\5\u0202\u1e9b\n\u0202\5\u0202\u1e9d\n\u0202\3")
        buf.write("\u0203\3\u0203\5\u0203\u1ea1\n\u0203\3\u0203\3\u0203\5")
        buf.write("\u0203\u1ea5\n\u0203\3\u0203\3\u0203\5\u0203\u1ea9\n\u0203")
        buf.write("\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\5\u0203")
        buf.write("\u1eb1\n\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203")
        buf.write("\3\u0203\5\u0203\u1eb9\n\u0203\5\u0203\u1ebb\n\u0203\3")
        buf.write("\u0204\3\u0204\3\u0204\3\u0204\5\u0204\u1ec1\n\u0204\3")
        buf.write("\u0204\5\u0204\u1ec4\n\u0204\3\u0204\3\u0204\3\u0205\3")
        buf.write("\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205")
        buf.write("\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205")
        buf.write("\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\5\u0205\u1edc")
        buf.write("\n\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\5\u0205")
        buf.write("\u1ee3\n\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205")
        buf.write("\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205")
        buf.write("\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205")
        buf.write("\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205")
        buf.write("\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\5\u0205\u1f04")
        buf.write("\n\u0205\3\u0206\3\u0206\3\u0206\5\u0206\u1f09\n\u0206")
        buf.write("\3\u0206\5\u0206\u1f0c\n\u0206\3\u0206\3\u0206\3\u0206")
        buf.write("\5\u0206\u1f11\n\u0206\5\u0206\u1f13\n\u0206\3\u0206\3")
        buf.write("\u0206\7\u0206\u1f17\n\u0206\f\u0206\16\u0206\u1f1a\13")
        buf.write("\u0206\3\u0207\3\u0207\3\u0207\3\u0207\5\u0207\u1f20\n")
        buf.write("\u0207\3\u0208\3\u0208\3\u0209\3\u0209\3\u0209\5\u0209")
        buf.write("\u1f27\n\u0209\3\u0209\3\u0209\3\u0209\3\u0209\5\u0209")
        buf.write("\u1f2d\n\u0209\3\u0209\3\u0209\3\u0209\3\u0209\5\u0209")
        buf.write("\u1f33\n\u0209\3\u0209\3\u0209\3\u0209\3\u0209\5\u0209")
        buf.write("\u1f39\n\u0209\3\u0209\3\u0209\3\u0209\5\u0209\u1f3e\n")
        buf.write("\u0209\5\u0209\u1f40\n\u0209\3\u0209\5\u0209\u1f43\n\u0209")
        buf.write("\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209")
        buf.write("\3\u0209\5\u0209\u1f4d\n\u0209\3\u0209\5\u0209\u1f50\n")
        buf.write("\u0209\5\u0209\u1f52\n\u0209\5\u0209\u1f54\n\u0209\3\u0209")
        buf.write("\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209")
        buf.write("\3\u0209\3\u0209\3\u0209\3\u0209\5\u0209\u1f62\n\u0209")
        buf.write("\3\u020a\3\u020a\3\u020b\3\u020b\3\u020b\3\u020c\3\u020c")
        buf.write("\3\u020d\3\u020d\3\u020e\3\u020e\5\u020e\u1f6f\n\u020e")
        buf.write("\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f")
        buf.write("\5\u020f\u1f78\n\u020f\3\u0210\3\u0210\3\u0210\5\u0210")
        buf.write("\u1f7d\n\u0210\3\u0211\3\u0211\3\u0211\5\u0211\u1f82\n")
        buf.write("\u0211\3\u0212\3\u0212\3\u0212\5\u0212\u1f87\n\u0212\3")
        buf.write("\u0213\3\u0213\3\u0213\3\u0213\3\u0214\3\u0214\3\u0214")
        buf.write("\2\b\u0280\u028c\u0330\u0342\u0352\u0368\u0215\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0")
        buf.write("\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102")
        buf.write("\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114")
        buf.write("\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126")
        buf.write("\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138")
        buf.write("\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a")
        buf.write("\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c")
        buf.write("\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e")
        buf.write("\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180")
        buf.write("\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192")
        buf.write("\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4")
        buf.write("\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6")
        buf.write("\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8")
        buf.write("\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da")
        buf.write("\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec")
        buf.write("\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe")
        buf.write("\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210")
        buf.write("\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222")
        buf.write("\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234")
        buf.write("\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246")
        buf.write("\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258")
        buf.write("\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a")
        buf.write("\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c")
        buf.write("\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e")
        buf.write("\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0")
        buf.write("\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2")
        buf.write("\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4")
        buf.write("\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6")
        buf.write("\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8")
        buf.write("\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa")
        buf.write("\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c")
        buf.write("\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e")
        buf.write("\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330")
        buf.write("\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342")
        buf.write("\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354")
        buf.write("\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366")
        buf.write("\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378")
        buf.write("\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a")
        buf.write("\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c")
        buf.write("\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae")
        buf.write("\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0")
        buf.write("\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2")
        buf.write("\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4")
        buf.write("\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6")
        buf.write("\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408")
        buf.write("\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418\u041a")
        buf.write("\u041c\u041e\u0420\u0422\u0424\u0426\2l\3\2\u027e\u027e")
        buf.write("\4\2++\u020d\u020d\4\2\u0147\u0147\u01d4\u01d4\4\2\u00ee")
        buf.write("\u00ee\u0227\u0227\4\2\27\27\u0085\u0085\5\2\61\61\u00fa")
        buf.write("\u00fa\u0201\u0201\4\2!!\u01b9\u01b9\4\2\24\24\u0187\u0187")
        buf.write("\4\2\u00cb\u00cb\u0112\u0112\4\2\u0083\u0083\u0182\u0182")
        buf.write("\4\2\67\67\u0136\u0136\4\2~~\u00b9\u00b9\4\2\u0145\u0145")
        buf.write("\u01ab\u01ab\4\2\u0081\u0081\u00d2\u00d2\4\2\u020e\u020e")
        buf.write("\u026c\u026c\5\2~~\u00f4\u00f4\u0191\u0191\5\2~~\u00f4")
        buf.write("\u00f4\u0140\u0140\5\2\u00ae\u00ae\u010d\u010d\u013b\u013b")
        buf.write("\4\2\u00c2\u00c2\u0106\u0106\4\2\u0109\u0109\u021b\u021b")
        buf.write("\4\2\u0144\u0144\u019a\u019a\4\2\u0088\u0088\u0095\u0095")
        buf.write("\4\2\u0149\u0149\u021a\u021a\4\2}}\u00f5\u00f5\5\2\u00cb")
        buf.write("\u00cb\u0112\u0112\u011a\u011a\4\2\u0108\u0108\u01ee\u01ee")
        buf.write("\4\2\r\r\u0089\u0089\4\2\u008e\u008e\u00f4\u00f4\4\2\u011e")
        buf.write("\u011e\u013e\u013e\4\2\u008e\u008e\u01c4\u01c4\4\2\u00bd")
        buf.write("\u00bd\u0173\u0173\4\2\26\26\u00ef\u00ef\4\2\n\n\u0176")
        buf.write("\u0176\4\2\u00c8\u00c8\u0189\u0189\4\2FF\u015f\u015f\5")
        buf.write("\2//\u0167\u0167\u01d6\u01d6\4\2\b\b##\5\2\u0083\u0083")
        buf.write("\u00e4\u00e4\u0213\u0213\5\2\u0132\u0132\u0156\u0156\u016b")
        buf.write("\u016b\4\2\u00b9\u00b9\u021a\u021a\4\2//\u01d6\u01d6\4")
        buf.write("\2\7\7\u008e\u008e\5\2\7\7\u008e\u008e\u0125\u0125\5\2")
        buf.write("jj\u015e\u015e\u01d7\u01d7\4\2\u0114\u0114\u015f\u015f")
        buf.write("\4\2\u011b\u011b\u01de\u01de\5\2\u00af\u00af\u00e6\u00e6")
        buf.write("\u0166\u0166\4\2hh\u0082\u0082\6\2\u00d3\u00d3\u00e3\u00e3")
        buf.write("\u0138\u0138\u0162\u0162\4\2~~\u027b\u027b\3\2\u0174\u0175")
        buf.write("\3\3\u027e\u027e\3\2\u01a2\u01a3\4\2\u0159\u0159\u0232")
        buf.write("\u0232\3\2XY\4\2\u014a\u014a\u0228\u0228\4\2\"\"\u00d2")
        buf.write("\u00d2\4\2\62\62\u0084\u0084\6\2\u009e\u009e\u00ea\u00ea")
        buf.write("\u011f\u011f\u020c\u020c\5\2\13\13\u008b\u008b\u020d\u020d")
        buf.write("\5\2\u00bf\u00bf\u00fb\u00fb\u01a7\u01a7\4\2\u01b5\u01b5")
        buf.write("\u01f6\u01f6\5\2\u01b5\u01b5\u01d2\u01d2\u01f6\u01f6\4")
        buf.write("\2\u00a2\u00a2\u00d4\u00d4\4\2ff\u01a9\u01a9\4\2\u00d0")
        buf.write("\u00d0\u00f4\u00f4\4\2\13\13\u0214\u0214\4\2\36\36\u01bf")
        buf.write("\u01bf\4\2\u00b0\u00b0\u00f8\u00f8\4\2\13\13\u00b0\u00b0")
        buf.write("\4\2\u01ed\u01ed\u01f3\u01f3\4\2\u011b\u011b\u01e3\u01e3")
        buf.write("\4\2\u00d1\u00d1\u0100\u0103\5\2\u0270\u0270\u0275\u0275")
        buf.write("\u0279\u0279\3\2\u0276\u0277\4\2{{\u00d6\u00d6\6\2\13")
        buf.write("\13\22\22\u00a5\u00a5\u01d3\u01d3\4\2<<\u0237\u0237\4")
        buf.write("\2\u008b\u008b\u020d\u020d\4\299PP\4\2\u00b1\u00b1\u00f9")
        buf.write("\u00f9\4\2>>\u012f\u012f\4\2\u0238\u0238\u023b\u023b\4")
        buf.write("\2\u0099\u0099\u013a\u013a\4\2\u009d\u009d\u0129\u0129")
        buf.write("\4\2[[\u008c\u008c\4\2\u00ca\u00ca\u01c8\u01c8\3\2\u0257")
        buf.write("\u0266\3\2\u0250\u0256\3\2\u024a\u024f\4\2\u0189\u0189")
        buf.write("\u01ad\u01ad\4\2\u00b5\u00b5\u017f\u017f\4\2\u0146\u0146")
        buf.write("\u01b4\u01b4\4\2\u0161\u0161\u01d8\u01d8\5\2\u00ab\u00ab")
        buf.write("\u01e9\u01e9\u0229\u0229\4\2MM\u01a8\u01a8\5\2MM\u0140")
        buf.write("\u0140\u01a8\u01a8\4\2\u016c\u016c\u01e4\u01e4\4\2\u00d0")
        buf.write("\u00d0\u019d\u019d\4\2pp\u0246\u0246\4\2\u0126\u0126\u01b8")
        buf.write("\u01b8\4\2\65\65==\6\2pp\u00cc\u00cc\u0120\u0120\u01b8")
        buf.write("\u01b8\3\2\u026c\u026d\4\2\u0267\u0267\u026e\u026e~\2")
        buf.write("\6\n\20\20\25\25\30\37\"#&&(*-\61\63\63\65\668:<?BBDH")
        buf.write("JJLNPRTTWbefhmotvwy{\177\177\u0081\u0082\u0086\u0088\u008a")
        buf.write("\u008a\u008c\u008d\u008f\u0091\u0094\u0096\u0099\u009d")
        buf.write("\u009f\u00a2\u00a4\u00a4\u00a6\u00a7\u00a9\u00ab\u00af")
        buf.write("\u00b1\u00b4\u00b6\u00b8\u00b9\u00bf\u00c0\u00c7\u00c8")
        buf.write("\u00ca\u00ca\u00cc\u00cc\u00d0\u00d0\u00d2\u00d2\u00d4")
        buf.write("\u00d7\u00d9\u00d9\u00db\u00dd\u00e1\u00e3\u00e6\u00e9")
        buf.write("\u00eb\u00eb\u00ed\u00ed\u00f0\u00f4\u00f7\u00fb\u00fd")
        buf.write("\u00fd\u00ff\u00ff\u0101\u0106\u010b\u010c\u010e\u0111")
        buf.write("\u0113\u0114\u0116\u0116\u0118\u0119\u011b\u011c\u0120")
        buf.write("\u0122\u0124\u0126\u0128\u0132\u0134\u0135\u0138\u013a")
        buf.write("\u0140\u0140\u0146\u0146\u014b\u014b\u014d\u0151\u0153")
        buf.write("\u0154\u0156\u0156\u0159\u015a\u015e\u015e\u0160\u0164")
        buf.write("\u0166\u0167\u0169\u016e\u0176\u0176\u0178\u0179\u017c")
        buf.write("\u0181\u0188\u018b\u018d\u018d\u018f\u018f\u0192\u0193")
        buf.write("\u0195\u0196\u0199\u0199\u019b\u01a0\u01a2\u01a5\u01a7")
        buf.write("\u01aa\u01ac\u01ae\u01b0\u01b5\u01b8\u01b8\u01ba\u01bb")
        buf.write("\u01bd\u01bd\u01bf\u01c6\u01c8\u01c8\u01ca\u01d3\u01d6")
        buf.write("\u01d9\u01db\u01df\u01e2\u01e4\u01e6\u01e9\u01eb\u01eb")
        buf.write("\u01ee\u01ee\u01f5\u01fd\u01ff\u0206\u0208\u020b\u020e")
        buf.write("\u020e\u0210\u0210\u0214\u0214\u0216\u0218\u021a\u021b")
        buf.write("\u021d\u0220\u0222\u0225\u0228\u022a\u022c\u022c\u022e")
        buf.write("\u022e\u0230\u0232\u0234\u023b\u023d\u0241\u0243\u0244")
        buf.write("\u0246\u0266\u0291\u0291\2\u23cb\2\u0429\3\2\2\2\4\u0430")
        buf.write("\3\2\2\2\6\u0446\3\2\2\2\b\u044a\3\2\2\2\n\u0452\3\2\2")
        buf.write("\2\f\u046d\3\2\2\2\16\u046f\3\2\2\2\20\u047e\3\2\2\2\22")
        buf.write("\u0486\3\2\2\2\24\u0496\3\2\2\2\26\u049a\3\2\2\2\30\u049f")
        buf.write("\3\2\2\2\32\u04a1\3\2\2\2\34\u04a3\3\2\2\2\36\u04aa\3")
        buf.write("\2\2\2 \u04ac\3\2\2\2\"\u04c2\3\2\2\2$\u04d1\3\2\2\2&")
        buf.write("\u04d3\3\2\2\2(\u04e4\3\2\2\2*\u04f8\3\2\2\2,\u04fe\3")
        buf.write("\2\2\2.\u0565\3\2\2\2\60\u0567\3\2\2\2\62\u056f\3\2\2")
        buf.write("\2\64\u0594\3\2\2\2\66\u05a5\3\2\2\28\u05a7\3\2\2\2:\u05bf")
        buf.write("\3\2\2\2<\u05c1\3\2\2\2>\u05c6\3\2\2\2@\u05cf\3\2\2\2")
        buf.write("B\u05f4\3\2\2\2D\u05f6\3\2\2\2F\u05fd\3\2\2\2H\u0616\3")
        buf.write("\2\2\2J\u0653\3\2\2\2L\u0662\3\2\2\2N\u06a2\3\2\2\2P\u06a4")
        buf.write("\3\2\2\2R\u06a6\3\2\2\2T\u06b7\3\2\2\2V\u06bb\3\2\2\2")
        buf.write("X\u06bd\3\2\2\2Z\u06d5\3\2\2\2\\\u06de\3\2\2\2^\u06ed")
        buf.write("\3\2\2\2`\u0711\3\2\2\2b\u0727\3\2\2\2d\u075f\3\2\2\2")
        buf.write("f\u0763\3\2\2\2h\u079a\3\2\2\2j\u079c\3\2\2\2l\u07b3\3")
        buf.write("\2\2\2n\u07c5\3\2\2\2p\u07cc\3\2\2\2r\u07f6\3\2\2\2t\u07f8")
        buf.write("\3\2\2\2v\u07fe\3\2\2\2x\u0811\3\2\2\2z\u0813\3\2\2\2")
        buf.write("|\u0828\3\2\2\2~\u082e\3\2\2\2\u0080\u0836\3\2\2\2\u0082")
        buf.write("\u0841\3\2\2\2\u0084\u0845\3\2\2\2\u0086\u0866\3\2\2\2")
        buf.write("\u0088\u086a\3\2\2\2\u008a\u0873\3\2\2\2\u008c\u0875\3")
        buf.write("\2\2\2\u008e\u088c\3\2\2\2\u0090\u088e\3\2\2\2\u0092\u08b3")
        buf.write("\3\2\2\2\u0094\u08cb\3\2\2\2\u0096\u08cf\3\2\2\2\u0098")
        buf.write("\u08df\3\2\2\2\u009a\u08e3\3\2\2\2\u009c\u08eb\3\2\2\2")
        buf.write("\u009e\u08ef\3\2\2\2\u00a0\u0900\3\2\2\2\u00a2\u0904\3")
        buf.write("\2\2\2\u00a4\u090e\3\2\2\2\u00a6\u0917\3\2\2\2\u00a8\u092e")
        buf.write("\3\2\2\2\u00aa\u0949\3\2\2\2\u00ac\u094d\3\2\2\2\u00ae")
        buf.write("\u0955\3\2\2\2\u00b0\u095c\3\2\2\2\u00b2\u0960\3\2\2\2")
        buf.write("\u00b4\u0970\3\2\2\2\u00b6\u0997\3\2\2\2\u00b8\u09c1\3")
        buf.write("\2\2\2\u00ba\u09c5\3\2\2\2\u00bc\u09d3\3\2\2\2\u00be\u09dd")
        buf.write("\3\2\2\2\u00c0\u09df\3\2\2\2\u00c2\u0a09\3\2\2\2\u00c4")
        buf.write("\u0a18\3\2\2\2\u00c6\u0a2c\3\2\2\2\u00c8\u0a43\3\2\2\2")
        buf.write("\u00ca\u0a52\3\2\2\2\u00cc\u0a5a\3\2\2\2\u00ce\u0a83\3")
        buf.write("\2\2\2\u00d0\u0a8a\3\2\2\2\u00d2\u0a93\3\2\2\2\u00d4\u0ab5")
        buf.write("\3\2\2\2\u00d6\u0abd\3\2\2\2\u00d8\u0ac5\3\2\2\2\u00da")
        buf.write("\u0acc\3\2\2\2\u00dc\u0ace\3\2\2\2\u00de\u0ae6\3\2\2\2")
        buf.write("\u00e0\u0b0e\3\2\2\2\u00e2\u0b1f\3\2\2\2\u00e4\u0b35\3")
        buf.write("\2\2\2\u00e6\u0b5d\3\2\2\2\u00e8\u0b71\3\2\2\2\u00ea\u0b84")
        buf.write("\3\2\2\2\u00ec\u0b8a\3\2\2\2\u00ee\u0b99\3\2\2\2\u00f0")
        buf.write("\u0bb2\3\2\2\2\u00f2\u0bb7\3\2\2\2\u00f4\u0bc2\3\2\2\2")
        buf.write("\u00f6\u0bc4\3\2\2\2\u00f8\u0c09\3\2\2\2\u00fa\u0c10\3")
        buf.write("\2\2\2\u00fc\u0c19\3\2\2\2\u00fe\u0c27\3\2\2\2\u0100\u0c6b")
        buf.write("\3\2\2\2\u0102\u0c7d\3\2\2\2\u0104\u0c87\3\2\2\2\u0106")
        buf.write("\u0c9b\3\2\2\2\u0108\u0cae\3\2\2\2\u010a\u0cd4\3\2\2\2")
        buf.write("\u010c\u0cd6\3\2\2\2\u010e\u0ce6\3\2\2\2\u0110\u0cec\3")
        buf.write("\2\2\2\u0112\u0cf6\3\2\2\2\u0114\u0cfe\3\2\2\2\u0116\u0d04")
        buf.write("\3\2\2\2\u0118\u0d0c\3\2\2\2\u011a\u0d10\3\2\2\2\u011c")
        buf.write("\u0d20\3\2\2\2\u011e\u0d22\3\2\2\2\u0120\u0d36\3\2\2\2")
        buf.write("\u0122\u0d3e\3\2\2\2\u0124\u0d72\3\2\2\2\u0126\u0d74\3")
        buf.write("\2\2\2\u0128\u0d76\3\2\2\2\u012a\u0d78\3\2\2\2\u012c\u0d8c")
        buf.write("\3\2\2\2\u012e\u0d92\3\2\2\2\u0130\u0d98\3\2\2\2\u0132")
        buf.write("\u0d9c\3\2\2\2\u0134\u0db8\3\2\2\2\u0136\u0dc8\3\2\2\2")
        buf.write("\u0138\u0dd8\3\2\2\2\u013a\u0dee\3\2\2\2\u013c\u0e38\3")
        buf.write("\2\2\2\u013e\u0e3a\3\2\2\2\u0140\u0e42\3\2\2\2\u0142\u0e44")
        buf.write("\3\2\2\2\u0144\u0e46\3\2\2\2\u0146\u0e4e\3\2\2\2\u0148")
        buf.write("\u0e50\3\2\2\2\u014a\u0e71\3\2\2\2\u014c\u0e75\3\2\2\2")
        buf.write("\u014e\u0e79\3\2\2\2\u0150\u0e8f\3\2\2\2\u0152\u0ec1\3")
        buf.write("\2\2\2\u0154\u0ec5\3\2\2\2\u0156\u0edd\3\2\2\2\u0158\u0ee1")
        buf.write("\3\2\2\2\u015a\u0eed\3\2\2\2\u015c\u0efb\3\2\2\2\u015e")
        buf.write("\u0f02\3\2\2\2\u0160\u0f16\3\2\2\2\u0162\u0f20\3\2\2\2")
        buf.write("\u0164\u0f31\3\2\2\2\u0166\u0f49\3\2\2\2\u0168\u0f4b\3")
        buf.write("\2\2\2\u016a\u0f5c\3\2\2\2\u016c\u0f7f\3\2\2\2\u016e\u0f81")
        buf.write("\3\2\2\2\u0170\u0f85\3\2\2\2\u0172\u0f9b\3\2\2\2\u0174")
        buf.write("\u0fbe\3\2\2\2\u0176\u0fc2\3\2\2\2\u0178\u0fd9\3\2\2\2")
        buf.write("\u017a\u0ff0\3\2\2\2\u017c\u0ff9\3\2\2\2\u017e\u1002\3")
        buf.write("\2\2\2\u0180\u100b\3\2\2\2\u0182\u100f\3\2\2\2\u0184\u1014")
        buf.write("\3\2\2\2\u0186\u102c\3\2\2\2\u0188\u102e\3\2\2\2\u018a")
        buf.write("\u1032\3\2\2\2\u018c\u1066\3\2\2\2\u018e\u1082\3\2\2\2")
        buf.write("\u0190\u1084\3\2\2\2\u0192\u1092\3\2\2\2\u0194\u109e\3")
        buf.write("\2\2\2\u0196\u10a3\3\2\2\2\u0198\u10a9\3\2\2\2\u019a\u10ac")
        buf.write("\3\2\2\2\u019c\u10b5\3\2\2\2\u019e\u10c2\3\2\2\2\u01a0")
        buf.write("\u10d3\3\2\2\2\u01a2\u10e4\3\2\2\2\u01a4\u10ec\3\2\2\2")
        buf.write("\u01a6\u10f1\3\2\2\2\u01a8\u1101\3\2\2\2\u01aa\u1105\3")
        buf.write("\2\2\2\u01ac\u111d\3\2\2\2\u01ae\u1120\3\2\2\2\u01b0\u1126")
        buf.write("\3\2\2\2\u01b2\u1130\3\2\2\2\u01b4\u1139\3\2\2\2\u01b6")
        buf.write("\u1155\3\2\2\2\u01b8\u115b\3\2\2\2\u01ba\u115e\3\2\2\2")
        buf.write("\u01bc\u1165\3\2\2\2\u01be\u116d\3\2\2\2\u01c0\u1179\3")
        buf.write("\2\2\2\u01c2\u117b\3\2\2\2\u01c4\u117f\3\2\2\2\u01c6\u1185")
        buf.write("\3\2\2\2\u01c8\u11a1\3\2\2\2\u01ca\u11c3\3\2\2\2\u01cc")
        buf.write("\u11f3\3\2\2\2\u01ce\u11fd\3\2\2\2\u01d0\u11ff\3\2\2\2")
        buf.write("\u01d2\u1204\3\2\2\2\u01d4\u1212\3\2\2\2\u01d6\u1214\3")
        buf.write("\2\2\2\u01d8\u1219\3\2\2\2\u01da\u1229\3\2\2\2\u01dc\u124a")
        buf.write("\3\2\2\2\u01de\u126d\3\2\2\2\u01e0\u1271\3\2\2\2\u01e2")
        buf.write("\u1280\3\2\2\2\u01e4\u1282\3\2\2\2\u01e6\u1285\3\2\2\2")
        buf.write("\u01e8\u1289\3\2\2\2\u01ea\u1291\3\2\2\2\u01ec\u12ab\3")
        buf.write("\2\2\2\u01ee\u12ad\3\2\2\2\u01f0\u12b1\3\2\2\2\u01f2\u12b4")
        buf.write("\3\2\2\2\u01f4\u12b8\3\2\2\2\u01f6\u12bd\3\2\2\2\u01f8")
        buf.write("\u12c1\3\2\2\2\u01fa\u12d2\3\2\2\2\u01fc\u12df\3\2\2\2")
        buf.write("\u01fe\u12f0\3\2\2\2\u0200\u12fd\3\2\2\2\u0202\u1309\3")
        buf.write("\2\2\2\u0204\u130b\3\2\2\2\u0206\u1319\3\2\2\2\u0208\u132a")
        buf.write("\3\2\2\2\u020a\u1343\3\2\2\2\u020c\u134d\3\2\2\2\u020e")
        buf.write("\u1351\3\2\2\2\u0210\u1376\3\2\2\2\u0212\u1378\3\2\2\2")
        buf.write("\u0214\u1391\3\2\2\2\u0216\u139c\3\2\2\2\u0218\u13a3\3")
        buf.write("\2\2\2\u021a\u13a7\3\2\2\2\u021c\u13b9\3\2\2\2\u021e\u13c1")
        buf.write("\3\2\2\2\u0220\u13cc\3\2\2\2\u0222\u13d3\3\2\2\2\u0224")
        buf.write("\u13d7\3\2\2\2\u0226\u13f7\3\2\2\2\u0228\u13fb\3\2\2\2")
        buf.write("\u022a\u1400\3\2\2\2\u022c\u1408\3\2\2\2\u022e\u1410\3")
        buf.write("\2\2\2\u0230\u1413\3\2\2\2\u0232\u1423\3\2\2\2\u0234\u1428")
        buf.write("\3\2\2\2\u0236\u142c\3\2\2\2\u0238\u1450\3\2\2\2\u023a")
        buf.write("\u1452\3\2\2\2\u023c\u1468\3\2\2\2\u023e\u146a\3\2\2\2")
        buf.write("\u0240\u146f\3\2\2\2\u0242\u1471\3\2\2\2\u0244\u1473\3")
        buf.write("\2\2\2\u0246\u1475\3\2\2\2\u0248\u1479\3\2\2\2\u024a\u147e")
        buf.write("\3\2\2\2\u024c\u1484\3\2\2\2\u024e\u1492\3\2\2\2\u0250")
        buf.write("\u14a6\3\2\2\2\u0252\u14ab\3\2\2\2\u0254\u14b8\3\2\2\2")
        buf.write("\u0256\u14ba\3\2\2\2\u0258\u14c8\3\2\2\2\u025a\u14d2\3")
        buf.write("\2\2\2\u025c\u14d8\3\2\2\2\u025e\u14da\3\2\2\2\u0260\u14dd")
        buf.write("\3\2\2\2\u0262\u14e2\3\2\2\2\u0264\u14fa\3\2\2\2\u0266")
        buf.write("\u1509\3\2\2\2\u0268\u150b\3\2\2\2\u026a\u1520\3\2\2\2")
        buf.write("\u026c\u152f\3\2\2\2\u026e\u1545\3\2\2\2\u0270\u154c\3")
        buf.write("\2\2\2\u0272\u1559\3\2\2\2\u0274\u155c\3\2\2\2\u0276\u1571")
        buf.write("\3\2\2\2\u0278\u1575\3\2\2\2\u027a\u157e\3\2\2\2\u027c")
        buf.write("\u158f\3\2\2\2\u027e\u15ba\3\2\2\2\u0280\u15d0\3\2\2\2")
        buf.write("\u0282\u15dd\3\2\2\2\u0284\u15e1\3\2\2\2\u0286\u1615\3")
        buf.write("\2\2\2\u0288\u1617\3\2\2\2\u028a\u1620\3\2\2\2\u028c\u1637")
        buf.write("\3\2\2\2\u028e\u164a\3\2\2\2\u0290\u164d\3\2\2\2\u0292")
        buf.write("\u165b\3\2\2\2\u0294\u165e\3\2\2\2\u0296\u1675\3\2\2\2")
        buf.write("\u0298\u1677\3\2\2\2\u029a\u1690\3\2\2\2\u029c\u1692\3")
        buf.write("\2\2\2\u029e\u16a3\3\2\2\2\u02a0\u16aa\3\2\2\2\u02a2\u16b9")
        buf.write("\3\2\2\2\u02a4\u16d0\3\2\2\2\u02a6\u16d6\3\2\2\2\u02a8")
        buf.write("\u16d8\3\2\2\2\u02aa\u16f0\3\2\2\2\u02ac\u1708\3\2\2\2")
        buf.write("\u02ae\u172c\3\2\2\2\u02b0\u172e\3\2\2\2\u02b2\u1732\3")
        buf.write("\2\2\2\u02b4\u173f\3\2\2\2\u02b6\u1741\3\2\2\2\u02b8\u174d")
        buf.write("\3\2\2\2\u02ba\u175d\3\2\2\2\u02bc\u175f\3\2\2\2\u02be")
        buf.write("\u1762\3\2\2\2\u02c0\u177c\3\2\2\2\u02c2\u177e\3\2\2\2")
        buf.write("\u02c4\u1782\3\2\2\2\u02c6\u1791\3\2\2\2\u02c8\u179d\3")
        buf.write("\2\2\2\u02ca\u17a5\3\2\2\2\u02cc\u17a9\3\2\2\2\u02ce\u17b4")
        buf.write("\3\2\2\2\u02d0\u17b9\3\2\2\2\u02d2\u17c6\3\2\2\2\u02d4")
        buf.write("\u17da\3\2\2\2\u02d6\u17e3\3\2\2\2\u02d8\u17e5\3\2\2\2")
        buf.write("\u02da\u17ec\3\2\2\2\u02dc\u17f1\3\2\2\2\u02de\u17fe\3")
        buf.write("\2\2\2\u02e0\u1806\3\2\2\2\u02e2\u180e\3\2\2\2\u02e4\u181c")
        buf.write("\3\2\2\2\u02e6\u181e\3\2\2\2\u02e8\u1821\3\2\2\2\u02ea")
        buf.write("\u1830\3\2\2\2\u02ec\u184a\3\2\2\2\u02ee\u184c\3\2\2\2")
        buf.write("\u02f0\u185a\3\2\2\2\u02f2\u185f\3\2\2\2\u02f4\u1871\3")
        buf.write("\2\2\2\u02f6\u1875\3\2\2\2\u02f8\u187d\3\2\2\2\u02fa\u1887")
        buf.write("\3\2\2\2\u02fc\u188f\3\2\2\2\u02fe\u1895\3\2\2\2\u0300")
        buf.write("\u189a\3\2\2\2\u0302\u18a3\3\2\2\2\u0304\u18bc\3\2\2\2")
        buf.write("\u0306\u18cf\3\2\2\2\u0308\u18d3\3\2\2\2\u030a\u18d6\3")
        buf.write("\2\2\2\u030c\u18e8\3\2\2\2\u030e\u18ed\3\2\2\2\u0310\u1900")
        buf.write("\3\2\2\2\u0312\u1902\3\2\2\2\u0314\u1912\3\2\2\2\u0316")
        buf.write("\u191a\3\2\2\2\u0318\u191f\3\2\2\2\u031a\u192a\3\2\2\2")
        buf.write("\u031c\u1935\3\2\2\2\u031e\u1938\3\2\2\2\u0320\u194a\3")
        buf.write("\2\2\2\u0322\u194c\3\2\2\2\u0324\u195b\3\2\2\2\u0326\u1966")
        buf.write("\3\2\2\2\u0328\u1974\3\2\2\2\u032a\u1979\3\2\2\2\u032c")
        buf.write("\u197e\3\2\2\2\u032e\u198b\3\2\2\2\u0330\u1997\3\2\2\2")
        buf.write("\u0332\u19d1\3\2\2\2\u0334\u19ee\3\2\2\2\u0336\u19f2\3")
        buf.write("\2\2\2\u0338\u19fa\3\2\2\2\u033a\u19fc\3\2\2\2\u033c\u19fe")
        buf.write("\3\2\2\2\u033e\u1a01\3\2\2\2\u0340\u1a05\3\2\2\2\u0342")
        buf.write("\u1a0d\3\2\2\2\u0344\u1a43\3\2\2\2\u0346\u1a45\3\2\2\2")
        buf.write("\u0348\u1a61\3\2\2\2\u034a\u1a63\3\2\2\2\u034c\u1a73\3")
        buf.write("\2\2\2\u034e\u1a76\3\2\2\2\u0350\u1a78\3\2\2\2\u0352\u1aa6")
        buf.write("\3\2\2\2\u0354\u1ab4\3\2\2\2\u0356\u1ab7\3\2\2\2\u0358")
        buf.write("\u1aca\3\2\2\2\u035a\u1ad2\3\2\2\2\u035c\u1ae4\3\2\2\2")
        buf.write("\u035e\u1aeb\3\2\2\2\u0360\u1b02\3\2\2\2\u0362\u1b04\3")
        buf.write("\2\2\2\u0364\u1b08\3\2\2\2\u0366\u1b11\3\2\2\2\u0368\u1c58")
        buf.write("\3\2\2\2\u036a\u1c74\3\2\2\2\u036c\u1c76\3\2\2\2\u036e")
        buf.write("\u1c78\3\2\2\2\u0370\u1c7a\3\2\2\2\u0372\u1c7c\3\2\2\2")
        buf.write("\u0374\u1c89\3\2\2\2\u0376\u1c92\3\2\2\2\u0378\u1c9b\3")
        buf.write("\2\2\2\u037a\u1c9d\3\2\2\2\u037c\u1cae\3\2\2\2\u037e\u1cb4")
        buf.write("\3\2\2\2\u0380\u1cbf\3\2\2\2\u0382\u1cc1\3\2\2\2\u0384")
        buf.write("\u1cd5\3\2\2\2\u0386\u1ce3\3\2\2\2\u0388\u1cf5\3\2\2\2")
        buf.write("\u038a\u1d0a\3\2\2\2\u038c\u1d17\3\2\2\2\u038e\u1d1a\3")
        buf.write("\2\2\2\u0390\u1d23\3\2\2\2\u0392\u1d29\3\2\2\2\u0394\u1d31")
        buf.write("\3\2\2\2\u0396\u1d34\3\2\2\2\u0398\u1d3f\3\2\2\2\u039a")
        buf.write("\u1d47\3\2\2\2\u039c\u1d49\3\2\2\2\u039e\u1d52\3\2\2\2")
        buf.write("\u03a0\u1d5b\3\2\2\2\u03a2\u1d5d\3\2\2\2\u03a4\u1d63\3")
        buf.write("\2\2\2\u03a6\u1d65\3\2\2\2\u03a8\u1d73\3\2\2\2\u03aa\u1d76")
        buf.write("\3\2\2\2\u03ac\u1d7c\3\2\2\2\u03ae\u1d7e\3\2\2\2\u03b0")
        buf.write("\u1d83\3\2\2\2\u03b2\u1d9b\3\2\2\2\u03b4\u1d9f\3\2\2\2")
        buf.write("\u03b6\u1da1\3\2\2\2\u03b8\u1da3\3\2\2\2\u03ba\u1da5\3")
        buf.write("\2\2\2\u03bc\u1da7\3\2\2\2\u03be\u1da9\3\2\2\2\u03c0\u1dab")
        buf.write("\3\2\2\2\u03c2\u1dad\3\2\2\2\u03c4\u1db9\3\2\2\2\u03c6")
        buf.write("\u1dbb\3\2\2\2\u03c8\u1dc0\3\2\2\2\u03ca\u1dc2\3\2\2\2")
        buf.write("\u03cc\u1dc4\3\2\2\2\u03ce\u1dc6\3\2\2\2\u03d0\u1dce\3")
        buf.write("\2\2\2\u03d2\u1dd0\3\2\2\2\u03d4\u1ddc\3\2\2\2\u03d6\u1dde")
        buf.write("\3\2\2\2\u03d8\u1de6\3\2\2\2\u03da\u1dee\3\2\2\2\u03dc")
        buf.write("\u1df6\3\2\2\2\u03de\u1dfb\3\2\2\2\u03e0\u1e00\3\2\2\2")
        buf.write("\u03e2\u1e07\3\2\2\2\u03e4\u1e09\3\2\2\2\u03e6\u1e0d\3")
        buf.write("\2\2\2\u03e8\u1e11\3\2\2\2\u03ea\u1e13\3\2\2\2\u03ec\u1e18")
        buf.write("\3\2\2\2\u03ee\u1e1a\3\2\2\2\u03f0\u1e22\3\2\2\2\u03f2")
        buf.write("\u1e28\3\2\2\2\u03f4\u1e30\3\2\2\2\u03f6\u1e32\3\2\2\2")
        buf.write("\u03f8\u1e3b\3\2\2\2\u03fa\u1e4a\3\2\2\2\u03fc\u1e5f\3")
        buf.write("\2\2\2\u03fe\u1e89\3\2\2\2\u0400\u1e90\3\2\2\2\u0402\u1e9c")
        buf.write("\3\2\2\2\u0404\u1eba\3\2\2\2\u0406\u1ebc\3\2\2\2\u0408")
        buf.write("\u1f03\3\2\2\2\u040a\u1f08\3\2\2\2\u040c\u1f1f\3\2\2\2")
        buf.write("\u040e\u1f21\3\2\2\2\u0410\u1f61\3\2\2\2\u0412\u1f63\3")
        buf.write("\2\2\2\u0414\u1f65\3\2\2\2\u0416\u1f68\3\2\2\2\u0418\u1f6a")
        buf.write("\3\2\2\2\u041a\u1f6e\3\2\2\2\u041c\u1f77\3\2\2\2\u041e")
        buf.write("\u1f7c\3\2\2\2\u0420\u1f81\3\2\2\2\u0422\u1f86\3\2\2\2")
        buf.write("\u0424\u1f88\3\2\2\2\u0426\u1f8c\3\2\2\2\u0428\u042a\n")
        buf.write("\2\2\2\u0429\u0428\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u0429")
        buf.write("\3\2\2\2\u042b\u042c\3\2\2\2\u042c\3\3\2\2\2\u042d\u042f")
        buf.write("\5\n\6\2\u042e\u042d\3\2\2\2\u042f\u0432\3\2\2\2\u0430")
        buf.write("\u042e\3\2\2\2\u0430\u0431\3\2\2\2\u0431\u0433\3\2\2\2")
        buf.write("\u0432\u0430\3\2\2\2\u0433\u0434\7\2\2\3\u0434\5\3\2\2")
        buf.write("\2\u0435\u0438\5\n\6\2\u0436\u0438\5\u039a\u01ce\2\u0437")
        buf.write("\u0435\3\2\2\2\u0437\u0436\3\2\2\2\u0438\u0440\3\2\2\2")
        buf.write("\u0439\u043c\7\u027e\2\2\u043a\u043d\5\n\6\2\u043b\u043d")
        buf.write("\5\u039a\u01ce\2\u043c\u043a\3\2\2\2\u043c\u043b\3\2\2")
        buf.write("\2\u043d\u043f\3\2\2\2\u043e\u0439\3\2\2\2\u043f\u0442")
        buf.write("\3\2\2\2\u0440\u043e\3\2\2\2\u0440\u0441\3\2\2\2\u0441")
        buf.write("\u0444\3\2\2\2\u0442\u0440\3\2\2\2\u0443\u0445\7\u027e")
        buf.write("\2\2\u0444\u0443\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0447")
        buf.write("\3\2\2\2\u0446\u0437\3\2\2\2\u0446\u0447\3\2\2\2\u0447")
        buf.write("\u0448\3\2\2\2\u0448\u0449\7\2\2\3\u0449\7\3\2\2\2\u044a")
        buf.write("\u044c\7\u00a7\2\2\u044b\u044d\7\20\2\2\u044c\u044b\3")
        buf.write("\2\2\2\u044c\u044d\3\2\2\2\u044d\u044f\3\2\2\2\u044e\u0450")
        buf.write("\7\u0223\2\2\u044f\u044e\3\2\2\2\u044f\u0450\3\2\2\2\u0450")
        buf.write("\t\3\2\2\2\u0451\u0453\5\b\5\2\u0452\u0451\3\2\2\2\u0452")
        buf.write("\u0453\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0455\5\f\7\2")
        buf.write("\u0455\13\3\2\2\2\u0456\u046e\5\u014e\u00a8\2\u0457\u046e")
        buf.write("\5\u015e\u00b0\2\u0458\u046e\5\u0170\u00b9\2\u0459\u046e")
        buf.write("\5\u01e8\u00f5\2\u045a\u046e\5\u0176\u00bc\2\u045b\u046e")
        buf.write("\5\u019c\u00cf\2\u045c\u046e\5\u0104\u0083\2\u045d\u046e")
        buf.write("\5\u0150\u00a9\2\u045e\u046e\5\u0172\u00ba\2\u045f\u046e")
        buf.write("\5\u0160\u00b1\2\u0460\u046e\5\16\b\2\u0461\u046e\5`\61")
        buf.write("\2\u0462\u046e\5\u01ea\u00f6\2\u0463\u046e\5\u0178\u00bd")
        buf.write("\2\u0464\u046e\5\u01b0\u00d9\2\u0465\u046e\5\u014c\u00a7")
        buf.write("\2\u0466\u046e\5\u015c\u00af\2\u0467\u046e\5\u016e\u00b8")
        buf.write("\2\u0468\u046e\5\u01e6\u00f4\2\u0469\u046e\5\u0174\u00bb")
        buf.write("\2\u046a\u046e\5\u019a\u00ce\2\u046b\u046e\5\u025a\u012e")
        buf.write("\2\u046c\u046e\5\u0102\u0082\2\u046d\u0456\3\2\2\2\u046d")
        buf.write("\u0457\3\2\2\2\u046d\u0458\3\2\2\2\u046d\u0459\3\2\2\2")
        buf.write("\u046d\u045a\3\2\2\2\u046d\u045b\3\2\2\2\u046d\u045c\3")
        buf.write("\2\2\2\u046d\u045d\3\2\2\2\u046d\u045e\3\2\2\2\u046d\u045f")
        buf.write("\3\2\2\2\u046d\u0460\3\2\2\2\u046d\u0461\3\2\2\2\u046d")
        buf.write("\u0462\3\2\2\2\u046d\u0463\3\2\2\2\u046d\u0464\3\2\2\2")
        buf.write("\u046d\u0465\3\2\2\2\u046d\u0466\3\2\2\2\u046d\u0467\3")
        buf.write("\2\2\2\u046d\u0468\3\2\2\2\u046d\u0469\3\2\2\2\u046d\u046a")
        buf.write("\3\2\2\2\u046d\u046b\3\2\2\2\u046d\u046c\3\2\2\2\u046e")
        buf.write("\r\3\2\2\2\u046f\u0471\7c\2\2\u0470\u0472\t\3\2\2\u0471")
        buf.write("\u0470\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0473\3\2\2\2")
        buf.write("\u0473\u0474\7\u00d8\2\2\u0474\u0475\5\u03e4\u01f3\2\u0475")
        buf.write("\u0479\7\u0158\2\2\u0476\u047a\5\20\t\2\u0477\u047a\5")
        buf.write(" \21\2\u0478\u047a\5^\60\2\u0479\u0476\3\2\2\2\u0479\u0477")
        buf.write("\3\2\2\2\u0479\u0478\3\2\2\2\u047a\u047c\3\2\2\2\u047b")
        buf.write("\u047d\7\u0211\2\2\u047c\u047b\3\2\2\2\u047c\u047d\3\2")
        buf.write("\2\2\u047d\17\3\2\2\2\u047e\u047f\7F\2\2\u047f\u0481\5")
        buf.write("\22\n\2\u0480\u0482\5\24\13\2\u0481\u0480\3\2\2\2\u0481")
        buf.write("\u0482\3\2\2\2\u0482\21\3\2\2\2\u0483\u0484\5\u041a\u020e")
        buf.write("\2\u0484\u0485\7\u026b\2\2\u0485\u0487\3\2\2\2\u0486\u0483")
        buf.write("\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0488\3\2\2\2\u0488")
        buf.write("\u0489\5\u041a\u020e\2\u0489\23\3\2\2\2\u048a\u0497\5")
        buf.write("\u0082B\2\u048b\u0497\5\u0088E\2\u048c\u048f\7\u01ef\2")
        buf.write("\2\u048d\u0490\5\26\f\2\u048e\u0490\7~\2\2\u048f\u048d")
        buf.write("\3\2\2\2\u048f\u048e\3\2\2\2\u0490\u0497\3\2\2\2\u0491")
        buf.write("\u0497\5\30\r\2\u0492\u0497\5\32\16\2\u0493\u0497\7\u01a5")
        buf.write("\2\2\u0494\u0497\5\34\17\2\u0495\u0497\5\36\20\2\u0496")
        buf.write("\u048a\3\2\2\2\u0496\u048b\3\2\2\2\u0496\u048c\3\2\2\2")
        buf.write("\u0496\u0491\3\2\2\2\u0496\u0492\3\2\2\2\u0496\u0493\3")
        buf.write("\2\2\2\u0496\u0494\3\2\2\2\u0496\u0495\3\2\2\2\u0497\u0498")
        buf.write("\3\2\2\2\u0498\u0496\3\2\2\2\u0498\u0499\3\2\2\2\u0499")
        buf.write("\25\3\2\2\2\u049a\u049b\5\u0426\u0214\2\u049b\27\3\2\2")
        buf.write("\2\u049c\u04a0\7\u0137\2\2\u049d\u049e\7S\2\2\u049e\u04a0")
        buf.write("\7\u026c\2\2\u049f\u049c\3\2\2\2\u049f\u049d\3\2\2\2\u04a0")
        buf.write("\31\3\2\2\2\u04a1\u04a2\t\4\2\2\u04a2\33\3\2\2\2\u04a3")
        buf.write("\u04a4\t\5\2\2\u04a4\35\3\2\2\2\u04a5\u04ab\7\u0143\2")
        buf.write("\2\u04a6\u04a8\7\u0168\2\2\u04a7\u04a9\7\u026c\2\2\u04a8")
        buf.write("\u04a7\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04ab\3\2\2\2")
        buf.write("\u04aa\u04a5\3\2\2\2\u04aa\u04a6\3\2\2\2\u04ab\37\3\2")
        buf.write("\2\2\u04ac\u04ae\5\u03f0\u01f9\2\u04ad\u04af\5\u03aa\u01d6")
        buf.write("\2\u04ae\u04ad\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b0")
        buf.write("\3\2\2\2\u04b0\u04b8\7\u0272\2\2\u04b1\u04b3\7\u0278\2")
        buf.write("\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04b4")
        buf.write("\3\2\2\2\u04b4\u04b6\5\"\22\2\u04b5\u04b7\t\6\2\2\u04b6")
        buf.write("\u04b5\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04b9\3\2\2\2")
        buf.write("\u04b8\u04b2\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04b8\3")
        buf.write("\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04be")
        buf.write("\7\u0273\2\2\u04bd\u04bf\5$\23\2\u04be\u04bd\3\2\2\2\u04be")
        buf.write("\u04bf\3\2\2\2\u04bf!\3\2\2\2\u04c0\u04c3\5\u03ee\u01f8")
        buf.write("\2\u04c1\u04c3\5\u0330\u0199\2\u04c2\u04c0\3\2\2\2\u04c2")
        buf.write("\u04c1\3\2\2\2\u04c3#\3\2\2\2\u04c4\u04c8\5&\24\2\u04c5")
        buf.write("\u04c8\5D#\2\u04c6\u04c8\5\24\13\2\u04c7\u04c4\3\2\2\2")
        buf.write("\u04c7\u04c5\3\2\2\2\u04c7\u04c6\3\2\2\2\u04c8\u04c9\3")
        buf.write("\2\2\2\u04c9\u04c7\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04d2")
        buf.write("\3\2\2\2\u04cb\u04cc\7\u00da\2\2\u04cc\u04cf\7\u00ef\2")
        buf.write("\2\u04cd\u04d0\5R*\2\u04ce\u04d0\5Z.\2\u04cf\u04cd\3\2")
        buf.write("\2\2\u04cf\u04ce\3\2\2\2\u04d0\u04d2\3\2\2\2\u04d1\u04c7")
        buf.write("\3\2\2\2\u04d1\u04cb\3\2\2\2\u04d2%\3\2\2\2\u04d3\u04d4")
        buf.write("\7\u00c2\2\2\u04d4\u04d5\7\u016c\2\2\u04d5\u04e2\7\64")
        buf.write("\2\2\u04d6\u04d7\7\u0189\2\2\u04d7\u04d8\5\u009aN\2\u04d8")
        buf.write("\u04d9\7\u0272\2\2\u04d9\u04da\5(\25\2\u04da\u04db\7\u0273")
        buf.write("\2\2\u04db\u04e3\3\2\2\2\u04dc\u04dd\7\u00c8\2\2\u04dd")
        buf.write("\u04e0\5\u009aN\2\u04de\u04e1\5\62\32\2\u04df\u04e1\5")
        buf.write("@!\2\u04e0\u04de\3\2\2\2\u04e0\u04df\3\2\2\2\u04e1\u04e3")
        buf.write("\3\2\2\2\u04e2\u04d6\3\2\2\2\u04e2\u04dc\3\2\2\2\u04e3")
        buf.write("\'\3\2\2\2\u04e4\u04e6\7\u016c\2\2\u04e5\u04e7\5*\26\2")
        buf.write("\u04e6\u04e5\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e8\3")
        buf.write("\2\2\2\u04e8\u04e9\7\u021c\2\2\u04e9\u04ea\7\u00fc\2\2")
        buf.write("\u04ea\u04eb\7\u01f2\2\2\u04eb\u04f0\7\u0272\2\2\u04ec")
        buf.write("\u04ee\7\u0278\2\2\u04ed\u04ec\3\2\2\2\u04ed\u04ee\3\2")
        buf.write("\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f1\5,\27\2\u04f0\u04ed")
        buf.write("\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f0\3\2\2\2\u04f2")
        buf.write("\u04f3\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f6\7\u0273")
        buf.write("\2\2\u04f5\u04f7\5\u0080A\2\u04f6\u04f5\3\2\2\2\u04f6")
        buf.write("\u04f7\3\2\2\2\u04f7)\3\2\2\2\u04f8\u04f9\5\u0426\u0214")
        buf.write("\2\u04f9+\3\2\2\2\u04fa\u04ff\7\u026e\2\2\u04fb\u04ff")
        buf.write("\5.\30\2\u04fc\u04ff\5\u0412\u020a\2\u04fd\u04ff\7\u0118")
        buf.write("\2\2\u04fe\u04fa\3\2\2\2\u04fe\u04fb\3\2\2\2\u04fe\u04fc")
        buf.write("\3\2\2\2\u04fe\u04fd\3\2\2\2\u04ff-\3\2\2\2\u0500\u0501")
        buf.write("\7\u01e7\2\2\u0501\u0502\7\u0272\2\2\u0502\u0503\5\u0330")
        buf.write("\u0199\2\u0503\u0504\7\u0278\2\2\u0504\u0507\5\u0330\u0199")
        buf.write("\2\u0505\u0506\7\u0278\2\2\u0506\u0508\5\u0330\u0199\2")
        buf.write("\u0507\u0505\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u0509\3")
        buf.write("\2\2\2\u0509\u050a\7\u0273\2\2\u050a\u0566\3\2\2\2\u050b")
        buf.write("\u050c\7\u01e7\2\2\u050c\u050d\7\u0272\2\2\u050d\u0510")
        buf.write("\5\u0330\u0199\2\u050e\u050f\7\u00be\2\2\u050f\u0511\5")
        buf.write("\u0360\u01b1\2\u0510\u050e\3\2\2\2\u0510\u0511\3\2\2\2")
        buf.write("\u0511\u0514\3\2\2\2\u0512\u0513\7\u00b7\2\2\u0513\u0515")
        buf.write("\5\u0360\u01b1\2\u0514\u0512\3\2\2\2\u0514\u0515\3\2\2")
        buf.write("\2\u0515\u0516\3\2\2\2\u0516\u0517\7\u0273\2\2\u0517\u0566")
        buf.write("\3\2\2\2\u0518\u0519\7\u01ff\2\2\u0519\u051d\7\u0272\2")
        buf.write("\2\u051a\u051e\5\u040e\u0208\2\u051b\u051e\5\u0368\u01b5")
        buf.write("\2\u051c\u051e\5\u0330\u0199\2\u051d\u051a\3\2\2\2\u051d")
        buf.write("\u051b\3\2\2\2\u051d\u051c\3\2\2\2\u051e\u0521\3\2\2\2")
        buf.write("\u051f\u0520\7\u0278\2\2\u0520\u0522\5\u0416\u020c\2\u0521")
        buf.write("\u051f\3\2\2\2\u0521\u0522\3\2\2\2\u0522\u0525\3\2\2\2")
        buf.write("\u0523\u0524\7\u0278\2\2\u0524\u0526\5\u0416\u020c\2\u0525")
        buf.write("\u0523\3\2\2\2\u0525\u0526\3\2\2\2\u0526\u0527\3\2\2\2")
        buf.write("\u0527\u0528\7\u0273\2\2\u0528\u0566\3\2\2\2\u0529\u052a")
        buf.write("\7y\2\2\u052a\u052b\7\u0272\2\2\u052b\u052c\5\60\31\2")
        buf.write("\u052c\u052d\7\u0273\2\2\u052d\u0566\3\2\2\2\u052e\u052f")
        buf.write("\7B\2\2\u052f\u0530\7\u0272\2\2\u0530\u0531\5\u0340\u01a1")
        buf.write("\2\u0531\u0532\7\u0219\2\2\u0532\u0533\7\u012f\2\2\u0533")
        buf.write("\u0534\7\u0273\2\2\u0534\u0566\3\2\2\2\u0535\u0536\7\u014b")
        buf.write("\2\2\u0536\u0537\7\u0272\2\2\u0537\u0538\5\u0330\u0199")
        buf.write("\2\u0538\u0539\7\u0278\2\2\u0539\u053a\5\u0330\u0199\2")
        buf.write("\u053a\u053b\7\u0273\2\2\u053b\u0566\3\2\2\2\u053c\u053d")
        buf.write("\7\u0206\2\2\u053d\u0545\7\u0272\2\2\u053e\u0540\t\7\2")
        buf.write("\2\u053f\u053e\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u0542")
        buf.write("\3\2\2\2\u0541\u0543\5\u0416\u020c\2\u0542\u0541\3\2\2")
        buf.write("\2\u0542\u0543\3\2\2\2\u0543\u0544\3\2\2\2\u0544\u0546")
        buf.write("\7\u00be\2\2\u0545\u053f\3\2\2\2\u0545\u0546\3\2\2\2\u0546")
        buf.write("\u0547\3\2\2\2\u0547\u0548\5\u0340\u01a1\2\u0548\u0549")
        buf.write("\7\u0273\2\2\u0549\u0566\3\2\2\2\u054a\u054b\7\u0200\2")
        buf.write("\2\u054b\u054c\7\u0272\2\2\u054c\u054f\5\u0330\u0199\2")
        buf.write("\u054d\u054e\7\u0278\2\2\u054e\u0550\5\u0416\u020c\2\u054f")
        buf.write("\u054d\3\2\2\2\u054f\u0550\3\2\2\2\u0550\u0551\3\2\2\2")
        buf.write("\u0551\u0552\7\u0273\2\2\u0552\u0566\3\2\2\2\u0553\u0554")
        buf.write("\7T\2\2\u0554\u055b\7\u0272\2\2\u0555\u0558\5\u0416\u020c")
        buf.write("\2\u0556\u0558\5\u0330\u0199\2\u0557\u0555\3\2\2\2\u0557")
        buf.write("\u0556\3\2\2\2\u0558\u0559\3\2\2\2\u0559\u055a\7\u0278")
        buf.write("\2\2\u055a\u055c\3\2\2\2\u055b\u0557\3\2\2\2\u055c\u055d")
        buf.write("\3\2\2\2\u055d\u055b\3\2\2\2\u055d\u055e\3\2\2\2\u055e")
        buf.write("\u0561\3\2\2\2\u055f\u0562\5\u0416\u020c\2\u0560\u0562")
        buf.write("\5\u0330\u0199\2\u0561\u055f\3\2\2\2\u0561\u0560\3\2\2")
        buf.write("\2\u0562\u0563\3\2\2\2\u0563\u0564\7\u0273\2\2\u0564\u0566")
        buf.write("\3\2\2\2\u0565\u0500\3\2\2\2\u0565\u050b\3\2\2\2\u0565")
        buf.write("\u0518\3\2\2\2\u0565\u0529\3\2\2\2\u0565\u052e\3\2\2\2")
        buf.write("\u0565\u0535\3\2\2\2\u0565\u053c\3\2\2\2\u0565\u054a\3")
        buf.write("\2\2\2\u0565\u0553\3\2\2\2\u0566/\3\2\2\2\u0567\u056c")
        buf.write("\5\u0330\u0199\2\u0568\u0569\7\u0278\2\2\u0569\u056b\5")
        buf.write("\u0330\u0199\2\u056a\u0568\3\2\2\2\u056b\u056e\3\2\2\2")
        buf.write("\u056c\u056a\3\2\2\2\u056c\u056d\3\2\2\2\u056d\61\3\2")
        buf.write("\2\2\u056e\u056c\3\2\2\2\u056f\u057a\7\u0272\2\2\u0570")
        buf.write("\u0572\7\u0278\2\2\u0571\u0570\3\2\2\2\u0571\u0572\3\2")
        buf.write("\2\2\u0572\u0573\3\2\2\2\u0573\u0575\7\u016c\2\2\u0574")
        buf.write("\u0576\5*\26\2\u0575\u0574\3\2\2\2\u0575\u0576\3\2\2\2")
        buf.write("\u0576\u0578\3\2\2\2\u0577\u0579\5\64\33\2\u0578\u0577")
        buf.write("\3\2\2\2\u0578\u0579\3\2\2\2\u0579\u057b\3\2\2\2\u057a")
        buf.write("\u0571\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u057a\3\2\2\2")
        buf.write("\u057c\u057d\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u057f\7")
        buf.write("\u0273\2\2\u057f\63\3\2\2\2\u0580\u0581\7\u01ef\2\2\u0581")
        buf.write("\u0595\5\26\f\2\u0582\u0585\7\u0165\2\2\u0583\u0584\7")
        buf.write("\u01ef\2\2\u0584\u0586\5\26\f\2\u0585\u0583\3\2\2\2\u0585")
        buf.write("\u0586\3\2\2\2\u0586\u0595\3\2\2\2\u0587\u0595\5\66\34")
        buf.write("\2\u0588\u0595\5\30\r\2\u0589\u0595\58\35\2\u058a\u058b")
        buf.write("\7\u0220\2\2\u058b\u058c\5> \2\u058c\u058d\7\u01e1\2\2")
        buf.write("\u058d\u058f\7\26\2\2\u058e\u0590\t\b\2\2\u058f\u058e")
        buf.write("\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u0591\3\2\2\2\u0591")
        buf.write("\u0592\7\u0107\2\2\u0592\u0593\5<\37\2\u0593\u0595\3\2")
        buf.write("\2\2\u0594\u0580\3\2\2\2\u0594\u0582\3\2\2\2\u0594\u0587")
        buf.write("\3\2\2\2\u0594\u0588\3\2\2\2\u0594\u0589\3\2\2\2\u0594")
        buf.write("\u058a\3\2\2\2\u0595\u0596\3\2\2\2\u0596\u0594\3\2\2\2")
        buf.write("\u0596\u0597\3\2\2\2\u0597\65\3\2\2\2\u0598\u05a2\7S\2")
        buf.write("\2\u0599\u05a3\7 \2\2\u059a\u05a0\7\u00b7\2\2\u059b\u05a1")
        buf.write("\7\u0157\2\2\u059c\u059e\t\t\2\2\u059d\u059f\t\n\2\2\u059e")
        buf.write("\u059d\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a1\3\2\2\2")
        buf.write("\u05a0\u059b\3\2\2\2\u05a0\u059c\3\2\2\2\u05a1\u05a3\3")
        buf.write("\2\2\2\u05a2\u0599\3\2\2\2\u05a2\u059a\3\2\2\2\u05a2\u05a3")
        buf.write("\3\2\2\2\u05a3\u05a6\3\2\2\2\u05a4\u05a6\7\u0137\2\2\u05a5")
        buf.write("\u0598\3\2\2\2\u05a5\u05a4\3\2\2\2\u05a6\67\3\2\2\2\u05a7")
        buf.write("\u05a8\7\u0107\2\2\u05a8\u05a9\7\u0272\2\2\u05a9\u05aa")
        buf.write("\5:\36\2\u05aa\u05ab\7\u0273\2\2\u05ab\u05ac\7\u01e1\2")
        buf.write("\2\u05ac\u05ae\7\26\2\2\u05ad\u05af\t\b\2\2\u05ae\u05ad")
        buf.write("\3\2\2\2\u05ae\u05af\3\2\2\2\u05af\u05bd\3\2\2\2\u05b0")
        buf.write("\u05b6\5<\37\2\u05b1\u05b2\7\u0272\2\2\u05b2\u05b3\7\u01ef")
        buf.write("\2\2\u05b3\u05b4\5\26\f\2\u05b4\u05b5\7\u0273\2\2\u05b5")
        buf.write("\u05b7\3\2\2\2\u05b6\u05b1\3\2\2\2\u05b6\u05b7\3\2\2\2")
        buf.write("\u05b7\u05be\3\2\2\2\u05b8\u05b9\7\u0272\2\2\u05b9\u05ba")
        buf.write("\7\u01ef\2\2\u05ba\u05bb\5\26\f\2\u05bb\u05bc\7\u0273")
        buf.write("\2\2\u05bc\u05be\3\2\2\2\u05bd\u05b0\3\2\2\2\u05bd\u05b8")
        buf.write("\3\2\2\2\u05be9\3\2\2\2\u05bf\u05c0\5\u0426\u0214\2\u05c0")
        buf.write(";\3\2\2\2\u05c1\u05c2\5\u0426\u0214\2\u05c2=\3\2\2\2\u05c3")
        buf.write("\u05c4\5\u041a\u020e\2\u05c4\u05c5\7\u026b\2\2\u05c5\u05c7")
        buf.write("\3\2\2\2\u05c6\u05c3\3\2\2\2\u05c6\u05c7\3\2\2\2\u05c7")
        buf.write("\u05cb\3\2\2\2\u05c8\u05c9\5\u041a\u020e\2\u05c9\u05ca")
        buf.write("\7\u026b\2\2\u05ca\u05cc\3\2\2\2\u05cb\u05c8\3\2\2\2\u05cb")
        buf.write("\u05cc\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd\u05ce\5\u041a")
        buf.write("\u020e\2\u05ce?\3\2\2\2\u05cf\u05d0\7\u017a\2\2\u05d0")
        buf.write("\u05de\5B\"\2\u05d1\u05d2\7\u01e1\2\2\u05d2\u05d3\7\u00d3")
        buf.write("\2\2\u05d3\u05d8\7\u0272\2\2\u05d4\u05d6\7\u0278\2\2\u05d5")
        buf.write("\u05d4\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d7\3\2\2\2")
        buf.write("\u05d7\u05d9\5\26\f\2\u05d8\u05d5\3\2\2\2\u05d9\u05da")
        buf.write("\3\2\2\2\u05da\u05d8\3\2\2\2\u05da\u05db\3\2\2\2\u05db")
        buf.write("\u05dc\3\2\2\2\u05dc\u05dd\7\u0273\2\2\u05dd\u05df\3\2")
        buf.write("\2\2\u05de\u05d1\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e2")
        buf.write("\3\2\2\2\u05e0\u05e3\5\66\34\2\u05e1\u05e3\5\30\r\2\u05e2")
        buf.write("\u05e0\3\2\2\2\u05e2\u05e1\3\2\2\2\u05e2\u05e3\3\2\2\2")
        buf.write("\u05e3\u05f2\3\2\2\2\u05e4\u05e5\7\u0165\2\2\u05e5\u05e6")
        buf.write("\7\u01e1\2\2\u05e6\u05e7\7\u00d3\2\2\u05e7\u05ec\7\u0272")
        buf.write("\2\2\u05e8\u05ea\7\u0278\2\2\u05e9\u05e8\3\2\2\2\u05e9")
        buf.write("\u05ea\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb\u05ed\5\26\f")
        buf.write("\2\u05ec\u05e9\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05ec")
        buf.write("\3\2\2\2\u05ee\u05ef\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0")
        buf.write("\u05f1\7\u0273\2\2\u05f1\u05f3\3\2\2\2\u05f2\u05e4\3\2")
        buf.write("\2\2\u05f2\u05f3\3\2\2\2\u05f3A\3\2\2\2\u05f4\u05f5\7")
        buf.write("\u026c\2\2\u05f5C\3\2\2\2\u05f6\u05fb\7\u0106\2\2\u05f7")
        buf.write("\u05fc\5F$\2\u05f8\u05fc\5H%\2\u05f9\u05fc\5J&\2\u05fa")
        buf.write("\u05fc\5L\'\2\u05fb\u05f7\3\2\2\2\u05fb\u05f8\3\2\2\2")
        buf.write("\u05fb\u05f9\3\2\2\2\u05fb\u05fa\3\2\2\2\u05fb\u05fc\3")
        buf.write("\2\2\2\u05fcE\3\2\2\2\u05fd\u0610\7\u0272\2\2\u05fe\u0600")
        buf.write("\7\u0278\2\2\u05ff\u05fe\3\2\2\2\u05ff\u0600\3\2\2\2\u0600")
        buf.write("\u0601\3\2\2\2\u0601\u0603\7\u016c\2\2\u0602\u0604\5*")
        buf.write("\26\2\u0603\u0602\3\2\2\2\u0603\u0604\3\2\2\2\u0604\u060b")
        buf.write("\3\2\2\2\u0605\u0608\5\u0080A\2\u0606\u0608\5\30\r\2\u0607")
        buf.write("\u0605\3\2\2\2\u0607\u0606\3\2\2\2\u0608\u0609\3\2\2\2")
        buf.write("\u0609\u0607\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u060c\3")
        buf.write("\2\2\2\u060b\u0607\3\2\2\2\u060b\u060c\3\2\2\2\u060c\u060e")
        buf.write("\3\2\2\2\u060d\u060f\7\u0211\2\2\u060e\u060d\3\2\2\2\u060e")
        buf.write("\u060f\3\2\2\2\u060f\u0611\3\2\2\2\u0610\u05ff\3\2\2\2")
        buf.write("\u0611\u0612\3\2\2\2\u0612\u0610\3\2\2\2\u0612\u0613\3")
        buf.write("\2\2\2\u0613\u0614\3\2\2\2\u0614\u0615\7\u0273\2\2\u0615")
        buf.write("G\3\2\2\2\u0616\u0629\7\u0272\2\2\u0617\u0619\7\u0278")
        buf.write("\2\2\u0618\u0617\3\2\2\2\u0618\u0619\3\2\2\2\u0619\u061a")
        buf.write("\3\2\2\2\u061a\u061c\7\u016c\2\2\u061b\u061d\5*\26\2\u061c")
        buf.write("\u061b\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u0624\3\2\2\2")
        buf.write("\u061e\u0621\5\u0080A\2\u061f\u0621\5\30\r\2\u0620\u061e")
        buf.write("\3\2\2\2\u0620\u061f\3\2\2\2\u0621\u0622\3\2\2\2\u0622")
        buf.write("\u0620\3\2\2\2\u0622\u0623\3\2\2\2\u0623\u0625\3\2\2\2")
        buf.write("\u0624\u0620\3\2\2\2\u0624\u0625\3\2\2\2\u0625\u0627\3")
        buf.write("\2\2\2\u0626\u0628\7\u0211\2\2\u0627\u0626\3\2\2\2\u0627")
        buf.write("\u0628\3\2\2\2\u0628\u062a\3\2\2\2\u0629\u0618\3\2\2\2")
        buf.write("\u062a\u062b\3\2\2\2\u062b\u0629\3\2\2\2\u062b\u062c\3")
        buf.write("\2\2\2\u062c\u062d\3\2\2\2\u062d\u062e\7\u0273\2\2\u062e")
        buf.write("I\3\2\2\2\u062f\u0630\7\u01e1\2\2\u0630\u0631\7\u00d3")
        buf.write("\2\2\u0631\u0636\7\u0272\2\2\u0632\u0634\7\u0278\2\2\u0633")
        buf.write("\u0632\3\2\2\2\u0633\u0634\3\2\2\2\u0634\u0635\3\2\2\2")
        buf.write("\u0635\u0637\5\26\f\2\u0636\u0633\3\2\2\2\u0637\u0638")
        buf.write("\3\2\2\2\u0638\u0636\3\2\2\2\u0638\u0639\3\2\2\2\u0639")
        buf.write("\u063a\3\2\2\2\u063a\u063b\7\u0273\2\2\u063b\u0654\3\2")
        buf.write("\2\2\u063c\u064e\7\u0272\2\2\u063d\u063f\7\u0278\2\2\u063e")
        buf.write("\u063d\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u0640\3\2\2\2")
        buf.write("\u0640\u0642\7\u016c\2\2\u0641\u0643\5*\26\2\u0642\u0641")
        buf.write("\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u0646\3\2\2\2\u0644")
        buf.write("\u0645\7\u01ef\2\2\u0645\u0647\5\26\f\2\u0646\u0644\3")
        buf.write("\2\2\2\u0646\u0647\3\2\2\2\u0647\u0649\3\2\2\2\u0648\u064a")
        buf.write("\5\30\r\2\u0649\u0648\3\2\2\2\u0649\u064a\3\2\2\2\u064a")
        buf.write("\u064c\3\2\2\2\u064b\u064d\7\u0211\2\2\u064c\u064b\3\2")
        buf.write("\2\2\u064c\u064d\3\2\2\2\u064d\u064f\3\2\2\2\u064e\u063e")
        buf.write("\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u064e\3\2\2\2\u0650")
        buf.write("\u0651\3\2\2\2\u0651\u0652\3\2\2\2\u0652\u0654\7\u0273")
        buf.write("\2\2\u0653\u062f\3\2\2\2\u0653\u063c\3\2\2\2\u0654K\3")
        buf.write("\2\2\2\u0655\u0656\7\u01e1\2\2\u0656\u0657\7\u00d3\2\2")
        buf.write("\u0657\u065c\7\u0272\2\2\u0658\u065a\7\u0278\2\2\u0659")
        buf.write("\u0658\3\2\2\2\u0659\u065a\3\2\2\2\u065a\u065b\3\2\2\2")
        buf.write("\u065b\u065d\5\26\f\2\u065c\u0659\3\2\2\2\u065d\u065e")
        buf.write("\3\2\2\2\u065e\u065c\3\2\2\2\u065e\u065f\3\2\2\2\u065f")
        buf.write("\u0660\3\2\2\2\u0660\u0661\7\u0273\2\2\u0661\u0663\3\2")
        buf.write("\2\2\u0662\u0655\3\2\2\2\u0662\u0663\3\2\2\2\u0663\u0664")
        buf.write("\3\2\2\2\u0664\u0678\7\u0272\2\2\u0665\u0667\7\u0278\2")
        buf.write("\2\u0666\u0665\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u0668")
        buf.write("\3\2\2\2\u0668\u066a\7\u016c\2\2\u0669\u066b\5*\26\2\u066a")
        buf.write("\u0669\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u0672\3\2\2\2")
        buf.write("\u066c\u066f\5\u0080A\2\u066d\u066f\5\30\r\2\u066e\u066c")
        buf.write("\3\2\2\2\u066e\u066d\3\2\2\2\u066f\u0670\3\2\2\2\u0670")
        buf.write("\u066e\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u0673\3\2\2\2")
        buf.write("\u0672\u066e\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u0674\3")
        buf.write("\2\2\2\u0674\u0676\7\u0211\2\2\u0675\u0677\5N(\2\u0676")
        buf.write("\u0675\3\2\2\2\u0676\u0677\3\2\2\2\u0677\u0679\3\2\2\2")
        buf.write("\u0678\u0666\3\2\2\2\u0679\u067a\3\2\2\2\u067a\u0678\3")
        buf.write("\2\2\2\u067a\u067b\3\2\2\2\u067b\u067c\3\2\2\2\u067c\u067d")
        buf.write("\7\u0273\2\2\u067dM\3\2\2\2\u067e\u067f\7\u01e1\2\2\u067f")
        buf.write("\u0680\7\u00d3\2\2\u0680\u0685\7\u0272\2\2\u0681\u0683")
        buf.write("\7\u0278\2\2\u0682\u0681\3\2\2\2\u0682\u0683\3\2\2\2\u0683")
        buf.write("\u0684\3\2\2\2\u0684\u0686\5\26\f\2\u0685\u0682\3\2\2")
        buf.write("\2\u0686\u0687\3\2\2\2\u0687\u0685\3\2\2\2\u0687\u0688")
        buf.write("\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u068a\7\u0273\2\2\u068a")
        buf.write("\u06a3\3\2\2\2\u068b\u069d\7\u0272\2\2\u068c\u068e\7\u0278")
        buf.write("\2\2\u068d\u068c\3\2\2\2\u068d\u068e\3\2\2\2\u068e\u068f")
        buf.write("\3\2\2\2\u068f\u0691\7\u01e4\2\2\u0690\u0692\5P)\2\u0691")
        buf.write("\u0690\3\2\2\2\u0691\u0692\3\2\2\2\u0692\u0695\3\2\2\2")
        buf.write("\u0693\u0694\7\u01ef\2\2\u0694\u0696\5\26\f\2\u0695\u0693")
        buf.write("\3\2\2\2\u0695\u0696\3\2\2\2\u0696\u0698\3\2\2\2\u0697")
        buf.write("\u0699\5\30\r\2\u0698\u0697\3\2\2\2\u0698\u0699\3\2\2")
        buf.write("\2\u0699\u069b\3\2\2\2\u069a\u069c\7\u0211\2\2\u069b\u069a")
        buf.write("\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u069e\3\2\2\2\u069d")
        buf.write("\u068d\3\2\2\2\u069e\u069f\3\2\2\2\u069f\u069d\3\2\2\2")
        buf.write("\u069f\u06a0\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u06a3\7")
        buf.write("\u0273\2\2\u06a2\u067e\3\2\2\2\u06a2\u068b\3\2\2\2\u06a3")
        buf.write("O\3\2\2\2\u06a4\u06a5\5*\26\2\u06a5Q\3\2\2\2\u06a6\u06a8")
        buf.write("\5T+\2\u06a7\u06a9\5X-\2\u06a8\u06a7\3\2\2\2\u06a8\u06a9")
        buf.write("\3\2\2\2\u06a9\u06ab\3\2\2\2\u06aa\u06ac\5\36\20\2\u06ab")
        buf.write("\u06aa\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06b2\3\2\2\2")
        buf.write("\u06ad\u06ae\7\u016a\2\2\u06ae\u06af\7\u0272\2\2\u06af")
        buf.write("\u06b0\5V,\2\u06b0\u06b1\7\u0273\2\2\u06b1\u06b3\3\2\2")
        buf.write("\2\u06b2\u06ad\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3S\3\2")
        buf.write("\2\2\u06b4\u06b5\5\u041a\u020e\2\u06b5\u06b6\7\u026b\2")
        buf.write("\2\u06b6\u06b8\3\2\2\2\u06b7\u06b4\3\2\2\2\u06b7\u06b8")
        buf.write("\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06ba\5\u041a\u020e")
        buf.write("\2\u06baU\3\2\2\2\u06bb\u06bc\7\u026e\2\2\u06bcW\3\2\2")
        buf.write("\2\u06bd\u06d1\7\u0106\2\2\u06be\u06cb\7\u0272\2\2\u06bf")
        buf.write("\u06c1\7\u0278\2\2\u06c0\u06bf\3\2\2\2\u06c0\u06c1\3\2")
        buf.write("\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06c3\7\u016c\2\2\u06c3")
        buf.write("\u06c9\5*\26\2\u06c4\u06c5\7\u016a\2\2\u06c5\u06c6\7\u0272")
        buf.write("\2\2\u06c6\u06c7\5V,\2\u06c7\u06c8\7\u0273\2\2\u06c8\u06ca")
        buf.write("\3\2\2\2\u06c9\u06c4\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca")
        buf.write("\u06cc\3\2\2\2\u06cb\u06c0\3\2\2\2\u06cc\u06cd\3\2\2\2")
        buf.write("\u06cd\u06cb\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06cf\3")
        buf.write("\2\2\2\u06cf\u06d0\7\u0273\2\2\u06d0\u06d2\3\2\2\2\u06d1")
        buf.write("\u06be\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2Y\3\2\2\2\u06d3")
        buf.write("\u06d4\7\u0233\2\2\u06d4\u06d6\7\u026b\2\2\u06d5\u06d3")
        buf.write("\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7")
        buf.write("\u06d9\7\u023c\2\2\u06d8\u06da\5\\/\2\u06d9\u06d8\3\2")
        buf.write("\2\2\u06d9\u06da\3\2\2\2\u06da\u06dc\3\2\2\2\u06db\u06dd")
        buf.write("\5\36\20\2\u06dc\u06db\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd")
        buf.write("[\3\2\2\2\u06de\u06eb\7\u0106\2\2\u06df\u06e5\7\u0272")
        buf.write("\2\2\u06e0\u06e2\7\u0278\2\2\u06e1\u06e0\3\2\2\2\u06e1")
        buf.write("\u06e2\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u06e4\7\u016c")
        buf.write("\2\2\u06e4\u06e6\5*\26\2\u06e5\u06e1\3\2\2\2\u06e6\u06e7")
        buf.write("\3\2\2\2\u06e7\u06e5\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8")
        buf.write("\u06e9\3\2\2\2\u06e9\u06ea\7\u0273\2\2\u06ea\u06ec\3\2")
        buf.write("\2\2\u06eb\u06df\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec]\3")
        buf.write("\2\2\2\u06ed\u06ee\5\u03f0\u01f9\2\u06ee\u06fa\7\u0272")
        buf.write("\2\2\u06ef\u06f1\7\u0278\2\2\u06f0\u06ef\3\2\2\2\u06f0")
        buf.write("\u06f1\3\2\2\2\u06f1\u06f4\3\2\2\2\u06f2\u06f5\5\u03f0")
        buf.write("\u01f9\2\u06f3\u06f5\5\u03aa\u01d6\2\u06f4\u06f2\3\2\2")
        buf.write("\2\u06f4\u06f3\3\2\2\2\u06f4\u06f5\3\2\2\2\u06f5\u06f6")
        buf.write("\3\2\2\2\u06f6\u06f8\5\u03ee\u01f8\2\u06f7\u06f9\t\6\2")
        buf.write("\2\u06f8\u06f7\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9\u06fb")
        buf.write("\3\2\2\2\u06fa\u06f0\3\2\2\2\u06fb\u06fc\3\2\2\2\u06fc")
        buf.write("\u06fa\3\2\2\2\u06fc\u06fd\3\2\2\2\u06fd\u06fe\3\2\2\2")
        buf.write("\u06fe\u06ff\7\u0273\2\2\u06ff\u0706\7\u00be\2\2\u0700")
        buf.write("\u0702\7\u0278\2\2\u0701\u0700\3\2\2\2\u0701\u0702\3\2")
        buf.write("\2\2\u0702\u0703\3\2\2\2\u0703\u0704\5\u03f0\u01f9\2\u0704")
        buf.write("\u0705\5\u03aa\u01d6\2\u0705\u0707\3\2\2\2\u0706\u0701")
        buf.write("\3\2\2\2\u0707\u0708\3\2\2\2\u0708\u0706\3\2\2\2\u0708")
        buf.write("\u0709\3\2\2\2\u0709\u070a\3\2\2\2\u070a\u070c\5\u03ae")
        buf.write("\u01d8\2\u070b\u070d\5D#\2\u070c\u070b\3\2\2\2\u070c\u070d")
        buf.write("\3\2\2\2\u070d\u070f\3\2\2\2\u070e\u0710\5\24\13\2\u070f")
        buf.write("\u070e\3\2\2\2\u070f\u0710\3\2\2\2\u0710_\3\2\2\2\u0711")
        buf.write("\u0716\7c\2\2\u0712\u0714\7\u00c2\2\2\u0713\u0712\3\2")
        buf.write("\2\2\u0713\u0714\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u0717")
        buf.write("\7\u01f1\2\2\u0716\u0713\3\2\2\2\u0716\u0717\3\2\2\2\u0717")
        buf.write("\u0718\3\2\2\2\u0718\u0719\7\u01ed\2\2\u0719\u071d\5\u03f0")
        buf.write("\u01f9\2\u071a\u071e\5b\62\2\u071b\u071e\5\u00f6|\2\u071c")
        buf.write("\u071e\5\u00fe\u0080\2\u071d\u071a\3\2\2\2\u071d\u071b")
        buf.write("\3\2\2\2\u071d\u071c\3\2\2\2\u071e\u0721\3\2\2\2\u071f")
        buf.write("\u0720\7\26\2\2\u0720\u0722\5\u0276\u013c\2\u0721\u071f")
        buf.write("\3\2\2\2\u0721\u0722\3\2\2\2\u0722a\3\2\2\2\u0723\u0724")
        buf.write("\7\u0272\2\2\u0724\u0725\5d\63\2\u0725\u0726\7\u0273\2")
        buf.write("\2\u0726\u0728\3\2\2\2\u0727\u0723\3\2\2\2\u0727\u0728")
        buf.write("\3\2\2\2\u0728\u072d\3\2\2\2\u0729\u072a\7\u0158\2\2\u072a")
        buf.write("\u072b\7M\2\2\u072b\u072c\t\13\2\2\u072c\u072e\7\u01ad")
        buf.write("\2\2\u072d\u0729\3\2\2\2\u072d\u072e\3\2\2\2\u072e\u0730")
        buf.write("\3\2\2\2\u072f\u0731\5|?\2\u0730\u072f\3\2\2\2\u0730\u0731")
        buf.write("\3\2\2\2\u0731\u0733\3\2\2\2\u0732\u0734\5\u008aF\2\u0733")
        buf.write("\u0732\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u0736\3\2\2\2")
        buf.write("\u0735\u0737\5\u00be`\2\u0736\u0735\3\2\2\2\u0736\u0737")
        buf.write("\3\2\2\2\u0737\u0739\3\2\2\2\u0738\u073a\t\f\2\2\u0739")
        buf.write("\u0738\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u0740\3\2\2\2")
        buf.write("\u073b\u073c\7\u01a0\2\2\u073c\u073d\7\u0272\2\2\u073d")
        buf.write("\u073e\7\u0123\2\2\u073e\u073f\t\r\2\2\u073f\u0741\7\u0273")
        buf.write("\2\2\u0740\u073b\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u0743")
        buf.write("\3\2\2\2\u0742\u0744\5\36\20\2\u0743\u0742\3\2\2\2\u0743")
        buf.write("\u0744\3\2\2\2\u0744\u0746\3\2\2\2\u0745\u0747\t\16\2")
        buf.write("\2\u0746\u0745\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u074d")
        buf.write("\3\2\2\2\u0748\u074a\5\u00eex\2\u0749\u0748\3\2\2\2\u074a")
        buf.write("\u074b\3\2\2\2\u074b\u0749\3\2\2\2\u074b\u074c\3\2\2\2")
        buf.write("\u074c\u074e\3\2\2\2\u074d\u0749\3\2\2\2\u074d\u074e\3")
        buf.write("\2\2\2\u074e\u0750\3\2\2\2\u074f\u0751\5\u00f2z\2\u0750")
        buf.write("\u074f\3\2\2\2\u0750\u0751\3\2\2\2\u0751\u0753\3\2\2\2")
        buf.write("\u0752\u0754\5\u00f4{\2\u0753\u0752\3\2\2\2\u0753\u0754")
        buf.write("\3\2\2\2\u0754c\3\2\2\2\u0755\u0757\7\u0278\2\2\u0756")
        buf.write("\u0755\3\2\2\2\u0756\u0757\3\2\2\2\u0757\u075d\3\2\2\2")
        buf.write("\u0758\u075e\5f\64\2\u0759\u075e\5j\66\2\u075a\u075e\5")
        buf.write("l\67\2\u075b\u075e\5r:\2\u075c\u075e\5t;\2\u075d\u0758")
        buf.write("\3\2\2\2\u075d\u0759\3\2\2\2\u075d\u075a\3\2\2\2\u075d")
        buf.write("\u075b\3\2\2\2\u075d\u075c\3\2\2\2\u075e\u0760\3\2\2\2")
        buf.write("\u075f\u0756\3\2\2\2\u0760\u0761\3\2\2\2\u0761\u075f\3")
        buf.write("\2\2\2\u0761\u0762\3\2\2\2\u0762e\3\2\2\2\u0763\u0766")
        buf.write("\5\u03ee\u01f8\2\u0764\u0767\5\u0404\u0203\2\u0765\u0767")
        buf.write("\5\u03d6\u01ec\2\u0766\u0764\3\2\2\2\u0766\u0765\3\2\2")
        buf.write("\2\u0767\u0769\3\2\2\2\u0768\u076a\7\u01d4\2\2\u0769\u0768")
        buf.write("\3\2\2\2\u0769\u076a\3\2\2\2\u076a\u076d\3\2\2\2\u076b")
        buf.write("\u076c\7~\2\2\u076c\u076e\5\u0330\u0199\2\u076d\u076b")
        buf.write("\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u0782\3\2\2\2\u076f")
        buf.write("\u0772\7\u0097\2\2\u0770\u0771\7\u0219\2\2\u0771\u0773")
        buf.write("\7\u026e\2\2\u0772\u0770\3\2\2\2\u0772\u0773\3\2\2\2\u0773")
        buf.write("\u0777\3\2\2\2\u0774\u0775\7\u00cd\2\2\u0775\u0776\7\64")
        buf.write("\2\2\u0776\u0778\5\u0426\u0214\2\u0777\u0774\3\2\2\2\u0777")
        buf.write("\u0778\3\2\2\2\u0778\u077a\3\2\2\2\u0779\u077b\7\u026e")
        buf.write("\2\2\u077a\u0779\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u0780")
        buf.write("\3\2\2\2\u077c\u077e\7\u0134\2\2\u077d\u077c\3\2\2\2\u077d")
        buf.write("\u077e\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0781\7\u01af")
        buf.write("\2\2\u0780\u077d\3\2\2\2\u0780\u0781\3\2\2\2\u0781\u0783")
        buf.write("\3\2\2\2\u0782\u076f\3\2\2\2\u0782\u0783\3\2\2\2\u0783")
        buf.write("\u078b\3\2\2\2\u0784\u0786\5\u0096L\2\u0785\u0784\3\2")
        buf.write("\2\2\u0786\u0789\3\2\2\2\u0787\u0785\3\2\2\2\u0787\u0788")
        buf.write("\3\2\2\2\u0788\u078c\3\2\2\2\u0789\u0787\3\2\2\2\u078a")
        buf.write("\u078c\5h\65\2\u078b\u0787\3\2\2\2\u078b\u078a\3\2\2\2")
        buf.write("\u078cg\3\2\2\2\u078d\u078e\7\u01b6\2\2\u078e\u078f\7")
        buf.write("\u00ef\2\2\u078f\u079b\5\u03f0\u01f9\2\u0790\u0791\7\u022f")
        buf.write("\2\2\u0791\u079b\7\u01ac\2\2\u0792\u0793\7X\2\2\u0793")
        buf.write("\u0795\5\u03d2\u01ea\2\u0794\u0792\3\2\2\2\u0794\u0795")
        buf.write("\3\2\2\2\u0795\u0796\3\2\2\2\u0796\u0798\5\u0098M\2\u0797")
        buf.write("\u0799\5\u00a0Q\2\u0798\u0797\3\2\2\2\u0798\u0799\3\2")
        buf.write("\2\2\u0799\u079b\3\2\2\2\u079a\u078d\3\2\2\2\u079a\u0790")
        buf.write("\3\2\2\2\u079a\u0794\3\2\2\2\u079bi\3\2\2\2\u079c\u079e")
        buf.write("\5\u03ee\u01f8\2\u079d\u079f\5\u0404\u0203\2\u079e\u079d")
        buf.write("\3\2\2\2\u079e\u079f\3\2\2\2\u079f\u07a2\3\2\2\2\u07a0")
        buf.write("\u07a1\7\u00c1\2\2\u07a1\u07a3\7\17\2\2\u07a2\u07a0\3")
        buf.write("\2\2\2\u07a2\u07a3\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07a5")
        buf.write("\7\26\2\2\u07a5\u07a6\7\u0272\2\2\u07a6\u07a7\5\u0330")
        buf.write("\u0199\2\u07a7\u07a9\7\u0273\2\2\u07a8\u07aa\7\u0226\2")
        buf.write("\2\u07a9\u07a8\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa\u07ae")
        buf.write("\3\2\2\2\u07ab\u07ad\5\u0096L\2\u07ac\u07ab\3\2\2\2\u07ad")
        buf.write("\u07b0\3\2\2\2\u07ae\u07ac\3\2\2\2\u07ae\u07af\3\2\2\2")
        buf.write("\u07afk\3\2\2\2\u07b0\u07ae\3\2\2\2\u07b1\u07b2\7X\2\2")
        buf.write("\u07b2\u07b4\5\u03d2\u01ea\2\u07b3\u07b1\3\2\2\2\u07b3")
        buf.write("\u07b4\3\2\2\2\u07b4\u07c0\3\2\2\2\u07b5\u07b6\7\u020d")
        buf.write("\2\2\u07b6\u07c1\5\u009aN\2\u07b7\u07b8\7\u0183\2\2\u07b8")
        buf.write("\u07b9\7\u00f6\2\2\u07b9\u07c1\5\u009aN\2\u07ba\u07c1")
        buf.write("\5n8\2\u07bb\u07bc\7@\2\2\u07bc\u07bd\7\u0272\2\2\u07bd")
        buf.write("\u07be\5\u0330\u0199\2\u07be\u07bf\7\u0273\2\2\u07bf\u07c1")
        buf.write("\3\2\2\2\u07c0\u07b5\3\2\2\2\u07c0\u07b7\3\2\2\2\u07c0")
        buf.write("\u07ba\3\2\2\2\u07c0\u07bb\3\2\2\2\u07c1\u07c3\3\2\2\2")
        buf.write("\u07c2\u07c4\5\u00a0Q\2\u07c3\u07c2\3\2\2\2\u07c3\u07c4")
        buf.write("\3\2\2\2\u07c4m\3\2\2\2\u07c5\u07c6\7\u00ba\2\2\u07c6")
        buf.write("\u07c7\7\u00f6\2\2\u07c7\u07c8\5\u009aN\2\u07c8\u07ca")
        buf.write("\5\u0098M\2\u07c9\u07cb\5p9\2\u07ca\u07c9\3\2\2\2\u07ca")
        buf.write("\u07cb\3\2\2\2\u07cbo\3\2\2\2\u07cc\u07cd\7\u0158\2\2")
        buf.write("\u07cd\u07d1\7\u0083\2\2\u07ce\u07d2\7:\2\2\u07cf\u07d0")
        buf.write("\7\u01c4\2\2\u07d0\u07d2\7\u014c\2\2\u07d1\u07ce\3\2\2")
        buf.write("\2\u07d1\u07cf\3\2\2\2\u07d2q\3\2\2\2\u07d3\u07d4\7\u01b6")
        buf.write("\2\2\u07d4\u07d5\7\u00b7\2\2\u07d5\u07d6\7\u0272\2\2\u07d6")
        buf.write("\u07d7\5\u0426\u0214\2\u07d7\u07d8\7\u0273\2\2\u07d8\u07d9")
        buf.write("\7\u00ef\2\2\u07d9\u07da\5\u03f0\u01f9\2\u07da\u07f7\3")
        buf.write("\2\2\2\u07db\u07dc\7\u0192\2\2\u07dc\u07dd\7\u0272\2\2")
        buf.write("\u07dd\u07de\5\u0426\u0214\2\u07de\u07df\7\u0273\2\2\u07df")
        buf.write("\u07e0\7\u022f\2\2\u07e0\u07e1\7\u01ac\2\2\u07e1\u07f7")
        buf.write("\3\2\2\2\u07e2\u07e3\7X\2\2\u07e3\u07e5\5\u03d2\u01ea")
        buf.write("\2\u07e4\u07e2\3\2\2\2\u07e4\u07e5\3\2\2\2\u07e5\u07e6")
        buf.write("\3\2\2\2\u07e6\u07e7\7\u00ba\2\2\u07e7\u07e8\7\u00f6\2")
        buf.write("\2\u07e8\u07ed\7\u0272\2\2\u07e9\u07eb\7\u0278\2\2\u07ea")
        buf.write("\u07e9\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb\u07ec\3\2\2\2")
        buf.write("\u07ec\u07ee\5\u0426\u0214\2\u07ed\u07ea\3\2\2\2\u07ee")
        buf.write("\u07ef\3\2\2\2\u07ef\u07ed\3\2\2\2\u07ef\u07f0\3\2\2\2")
        buf.write("\u07f0\u07f1\3\2\2\2\u07f1\u07f2\7\u0273\2\2\u07f2\u07f4")
        buf.write("\5\u0098M\2\u07f3\u07f5\5\u00a0Q\2\u07f4\u07f3\3\2\2\2")
        buf.write("\u07f4\u07f5\3\2\2\2\u07f5\u07f7\3\2\2\2\u07f6\u07d3\3")
        buf.write("\2\2\2\u07f6\u07db\3\2\2\2\u07f6\u07e4\3\2\2\2\u07f7s")
        buf.write("\3\2\2\2\u07f8\u07f9\7\u01ea\2\2\u07f9\u07fc\7\u010c\2")
        buf.write("\2\u07fa\u07fd\5v<\2\u07fb\u07fd\5z>\2\u07fc\u07fa\3\2")
        buf.write("\2\2\u07fc\u07fb\3\2\2\2\u07fdu\3\2\2\2\u07fe\u07ff\7")
        buf.write("\u00c5\2\2\u07ff\u0800\5x=\2\u0800\u0809\7\u0272\2\2\u0801")
        buf.write("\u0803\7\u0278\2\2\u0802\u0801\3\2\2\2\u0802\u0803\3\2")
        buf.write("\2\2\u0803\u0804\3\2\2\2\u0804\u0807\5\u0426\u0214\2\u0805")
        buf.write("\u0806\7\u0134\2\2\u0806\u0808\7\u010c\2\2\u0807\u0805")
        buf.write("\3\2\2\2\u0807\u0808\3\2\2\2\u0808\u080a\3\2\2\2\u0809")
        buf.write("\u0802\3\2\2\2\u080a\u080b\3\2\2\2\u080b\u0809\3\2\2\2")
        buf.write("\u080b\u080c\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u080f\7")
        buf.write("\u0273\2\2\u080e\u0810\7\17\2\2\u080f\u080e\3\2\2\2\u080f")
        buf.write("\u0810\3\2\2\2\u0810w\3\2\2\2\u0811\u0812\7\u026c\2\2")
        buf.write("\u0812y\3\2\2\2\u0813\u0814\7l\2\2\u0814\u0820\7\u0272")
        buf.write("\2\2\u0815\u0817\7\u0278\2\2\u0816\u0815\3\2\2\2\u0816")
        buf.write("\u0817\3\2\2\2\u0817\u081e\3\2\2\2\u0818\u081f\7\13\2")
        buf.write("\2\u0819\u081a\7\u0183\2\2\u081a\u081f\7\u00f6\2\2\u081b")
        buf.write("\u081f\7\u020d\2\2\u081c\u081d\7\u00ba\2\2\u081d\u081f")
        buf.write("\7\u00f6\2\2\u081e\u0818\3\2\2\2\u081e\u0819\3\2\2\2\u081e")
        buf.write("\u081b\3\2\2\2\u081e\u081c\3\2\2\2\u081f\u0821\3\2\2\2")
        buf.write("\u0820\u0816\3\2\2\2\u0821\u0822\3\2\2\2\u0822\u0820\3")
        buf.write("\2\2\2\u0822\u0823\3\2\2\2\u0823\u0824\3\2\2\2\u0824\u0825")
        buf.write("\7\u0273\2\2\u0825\u0826\7J\2\2\u0826{\3\2\2\2\u0827\u0829")
        buf.write("\5~@\2\u0828\u0827\3\2\2\2\u0828\u0829\3\2\2\2\u0829\u082a")
        buf.write("\3\2\2\2\u082a\u082c\5\u0080A\2\u082b\u082d\5\66\34\2")
        buf.write("\u082c\u082b\3\2\2\2\u082c\u082d\3\2\2\2\u082d}\3\2\2")
        buf.write("\2\u082e\u082f\7\u01bb\2\2\u082f\u0830\7d\2\2\u0830\u0831")
        buf.write("\t\17\2\2\u0831\177\3\2\2\2\u0832\u0837\5\u0082B\2\u0833")
        buf.write("\u0834\7\u01ef\2\2\u0834\u0837\5\u041a\u020e\2\u0835\u0837")
        buf.write("\5\u0088E\2\u0836\u0832\3\2\2\2\u0836\u0833\3\2\2\2\u0836")
        buf.write("\u0835\3\2\2\2\u0837\u0838\3\2\2\2\u0838\u0836\3\2\2\2")
        buf.write("\u0838\u0839\3\2\2\2\u0839\u0081\3\2\2\2\u083a\u083b\7")
        buf.write("\u016f\2\2\u083b\u0842\7\u026c\2\2\u083c\u083d\7\u0172")
        buf.write("\2\2\u083d\u0842\7\u026c\2\2\u083e\u083f\7\u00e0\2\2\u083f")
        buf.write("\u0842\7\u026c\2\2\u0840\u0842\5\u0084C\2\u0841\u083a")
        buf.write("\3\2\2\2\u0841\u083c\3\2\2\2\u0841\u083e\3\2\2\2\u0841")
        buf.write("\u0840\3\2\2\2\u0842\u0843\3\2\2\2\u0843\u0841\3\2\2\2")
        buf.write("\u0843\u0844\3\2\2\2\u0844\u0083\3\2\2\2\u0845\u0846\7")
        buf.write("\u01e0\2\2\u0846\u0860\7\u0272\2\2\u0847\u0848\7\u00de")
        buf.write("\2\2\u0848\u0861\5\u0086D\2\u0849\u084a\7\u0133\2\2\u084a")
        buf.write("\u0861\5\u0086D\2\u084b\u084c\7\u011d\2\2\u084c\u0861")
        buf.write("\t\20\2\2\u084d\u084e\7\u0117\2\2\u084e\u0861\t\20\2\2")
        buf.write("\u084f\u0850\7\u0170\2\2\u0850\u0861\7\u026c\2\2\u0851")
        buf.write("\u0852\7\u00bc\2\2\u0852\u0861\7\u026c\2\2\u0853\u0854")
        buf.write("\7\u00bb\2\2\u0854\u0855\7\u00c6\2\2\u0855\u0861\7\u026c")
        buf.write("\2\2\u0856\u0859\7\u015b\2\2\u0857\u085a\5\u0086D\2\u0858")
        buf.write("\u085a\7\u014c\2\2\u0859\u0857\3\2\2\2\u0859\u0858\3\2")
        buf.write("\2\2\u085a\u0861\3\2\2\2\u085b\u085c\7,\2\2\u085c\u0861")
        buf.write("\t\21\2\2\u085d\u085e\7\u00b3\2\2\u085e\u0861\t\22\2\2")
        buf.write("\u085f\u0861\7\u0097\2\2\u0860\u0847\3\2\2\2\u0860\u0849")
        buf.write("\3\2\2\2\u0860\u084b\3\2\2\2\u0860\u084d\3\2\2\2\u0860")
        buf.write("\u084f\3\2\2\2\u0860\u0851\3\2\2\2\u0860\u0853\3\2\2\2")
        buf.write("\u0860\u0856\3\2\2\2\u0860\u085b\3\2\2\2\u0860\u085d\3")
        buf.write("\2\2\2\u0860\u085f\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u0860")
        buf.write("\3\2\2\2\u0862\u0863\3\2\2\2\u0863\u0864\3\2\2\2\u0864")
        buf.write("\u0865\7\u0273\2\2\u0865\u0085\3\2\2\2\u0866\u0868\7\u026c")
        buf.write("\2\2\u0867\u0869\7\u0291\2\2\u0868\u0867\3\2\2\2\u0868")
        buf.write("\u0869\3\2\2\2\u0869\u0087\3\2\2\2\u086a\u086b\t\23\2")
        buf.write("\2\u086b\u0089\3\2\2\2\u086c\u0874\5\u008cG\2\u086d\u0874")
        buf.write("\5\u0090I\2\u086e\u0871\5\u00a4S\2\u086f\u0871\5\u00b4")
        buf.write("[\2\u0870\u086e\3\2\2\2\u0870\u086f\3\2\2\2\u0871\u0874")
        buf.write("\3\2\2\2\u0872\u0874\5\u00b6\\\2\u0873\u086c\3\2\2\2\u0873")
        buf.write("\u086d\3\2\2\2\u0873\u0870\3\2\2\2\u0873\u0872\3\2\2\2")
        buf.write("\u0874\u008b\3\2\2\2\u0875\u0876\7I\2\2\u0876\u0877\5")
        buf.write("\u0426\u0214\2\u0877\u0878\5\u008eH\2\u0878\u008d\3\2")
        buf.write("\2\2\u0879\u087b\7\u0091\2\2\u087a\u0879\3\2\2\2\u087a")
        buf.write("\u087b\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u087d\7\u00ef")
        buf.write("\2\2\u087d\u087f\7\u0152\2\2\u087e\u0880\7\u0209\2\2\u087f")
        buf.write("\u087e\3\2\2\2\u087f\u0880\3\2\2\2\u0880\u0881\3\2\2\2")
        buf.write("\u0881\u0882\7\u0272\2\2\u0882\u0883\5\u03d6\u01ec\2\u0883")
        buf.write("\u0884\7\u0273\2\2\u0884\u088d\3\2\2\2\u0885\u0887\7\u0148")
        buf.write("\2\2\u0886\u0885\3\2\2\2\u0886\u0887\3\2\2\2\u0887\u0888")
        buf.write("\3\2\2\2\u0888\u0889\7\u01e6\2\2\u0889\u088a\7\31\2\2")
        buf.write("\u088a\u088b\7\13\2\2\u088b\u088d\7\u00fe\2\2\u088c\u087a")
        buf.write("\3\2\2\2\u088c\u0886\3\2\2\2\u088d\u008f\3\2\2\2\u088e")
        buf.write("\u088f\7\u0131\2\2\u088f\u0892\7\u01ed\2\2\u0890\u0893")
        buf.write("\5\u0092J\2\u0891\u0893\7K\2\2\u0892\u0890\3\2\2\2\u0892")
        buf.write("\u0891\3\2\2\2\u0893\u0895\3\2\2\2\u0894\u0896\5\u008e")
        buf.write("H\2\u0895\u0894\3\2\2\2\u0895\u0896\3\2\2\2\u0896\u0898")
        buf.write("\3\2\2\2\u0897\u0899\t\24\2\2\u0898\u0897\3\2\2\2\u0898")
        buf.write("\u0899\3\2\2\2\u0899\u089a\3\2\2\2\u089a\u089b\7\u01e1")
        buf.write("\2\2\u089b\u089c\7\26\2\2\u089c\u08aa\5\u03f0\u01f9\2")
        buf.write("\u089d\u08a4\7\u0272\2\2\u089e\u089f\7\u0272\2\2\u089f")
        buf.write("\u08a0\5\u0094K\2\u08a0\u08a1\7\u0273\2\2\u08a1\u08a5")
        buf.write("\3\2\2\2\u08a2\u08a5\5|?\2\u08a3\u08a5\5\u008aF\2\u08a4")
        buf.write("\u089e\3\2\2\2\u08a4\u08a2\3\2\2\2\u08a4\u08a3\3\2\2\2")
        buf.write("\u08a5\u08a6\3\2\2\2\u08a6\u08a4\3\2\2\2\u08a6\u08a7\3")
        buf.write("\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08a9\7\u0273\2\2\u08a9")
        buf.write("\u08ab\3\2\2\2\u08aa\u089d\3\2\2\2\u08aa\u08ab\3\2\2\2")
        buf.write("\u08ab\u08b1\3\2\2\2\u08ac\u08ae\7\u01a2\2\2\u08ad\u08af")
        buf.write("\7\26\2\2\u08ae\u08ad\3\2\2\2\u08ae\u08af\3\2\2\2\u08af")
        buf.write("\u08b0\3\2\2\2\u08b0\u08b2\t\25\2\2\u08b1\u08ac\3\2\2")
        buf.write("\2\u08b1\u08b2\3\2\2\2\u08b2\u0091\3\2\2\2\u08b3\u08b4")
        buf.write("\5\u0426\u0214\2\u08b4\u0093\3\2\2\2\u08b5\u08b8\5\u03ee")
        buf.write("\u01f8\2\u08b6\u08b8\5\u03b8\u01dd\2\u08b7\u08b5\3\2\2")
        buf.write("\2\u08b7\u08b6\3\2\2\2\u08b8\u08bb\3\2\2\2\u08b9\u08ba")
        buf.write("\7~\2\2\u08ba\u08bc\5\u0330\u0199\2\u08bb\u08b9\3\2\2")
        buf.write("\2\u08bb\u08bc\3\2\2\2\u08bc\u08c6\3\2\2\2\u08bd\u08bf")
        buf.write("\7\u0278\2\2\u08be\u08bd\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf")
        buf.write("\u08c0\3\2\2\2\u08c0\u08c2\5\u0096L\2\u08c1\u08be\3\2")
        buf.write("\2\2\u08c2\u08c3\3\2\2\2\u08c3\u08c1\3\2\2\2\u08c3\u08c4")
        buf.write("\3\2\2\2\u08c4\u08c7\3\2\2\2\u08c5\u08c7\5h\65\2\u08c6")
        buf.write("\u08c1\3\2\2\2\u08c6\u08c5\3\2\2\2\u08c6\u08c7\3\2\2\2")
        buf.write("\u08c7\u08cc\3\2\2\2\u08c8\u08cc\5l\67\2\u08c9\u08cc\5")
        buf.write("r:\2\u08ca\u08cc\5t;\2\u08cb\u08b7\3\2\2\2\u08cb\u08c8")
        buf.write("\3\2\2\2\u08cb\u08c9\3\2\2\2\u08cb\u08ca\3\2\2\2\u08cc")
        buf.write("\u0095\3\2\2\2\u08cd\u08ce\7X\2\2\u08ce\u08d0\5\u03d2")
        buf.write("\u01ea\2\u08cf\u08cd\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0")
        buf.write("\u08da\3\2\2\2\u08d1\u08d3\7\u0148\2\2\u08d2\u08d1\3\2")
        buf.write("\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u08db")
        buf.write("\7\u014c\2\2\u08d5\u08db\7\u020d\2\2\u08d6\u08d7\7\u0183")
        buf.write("\2\2\u08d7\u08db\7\u00f6\2\2\u08d8\u08db\5\u0098M\2\u08d9")
        buf.write("\u08db\5\u009eP\2\u08da\u08d2\3\2\2\2\u08da\u08d5\3\2")
        buf.write("\2\2\u08da\u08d6\3\2\2\2\u08da\u08d8\3\2\2\2\u08da\u08d9")
        buf.write("\3\2\2\2\u08db\u08dd\3\2\2\2\u08dc\u08de\5\u00a0Q\2\u08dd")
        buf.write("\u08dc\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u0097\3\2\2\2")
        buf.write("\u08df\u08e0\7\u0194\2\2\u08e0\u08e1\5\u03f0\u01f9\2\u08e1")
        buf.write("\u08e2\5\u009aN\2\u08e2\u0099\3\2\2\2\u08e3\u08e4\7\u0272")
        buf.write("\2\2\u08e4\u08e5\5\u009cO\2\u08e5\u08e6\7\u0273\2\2\u08e6")
        buf.write("\u009b\3\2\2\2\u08e7\u08e9\7\u0278\2\2\u08e8\u08e7\3\2")
        buf.write("\2\2\u08e8\u08e9\3\2\2\2\u08e9\u08ea\3\2\2\2\u08ea\u08ec")
        buf.write("\5\u03ee\u01f8\2\u08eb\u08e8\3\2\2\2\u08ec\u08ed\3\2\2")
        buf.write("\2\u08ed\u08eb\3\2\2\2\u08ed\u08ee\3\2\2\2\u08ee\u009d")
        buf.write("\3\2\2\2\u08ef\u08f0\7@\2\2\u08f0\u08f1\7\u0272\2\2\u08f1")
        buf.write("\u08f2\5\u032e\u0198\2\u08f2\u08f4\7\u0273\2\2\u08f3\u08f5")
        buf.write("\7\u0088\2\2\u08f4\u08f3\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5")
        buf.write("\u009f\3\2\2\2\u08f6\u08f8\7\u0148\2\2\u08f7\u08f6\3\2")
        buf.write("\2\2\u08f7\u08f8\3\2\2\2\u08f8\u08f9\3\2\2\2\u08f9\u0901")
        buf.write("\7\u0080\2\2\u08fa\u08fb\7\u00df\2\2\u08fb\u0901\t\17")
        buf.write("\2\2\u08fc\u0901\t\26\2\2\u08fd\u0901\t\27\2\2\u08fe\u0901")
        buf.write("\t\30\2\2\u08ff\u0901\5\u00a2R\2\u0900\u08f7\3\2\2\2\u0900")
        buf.write("\u08fa\3\2\2\2\u0900\u08fc\3\2\2\2\u0900\u08fd\3\2\2\2")
        buf.write("\u0900\u08fe\3\2\2\2\u0900\u08ff\3\2\2\2\u0901\u0902\3")
        buf.write("\2\2\2\u0902\u0900\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u00a1")
        buf.write("\3\2\2\2\u0904\u0905\7\u0219\2\2\u0905\u090c\7\u00d8\2")
        buf.write("\2\u0906\u090d\5\u03e4\u01f3\2\u0907\u0908\7\u0272\2\2")
        buf.write("\u0908\u0909\5\16\b\2\u0909\u090a\7\u0273\2\2\u090a\u090d")
        buf.write("\3\2\2\2\u090b\u090d\5\24\13\2\u090c\u0906\3\2\2\2\u090c")
        buf.write("\u0907\3\2\2\2\u090c\u090b\3\2\2\2\u090c\u090d\3\2\2\2")
        buf.write("\u090d\u00a3\3\2\2\2\u090e\u090f\7\u0220\2\2\u090f\u0915")
        buf.write("\5> \2\u0910\u0912\5\u008eH\2\u0911\u0910\3\2\2\2\u0911")
        buf.write("\u0912\3\2\2\2\u0912\u0913\3\2\2\2\u0913\u0916\5\u00a6")
        buf.write("T\2\u0914\u0916\5\u008eH\2\u0915\u0911\3\2\2\2\u0915\u0914")
        buf.write("\3\2\2\2\u0916\u00a5\3\2\2\2\u0917\u0918\7\u01e1\2\2\u0918")
        buf.write("\u091a\7\26\2\2\u0919\u091b\t\b\2\2\u091a\u0919\3\2\2")
        buf.write("\2\u091a\u091b\3\2\2\2\u091b\u091c\3\2\2\2\u091c\u0925")
        buf.write("\7\u0107\2\2\u091d\u091f\5<\37\2\u091e\u091d\3\2\2\2\u091e")
        buf.write("\u091f\3\2\2\2\u091f\u0920\3\2\2\2\u0920\u0921\7\u0272")
        buf.write("\2\2\u0921\u0922\5\u00a8U\2\u0922\u0923\7\u0273\2\2\u0923")
        buf.write("\u0926\3\2\2\2\u0924\u0926\5<\37\2\u0925\u091e\3\2\2\2")
        buf.write("\u0925\u0924\3\2\2\2\u0926\u00a7\3\2\2\2\u0927\u0928\7")
        buf.write("\u01ef\2\2\u0928\u092f\5\26\f\2\u0929\u092b\5\u00aaV\2")
        buf.write("\u092a\u092c\5\u0084C\2\u092b\u092a\3\2\2\2\u092b\u092c")
        buf.write("\3\2\2\2\u092c\u092f\3\2\2\2\u092d\u092f\5\u0084C\2\u092e")
        buf.write("\u0927\3\2\2\2\u092e\u0929\3\2\2\2\u092e\u092d\3\2\2\2")
        buf.write("\u092f\u00a9\3\2\2\2\u0930\u0931\t\27\2\2\u0931\u0932")
        buf.write("\7\u01e0\2\2\u0932\u0933\7\u00d3\2\2\u0933\u094a\7\u01aa")
        buf.write("\2\2\u0934\u0935\7C\2\2\u0935\u094a\7\u026c\2\2\u0936")
        buf.write("\u0937\7\u0173\2\2\u0937\u094a\7\u026c\2\2\u0938\u0939")
        buf.write("\7\u00bd\2\2\u0939\u094a\7\u026c\2\2\u093a\u094a\5\u00ac")
        buf.write("W\2\u093b\u094a\5\u00aeX\2\u093c\u094a\5\u00b0Y\2\u093d")
        buf.write("\u093e\7\u0097\2\2\u093e\u094a\5\u00b2Z\2\u093f\u094a")
        buf.write("\7|\2\2\u0940\u0945\7\67\2\2\u0941\u0945\7\u0136\2\2\u0942")
        buf.write("\u0943\7\67\2\2\u0943\u0945\7\u018c\2\2\u0944\u0940\3")
        buf.write("\2\2\2\u0944\u0941\3\2\2\2\u0944\u0942\3\2\2\2\u0945\u0947")
        buf.write("\3\2\2\2\u0946\u0948\5\u0088E\2\u0947\u0946\3\2\2\2\u0947")
        buf.write("\u0948\3\2\2\2\u0948\u094a\3\2\2\2\u0949\u0930\3\2\2\2")
        buf.write("\u0949\u0934\3\2\2\2\u0949\u0936\3\2\2\2\u0949\u0938\3")
        buf.write("\2\2\2\u0949\u093a\3\2\2\2\u0949\u093b\3\2\2\2\u0949\u093c")
        buf.write("\3\2\2\2\u0949\u093d\3\2\2\2\u0949\u093f\3\2\2\2\u0949")
        buf.write("\u0944\3\2\2\2\u094a\u094b\3\2\2\2\u094b\u0949\3\2\2\2")
        buf.write("\u094b\u094c\3\2\2\2\u094c\u00ab\3\2\2\2\u094d\u0953\7")
        buf.write("\u01a1\2\2\u094e\u0954\7\u025b\2\2\u094f\u0950\7\u025d")
        buf.write("\2\2\u0950\u0954\7\u026c\2\2\u0951\u0954\7\35\2\2\u0952")
        buf.write("\u0954\7\u0140\2\2\u0953\u094e\3\2\2\2\u0953\u094f\3\2")
        buf.write("\2\2\u0953\u0951\3\2\2\2\u0953\u0952\3\2\2\2\u0953\u0954")
        buf.write("\3\2\2\2\u0954\u00ad\3\2\2\2\u0955\u0956\t\31\2\2\u0956")
        buf.write("\u00af\3\2\2\2\u0957\u095d\7\u0137\2\2\u0958\u095a\7S")
        buf.write("\2\2\u0959\u095b\t\32\2\2\u095a\u0959\3\2\2\2\u095a\u095b")
        buf.write("\3\2\2\2\u095b\u095d\3\2\2\2\u095c\u0957\3\2\2\2\u095c")
        buf.write("\u0958\3\2\2\2\u095d\u00b1\3\2\2\2\u095e\u095f\7\u0219")
        buf.write("\2\2\u095f\u0961\7\u026e\2\2\u0960\u095e\3\2\2\2\u0960")
        buf.write("\u0961\3\2\2\2\u0961\u0965\3\2\2\2\u0962\u0963\7\u00cd")
        buf.write("\2\2\u0963\u0964\7\64\2\2\u0964\u0966\7\u0291\2\2\u0965")
        buf.write("\u0962\3\2\2\2\u0965\u0966\3\2\2\2\u0966\u0968\3\2\2\2")
        buf.write("\u0967\u0969\7\u026e\2\2\u0968\u0967\3\2\2\2\u0968\u0969")
        buf.write("\3\2\2\2\u0969\u096e\3\2\2\2\u096a\u096c\7\u0134\2\2\u096b")
        buf.write("\u096a\3\2\2\2\u096b\u096c\3\2\2\2\u096c\u096d\3\2\2\2")
        buf.write("\u096d\u096f\7\u01af\2\2\u096e\u096b\3\2\2\2\u096e\u096f")
        buf.write("\3\2\2\2\u096f\u00b3\3\2\2\2\u0970\u0995\7\u0107\2\2\u0971")
        buf.write("\u0976\7\u0272\2\2\u0972\u0974\7\u0278\2\2\u0973\u0972")
        buf.write("\3\2\2\2\u0973\u0974\3\2\2\2\u0974\u0975\3\2\2\2\u0975")
        buf.write("\u0977\5:\36\2\u0976\u0973\3\2\2\2\u0977\u0978\3\2\2\2")
        buf.write("\u0978\u0976\3\2\2\2\u0978\u0979\3\2\2\2\u0979\u097a\3")
        buf.write("\2\2\2\u097a\u097b\7\u0273\2\2\u097b\u097c\7\u01e1\2\2")
        buf.write("\u097c\u0982\7\26\2\2\u097d\u0983\t\b\2\2\u097e\u097f")
        buf.write("\7\u0272\2\2\u097f\u0980\5\u00a8U\2\u0980\u0981\7\u0273")
        buf.write("\2\2\u0981\u0983\3\2\2\2\u0982\u097d\3\2\2\2\u0982\u097e")
        buf.write("\3\2\2\2\u0983\u0984\3\2\2\2\u0984\u0982\3\2\2\2\u0984")
        buf.write("\u0985\3\2\2\2\u0985\u0996\3\2\2\2\u0986\u0987\7\u0272")
        buf.write("\2\2\u0987\u0988\5:\36\2\u0988\u0989\7\u0273\2\2\u0989")
        buf.write("\u098a\7\u01e1\2\2\u098a\u0991\7\26\2\2\u098b\u0992\t")
        buf.write("\b\2\2\u098c\u0992\5<\37\2\u098d\u098e\7\u0272\2\2\u098e")
        buf.write("\u098f\5\u00a8U\2\u098f\u0990\7\u0273\2\2\u0990\u0992")
        buf.write("\3\2\2\2\u0991\u098b\3\2\2\2\u0991\u098c\3\2\2\2\u0991")
        buf.write("\u098d\3\2\2\2\u0992\u0993\3\2\2\2\u0993\u0991\3\2\2\2")
        buf.write("\u0993\u0994\3\2\2\2\u0994\u0996\3\2\2\2\u0995\u0971\3")
        buf.write("\2\2\2\u0995\u0986\3\2\2\2\u0996\u00b5\3\2\2\2\u0997\u0999")
        buf.write("\7\u0245\2\2\u0998\u099a\7I\2\2\u0999\u0998\3\2\2\2\u0999")
        buf.write("\u099a\3\2\2\2\u099a\u099b\3\2\2\2\u099b\u099d\5\u03ee")
        buf.write("\u01f8\2\u099c\u099e\5\u00b8]\2\u099d\u099c\3\2\2\2\u099d")
        buf.write("\u099e\3\2\2\2\u099e\u09a0\3\2\2\2\u099f\u09a1\5\u00ba")
        buf.write("^\2\u09a0\u099f\3\2\2\2\u09a0\u09a1\3\2\2\2\u09a1\u00b7")
        buf.write("\3\2\2\2\u09a2\u09a3\7\u01e1\2\2\u09a3\u09bb\7\26\2\2")
        buf.write("\u09a4\u09a5\7\u0151\2\2\u09a5\u09bc\7\u0198\2\2\u09a6")
        buf.write("\u09a8\t\b\2\2\u09a7\u09a6\3\2\2\2\u09a7\u09a8\3\2\2\2")
        buf.write("\u09a8\u09ac\3\2\2\2\u09a9\u09ad\7D\2\2\u09aa\u09ab\7")
        buf.write("\'\2\2\u09ab\u09ad\7\u0234\2\2\u09ac\u09a9\3\2\2\2\u09ac")
        buf.write("\u09aa\3\2\2\2\u09ad\u09b9\3\2\2\2\u09ae\u09b3\5<\37\2")
        buf.write("\u09af\u09b0\7\u0272\2\2\u09b0\u09b1\5\u00aaV\2\u09b1")
        buf.write("\u09b2\7\u0273\2\2\u09b2\u09b4\3\2\2\2\u09b3\u09af\3\2")
        buf.write("\2\2\u09b3\u09b4\3\2\2\2\u09b4\u09ba\3\2\2\2\u09b5\u09b6")
        buf.write("\7\u0272\2\2\u09b6\u09b7\5\u00aaV\2\u09b7\u09b8\7\u0273")
        buf.write("\2\2\u09b8\u09ba\3\2\2\2\u09b9\u09ae\3\2\2\2\u09b9\u09b5")
        buf.write("\3\2\2\2\u09b9\u09ba\3\2\2\2\u09ba\u09bc\3\2\2\2\u09bb")
        buf.write("\u09a4\3\2\2\2\u09bb\u09a7\3\2\2\2\u09bc\u09c2\3\2\2\2")
        buf.write("\u09bd\u09be\7\u01e1\2\2\u09be\u09bf\7\u0221\2\2\u09bf")
        buf.write("\u09c0\7\26\2\2\u09c0\u09c2\t\33\2\2\u09c1\u09a2\3\2\2")
        buf.write("\2\u09c1\u09bd\3\2\2\2\u09c2\u00b9\3\2\2\2\u09c3\u09c4")
        buf.write("\7\u0242\2\2\u09c4\u09c6\7\u026f\2\2\u09c5\u09c3\3\2\2")
        buf.write("\2\u09c5\u09c6\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7\u09c8")
        buf.write("\7\u0091\2\2\u09c8\u09cc\7\u026f\2\2\u09c9\u09ca\5\u00bc")
        buf.write("_\2\u09ca\u09cb\7\u0141\2\2\u09cb\u09cd\3\2\2\2\u09cc")
        buf.write("\u09c9\3\2\2\2\u09cc\u09cd\3\2\2\2\u09cd\u09d1\3\2\2\2")
        buf.write("\u09ce\u09cf\5\u00bc_\2\u09cf\u09d0\7\23\2\2\u09d0\u09d2")
        buf.write("\3\2\2\2\u09d1\u09ce\3\2\2\2\u09d1\u09d2\3\2\2\2\u09d2")
        buf.write("\u00bb\3\2\2\2\u09d3\u09d4\t\34\2\2\u09d4\u00bd\3\2\2")
        buf.write("\2\u09d5\u09de\5\u00c0a\2\u09d6\u09de\5\u00c6d\2\u09d7")
        buf.write("\u09de\5\u00caf\2\u09d8\u09de\5\u00ccg\2\u09d9\u09de\5")
        buf.write("\u00e2r\2\u09da\u09de\5\u00e6t\2\u09db\u09de\5\u00e8u")
        buf.write("\2\u09dc\u09de\5\u00ecw\2\u09dd\u09d5\3\2\2\2\u09dd\u09d6")
        buf.write("\3\2\2\2\u09dd\u09d7\3\2\2\2\u09dd\u09d8\3\2\2\2\u09dd")
        buf.write("\u09d9\3\2\2\2\u09dd\u09da\3\2\2\2\u09dd\u09db\3\2\2\2")
        buf.write("\u09dd\u09dc\3\2\2\2\u09de\u00bf\3\2\2\2\u09df\u09e0\7")
        buf.write("\u016c\2\2\u09e0\u09e1\7\64\2\2\u09e1\u09e2\7\u0189\2")
        buf.write("\2\u09e2\u09f6\5\u009aN\2\u09e3\u09e4\7\u00eb\2\2\u09e4")
        buf.write("\u09e5\7\u0272\2\2\u09e5\u09e6\5\u0330\u0199\2\u09e6\u09f4")
        buf.write("\7\u0273\2\2\u09e7\u09e8\7\u01e1\2\2\u09e8\u09e9\7\u00d3")
        buf.write("\2\2\u09e9\u09ee\7\u0272\2\2\u09ea\u09ec\7\u0278\2\2\u09eb")
        buf.write("\u09ea\3\2\2\2\u09eb\u09ec\3\2\2\2\u09ec\u09ed\3\2\2\2")
        buf.write("\u09ed\u09ef\5\26\f\2\u09ee\u09eb\3\2\2\2\u09ef\u09f0")
        buf.write("\3\2\2\2\u09f0\u09ee\3\2\2\2\u09f0\u09f1\3\2\2\2\u09f1")
        buf.write("\u09f2\3\2\2\2\u09f2\u09f3\7\u0273\2\2\u09f3\u09f5\3\2")
        buf.write("\2\2\u09f4\u09e7\3\2\2\2\u09f4\u09f5\3\2\2\2\u09f5\u09f7")
        buf.write("\3\2\2\2\u09f6\u09e3\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7")
        buf.write("\u09f8\3\2\2\2\u09f8\u0a03\7\u0272\2\2\u09f9\u09fb\7\u0278")
        buf.write("\2\2\u09fa\u09f9\3\2\2\2\u09fa\u09fb\3\2\2\2\u09fb\u09fc")
        buf.write("\3\2\2\2\u09fc\u09fe\7\u016c\2\2\u09fd\u09ff\5*\26\2\u09fe")
        buf.write("\u09fd\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff\u0a00\3\2\2\2")
        buf.write("\u0a00\u0a01\5\u00c2b\2\u0a01\u0a02\5\u00c4c\2\u0a02\u0a04")
        buf.write("\3\2\2\2\u0a03\u09fa\3\2\2\2\u0a04\u0a05\3\2\2\2\u0a05")
        buf.write("\u0a03\3\2\2\2\u0a05\u0a06\3\2\2\2\u0a06\u0a07\3\2\2\2")
        buf.write("\u0a07\u0a08\7\u0273\2\2\u0a08\u00c1\3\2\2\2\u0a09\u0a0a")
        buf.write("\7\u021c\2\2\u0a0a\u0a0b\7\u00fc\2\2\u0a0b\u0a0c\7\u01f2")
        buf.write("\2\2\u0a0c\u0a11\7\u0272\2\2\u0a0d\u0a0f\7\u0278\2\2\u0a0e")
        buf.write("\u0a0d\3\2\2\2\u0a0e\u0a0f\3\2\2\2\u0a0f\u0a10\3\2\2\2")
        buf.write("\u0a10\u0a12\5,\27\2\u0a11\u0a0e\3\2\2\2\u0a12\u0a13\3")
        buf.write("\2\2\2\u0a13\u0a11\3\2\2\2\u0a13\u0a14\3\2\2\2\u0a14\u0a15")
        buf.write("\3\2\2\2\u0a15\u0a16\7\u0273\2\2\u0a16\u00c3\3\2\2\2\u0a17")
        buf.write("\u0a19\5~@\2\u0a18\u0a17\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19")
        buf.write("\u0a1b\3\2\2\2\u0a1a\u0a1c\5\u0080A\2\u0a1b\u0a1a\3\2")
        buf.write("\2\2\u0a1b\u0a1c\3\2\2\2\u0a1c\u0a1f\3\2\2\2\u0a1d\u0a20")
        buf.write("\5\66\34\2\u0a1e\u0a20\5\30\r\2\u0a1f\u0a1d\3\2\2\2\u0a1f")
        buf.write("\u0a1e\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u0a25\3\2\2\2")
        buf.write("\u0a21\u0a23\7\u0165\2\2\u0a22\u0a24\5\u0080A\2\u0a23")
        buf.write("\u0a22\3\2\2\2\u0a23\u0a24\3\2\2\2\u0a24\u0a26\3\2\2\2")
        buf.write("\u0a25\u0a21\3\2\2\2\u0a25\u0a26\3\2\2\2\u0a26\u0a2a\3")
        buf.write("\2\2\2\u0a27\u0a2b\5\u00b4[\2\u0a28\u0a2b\5\u00a4S\2\u0a29")
        buf.write("\u0a2b\5\u0090I\2\u0a2a\u0a27\3\2\2\2\u0a2a\u0a28\3\2")
        buf.write("\2\2\u0a2a\u0a29\3\2\2\2\u0a2a\u0a2b\3\2\2\2\u0a2b\u00c5")
        buf.write("\3\2\2\2\u0a2c\u0a2d\7\u016c\2\2\u0a2d\u0a2e\7\64\2\2")
        buf.write("\u0a2e\u0a2f\7\u0105\2\2\u0a2f\u0a30\7\u0272\2\2\u0a30")
        buf.write("\u0a31\5\u03ee\u01f8\2\u0a31\u0a32\7\u0273\2\2\u0a32\u0a3d")
        buf.write("\7\u0272\2\2\u0a33\u0a35\7\u0278\2\2\u0a34\u0a33\3\2\2")
        buf.write("\2\u0a34\u0a35\3\2\2\2\u0a35\u0a36\3\2\2\2\u0a36\u0a38")
        buf.write("\7\u016c\2\2\u0a37\u0a39\5*\26\2\u0a38\u0a37\3\2\2\2\u0a38")
        buf.write("\u0a39\3\2\2\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0a3b\5\u00c8")
        buf.write("e\2\u0a3b\u0a3c\5\u00c4c\2\u0a3c\u0a3e\3\2\2\2\u0a3d\u0a34")
        buf.write("\3\2\2\2\u0a3e\u0a3f\3\2\2\2\u0a3f\u0a3d\3\2\2\2\u0a3f")
        buf.write("\u0a40\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a42\7\u0273")
        buf.write("\2\2\u0a42\u00c7\3\2\2\2\u0a43\u0a44\7\u021c\2\2\u0a44")
        buf.write("\u0a4e\7\u0272\2\2\u0a45\u0a47\7\u0278\2\2\u0a46\u0a45")
        buf.write("\3\2\2\2\u0a46\u0a47\3\2\2\2\u0a47\u0a48\3\2\2\2\u0a48")
        buf.write("\u0a4a\5,\27\2\u0a49\u0a46\3\2\2\2\u0a4a\u0a4b\3\2\2\2")
        buf.write("\u0a4b\u0a49\3\2\2\2\u0a4b\u0a4c\3\2\2\2\u0a4c\u0a4f\3")
        buf.write("\2\2\2\u0a4d\u0a4f\7~\2\2\u0a4e\u0a49\3\2\2\2\u0a4e\u0a4d")
        buf.write("\3\2\2\2\u0a4f\u0a50\3\2\2\2\u0a50\u0a51\7\u0273\2\2\u0a51")
        buf.write("\u00c9\3\2\2\2\u0a52\u0a53\7\u016c\2\2\u0a53\u0a54\7\64")
        buf.write("\2\2\u0a54\u0a55\7\u00c8\2\2\u0a55\u0a58\5\u009aN\2\u0a56")
        buf.write("\u0a59\5\62\32\2\u0a57\u0a59\5@!\2\u0a58\u0a56\3\2\2\2")
        buf.write("\u0a58\u0a57\3\2\2\2\u0a59\u00cb\3\2\2\2\u0a5a\u0a5b\7")
        buf.write("\u016c\2\2\u0a5b\u0a5c\7\64\2\2\u0a5c\u0a5d\7\u0189\2")
        buf.write("\2\u0a5d\u0a71\5\u009aN\2\u0a5e\u0a5f\7\u00eb\2\2\u0a5f")
        buf.write("\u0a60\7\u0272\2\2\u0a60\u0a61\5\u0330\u0199\2\u0a61\u0a6f")
        buf.write("\7\u0273\2\2\u0a62\u0a63\7\u01e1\2\2\u0a63\u0a64\7\u00d3")
        buf.write("\2\2\u0a64\u0a69\7\u0272\2\2\u0a65\u0a67\7\u0278\2\2\u0a66")
        buf.write("\u0a65\3\2\2\2\u0a66\u0a67\3\2\2\2\u0a67\u0a68\3\2\2\2")
        buf.write("\u0a68\u0a6a\5\26\f\2\u0a69\u0a66\3\2\2\2\u0a6a\u0a6b")
        buf.write("\3\2\2\2\u0a6b\u0a69\3\2\2\2\u0a6b\u0a6c\3\2\2\2\u0a6c")
        buf.write("\u0a6d\3\2\2\2\u0a6d\u0a6e\7\u0273\2\2\u0a6e\u0a70\3\2")
        buf.write("\2\2\u0a6f\u0a62\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0a72")
        buf.write("\3\2\2\2\u0a71\u0a5e\3\2\2\2\u0a71\u0a72\3\2\2\2\u0a72")
        buf.write("\u0a76\3\2\2\2\u0a73\u0a77\5\u00ceh\2\u0a74\u0a77\5\u00d0")
        buf.write("i\2\u0a75\u0a77\5\u00dco\2\u0a76\u0a73\3\2\2\2\u0a76\u0a74")
        buf.write("\3\2\2\2\u0a76\u0a75\3\2\2\2\u0a77\u0a78\3\2\2\2\u0a78")
        buf.write("\u0a7d\7\u0272\2\2\u0a79\u0a7b\7\u0278\2\2\u0a7a\u0a79")
        buf.write("\3\2\2\2\u0a7a\u0a7b\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c")
        buf.write("\u0a7e\5\u00dep\2\u0a7d\u0a7a\3\2\2\2\u0a7e\u0a7f\3\2")
        buf.write("\2\2\u0a7f\u0a7d\3\2\2\2\u0a7f\u0a80\3\2\2\2\u0a80\u0a81")
        buf.write("\3\2\2\2\u0a81\u0a82\7\u0273\2\2\u0a82\u00cd\3\2\2\2\u0a83")
        buf.write("\u0a84\7\u01e4\2\2\u0a84\u0a85\7\64\2\2\u0a85\u0a86\7")
        buf.write("\u0189\2\2\u0a86\u0a88\5\u009aN\2\u0a87\u0a89\5\u00d2")
        buf.write("j\2\u0a88\u0a87\3\2\2\2\u0a88\u0a89\3\2\2\2\u0a89\u00cf")
        buf.write("\3\2\2\2\u0a8a\u0a8b\7\u01e4\2\2\u0a8b\u0a8c\7\64\2\2")
        buf.write("\u0a8c\u0a8d\7\u0105\2\2\u0a8d\u0a8e\7\u0272\2\2\u0a8e")
        buf.write("\u0a8f\5\u03ee\u01f8\2\u0a8f\u0a91\7\u0273\2\2\u0a90\u0a92")
        buf.write("\5\u00d2j\2\u0a91\u0a90\3\2\2\2\u0a91\u0a92\3\2\2\2\u0a92")
        buf.write("\u00d1\3\2\2\2\u0a93\u0a94\7\u01e4\2\2\u0a94\u0ab3\7\u01f0")
        buf.write("\2\2\u0a95\u0aae\7\u0272\2\2\u0a96\u0a98\7\u0278\2\2\u0a97")
        buf.write("\u0a96\3\2\2\2\u0a97\u0a98\3\2\2\2\u0a98\u0a99\3\2\2\2")
        buf.write("\u0a99\u0a9b\5\u00d4k\2\u0a9a\u0a97\3\2\2\2\u0a9b\u0a9c")
        buf.write("\3\2\2\2\u0a9c\u0a9a\3\2\2\2\u0a9c\u0a9d\3\2\2\2\u0a9d")
        buf.write("\u0aaf\3\2\2\2\u0a9e\u0aa0\7\u0278\2\2\u0a9f\u0a9e\3\2")
        buf.write("\2\2\u0a9f\u0aa0\3\2\2\2\u0aa0\u0aa1\3\2\2\2\u0aa1\u0aa3")
        buf.write("\5\u00d6l\2\u0aa2\u0a9f\3\2\2\2\u0aa3\u0aa4\3\2\2\2\u0aa4")
        buf.write("\u0aa2\3\2\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5\u0aaf\3\2\2\2")
        buf.write("\u0aa6\u0aa8\7\u0278\2\2\u0aa7\u0aa6\3\2\2\2\u0aa7\u0aa8")
        buf.write("\3\2\2\2\u0aa8\u0aa9\3\2\2\2\u0aa9\u0aab\5\u00d8m\2\u0aaa")
        buf.write("\u0aa7\3\2\2\2\u0aab\u0aac\3\2\2\2\u0aac\u0aaa\3\2\2\2")
        buf.write("\u0aac\u0aad\3\2\2\2\u0aad\u0aaf\3\2\2\2\u0aae\u0a9a\3")
        buf.write("\2\2\2\u0aae\u0aa2\3\2\2\2\u0aae\u0aaa\3\2\2\2\u0aaf\u0ab0")
        buf.write("\3\2\2\2\u0ab0\u0ab1\7\u0273\2\2\u0ab1\u0ab4\3\2\2\2\u0ab2")
        buf.write("\u0ab4\5\u00dan\2\u0ab3\u0a95\3\2\2\2\u0ab3\u0ab2\3\2")
        buf.write("\2\2\u0ab4\u00d3\3\2\2\2\u0ab5\u0ab7\7\u01e4\2\2\u0ab6")
        buf.write("\u0ab8\5P)\2\u0ab7\u0ab6\3\2\2\2\u0ab7\u0ab8\3\2\2\2\u0ab8")
        buf.write("\u0ab9\3\2\2\2\u0ab9\u0abb\5\u00c2b\2\u0aba\u0abc\5\64")
        buf.write("\33\2\u0abb\u0aba\3\2\2\2\u0abb\u0abc\3\2\2\2\u0abc\u00d5")
        buf.write("\3\2\2\2\u0abd\u0abf\7\u01e4\2\2\u0abe\u0ac0\5P)\2\u0abf")
        buf.write("\u0abe\3\2\2\2\u0abf\u0ac0\3\2\2\2\u0ac0\u0ac1\3\2\2\2")
        buf.write("\u0ac1\u0ac3\5\u00c8e\2\u0ac2\u0ac4\5\64\33\2\u0ac3\u0ac2")
        buf.write("\3\2\2\2\u0ac3\u0ac4\3\2\2\2\u0ac4\u00d7\3\2\2\2\u0ac5")
        buf.write("\u0ac7\7\u01e4\2\2\u0ac6\u0ac8\5P)\2\u0ac7\u0ac6\3\2\2")
        buf.write("\2\u0ac7\u0ac8\3\2\2\2\u0ac8\u0aca\3\2\2\2\u0ac9\u0acb")
        buf.write("\5\64\33\2\u0aca\u0ac9\3\2\2\2\u0aca\u0acb\3\2\2\2\u0acb")
        buf.write("\u00d9\3\2\2\2\u0acc\u0acd\7\u026c\2\2\u0acd\u00db\3\2")
        buf.write("\2\2\u0ace\u0acf\7\u01e4\2\2\u0acf\u0ad0\7\64\2\2\u0ad0")
        buf.write("\u0ad1\7\u00c8\2\2\u0ad1\u0ae4\5\u009aN\2\u0ad2\u0ad3")
        buf.write("\7\u01e5\2\2\u0ad3\u0ae1\7\u026c\2\2\u0ad4\u0ad5\7\u01e1")
        buf.write("\2\2\u0ad5\u0ad6\7\u00d3\2\2\u0ad6\u0adb\7\u0272\2\2\u0ad7")
        buf.write("\u0ad9\7\u0278\2\2\u0ad8\u0ad7\3\2\2\2\u0ad8\u0ad9\3\2")
        buf.write("\2\2\u0ad9\u0ada\3\2\2\2\u0ada\u0adc\5\26\f\2\u0adb\u0ad8")
        buf.write("\3\2\2\2\u0adc\u0add\3\2\2\2\u0add\u0adb\3\2\2\2\u0add")
        buf.write("\u0ade\3\2\2\2\u0ade\u0adf\3\2\2\2\u0adf\u0ae0\7\u0273")
        buf.write("\2\2\u0ae0\u0ae2\3\2\2\2\u0ae1\u0ad4\3\2\2\2\u0ae1\u0ae2")
        buf.write("\3\2\2\2\u0ae2\u0ae5\3\2\2\2\u0ae3\u0ae5\5\u00d2j\2\u0ae4")
        buf.write("\u0ad2\3\2\2\2\u0ae4\u0ae3\3\2\2\2\u0ae4\u0ae5\3\2\2\2")
        buf.write("\u0ae5\u00dd\3\2\2\2\u0ae6\u0ae8\7\u016c\2\2\u0ae7\u0ae9")
        buf.write("\5*\26\2\u0ae8\u0ae7\3\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9")
        buf.write("\u0aea\3\2\2\2\u0aea\u0aeb\5\u00c2b\2\u0aeb\u0b0c\5\u00c4")
        buf.write("c\2\u0aec\u0b05\7\u0272\2\2\u0aed\u0aef\7\u0278\2\2\u0aee")
        buf.write("\u0aed\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u0af0\3\2\2\2")
        buf.write("\u0af0\u0af2\5\u00d4k\2\u0af1\u0aee\3\2\2\2\u0af2\u0af3")
        buf.write("\3\2\2\2\u0af3\u0af1\3\2\2\2\u0af3\u0af4\3\2\2\2\u0af4")
        buf.write("\u0b06\3\2\2\2\u0af5\u0af7\7\u0278\2\2\u0af6\u0af5\3\2")
        buf.write("\2\2\u0af6\u0af7\3\2\2\2\u0af7\u0af8\3\2\2\2\u0af8\u0afa")
        buf.write("\5\u00d6l\2\u0af9\u0af6\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb")
        buf.write("\u0af9\3\2\2\2\u0afb\u0afc\3\2\2\2\u0afc\u0b06\3\2\2\2")
        buf.write("\u0afd\u0aff\7\u0278\2\2\u0afe\u0afd\3\2\2\2\u0afe\u0aff")
        buf.write("\3\2\2\2\u0aff\u0b00\3\2\2\2\u0b00\u0b02\5\u00d8m\2\u0b01")
        buf.write("\u0afe\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0b01\3\2\2\2")
        buf.write("\u0b03\u0b04\3\2\2\2\u0b04\u0b06\3\2\2\2\u0b05\u0af1\3")
        buf.write("\2\2\2\u0b05\u0af9\3\2\2\2\u0b05\u0b01\3\2\2\2\u0b06\u0b07")
        buf.write("\3\2\2\2\u0b07\u0b08\7\u0273\2\2\u0b08\u0b0b\3\2\2\2\u0b09")
        buf.write("\u0b0b\5\u00e0q\2\u0b0a\u0aec\3\2\2\2\u0b0a\u0b09\3\2")
        buf.write("\2\2\u0b0b\u0b0d\3\2\2\2\u0b0c\u0b0a\3\2\2\2\u0b0c\u0b0d")
        buf.write("\3\2\2\2\u0b0d\u00df\3\2\2\2\u0b0e\u0b0f\7\u01e5\2\2\u0b0f")
        buf.write("\u0b1d\7\u026c\2\2\u0b10\u0b11\7\u01e1\2\2\u0b11\u0b12")
        buf.write("\7\u00d3\2\2\u0b12\u0b17\7\u0272\2\2\u0b13\u0b15\7\u0278")
        buf.write("\2\2\u0b14\u0b13\3\2\2\2\u0b14\u0b15\3\2\2\2\u0b15\u0b16")
        buf.write("\3\2\2\2\u0b16\u0b18\5\26\f\2\u0b17\u0b14\3\2\2\2\u0b18")
        buf.write("\u0b19\3\2\2\2\u0b19\u0b17\3\2\2\2\u0b19\u0b1a\3\2\2\2")
        buf.write("\u0b1a\u0b1b\3\2\2\2\u0b1b\u0b1c\7\u0273\2\2\u0b1c\u0b1e")
        buf.write("\3\2\2\2\u0b1d\u0b10\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e")
        buf.write("\u00e1\3\2\2\2\u0b1f\u0b20\7\u016c\2\2\u0b20\u0b21\7\64")
        buf.write("\2\2\u0b21\u0b22\7\u0105\2\2\u0b22\u0b23\7\u0272\2\2\u0b23")
        buf.write("\u0b24\5\u03ee\u01f8\2\u0b24\u0b28\7\u0273\2\2\u0b25\u0b29")
        buf.write("\5\u00ceh\2\u0b26\u0b29\5\u00d0i\2\u0b27\u0b29\5\u00dc")
        buf.write("o\2\u0b28\u0b25\3\2\2\2\u0b28\u0b26\3\2\2\2\u0b28\u0b27")
        buf.write("\3\2\2\2\u0b29\u0b2a\3\2\2\2\u0b2a\u0b2f\7\u0272\2\2\u0b2b")
        buf.write("\u0b2d\7\u0278\2\2\u0b2c\u0b2b\3\2\2\2\u0b2c\u0b2d\3\2")
        buf.write("\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b30\5\u00e4s\2\u0b2f")
        buf.write("\u0b2c\3\2\2\2\u0b30\u0b31\3\2\2\2\u0b31\u0b2f\3\2\2\2")
        buf.write("\u0b31\u0b32\3\2\2\2\u0b32\u0b33\3\2\2\2\u0b33\u0b34\7")
        buf.write("\u0273\2\2\u0b34\u00e3\3\2\2\2\u0b35\u0b37\7\u016c\2\2")
        buf.write("\u0b36\u0b38\5*\26\2\u0b37\u0b36\3\2\2\2\u0b37\u0b38\3")
        buf.write("\2\2\2\u0b38\u0b39\3\2\2\2\u0b39\u0b3a\5\u00c8e\2\u0b3a")
        buf.write("\u0b5b\5\u00c4c\2\u0b3b\u0b54\7\u0272\2\2\u0b3c\u0b3e")
        buf.write("\7\u0278\2\2\u0b3d\u0b3c\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e")
        buf.write("\u0b3f\3\2\2\2\u0b3f\u0b41\5\u00d4k\2\u0b40\u0b3d\3\2")
        buf.write("\2\2\u0b41\u0b42\3\2\2\2\u0b42\u0b40\3\2\2\2\u0b42\u0b43")
        buf.write("\3\2\2\2\u0b43\u0b55\3\2\2\2\u0b44\u0b46\7\u0278\2\2\u0b45")
        buf.write("\u0b44\3\2\2\2\u0b45\u0b46\3\2\2\2\u0b46\u0b47\3\2\2\2")
        buf.write("\u0b47\u0b49\5\u00d6l\2\u0b48\u0b45\3\2\2\2\u0b49\u0b4a")
        buf.write("\3\2\2\2\u0b4a\u0b48\3\2\2\2\u0b4a\u0b4b\3\2\2\2\u0b4b")
        buf.write("\u0b55\3\2\2\2\u0b4c\u0b4e\7\u0278\2\2\u0b4d\u0b4c\3\2")
        buf.write("\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e\u0b4f\3\2\2\2\u0b4f\u0b51")
        buf.write("\5\u00d8m\2\u0b50\u0b4d\3\2\2\2\u0b51\u0b52\3\2\2\2\u0b52")
        buf.write("\u0b50\3\2\2\2\u0b52\u0b53\3\2\2\2\u0b53\u0b55\3\2\2\2")
        buf.write("\u0b54\u0b40\3\2\2\2\u0b54\u0b48\3\2\2\2\u0b54\u0b50\3")
        buf.write("\2\2\2\u0b55\u0b56\3\2\2\2\u0b56\u0b57\7\u0273\2\2\u0b57")
        buf.write("\u0b5a\3\2\2\2\u0b58\u0b5a\5\u00e0q\2\u0b59\u0b3b\3\2")
        buf.write("\2\2\u0b59\u0b58\3\2\2\2\u0b5a\u0b5c\3\2\2\2\u0b5b\u0b59")
        buf.write("\3\2\2\2\u0b5b\u0b5c\3\2\2\2\u0b5c\u00e5\3\2\2\2\u0b5d")
        buf.write("\u0b5e\7\u016c\2\2\u0b5e\u0b5f\7\64\2\2\u0b5f\u0b60\7")
        buf.write("\u00c8\2\2\u0b60\u0b63\7\u0272\2\2\u0b61\u0b62\7\u0278")
        buf.write("\2\2\u0b62\u0b64\5\u03ee\u01f8\2\u0b63\u0b61\3\2\2\2\u0b64")
        buf.write("\u0b65\3\2\2\2\u0b65\u0b63\3\2\2\2\u0b65\u0b66\3\2\2\2")
        buf.write("\u0b66\u0b67\3\2\2\2\u0b67\u0b6b\7\u0273\2\2\u0b68\u0b6c")
        buf.write("\5\u00ceh\2\u0b69\u0b6c\5\u00d0i\2\u0b6a\u0b6c\5\u00dc")
        buf.write("o\2\u0b6b\u0b68\3\2\2\2\u0b6b\u0b69\3\2\2\2\u0b6b\u0b6a")
        buf.write("\3\2\2\2\u0b6c\u0b6f\3\2\2\2\u0b6d\u0b70\5\62\32\2\u0b6e")
        buf.write("\u0b70\5@!\2\u0b6f\u0b6d\3\2\2\2\u0b6f\u0b6e\3\2\2\2\u0b70")
        buf.write("\u00e7\3\2\2\2\u0b71\u0b72\7\u016c\2\2\u0b72\u0b73\7\64")
        buf.write("\2\2\u0b73\u0b74\7\u0193\2\2\u0b74\u0b75\7\u0272\2\2\u0b75")
        buf.write("\u0b76\5\u0426\u0214\2\u0b76\u0b82\7\u0273\2\2\u0b77\u0b7c")
        buf.write("\7\u0272\2\2\u0b78\u0b7a\7\u0278\2\2\u0b79\u0b78\3\2\2")
        buf.write("\2\u0b79\u0b7a\3\2\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b\u0b7d")
        buf.write("\5\u00eav\2\u0b7c\u0b79\3\2\2\2\u0b7d\u0b7e\3\2\2\2\u0b7e")
        buf.write("\u0b7c\3\2\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f\u0b80\3\2\2\2")
        buf.write("\u0b80\u0b81\7\u0273\2\2\u0b81\u0b83\3\2\2\2\u0b82\u0b77")
        buf.write("\3\2\2\2\u0b82\u0b83\3\2\2\2\u0b83\u00e9\3\2\2\2\u0b84")
        buf.write("\u0b86\7\u016c\2\2\u0b85\u0b87\5*\26\2\u0b86\u0b85\3\2")
        buf.write("\2\2\u0b86\u0b87\3\2\2\2\u0b87\u0b88\3\2\2\2\u0b88\u0b89")
        buf.write("\5\u00c4c\2\u0b89\u00eb\3\2\2\2\u0b8a\u0b8b\7\u016c\2")
        buf.write("\2\u0b8b\u0b8c\7\64\2\2\u0b8c\u0b97\7\u01ec\2\2\u0b8d")
        buf.write("\u0b8e\7\u017a\2\2\u0b8e\u0b98\7\u026c\2\2\u0b8f\u0b91")
        buf.write("\7\u0278\2\2\u0b90\u0b8f\3\2\2\2\u0b90\u0b91\3\2\2\2\u0b91")
        buf.write("\u0b92\3\2\2\2\u0b92\u0b94\5\u00eav\2\u0b93\u0b90\3\2")
        buf.write("\2\2\u0b94\u0b95\3\2\2\2\u0b95\u0b93\3\2\2\2\u0b95\u0b96")
        buf.write("\3\2\2\2\u0b96\u0b98\3\2\2\2\u0b97\u0b8d\3\2\2\2\u0b97")
        buf.write("\u0b93\3\2\2\2\u0b97\u0b98\3\2\2\2\u0b98\u00ed\3\2\2\2")
        buf.write("\u0b99\u0b9b\t\27\2\2\u0b9a\u0b9c\t\30\2\2\u0b9b\u0b9a")
        buf.write("\3\2\2\2\u0b9b\u0b9c\3\2\2\2\u0b9c\u0ba3\3\2\2\2\u0b9d")
        buf.write("\u0b9e\7\u020d\2\2\u0b9e\u0ba4\5\u009aN\2\u0b9f\u0ba0")
        buf.write("\7\u0183\2\2\u0ba0\u0ba4\7\u00f6\2\2\u0ba1\u0ba2\7X\2")
        buf.write("\2\u0ba2\u0ba4\5\u03d2\u01ea\2\u0ba3\u0b9d\3\2\2\2\u0ba3")
        buf.write("\u0b9f\3\2\2\2\u0ba3\u0ba1\3\2\2\2\u0ba4\u0ba6\3\2\2\2")
        buf.write("\u0ba5\u0ba7\5\u00a2R\2\u0ba6\u0ba5\3\2\2\2\u0ba6\u0ba7")
        buf.write("\3\2\2\2\u0ba7\u0ba9\3\2\2\2\u0ba8\u0baa\5\u00f0y\2\u0ba9")
        buf.write("\u0ba8\3\2\2\2\u0ba9\u0baa\3\2\2\2\u0baa\u0bac\3\2\2\2")
        buf.write("\u0bab\u0bad\7:\2\2\u0bac\u0bab\3\2\2\2\u0bac\u0bad\3")
        buf.write("\2\2\2\u0bad\u0bb0\3\2\2\2\u0bae\u0baf\t\35\2\2\u0baf")
        buf.write("\u0bb1\7\u00d8\2\2\u0bb0\u0bae\3\2\2\2\u0bb0\u0bb1\3\2")
        buf.write("\2\2\u0bb1\u00ef\3\2\2\2\u0bb2\u0bb3\7\u00a1\2\2\u0bb3")
        buf.write("\u0bb4\7\u00ec\2\2\u0bb4\u0bb5\5\u03f0\u01f9\2\u0bb5\u00f1")
        buf.write("\3\2\2\2\u0bb6\u0bb8\t\27\2\2\u0bb7\u0bb6\3\2\2\2\u0bb7")
        buf.write("\u0bb8\3\2\2\2\u0bb8\u0bb9\3\2\2\2\u0bb9\u0bba\7\u01aa")
        buf.write("\2\2\u0bba\u0bbb\7\u0127\2\2\u0bbb\u00f3\3\2\2\2\u0bbc")
        buf.write("\u0bbd\7\u00b2\2\2\u0bbd\u0bbe\7\24\2\2\u0bbe\u0bc3\7")
        buf.write("\u0291\2\2\u0bbf\u0bc0\7\u0134\2\2\u0bc0\u0bc1\7\u00b2")
        buf.write("\2\2\u0bc1\u0bc3\7\24\2\2\u0bc2\u0bbc\3\2\2\2\u0bc2\u0bbf")
        buf.write("\3\2\2\2\u0bc3\u00f5\3\2\2\2\u0bc4\u0bc5\7\u0152\2\2\u0bc5")
        buf.write("\u0bc7\5\u03d6\u01ec\2\u0bc6\u0bc8\5\u00f8}\2\u0bc7\u0bc6")
        buf.write("\3\2\2\2\u0bc7\u0bc8\3\2\2\2\u0bc8\u0bd4\3\2\2\2\u0bc9")
        buf.write("\u0bce\7\u0272\2\2\u0bca\u0bcc\7\u0278\2\2\u0bcb\u0bca")
        buf.write("\3\2\2\2\u0bcb\u0bcc\3\2\2\2\u0bcc\u0bcd\3\2\2\2\u0bcd")
        buf.write("\u0bcf\5\u0094K\2\u0bce\u0bcb\3\2\2\2\u0bcf\u0bd0\3\2")
        buf.write("\2\2\u0bd0\u0bce\3\2\2\2\u0bd0\u0bd1\3\2\2\2\u0bd1\u0bd2")
        buf.write("\3\2\2\2\u0bd2\u0bd3\7\u0273\2\2\u0bd3\u0bd5\3\2\2\2\u0bd4")
        buf.write("\u0bc9\3\2\2\2\u0bd4\u0bd5\3\2\2\2\u0bd5\u0bda\3\2\2\2")
        buf.write("\u0bd6\u0bd7\7\u0158\2\2\u0bd7\u0bd8\7M\2\2\u0bd8\u0bd9")
        buf.write("\t\13\2\2\u0bd9\u0bdb\7\u01ad\2\2\u0bda\u0bd6\3\2\2\2")
        buf.write("\u0bda\u0bdb\3\2\2\2\u0bdb\u0bdd\3\2\2\2\u0bdc\u0bde\5")
        buf.write("\u00fa~\2\u0bdd\u0bdc\3\2\2\2\u0bdd\u0bde\3\2\2\2\u0bde")
        buf.write("\u0be0\3\2\2\2\u0bdf\u0be1\5\u00fc\177\2\u0be0\u0bdf\3")
        buf.write("\2\2\2\u0be0\u0be1\3\2\2\2\u0be1\u0be3\3\2\2\2\u0be2\u0be4")
        buf.write("\5|?\2\u0be3\u0be2\3\2\2\2\u0be3\u0be4\3\2\2\2\u0be4\u0be6")
        buf.write("\3\2\2\2\u0be5\u0be7\5\u008aF\2\u0be6\u0be5\3\2\2\2\u0be6")
        buf.write("\u0be7\3\2\2\2\u0be7\u0be9\3\2\2\2\u0be8\u0bea\5\u00be")
        buf.write("`\2\u0be9\u0be8\3\2\2\2\u0be9\u0bea\3\2\2\2\u0bea\u0bec")
        buf.write("\3\2\2\2\u0beb\u0bed\t\f\2\2\u0bec\u0beb\3\2\2\2\u0bec")
        buf.write("\u0bed\3\2\2\2\u0bed\u0bf3\3\2\2\2\u0bee\u0bef\7\u01a0")
        buf.write("\2\2\u0bef\u0bf0\7\u0272\2\2\u0bf0\u0bf1\7\u0123\2\2\u0bf1")
        buf.write("\u0bf2\t\r\2\2\u0bf2\u0bf4\7\u0273\2\2\u0bf3\u0bee\3\2")
        buf.write("\2\2\u0bf3\u0bf4\3\2\2\2\u0bf4\u0bf6\3\2\2\2\u0bf5\u0bf7")
        buf.write("\5\36\20\2\u0bf6\u0bf5\3\2\2\2\u0bf6\u0bf7\3\2\2\2\u0bf7")
        buf.write("\u0bf9\3\2\2\2\u0bf8\u0bfa\t\16\2\2\u0bf9\u0bf8\3\2\2")
        buf.write("\2\u0bf9\u0bfa\3\2\2\2\u0bfa\u0c00\3\2\2\2\u0bfb\u0bfd")
        buf.write("\5\u00eex\2\u0bfc\u0bfb\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe")
        buf.write("\u0bfc\3\2\2\2\u0bfe\u0bff\3\2\2\2\u0bff\u0c01\3\2\2\2")
        buf.write("\u0c00\u0bfc\3\2\2\2\u0c00\u0c01\3\2\2\2\u0c01\u0c03\3")
        buf.write("\2\2\2\u0c02\u0c04\5\u00f2z\2\u0c03\u0c02\3\2\2\2\u0c03")
        buf.write("\u0c04\3\2\2\2\u0c04\u0c06\3\2\2\2\u0c05\u0c07\5\u00f4")
        buf.write("{\2\u0c06\u0c05\3\2\2\2\u0c06\u0c07\3\2\2\2\u0c07\u00f7")
        buf.write("\3\2\2\2\u0c08\u0c0a\7\u0148\2\2\u0c09\u0c08\3\2\2\2\u0c09")
        buf.write("\u0c0a\3\2\2\2\u0c0a\u0c0b\3\2\2\2\u0c0b\u0c0c\7\u01e6")
        buf.write("\2\2\u0c0c\u0c0d\7\31\2\2\u0c0d\u0c0e\7\13\2\2\u0c0e\u0c0f")
        buf.write("\7\u00fe\2\2\u0c0f\u00f9\3\2\2\2\u0c10\u0c11\7\u0151\2")
        buf.write("\2\u0c11\u0c12\7\u00ce\2\2\u0c12\u0c17\7\u00ef\2\2\u0c13")
        buf.write("\u0c14\7\u01ec\2\2\u0c14\u0c18\7\u00c1\2\2\u0c15\u0c16")
        buf.write("\7\u0183\2\2\u0c16\u0c18\7\u00f6\2\2\u0c17\u0c13\3\2\2")
        buf.write("\2\u0c17\u0c15\3\2\2\2\u0c18\u00fb\3\2\2\2\u0c19\u0c1b")
        buf.write("\7\u0155\2\2\u0c1a\u0c1c\5\u03e4\u01f3\2\u0c1b\u0c1a\3")
        buf.write("\2\2\2\u0c1b\u0c1c\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c21")
        buf.write("\7\u0272\2\2\u0c1e\u0c22\5\u0082B\2\u0c1f\u0c20\7\u01ef")
        buf.write("\2\2\u0c20\u0c22\5\26\f\2\u0c21\u0c1e\3\2\2\2\u0c21\u0c1f")
        buf.write("\3\2\2\2\u0c22\u0c23\3\2\2\2\u0c23\u0c21\3\2\2\2\u0c23")
        buf.write("\u0c24\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u0c26\7\u0273")
        buf.write("\2\2\u0c26\u00fd\3\2\2\2\u0c27\u0c28\7\u0152\2\2\u0c28")
        buf.write("\u0c2d\7\u0245\2\2\u0c29\u0c2a\7\u0272\2\2\u0c2a\u0c2b")
        buf.write("\5\u0094K\2\u0c2b\u0c2c\7\u0273\2\2\u0c2c\u0c2e\3\2\2")
        buf.write("\2\u0c2d\u0c29\3\2\2\2\u0c2d\u0c2e\3\2\2\2\u0c2e\u0c31")
        buf.write("\3\2\2\2\u0c2f\u0c30\7\u0245\2\2\u0c30\u0c32\5\u00b8]")
        buf.write("\2\u0c31\u0c2f\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32\u0c34")
        buf.write("\3\2\2\2\u0c33\u0c35\5\u00ba^\2\u0c34\u0c33\3\2\2\2\u0c34")
        buf.write("\u0c35\3\2\2\2\u0c35\u0c37\3\2\2\2\u0c36\u0c38\5\u0100")
        buf.write("\u0081\2\u0c37\u0c36\3\2\2\2\u0c37\u0c38\3\2\2\2\u0c38")
        buf.write("\u0c3d\3\2\2\2\u0c39\u0c3a\7\u0158\2\2\u0c3a\u0c3b\7M")
        buf.write("\2\2\u0c3b\u0c3c\t\13\2\2\u0c3c\u0c3e\7\u01ad\2\2\u0c3d")
        buf.write("\u0c39\3\2\2\2\u0c3d\u0c3e\3\2\2\2\u0c3e\u0c40\3\2\2\2")
        buf.write("\u0c3f\u0c41\5\u00fa~\2\u0c40\u0c3f\3\2\2\2\u0c40\u0c41")
        buf.write("\3\2\2\2\u0c41\u0c43\3\2\2\2\u0c42\u0c44\5\u00fc\177\2")
        buf.write("\u0c43\u0c42\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44\u0c46\3")
        buf.write("\2\2\2\u0c45\u0c47\5|?\2\u0c46\u0c45\3\2\2\2\u0c46\u0c47")
        buf.write("\3\2\2\2\u0c47\u0c49\3\2\2\2\u0c48\u0c4a\5\u008aF\2\u0c49")
        buf.write("\u0c48\3\2\2\2\u0c49\u0c4a\3\2\2\2\u0c4a\u0c4c\3\2\2\2")
        buf.write("\u0c4b\u0c4d\5\u00be`\2\u0c4c\u0c4b\3\2\2\2\u0c4c\u0c4d")
        buf.write("\3\2\2\2\u0c4d\u0c4f\3\2\2\2\u0c4e\u0c50\t\f\2\2\u0c4f")
        buf.write("\u0c4e\3\2\2\2\u0c4f\u0c50\3\2\2\2\u0c50\u0c56\3\2\2\2")
        buf.write("\u0c51\u0c52\7\u01a0\2\2\u0c52\u0c53\7\u0272\2\2\u0c53")
        buf.write("\u0c54\7\u0123\2\2\u0c54\u0c55\t\r\2\2\u0c55\u0c57\7\u0273")
        buf.write("\2\2\u0c56\u0c51\3\2\2\2\u0c56\u0c57\3\2\2\2\u0c57\u0c59")
        buf.write("\3\2\2\2\u0c58\u0c5a\5\36\20\2\u0c59\u0c58\3\2\2\2\u0c59")
        buf.write("\u0c5a\3\2\2\2\u0c5a\u0c5c\3\2\2\2\u0c5b\u0c5d\t\16\2")
        buf.write("\2\u0c5c\u0c5b\3\2\2\2\u0c5c\u0c5d\3\2\2\2\u0c5d\u0c63")
        buf.write("\3\2\2\2\u0c5e\u0c60\5\u00eex\2\u0c5f\u0c5e\3\2\2\2\u0c60")
        buf.write("\u0c61\3\2\2\2\u0c61\u0c5f\3\2\2\2\u0c61\u0c62\3\2\2\2")
        buf.write("\u0c62\u0c64\3\2\2\2\u0c63\u0c5f\3\2\2\2\u0c63\u0c64\3")
        buf.write("\2\2\2\u0c64\u0c66\3\2\2\2\u0c65\u0c67\5\u00f2z\2\u0c66")
        buf.write("\u0c65\3\2\2\2\u0c66\u0c67\3\2\2\2\u0c67\u0c69\3\2\2\2")
        buf.write("\u0c68\u0c6a\5\u00f4{\2\u0c69\u0c68\3\2\2\2\u0c69\u0c6a")
        buf.write("\3\2\2\2\u0c6a\u00ff\3\2\2\2\u0c6b\u0c6c\7\u0226\2\2\u0c6c")
        buf.write("\u0c6d\7J\2\2\u0c6d\u0c77\7\u0272\2\2\u0c6e\u0c70\7\u0278")
        buf.write("\2\2\u0c6f\u0c6e\3\2\2\2\u0c6f\u0c70\3\2\2\2\u0c70\u0c71")
        buf.write("\3\2\2\2\u0c71\u0c72\5\u03ee\u01f8\2\u0c72\u0c73\7\26")
        buf.write("\2\2\u0c73\u0c74\7\u0272\2\2\u0c74\u0c75\5\u0330\u0199")
        buf.write("\2\u0c75\u0c76\7\u0273\2\2\u0c76\u0c78\3\2\2\2\u0c77\u0c6f")
        buf.write("\3\2\2\2\u0c78\u0c79\3\2\2\2\u0c79\u0c77\3\2\2\2\u0c79")
        buf.write("\u0c7a\3\2\2\2\u0c7a\u0c7b\3\2\2\2\u0c7b\u0c7c\7\u0273")
        buf.write("\2\2\u0c7c\u0101\3\2\2\2\u0c7d\u0c7e\7\u008e\2\2\u0c7e")
        buf.write("\u0c81\7\u01ed\2\2\u0c7f\u0c80\7\u00cf\2\2\u0c80\u0c82")
        buf.write("\7\u00a5\2\2\u0c81\u0c7f\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82")
        buf.write("\u0c83\3\2\2\2\u0c83\u0c85\5\u03f0\u01f9\2\u0c84\u0c86")
        buf.write("\7\u0186\2\2\u0c85\u0c84\3\2\2\2\u0c85\u0c86\3\2\2\2\u0c86")
        buf.write("\u0103\3\2\2\2\u0c87\u0c88\7\16\2\2\u0c88\u0c89\7\u01ed")
        buf.write("\2\2\u0c89\u0c8e\5\u03f0\u01f9\2\u0c8a\u0c8f\3\2\2\2\u0c8b")
        buf.write("\u0c8f\5\u0106\u0084\2\u0c8c\u0c8f\5\u0124\u0093\2\u0c8d")
        buf.write("\u0c8f\5\u012e\u0098\2\u0c8e\u0c8a\3\2\2\2\u0c8e\u0c8b")
        buf.write("\3\2\2\2\u0c8e\u0c8c\3\2\2\2\u0c8e\u0c8d\3\2\2\2\u0c8f")
        buf.write("\u0105\3\2\2\2\u0c90\u0c9c\5\u0108\u0085\2\u0c91\u0c92")
        buf.write("\7\u019b\2\2\u0c92\u0c93\7\u01fe\2\2\u0c93\u0c9c\5\u03f0")
        buf.write("\u01f9\2\u0c94\u0c9c\5\u0120\u0091\2\u0c95\u0c96\7\u018b")
        buf.write("\2\2\u0c96\u0c9c\7\u0159\2\2\u0c97\u0c98\7\u018b\2\2\u0c98")
        buf.write("\u0c9c\7\u0232\2\2\u0c99\u0c9a\7\u0197\2\2\u0c9a\u0c9c")
        buf.write("\7\u026e\2\2\u0c9b\u0c90\3\2\2\2\u0c9b\u0c91\3\2\2\2\u0c9b")
        buf.write("\u0c94\3\2\2\2\u0c9b\u0c95\3\2\2\2\u0c9b\u0c97\3\2\2\2")
        buf.write("\u0c9b\u0c99\3\2\2\2\u0c9c\u0107\3\2\2\2\u0c9d\u0caf\5")
        buf.write("\u0082B\2\u0c9e\u0caf\5\u0088E\2\u0c9f\u0caf\5\66\34\2")
        buf.write("\u0ca0\u0caf\5\u010a\u0086\2\u0ca1\u0caf\5\u010c\u0087")
        buf.write("\2\u0ca2\u0caf\5\u010e\u0088\2\u0ca3\u0caf\t\f\2\2\u0ca4")
        buf.write("\u0ca5\7\u01a0\2\2\u0ca5\u0ca6\7\u0272\2\2\u0ca6\u0ca7")
        buf.write("\7\u0123\2\2\u0ca7\u0ca8\t\r\2\2\u0ca8\u0caf\7\u0273\2")
        buf.write("\2\u0ca9\u0caf\5\u0110\u0089\2\u0caa\u0caf\5\u0112\u008a")
        buf.write("\2\u0cab\u0caf\5\36\20\2\u0cac\u0caf\5\u00f2z\2\u0cad")
        buf.write("\u0caf\5\u00f4{\2\u0cae\u0c9d\3\2\2\2\u0cae\u0c9e\3\2")
        buf.write("\2\2\u0cae\u0c9f\3\2\2\2\u0cae\u0ca0\3\2\2\2\u0cae\u0ca1")
        buf.write("\3\2\2\2\u0cae\u0ca2\3\2\2\2\u0cae\u0ca3\3\2\2\2\u0cae")
        buf.write("\u0ca4\3\2\2\2\u0cae\u0ca9\3\2\2\2\u0cae\u0caa\3\2\2\2")
        buf.write("\u0cae\u0cab\3\2\2\2\u0cae\u0cac\3\2\2\2\u0cae\u0cad\3")
        buf.write("\2\2\2\u0caf\u0cb0\3\2\2\2\u0cb0\u0cae\3\2\2\2\u0cb0\u0cb1")
        buf.write("\3\2\2\2\u0cb1\u0cb3\3\2\2\2\u0cb2\u0cb4\5\u0114\u008b")
        buf.write("\2\u0cb3\u0cb2\3\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0109")
        buf.write("\3\2\2\2\u0cb5\u0cc1\7\7\2\2\u0cb6\u0cb8\7\u0278\2\2\u0cb7")
        buf.write("\u0cb6\3\2\2\2\u0cb7\u0cb8\3\2\2\2\u0cb8\u0cb9\3\2\2\2")
        buf.write("\u0cb9\u0cba\7\u01ea\2\2\u0cba\u0cbd\7\u010c\2\2\u0cbb")
        buf.write("\u0cbe\5v<\2\u0cbc\u0cbe\5z>\2\u0cbd\u0cbb\3\2\2\2\u0cbd")
        buf.write("\u0cbc\3\2\2\2\u0cbe\u0cc0\3\2\2\2\u0cbf\u0cb7\3\2\2\2")
        buf.write("\u0cc0\u0cc3\3\2\2\2\u0cc1\u0cbf\3\2\2\2\u0cc1\u0cc2\3")
        buf.write("\2\2\2\u0cc2\u0cd5\3\2\2\2\u0cc3\u0cc1\3\2\2\2\u0cc4\u0cd1")
        buf.write("\7\u008e\2\2\u0cc5\u0cc7\7\u0278\2\2\u0cc6\u0cc5\3\2\2")
        buf.write("\2\u0cc6\u0cc7\3\2\2\2\u0cc7\u0cc8\3\2\2\2\u0cc8\u0cc9")
        buf.write("\7\u01ea\2\2\u0cc9\u0ccd\7\u010c\2\2\u0cca\u0cce\5z>\2")
        buf.write("\u0ccb\u0ccc\7\u00c5\2\2\u0ccc\u0cce\5x=\2\u0ccd\u0cca")
        buf.write("\3\2\2\2\u0ccd\u0ccb\3\2\2\2\u0cce\u0cd0\3\2\2\2\u0ccf")
        buf.write("\u0cc6\3\2\2\2\u0cd0\u0cd3\3\2\2\2\u0cd1\u0ccf\3\2\2\2")
        buf.write("\u0cd1\u0cd2\3\2\2\2\u0cd2\u0cd5\3\2\2\2\u0cd3\u0cd1\3")
        buf.write("\2\2\2\u0cd4\u0cb5\3\2\2\2\u0cd4\u0cc4\3\2\2\2\u0cd5\u010b")
        buf.write("\3\2\2\2\u0cd6\u0cd7\7\f\2\2\u0cd7\u0ce4\7\u00a8\2\2\u0cd8")
        buf.write("\u0cdf\7\u0272\2\2\u0cd9\u0cda\7\u01cf\2\2\u0cda\u0ce0")
        buf.write("\5\u0086D\2\u0cdb\u0cdc\7n\2\2\u0cdc\u0ce0\7\u026e\2\2")
        buf.write("\u0cdd\u0cde\7\u00e5\2\2\u0cde\u0ce0\7\u026c\2\2\u0cdf")
        buf.write("\u0cd9\3\2\2\2\u0cdf\u0cdb\3\2\2\2\u0cdf\u0cdd\3\2\2\2")
        buf.write("\u0ce0\u0ce1\3\2\2\2\u0ce1\u0cdf\3\2\2\2\u0ce1\u0ce2\3")
        buf.write("\2\2\2\u0ce2\u0ce3\3\2\2\2\u0ce3\u0ce5\7\u0273\2\2\u0ce4")
        buf.write("\u0cd8\3\2\2\2\u0ce4\u0ce5\3\2\2\2\u0ce5\u010d\3\2\2\2")
        buf.write("\u0ce6\u0ce7\7u\2\2\u0ce7\u0cea\7\u0212\2\2\u0ce8\u0ce9")
        buf.write("\7\u00f4\2\2\u0ce9\u0ceb\5\u0086D\2\u0cea\u0ce8\3\2\2")
        buf.write("\2\u0cea\u0ceb\3\2\2\2\u0ceb\u010f\3\2\2\2\u0cec\u0cee")
        buf.write("\7\u0215\2\2\u0ced\u0cef\7\u0148\2\2\u0cee\u0ced\3\2\2")
        buf.write("\2\u0cee\u0cef\3\2\2\2\u0cef\u0cf0\3\2\2\2\u0cf0\u0cf1")
        buf.write("\7\u00d5\2\2\u0cf1\u0cf2\7l\2\2\u0cf2\u0cf3\3\2\2\2\u0cf3")
        buf.write("\u0cf4\5\u008aF\2\u0cf4\u0111\3\2\2\2\u0cf5\u0cf7\t\36")
        buf.write("\2\2\u0cf6\u0cf5\3\2\2\2\u0cf6\u0cf7\3\2\2\2\u0cf7\u0cf8")
        buf.write("\3\2\2\2\u0cf8\u0cf9\7\u0190\2\2\u0cf9\u0113\3\2\2\2\u0cfa")
        buf.write("\u0cff\5\u0116\u008c\2\u0cfb\u0cff\5\u011c\u008f\2\u0cfc")
        buf.write("\u0cff\5\u0122\u0092\2\u0cfd\u0cff\7G\2\2\u0cfe\u0cfa")
        buf.write("\3\2\2\2\u0cfe\u0cfb\3\2\2\2\u0cfe\u0cfc\3\2\2\2\u0cfe")
        buf.write("\u0cfd\3\2\2\2\u0cff\u0115\3\2\2\2\u0d00\u0d05\5\u0118")
        buf.write("\u008d\2\u0d01\u0d02\7\u0171\2\2\u0d02\u0d05\7\u026c\2")
        buf.write("\2\u0d03\u0d05\5\30\r\2\u0d04\u0d00\3\2\2\2\u0d04\u0d01")
        buf.write("\3\2\2\2\u0d04\u0d03\3\2\2\2\u0d05\u0d07\3\2\2\2\u0d06")
        buf.write("\u0d08\5\u011a\u008e\2\u0d07\u0d06\3\2\2\2\u0d07\u0d08")
        buf.write("\3\2\2\2\u0d08\u0117\3\2\2\2\u0d09\u0d0a\7\u0115\2\2\u0d0a")
        buf.write("\u0d0d\7\u01ed\2\2\u0d0b\u0d0d\7\u013c\2\2\u0d0c\u0d09")
        buf.write("\3\2\2\2\u0d0c\u0d0b\3\2\2\2\u0d0d\u0119\3\2\2\2\u0d0e")
        buf.write("\u0d0f\7\u00d5\2\2\u0d0f\u0d11\5\u03ee\u01f8\2\u0d10\u0d0e")
        buf.write("\3\2\2\2\u0d10\u0d11\3\2\2\2\u0d11\u0d12\3\2\2\2\u0d12")
        buf.write("\u0d14\7\u0165\2\2\u0d13\u0d15\5\u0080A\2\u0d14\u0d13")
        buf.write("\3\2\2\2\u0d14\u0d15\3\2\2\2\u0d15\u011b\3\2\2\2\u0d16")
        buf.write("\u0d21\5\u011e\u0090\2\u0d17\u0d1c\7\u0165\2\2\u0d18\u0d1d")
        buf.write("\5\u0080A\2\u0d19\u0d1d\5\u010c\u0087\2\u0d1a\u0d1d\5")
        buf.write("\u0120\u0091\2\u0d1b\u0d1d\5\u010e\u0088\2\u0d1c\u0d18")
        buf.write("\3\2\2\2\u0d1c\u0d19\3\2\2\2\u0d1c\u0d1a\3\2\2\2\u0d1c")
        buf.write("\u0d1b\3\2\2\2\u0d1d\u0d1e\3\2\2\2\u0d1e\u0d1c\3\2\2\2")
        buf.write("\u0d1e\u0d1f\3\2\2\2\u0d1f\u0d21\3\2\2\2\u0d20\u0d16\3")
        buf.write("\2\2\2\u0d20\u0d17\3\2\2\2\u0d21\u011d\3\2\2\2\u0d22\u0d23")
        buf.write("\7\7\2\2\u0d23\u0d25\7\u0165\2\2\u0d24\u0d26\5\u0080A")
        buf.write("\2\u0d25\u0d24\3\2\2\2\u0d25\u0d26\3\2\2\2\u0d26\u0d34")
        buf.write("\3\2\2\2\u0d27\u0d2f\7\u0272\2\2\u0d28\u0d2a\7\u0278\2")
        buf.write("\2\u0d29\u0d28\3\2\2\2\u0d29\u0d2a\3\2\2\2\u0d2a\u0d2b")
        buf.write("\3\2\2\2\u0d2b\u0d2d\7\u016c\2\2\u0d2c\u0d2e\5\u0080A")
        buf.write("\2\u0d2d\u0d2c\3\2\2\2\u0d2d\u0d2e\3\2\2\2\u0d2e\u0d30")
        buf.write("\3\2\2\2\u0d2f\u0d29\3\2\2\2\u0d30\u0d31\3\2\2\2\u0d31")
        buf.write("\u0d2f\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32\u0d33\3\2\2\2")
        buf.write("\u0d33\u0d35\7\u0273\2\2\u0d34\u0d27\3\2\2\2\u0d34\u0d35")
        buf.write("\3\2\2\2\u0d35\u011f\3\2\2\2\u0d36\u0d37\7\u01c9\2\2\u0d37")
        buf.write("\u0d39\7\u01d5\2\2\u0d38\u0d3a\7O\2\2\u0d39\u0d38\3\2")
        buf.write("\2\2\u0d39\u0d3a\3\2\2\2\u0d3a\u0d3c\3\2\2\2\u0d3b\u0d3d")
        buf.write("\7:\2\2\u0d3c\u0d3b\3\2\2\2\u0d3c\u0d3d\3\2\2\2\u0d3d")
        buf.write("\u0121\3\2\2\2\u0d3e\u0d3f\7\u0115\2\2\u0d3f\u0d42\7\u01ed")
        buf.write("\2\2\u0d40\u0d43\5\u010c\u0087\2\u0d41\u0d43\5\u010e\u0088")
        buf.write("\2\u0d42\u0d40\3\2\2\2\u0d42\u0d41\3\2\2\2\u0d43\u0123")
        buf.write("\3\2\2\2\u0d44\u0d45\7\7\2\2\u0d45\u0d4d\7\u0272\2\2\u0d46")
        buf.write("\u0d48\5l\67\2\u0d47\u0d46\3\2\2\2\u0d48\u0d4b\3\2\2\2")
        buf.write("\u0d49\u0d47\3\2\2\2\u0d49\u0d4a\3\2\2\2\u0d4a\u0d4e\3")
        buf.write("\2\2\2\u0d4b\u0d49\3\2\2\2\u0d4c\u0d4e\5r:\2\u0d4d\u0d49")
        buf.write("\3\2\2\2\u0d4d\u0d4c\3\2\2\2\u0d4e\u0d4f\3\2\2\2\u0d4f")
        buf.write("\u0d73\7\u0273\2\2\u0d50\u0d58\7\7\2\2\u0d51\u0d53\5l")
        buf.write("\67\2\u0d52\u0d51\3\2\2\2\u0d53\u0d56\3\2\2\2\u0d54\u0d52")
        buf.write("\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d59\3\2\2\2\u0d56")
        buf.write("\u0d54\3\2\2\2\u0d57\u0d59\5r:\2\u0d58\u0d54\3\2\2\2\u0d58")
        buf.write("\u0d57\3\2\2\2\u0d59\u0d73\3\2\2\2\u0d5a\u0d61\7\u0125")
        buf.write("\2\2\u0d5b\u0d5c\7X\2\2\u0d5c\u0d62\5\u03d2\u01ea\2\u0d5d")
        buf.write("\u0d5e\7\u0183\2\2\u0d5e\u0d62\7\u00f6\2\2\u0d5f\u0d60")
        buf.write("\7\u020d\2\2\u0d60\u0d62\5\u009aN\2\u0d61\u0d5b\3\2\2")
        buf.write("\2\u0d61\u0d5d\3\2\2\2\u0d61\u0d5f\3\2\2\2\u0d62\u0d63")
        buf.write("\3\2\2\2\u0d63\u0d65\5\u00a0Q\2\u0d64\u0d66\7:\2\2\u0d65")
        buf.write("\u0d64\3\2\2\2\u0d65\u0d66\3\2\2\2\u0d66\u0d73\3\2\2\2")
        buf.write("\u0d67\u0d68\7\u019b\2\2\u0d68\u0d69\7X\2\2\u0d69\u0d6a")
        buf.write("\5\u0126\u0094\2\u0d6a\u0d6b\7\u01fe\2\2\u0d6b\u0d6c\5")
        buf.write("\u0128\u0095\2\u0d6c\u0d73\3\2\2\2\u0d6d\u0d6f\5\u012a")
        buf.write("\u0096\2\u0d6e\u0d6d\3\2\2\2\u0d6f\u0d70\3\2\2\2\u0d70")
        buf.write("\u0d6e\3\2\2\2\u0d70\u0d71\3\2\2\2\u0d71\u0d73\3\2\2\2")
        buf.write("\u0d72\u0d44\3\2\2\2\u0d72\u0d50\3\2\2\2\u0d72\u0d5a\3")
        buf.write("\2\2\2\u0d72\u0d67\3\2\2\2\u0d72\u0d6e\3\2\2\2\u0d73\u0125")
        buf.write("\3\2\2\2\u0d74\u0d75\5\u03d2\u01ea\2\u0d75\u0127\3\2\2")
        buf.write("\2\u0d76\u0d77\5\u03d2\u01ea\2\u0d77\u0129\3\2\2\2\u0d78")
        buf.write("\u0d79\7\u008e\2\2\u0d79\u0d7a\5\u012c\u0097\2\u0d7a\u012b")
        buf.write("\3\2\2\2\u0d7b\u0d7c\7\u0183\2\2\u0d7c\u0d80\7\u00f6\2")
        buf.write("\2\u0d7d\u0d7e\7\u020d\2\2\u0d7e\u0d80\5\u009aN\2\u0d7f")
        buf.write("\u0d7b\3\2\2\2\u0d7f\u0d7d\3\2\2\2\u0d80\u0d82\3\2\2\2")
        buf.write("\u0d81\u0d83\7:\2\2\u0d82\u0d81\3\2\2\2\u0d82\u0d83\3")
        buf.write("\2\2\2\u0d83\u0d85\3\2\2\2\u0d84\u0d86\t\35\2\2\u0d85")
        buf.write("\u0d84\3\2\2\2\u0d85\u0d86\3\2\2\2\u0d86\u0d8d\3\2\2\2")
        buf.write("\u0d87\u0d88\7X\2\2\u0d88\u0d8a\5\u03d2\u01ea\2\u0d89")
        buf.write("\u0d8b\7:\2\2\u0d8a\u0d89\3\2\2\2\u0d8a\u0d8b\3\2\2\2")
        buf.write("\u0d8b\u0d8d\3\2\2\2\u0d8c\u0d7f\3\2\2\2\u0d8c\u0d87\3")
        buf.write("\2\2\2\u0d8d\u012d\3\2\2\2\u0d8e\u0d93\5\u0130\u0099\2")
        buf.write("\u0d8f\u0d93\5\u013e\u00a0\2\u0d90\u0d93\5\u0144\u00a3")
        buf.write("\2\u0d91\u0d93\5\u0148\u00a5\2\u0d92\u0d8e\3\2\2\2\u0d92")
        buf.write("\u0d8f\3\2\2\2\u0d92\u0d90\3\2\2\2\u0d92\u0d91\3\2\2\2")
        buf.write("\u0d93\u012f\3\2\2\2\u0d94\u0d99\5\u0132\u009a\2\u0d95")
        buf.write("\u0d99\5\u0134\u009b\2\u0d96\u0d99\5\u0136\u009c\2\u0d97")
        buf.write("\u0d99\5\u013c\u009f\2\u0d98\u0d94\3\2\2\2\u0d98\u0d95")
        buf.write("\3\2\2\2\u0d98\u0d96\3\2\2\2\u0d98\u0d97\3\2\2\2\u0d99")
        buf.write("\u0d9a\3\2\2\2\u0d9a\u0d98\3\2\2\2\u0d9a\u0d9b\3\2\2\2")
        buf.write("\u0d9b\u0131\3\2\2\2\u0d9c\u0d9e\7\7\2\2\u0d9d\u0d9f\7")
        buf.write("I\2\2\u0d9e\u0d9d\3\2\2\2\u0d9e\u0d9f\3\2\2\2\u0d9f\u0db3")
        buf.write("\3\2\2\2\u0da0\u0da9\7\u0272\2\2\u0da1\u0da3\7\u0278\2")
        buf.write("\2\u0da2\u0da1\3\2\2\2\u0da2\u0da3\3\2\2\2\u0da3\u0da4")
        buf.write("\3\2\2\2\u0da4\u0daa\5f\64\2\u0da5\u0da7\7\u0278\2\2\u0da6")
        buf.write("\u0da5\3\2\2\2\u0da6\u0da7\3\2\2\2\u0da7\u0da8\3\2\2\2")
        buf.write("\u0da8\u0daa\5j\66\2\u0da9\u0da2\3\2\2\2\u0da9\u0da6\3")
        buf.write("\2\2\2\u0daa\u0dab\3\2\2\2\u0dab\u0da9\3\2\2\2\u0dab\u0dac")
        buf.write("\3\2\2\2\u0dac\u0dad\3\2\2\2\u0dad\u0dae\7\u0273\2\2\u0dae")
        buf.write("\u0db4\3\2\2\2\u0daf\u0db2\5f\64\2\u0db0\u0db2\5j\66\2")
        buf.write("\u0db1\u0daf\3\2\2\2\u0db1\u0db0\3\2\2\2\u0db2\u0db4\3")
        buf.write("\2\2\2\u0db3\u0da0\3\2\2\2\u0db3\u0db1\3\2\2\2\u0db4\u0db6")
        buf.write("\3\2\2\2\u0db5\u0db7\5\u008aF\2\u0db6\u0db5\3\2\2\2\u0db6")
        buf.write("\u0db7\3\2\2\2\u0db7\u0133\3\2\2\2\u0db8\u0dc6\7\u0125")
        buf.write("\2\2\u0db9\u0dbe\7\u0272\2\2\u0dba\u0dbc\7\u0278\2\2\u0dbb")
        buf.write("\u0dba\3\2\2\2\u0dbb\u0dbc\3\2\2\2\u0dbc\u0dbd\3\2\2\2")
        buf.write("\u0dbd\u0dbf\5\u0138\u009d\2\u0dbe\u0dbb\3\2\2\2\u0dbf")
        buf.write("\u0dc0\3\2\2\2\u0dc0\u0dbe\3\2\2\2\u0dc0\u0dc1\3\2\2\2")
        buf.write("\u0dc1\u0dc2\3\2\2\2\u0dc2\u0dc3\7\u0273\2\2\u0dc3\u0dc7")
        buf.write("\3\2\2\2\u0dc4\u0dc7\5\u0138\u009d\2\u0dc5\u0dc7\5\u013a")
        buf.write("\u009e\2\u0dc6\u0db9\3\2\2\2\u0dc6\u0dc4\3\2\2\2\u0dc6")
        buf.write("\u0dc5\3\2\2\2\u0dc7\u0135\3\2\2\2\u0dc8\u0dca\7\16\2")
        buf.write("\2\u0dc9\u0dcb\7I\2\2\u0dca\u0dc9\3\2\2\2\u0dca\u0dcb")
        buf.write("\3\2\2\2\u0dcb\u0dcc\3\2\2\2\u0dcc\u0dd6\5\u03ee\u01f8")
        buf.write("\2\u0dcd\u0dce\t\37\2\2\u0dce\u0dcf\7\u0148\2\2\u0dcf")
        buf.write("\u0dd7\7\u014c\2\2\u0dd0\u0dd1\7\u0209\2\2\u0dd1\u0dd4")
        buf.write("\5\u0404\u0203\2\u0dd2\u0dd3\7\u0219\2\2\u0dd3\u0dd5\5")
        buf.write("\u0330\u0199\2\u0dd4\u0dd2\3\2\2\2\u0dd4\u0dd5\3\2\2\2")
        buf.write("\u0dd5\u0dd7\3\2\2\2\u0dd6\u0dcd\3\2\2\2\u0dd6\u0dd0\3")
        buf.write("\2\2\2\u0dd7\u0137\3\2\2\2\u0dd8\u0dda\5\u03ee\u01f8\2")
        buf.write("\u0dd9\u0ddb\5\u0404\u0203\2\u0dda\u0dd9\3\2\2\2\u0dda")
        buf.write("\u0ddb\3\2\2\2\u0ddb\u0dde\3\2\2\2\u0ddc\u0ddd\7~\2\2")
        buf.write("\u0ddd\u0ddf\5\u0330\u0199\2\u0dde\u0ddc\3\2\2\2\u0dde")
        buf.write("\u0ddf\3\2\2\2\u0ddf\u0de3\3\2\2\2\u0de0\u0de1\7\u0097")
        buf.write("\2\2\u0de1\u0de4\5\u00b2Z\2\u0de2\u0de4\7|\2\2\u0de3\u0de0")
        buf.write("\3\2\2\2\u0de3\u0de2\3\2\2\2\u0de3\u0de4\3\2\2\2\u0de4")
        buf.write("\u0de8\3\2\2\2\u0de5\u0de7\5\u0096L\2\u0de6\u0de5\3\2")
        buf.write("\2\2\u0de7\u0dea\3\2\2\2\u0de8\u0de6\3\2\2\2\u0de8\u0de9")
        buf.write("\3\2\2\2\u0de9\u0dec\3\2\2\2\u0dea\u0de8\3\2\2\2\u0deb")
        buf.write("\u0ded\5\u00b4[\2\u0dec\u0deb\3\2\2\2\u0dec\u0ded\3\2")
        buf.write("\2\2\u0ded\u0139\3\2\2\2\u0dee\u0def\7I\2\2\u0def\u0df1")
        buf.write("\5\u03ee\u01f8\2\u0df0\u0df2\7\u0148\2\2\u0df1\u0df0\3")
        buf.write("\2\2\2\u0df1\u0df2\3\2\2\2\u0df2\u0df3\3\2\2\2\u0df3\u0df4")
        buf.write("\7\u01e6\2\2\u0df4\u0df5\7\31\2\2\u0df5\u0df6\7\13\2\2")
        buf.write("\u0df6\u0df8\7\u00fe\2\2\u0df7\u0df9\7\u00b9\2\2\u0df8")
        buf.write("\u0df7\3\2\2\2\u0df8\u0df9\3\2\2\2\u0df9\u013b\3\2\2\2")
        buf.write("\u0dfa\u0dfb\7\u01c4\2\2\u0dfb\u0e09\7\u0212\2\2\u0dfc")
        buf.write("\u0dfd\7I\2\2\u0dfd\u0e0a\5\u03ee\u01f8\2\u0dfe\u0e03")
        buf.write("\7\u0272\2\2\u0dff\u0e01\7\u0278\2\2\u0e00\u0dff\3\2\2")
        buf.write("\2\u0e00\u0e01\3\2\2\2\u0e01\u0e02\3\2\2\2\u0e02\u0e04")
        buf.write("\5\u03ee\u01f8\2\u0e03\u0e00\3\2\2\2\u0e04\u0e05\3\2\2")
        buf.write("\2\u0e05\u0e03\3\2\2\2\u0e05\u0e06\3\2\2\2\u0e06\u0e07")
        buf.write("\3\2\2\2\u0e07\u0e08\7\u0273\2\2\u0e08\u0e0a\3\2\2\2\u0e09")
        buf.write("\u0dfc\3\2\2\2\u0e09\u0dfe\3\2\2\2\u0e0a\u0e10\3\2\2\2")
        buf.write("\u0e0b\u0e0c\7:\2\2\u0e0c\u0e0f\7Y\2\2\u0e0d\u0e0f\7\u00ed")
        buf.write("\2\2\u0e0e\u0e0b\3\2\2\2\u0e0e\u0e0d\3\2\2\2\u0e0f\u0e12")
        buf.write("\3\2\2\2\u0e10\u0e0e\3\2\2\2\u0e10\u0e11\3\2\2\2\u0e11")
        buf.write("\u0e39\3\2\2\2\u0e12\u0e10\3\2\2\2\u0e13\u0e21\7\u008e")
        buf.write("\2\2\u0e14\u0e15\7I\2\2\u0e15\u0e22\5\u03ee\u01f8\2\u0e16")
        buf.write("\u0e1b\7\u0272\2\2\u0e17\u0e19\7\u0278\2\2\u0e18\u0e17")
        buf.write("\3\2\2\2\u0e18\u0e19\3\2\2\2\u0e19\u0e1a\3\2\2\2\u0e1a")
        buf.write("\u0e1c\5\u03ee\u01f8\2\u0e1b\u0e18\3\2\2\2\u0e1c\u0e1d")
        buf.write("\3\2\2\2\u0e1d\u0e1b\3\2\2\2\u0e1d\u0e1e\3\2\2\2\u0e1e")
        buf.write("\u0e1f\3\2\2\2\u0e1f\u0e20\7\u0273\2\2\u0e20\u0e22\3\2")
        buf.write("\2\2\u0e21\u0e14\3\2\2\2\u0e21\u0e16\3\2\2\2\u0e22\u0e28")
        buf.write("\3\2\2\2\u0e23\u0e24\7:\2\2\u0e24\u0e27\7Y\2\2\u0e25\u0e27")
        buf.write("\7\u00ed\2\2\u0e26\u0e23\3\2\2\2\u0e26\u0e25\3\2\2\2\u0e27")
        buf.write("\u0e2a\3\2\2\2\u0e28\u0e26\3\2\2\2\u0e28\u0e29\3\2\2\2")
        buf.write("\u0e29\u0e2d\3\2\2\2\u0e2a\u0e28\3\2\2\2\u0e2b\u0e2c\7")
        buf.write("A\2\2\u0e2c\u0e2e\7\u026c\2\2\u0e2d\u0e2b\3\2\2\2\u0e2d")
        buf.write("\u0e2e\3\2\2\2\u0e2e\u0e39\3\2\2\2\u0e2f\u0e34\7\u008e")
        buf.write("\2\2\u0e30\u0e31\7\u0212\2\2\u0e31\u0e35\7J\2\2\u0e32")
        buf.write("\u0e33\7J\2\2\u0e33\u0e35\7]\2\2\u0e34\u0e30\3\2\2\2\u0e34")
        buf.write("\u0e32\3\2\2\2\u0e35\u0e36\3\2\2\2\u0e36\u0e37\7A\2\2")
        buf.write("\u0e37\u0e39\7\u026c\2\2\u0e38\u0dfa\3\2\2\2\u0e38\u0e13")
        buf.write("\3\2\2\2\u0e38\u0e2f\3\2\2\2\u0e39\u013d\3\2\2\2\u0e3a")
        buf.write("\u0e3c\7\u019b\2\2\u0e3b\u0e3d\7I\2\2\u0e3c\u0e3b\3\2")
        buf.write("\2\2\u0e3c\u0e3d\3\2\2\2\u0e3d\u0e3e\3\2\2\2\u0e3e\u0e3f")
        buf.write("\5\u0140\u00a1\2\u0e3f\u0e40\7\u01fe\2\2\u0e40\u0e41\5")
        buf.write("\u0142\u00a2\2\u0e41\u013f\3\2\2\2\u0e42\u0e43\5\u03ee")
        buf.write("\u01f8\2\u0e43\u0141\3\2\2\2\u0e44\u0e45\5\u03ee\u01f8")
        buf.write("\2\u0e45\u0143\3\2\2\2\u0e46\u0e47\7\u0125\2\2\u0e47\u0e48")
        buf.write("\7\u0131\2\2\u0e48\u0e49\7\u01ed\2\2\u0e49\u0e4a\5\u0146")
        buf.write("\u00a4\2\u0e4a\u0e4b\7\u01a2\2\2\u0e4b\u0e4c\7\26\2\2")
        buf.write("\u0e4c\u0e4d\t\25\2\2\u0e4d\u0145\3\2\2\2\u0e4e\u0e4f")
        buf.write("\5\u03f0\u01f9\2\u0e4f\u0147\3\2\2\2\u0e50\u0e51\7\u0125")
        buf.write("\2\2\u0e51\u0e52\7\u0107\2\2\u0e52\u0e53\7\u0272\2\2\u0e53")
        buf.write("\u0e54\5:\36\2\u0e54\u0e55\7\u0273\2\2\u0e55\u0e56\7\u0272")
        buf.write("\2\2\u0e56\u0e57\5\u014a\u00a6\2\u0e57\u0e58\7\u0273\2")
        buf.write("\2\u0e58\u0149\3\2\2\2\u0e59\u0e72\5\u0084C\2\u0e5a\u0e5b")
        buf.write("\t \2\2\u0e5b\u0e72\7\u026c\2\2\u0e5c\u0e5d\7\u018e\2")
        buf.write("\2\u0e5d\u0e72\7\u00bd\2\2\u0e5e\u0e72\5\u00acW\2\u0e5f")
        buf.write("\u0e72\5\u00aeX\2\u0e60\u0e72\5\u00b0Y\2\u0e61\u0e62\7")
        buf.write("\u0097\2\2\u0e62\u0e72\5\u00b2Z\2\u0e63\u0e72\7|\2\2\u0e64")
        buf.write("\u0e72\7\67\2\2\u0e65\u0e6a\7\67\2\2\u0e66\u0e6a\7\u0136")
        buf.write("\2\2\u0e67\u0e68\7\67\2\2\u0e68\u0e6a\7\u018c\2\2\u0e69")
        buf.write("\u0e65\3\2\2\2\u0e69\u0e66\3\2\2\2\u0e69\u0e67\3\2\2\2")
        buf.write("\u0e6a\u0e6c\3\2\2\2\u0e6b\u0e6d\5\u0088E\2\u0e6c\u0e6b")
        buf.write("\3\2\2\2\u0e6c\u0e6d\3\2\2\2\u0e6d\u0e72\3\2\2\2\u0e6e")
        buf.write("\u0e72\5\u010c\u0087\2\u0e6f\u0e72\5\u0120\u0091\2\u0e70")
        buf.write("\u0e72\5\u010e\u0088\2\u0e71\u0e59\3\2\2\2\u0e71\u0e5a")
        buf.write("\3\2\2\2\u0e71\u0e5c\3\2\2\2\u0e71\u0e5e\3\2\2\2\u0e71")
        buf.write("\u0e5f\3\2\2\2\u0e71\u0e60\3\2\2\2\u0e71\u0e61\3\2\2\2")
        buf.write("\u0e71\u0e63\3\2\2\2\u0e71\u0e64\3\2\2\2\u0e71\u0e69\3")
        buf.write("\2\2\2\u0e71\u0e6e\3\2\2\2\u0e71\u0e6f\3\2\2\2\u0e71\u0e70")
        buf.write("\3\2\2\2\u0e72\u0e73\3\2\2\2\u0e73\u0e71\3\2\2\2\u0e73")
        buf.write("\u0e74\3\2\2\2\u0e74\u014b\3\2\2\2\u0e75\u0e76\7\u008e")
        buf.write("\2\2\u0e76\u0e77\7\u00c0\2\2\u0e77\u0e78\5\u03dc\u01ef")
        buf.write("\2\u0e78\u014d\3\2\2\2\u0e79\u0e7a\7\16\2\2\u0e7a\u0e7b")
        buf.write("\7\u00c0\2\2\u0e7b\u0e7c\5\u03dc\u01ef\2\u0e7c\u0e7e\7")
        buf.write("Q\2\2\u0e7d\u0e7f\7t\2\2\u0e7e\u0e7d\3\2\2\2\u0e7e\u0e7f")
        buf.write("\3\2\2\2\u0e7f\u0e83\3\2\2\2\u0e80\u0e82\5\u01f2\u00fa")
        buf.write("\2\u0e81\u0e80\3\2\2\2\u0e82\u0e85\3\2\2\2\u0e83\u0e81")
        buf.write("\3\2\2\2\u0e83\u0e84\3\2\2\2\u0e84\u0e88\3\2\2\2\u0e85")
        buf.write("\u0e83\3\2\2\2\u0e86\u0e87\7\u01a4\2\2\u0e87\u0e89\7\u01c6")
        buf.write("\2\2\u0e88\u0e86\3\2\2\2\u0e88\u0e89\3\2\2\2\u0e89\u014f")
        buf.write("\3\2\2\2\u0e8a\u0e8d\7c\2\2\u0e8b\u0e8c\7\u015d\2\2\u0e8c")
        buf.write("\u0e8e\7\u019c\2\2\u0e8d\u0e8b\3\2\2\2\u0e8d\u0e8e\3\2")
        buf.write("\2\2\u0e8e\u0e90\3\2\2\2\u0e8f\u0e8a\3\2\2\2\u0e8f\u0e90")
        buf.write("\3\2\2\2\u0e90\u0e91\3\2\2\2\u0e91\u0e92\7\u00c0\2\2\u0e92")
        buf.write("\u0e9e\5\u03dc\u01ef\2\u0e93\u0e94\7\u0272\2\2\u0e94\u0e99")
        buf.write("\5\u01fe\u0100\2\u0e95\u0e96\7\u0278\2\2\u0e96\u0e98\5")
        buf.write("\u01fe\u0100\2\u0e97\u0e95\3\2\2\2\u0e98\u0e9b\3\2\2\2")
        buf.write("\u0e99\u0e97\3\2\2\2\u0e99\u0e9a\3\2\2\2\u0e9a\u0e9c\3")
        buf.write("\2\2\2\u0e9b\u0e99\3\2\2\2\u0e9c\u0e9d\7\u0273\2\2\u0e9d")
        buf.write("\u0e9f\3\2\2\2\u0e9e\u0e93\3\2\2\2\u0e9e\u0e9f\3\2\2\2")
        buf.write("\u0e9f\u0ea0\3\2\2\2\u0ea0\u0ea1\7\u01a2\2\2\u0ea1\u0ea8")
        buf.write("\5\u0402\u0202\2\u0ea2\u0ea7\5\u01f0\u00f9\2\u0ea3\u0ea7")
        buf.write("\5\u0152\u00aa\2\u0ea4\u0ea7\5\u0156\u00ac\2\u0ea5\u0ea7")
        buf.write("\7\u0086\2\2\u0ea6\u0ea2\3\2\2\2\u0ea6\u0ea3\3\2\2\2\u0ea6")
        buf.write("\u0ea4\3\2\2\2\u0ea6\u0ea5\3\2\2\2\u0ea7\u0eaa\3\2\2\2")
        buf.write("\u0ea8\u0ea6\3\2\2\2\u0ea8\u0ea9\3\2\2\2\u0ea9\u0ebf\3")
        buf.write("\2\2\2\u0eaa\u0ea8\3\2\2\2\u0eab\u0ead\7\u0176\2\2\u0eac")
        buf.write("\u0eab\3\2\2\2\u0eac\u0ead\3\2\2\2\u0ead\u0eae\3\2\2\2")
        buf.write("\u0eae\u0eba\t!\2\2\u0eaf\u0eb1\7x\2\2\u0eb0\u0eaf\3\2")
        buf.write("\2\2\u0eb0\u0eb1\3\2\2\2\u0eb1\u0eb5\3\2\2\2\u0eb2\u0eb4")
        buf.write("\5\u0202\u0102\2\u0eb3\u0eb2\3\2\2\2\u0eb4\u0eb7\3\2\2")
        buf.write("\2\u0eb5\u0eb3\3\2\2\2\u0eb5\u0eb6\3\2\2\2\u0eb6\u0eb8")
        buf.write("\3\2\2\2\u0eb7\u0eb5\3\2\2\2\u0eb8\u0ebb\5\u024c\u0127")
        buf.write("\2\u0eb9\u0ebb\5\u01f4\u00fb\2\u0eba\u0eb0\3\2\2\2\u0eba")
        buf.write("\u0eb9\3\2\2\2\u0ebb\u0ec0\3\2\2\2\u0ebc\u0ebd\t\"\2\2")
        buf.write("\u0ebd\u0ebe\7\u0219\2\2\u0ebe\u0ec0\5\u03c6\u01e4\2\u0ebf")
        buf.write("\u0eac\3\2\2\2\u0ebf\u0ebc\3\2\2\2\u0ec0\u0151\3\2\2\2")
        buf.write("\u0ec1\u0ec3\7\u0169\2\2\u0ec2\u0ec4\5\u0154\u00ab\2\u0ec3")
        buf.write("\u0ec2\3\2\2\2\u0ec3\u0ec4\3\2\2\2\u0ec4\u0153\3\2\2\2")
        buf.write("\u0ec5\u0ec6\7\u0272\2\2\u0ec6\u0ec7\7\u016c\2\2\u0ec7")
        buf.write("\u0ec8\5\u0330\u0199\2\u0ec8\u0ed6\7\64\2\2\u0ec9\u0ed7")
        buf.write("\7\22\2\2\u0eca\u0ecb\t#\2\2\u0ecb\u0ecc\7\u0272\2\2\u0ecc")
        buf.write("\u0ed1\5\u03ee\u01f8\2\u0ecd\u0ece\7\u0278\2\2\u0ece\u0ed0")
        buf.write("\5\u03ee\u01f8\2\u0ecf\u0ecd\3\2\2\2\u0ed0\u0ed3\3\2\2")
        buf.write("\2\u0ed1\u0ecf\3\2\2\2\u0ed1\u0ed2\3\2\2\2\u0ed2\u0ed4")
        buf.write("\3\2\2\2\u0ed3\u0ed1\3\2\2\2\u0ed4\u0ed5\7\u0273\2\2\u0ed5")
        buf.write("\u0ed7\3\2\2\2\u0ed6\u0ec9\3\2\2\2\u0ed6\u0eca\3\2\2\2")
        buf.write("\u0ed7\u0ed9\3\2\2\2\u0ed8\u0eda\5\u015a\u00ae\2\u0ed9")
        buf.write("\u0ed8\3\2\2\2\u0ed9\u0eda\3\2\2\2\u0eda\u0edb\3\2\2\2")
        buf.write("\u0edb\u0edc\7\u0273\2\2\u0edc\u0155\3\2\2\2\u0edd\u0edf")
        buf.write("\7\u01a0\2\2\u0ede\u0ee0\5\u0158\u00ad\2\u0edf\u0ede\3")
        buf.write("\2\2\2\u0edf\u0ee0\3\2\2\2\u0ee0\u0157\3\2\2\2\u0ee1\u0ee2")
        buf.write("\7\u0199\2\2\u0ee2\u0ee3\7\u0272\2\2\u0ee3\u0ee8\5\u03f0")
        buf.write("\u01f9\2\u0ee4\u0ee5\7\u0278\2\2\u0ee5\u0ee7\5\u03f0\u01f9")
        buf.write("\2\u0ee6\u0ee4\3\2\2\2\u0ee7\u0eea\3\2\2\2\u0ee8\u0ee6")
        buf.write("\3\2\2\2\u0ee8\u0ee9\3\2\2\2\u0ee9\u0eeb\3\2\2\2\u0eea")
        buf.write("\u0ee8\3\2\2\2\u0eeb\u0eec\7\u0273\2\2\u0eec\u0159\3\2")
        buf.write("\2\2\u0eed\u0eee\t$\2\2\u0eee\u0eef\5\u0330\u0199\2\u0eef")
        buf.write("\u0ef0\7\64\2\2\u0ef0\u0ef1\7\u0272\2\2\u0ef1\u0ef6\5")
        buf.write("\u03ee\u01f8\2\u0ef2\u0ef3\7\u0278\2\2\u0ef3\u0ef5\5\u03ee")
        buf.write("\u01f8\2\u0ef4\u0ef2\3\2\2\2\u0ef5\u0ef8\3\2\2\2\u0ef6")
        buf.write("\u0ef4\3\2\2\2\u0ef6\u0ef7\3\2\2\2\u0ef7\u0ef9\3\2\2\2")
        buf.write("\u0ef8\u0ef6\3\2\2\2\u0ef9\u0efa\7\u0273\2\2\u0efa\u015b")
        buf.write("\3\2\2\2\u0efb\u0efc\7\u008e\2\2\u0efc\u0efe\7\u0167\2")
        buf.write("\2\u0efd\u0eff\7/\2\2\u0efe\u0efd\3\2\2\2\u0efe\u0eff")
        buf.write("\3\2\2\2\u0eff\u0f00\3\2\2\2\u0f00\u0f01\5\u03c4\u01e3")
        buf.write("\2\u0f01\u015d\3\2\2\2\u0f02\u0f03\7\16\2\2\u0f03\u0f04")
        buf.write("\7\u0167\2\2\u0f04\u0f05\5\u03c4\u01e3\2\u0f05\u0f07\7")
        buf.write("Q\2\2\u0f06\u0f08\7t\2\2\u0f07\u0f06\3\2\2\2\u0f07\u0f08")
        buf.write("\3\2\2\2\u0f08\u0f0a\3\2\2\2\u0f09\u0f0b\t%\2\2\u0f0a")
        buf.write("\u0f09\3\2\2\2\u0f0a\u0f0b\3\2\2\2\u0f0b\u0f0f\3\2\2\2")
        buf.write("\u0f0c\u0f0e\5\u01f2\u00fa\2\u0f0d\u0f0c\3\2\2\2\u0f0e")
        buf.write("\u0f11\3\2\2\2\u0f0f\u0f0d\3\2\2\2\u0f0f\u0f10\3\2\2\2")
        buf.write("\u0f10\u0f14\3\2\2\2\u0f11\u0f0f\3\2\2\2\u0f12\u0f13\7")
        buf.write("\u01a4\2\2\u0f13\u0f15\7\u01c6\2\2\u0f14\u0f12\3\2\2\2")
        buf.write("\u0f14\u0f15\3\2\2\2\u0f15\u015f\3\2\2\2\u0f16\u0f19\7")
        buf.write("c\2\2\u0f17\u0f18\7\u015d\2\2\u0f18\u0f1a\7\u019c\2\2")
        buf.write("\u0f19\u0f17\3\2\2\2\u0f19\u0f1a\3\2\2\2\u0f1a\u0f1b\3")
        buf.write("\2\2\2\u0f1b\u0f1e\7\u0167\2\2\u0f1c\u0f1f\5\u0164\u00b3")
        buf.write("\2\u0f1d\u0f1f\5\u0162\u00b2\2\u0f1e\u0f1c\3\2\2\2\u0f1e")
        buf.write("\u0f1d\3\2\2\2\u0f1e\u0f1f\3\2\2\2\u0f1f\u0161\3\2\2\2")
        buf.write("\u0f20\u0f21\7/\2\2\u0f21\u0f22\5\u03c4\u01e3\2\u0f22")
        buf.write("\u0f26\t!\2\2\u0f23\u0f25\5\u016c\u00b7\2\u0f24\u0f23")
        buf.write("\3\2\2\2\u0f25\u0f28\3\2\2\2\u0f26\u0f24\3\2\2\2\u0f26")
        buf.write("\u0f27\3\2\2\2\u0f27\u0f2f\3\2\2\2\u0f28\u0f26\3\2\2\2")
        buf.write("\u0f29\u0f2a\7$\2\2\u0f2a\u0f30\5\u0222\u0112\2\u0f2b")
        buf.write("\u0f2d\7\u0098\2\2\u0f2c\u0f2e\5\u03c4\u01e3\2\u0f2d\u0f2c")
        buf.write("\3\2\2\2\u0f2d\u0f2e\3\2\2\2\u0f2e\u0f30\3\2\2\2\u0f2f")
        buf.write("\u0f29\3\2\2\2\u0f2f\u0f2b\3\2\2\2\u0f30\u0163\3\2\2\2")
        buf.write("\u0f31\u0f33\5\u03c4\u01e3\2\u0f32\u0f34\5\u01f0\u00f9")
        buf.write("\2\u0f33\u0f32\3\2\2\2\u0f33\u0f34\3\2\2\2\u0f34\u0f35")
        buf.write("\3\2\2\2\u0f35\u0f39\t!\2\2\u0f36\u0f38\5\u0166\u00b4")
        buf.write("\2\u0f37\u0f36\3\2\2\2\u0f38\u0f3b\3\2\2\2\u0f39\u0f37")
        buf.write("\3\2\2\2\u0f39\u0f3a\3\2\2\2\u0f3a\u0f3c\3\2\2\2\u0f3b")
        buf.write("\u0f39\3\2\2\2\u0f3c\u0f3e\7\u0098\2\2\u0f3d\u0f3f\5\u03c4")
        buf.write("\u01e3\2\u0f3e\u0f3d\3\2\2\2\u0f3e\u0f3f\3\2\2\2\u0f3f")
        buf.write("\u0165\3\2\2\2\u0f40\u0f4a\5\u0204\u0103\2\u0f41\u0f4a")
        buf.write("\5\u0206\u0104\2\u0f42\u0f4a\5\u0208\u0105\2\u0f43\u0f4a")
        buf.write("\5\u020c\u0107\2\u0f44\u0f4a\5\u020e\u0108\2\u0f45\u0f4a")
        buf.write("\5\u0210\u0109\2\u0f46\u0f4a\5\u0218\u010d\2\u0f47\u0f4a")
        buf.write("\5\u0168\u00b5\2\u0f48\u0f4a\5\u016a\u00b6\2\u0f49\u0f40")
        buf.write("\3\2\2\2\u0f49\u0f41\3\2\2\2\u0f49\u0f42\3\2\2\2\u0f49")
        buf.write("\u0f43\3\2\2\2\u0f49\u0f44\3\2\2\2\u0f49\u0f45\3\2\2\2")
        buf.write("\u0f49\u0f46\3\2\2\2\u0f49\u0f47\3\2\2\2\u0f49\u0f48\3")
        buf.write("\2\2\2\u0f4a\u0167\3\2\2\2\u0f4b\u0f4c\7\u0185\2\2\u0f4c")
        buf.write("\u0f58\5\u03de\u01f0\2\u0f4d\u0f4e\7\u0272\2\2\u0f4e\u0f53")
        buf.write("\5\u01fe\u0100\2\u0f4f\u0f50\7\u0278\2\2\u0f50\u0f52\5")
        buf.write("\u01fe\u0100\2\u0f51\u0f4f\3\2\2\2\u0f52\u0f55\3\2\2\2")
        buf.write("\u0f53\u0f51\3\2\2\2\u0f53\u0f54\3\2\2\2\u0f54\u0f56\3")
        buf.write("\2\2\2\u0f55\u0f53\3\2\2\2\u0f56\u0f57\7\u0273\2\2\u0f57")
        buf.write("\u0f59\3\2\2\2\u0f58\u0f4d\3\2\2\2\u0f58\u0f59\3\2\2\2")
        buf.write("\u0f59\u0f5a\3\2\2\2\u0f5a\u0f5b\7\u027e\2\2\u0f5b\u0169")
        buf.write("\3\2\2\2\u0f5c\u0f5d\7\u00c0\2\2\u0f5d\u0f69\5\u03dc\u01ef")
        buf.write("\2\u0f5e\u0f5f\7\u0272\2\2\u0f5f\u0f64\5\u01fe\u0100\2")
        buf.write("\u0f60\u0f61\7\u0278\2\2\u0f61\u0f63\5\u01fe\u0100\2\u0f62")
        buf.write("\u0f60\3\2\2\2\u0f63\u0f66\3\2\2\2\u0f64\u0f62\3\2\2\2")
        buf.write("\u0f64\u0f65\3\2\2\2\u0f65\u0f67\3\2\2\2\u0f66\u0f64\3")
        buf.write("\2\2\2\u0f67\u0f68\7\u0273\2\2\u0f68\u0f6a\3\2\2\2\u0f69")
        buf.write("\u0f5e\3\2\2\2\u0f69\u0f6a\3\2\2\2\u0f6a\u0f6b\3\2\2\2")
        buf.write("\u0f6b\u0f6c\7\u01a2\2\2\u0f6c\u0f6e\5\u0402\u0202\2\u0f6d")
        buf.write("\u0f6f\7\u0086\2\2\u0f6e\u0f6d\3\2\2\2\u0f6e\u0f6f\3\2")
        buf.write("\2\2\u0f6f\u0f71\3\2\2\2\u0f70\u0f72\7\u01a0\2\2\u0f71")
        buf.write("\u0f70\3\2\2\2\u0f71\u0f72\3\2\2\2\u0f72\u0f73\3\2\2\2")
        buf.write("\u0f73\u0f74\7\u027e\2\2\u0f74\u016b\3\2\2\2\u0f75\u0f80")
        buf.write("\5\u0204\u0103\2\u0f76\u0f80\5\u0206\u0104\2\u0f77\u0f80")
        buf.write("\5\u0208\u0105\2\u0f78\u0f80\5\u020c\u0107\2\u0f79\u0f80")
        buf.write("\5\u0210\u0109\2\u0f7a\u0f80\5\u0218\u010d\2\u0f7b\u0f80")
        buf.write("\5\u0172\u00ba\2\u0f7c\u0f80\5\u0150\u00a9\2\u0f7d\u0f80")
        buf.write("\5\u0168\u00b5\2\u0f7e\u0f80\5\u016a\u00b6\2\u0f7f\u0f75")
        buf.write("\3\2\2\2\u0f7f\u0f76\3\2\2\2\u0f7f\u0f77\3\2\2\2\u0f7f")
        buf.write("\u0f78\3\2\2\2\u0f7f\u0f79\3\2\2\2\u0f7f\u0f7a\3\2\2\2")
        buf.write("\u0f7f\u0f7b\3\2\2\2\u0f7f\u0f7c\3\2\2\2\u0f7f\u0f7d\3")
        buf.write("\2\2\2\u0f7f\u0f7e\3\2\2\2\u0f80\u016d\3\2\2\2\u0f81\u0f82")
        buf.write("\7\u008e\2\2\u0f82\u0f83\7\u0185\2\2\u0f83\u0f84\5\u03de")
        buf.write("\u01f0\2\u0f84\u016f\3\2\2\2\u0f85\u0f86\7\16\2\2\u0f86")
        buf.write("\u0f87\7\u0185\2\2\u0f87\u0f88\5\u03de\u01f0\2\u0f88\u0f8a")
        buf.write("\7Q\2\2\u0f89\u0f8b\7t\2\2\u0f8a\u0f89\3\2\2\2\u0f8a\u0f8b")
        buf.write("\3\2\2\2\u0f8b\u0f8f\3\2\2\2\u0f8c\u0f8e\5\u01f2\u00fa")
        buf.write("\2\u0f8d\u0f8c\3\2\2\2\u0f8e\u0f91\3\2\2\2\u0f8f\u0f8d")
        buf.write("\3\2\2\2\u0f8f\u0f90\3\2\2\2\u0f90\u0f94\3\2\2\2\u0f91")
        buf.write("\u0f8f\3\2\2\2\u0f92\u0f93\7\u01a4\2\2\u0f93\u0f95\7\u01c6")
        buf.write("\2\2\u0f94\u0f92\3\2\2\2\u0f94\u0f95\3\2\2\2\u0f95\u0171")
        buf.write("\3\2\2\2\u0f96\u0f99\7c\2\2\u0f97\u0f98\7\u015d\2\2\u0f98")
        buf.write("\u0f9a\7\u019c\2\2\u0f99\u0f97\3\2\2\2\u0f99\u0f9a\3\2")
        buf.write("\2\2\u0f9a\u0f9c\3\2\2\2\u0f9b\u0f96\3\2\2\2\u0f9b\u0f9c")
        buf.write("\3\2\2\2\u0f9c\u0f9d\3\2\2\2\u0f9d\u0f9e\7\u0185\2\2\u0f9e")
        buf.write("\u0faa\5\u03de\u01f0\2\u0f9f\u0fa0\7\u0272\2\2\u0fa0\u0fa5")
        buf.write("\5\u01fe\u0100\2\u0fa1\u0fa2\7\u0278\2\2\u0fa2\u0fa4\5")
        buf.write("\u01fe\u0100\2\u0fa3\u0fa1\3\2\2\2\u0fa4\u0fa7\3\2\2\2")
        buf.write("\u0fa5\u0fa3\3\2\2\2\u0fa5\u0fa6\3\2\2\2\u0fa6\u0fa8\3")
        buf.write("\2\2\2\u0fa7\u0fa5\3\2\2\2\u0fa8\u0fa9\7\u0273\2\2\u0fa9")
        buf.write("\u0fab\3\2\2\2\u0faa\u0f9f\3\2\2\2\u0faa\u0fab\3\2\2\2")
        buf.write("\u0fab\u0fad\3\2\2\2\u0fac\u0fae\5\u01f0\u00f9\2\u0fad")
        buf.write("\u0fac\3\2\2\2\u0fad\u0fae\3\2\2\2\u0fae\u0faf\3\2\2\2")
        buf.write("\u0faf\u0fbc\t!\2\2\u0fb0\u0fb2\7x\2\2\u0fb1\u0fb0\3\2")
        buf.write("\2\2\u0fb1\u0fb2\3\2\2\2\u0fb2\u0fb6\3\2\2\2\u0fb3\u0fb5")
        buf.write("\5\u0202\u0102\2\u0fb4\u0fb3\3\2\2\2\u0fb5\u0fb8\3\2\2")
        buf.write("\2\u0fb6\u0fb4\3\2\2\2\u0fb6\u0fb7\3\2\2\2\u0fb7\u0fb9")
        buf.write("\3\2\2\2\u0fb8\u0fb6\3\2\2\2\u0fb9\u0fbd\5\u024c\u0127")
        buf.write("\2\u0fba\u0fbd\5\u01f4\u00fb\2\u0fbb\u0fbd\7\u00a9\2\2")
        buf.write("\u0fbc\u0fb1\3\2\2\2\u0fbc\u0fba\3\2\2\2\u0fbc\u0fbb\3")
        buf.write("\2\2\2\u0fbd\u0173\3\2\2\2\u0fbe\u0fbf\7\u008e\2\2\u0fbf")
        buf.write("\u0fc0\7\u0205\2\2\u0fc0\u0fc1\5\u03e0\u01f1\2\u0fc1\u0175")
        buf.write("\3\2\2\2\u0fc2\u0fc3\7\16\2\2\u0fc3\u0fc4\7\u0205\2\2")
        buf.write("\u0fc4\u0fd7\5\u03e0\u01f1\2\u0fc5\u0fd8\t\27\2\2\u0fc6")
        buf.write("\u0fc7\7\u019b\2\2\u0fc7\u0fc8\7\u01fe\2\2\u0fc8\u0fd8")
        buf.write("\5\u03e0\u01f1\2\u0fc9\u0fcb\7Q\2\2\u0fca\u0fcc\7t\2\2")
        buf.write("\u0fcb\u0fca\3\2\2\2\u0fcb\u0fcc\3\2\2\2\u0fcc\u0fd0\3")
        buf.write("\2\2\2\u0fcd\u0fcf\5\u01f2\u00fa\2\u0fce\u0fcd\3\2\2\2")
        buf.write("\u0fcf\u0fd2\3\2\2\2\u0fd0\u0fce\3\2\2\2\u0fd0\u0fd1\3")
        buf.write("\2\2\2\u0fd1\u0fd5\3\2\2\2\u0fd2\u0fd0\3\2\2\2\u0fd3\u0fd4")
        buf.write("\7\u01a4\2\2\u0fd4\u0fd6\7\u01c6\2\2\u0fd5\u0fd3\3\2\2")
        buf.write("\2\u0fd5\u0fd6\3\2\2\2\u0fd6\u0fd8\3\2\2\2\u0fd7\u0fc5")
        buf.write("\3\2\2\2\u0fd7\u0fc6\3\2\2\2\u0fd7\u0fc9\3\2\2\2\u0fd8")
        buf.write("\u0177\3\2\2\2\u0fd9\u0fdc\7c\2\2\u0fda\u0fdb\7\u015d")
        buf.write("\2\2\u0fdb\u0fdd\7\u019c\2\2\u0fdc\u0fda\3\2\2\2\u0fdc")
        buf.write("\u0fdd\3\2\2\2\u0fdd\u0fde\3\2\2\2\u0fde\u0fdf\7\u0205")
        buf.write("\2\2\u0fdf\u0fe3\5\u03e0\u01f1\2\u0fe0\u0fe4\5\u017e\u00c0")
        buf.write("\2\u0fe1\u0fe4\5\u0182\u00c2\2\u0fe2\u0fe4\5\u0184\u00c3")
        buf.write("\2\u0fe3\u0fe0\3\2\2\2\u0fe3\u0fe1\3\2\2\2\u0fe3\u0fe2")
        buf.write("\3\2\2\2\u0fe4\u0fe6\3\2\2\2\u0fe5\u0fe7\5\u017a\u00be")
        buf.write("\2\u0fe6\u0fe5\3\2\2\2\u0fe6\u0fe7\3\2\2\2\u0fe7\u0fe9")
        buf.write("\3\2\2\2\u0fe8\u0fea\t\27\2\2\u0fe9\u0fe8\3\2\2\2\u0fe9")
        buf.write("\u0fea\3\2\2\2\u0fea\u0fec\3\2\2\2\u0feb\u0fed\5\u017c")
        buf.write("\u00bf\2\u0fec\u0feb\3\2\2\2\u0fec\u0fed\3\2\2\2\u0fed")
        buf.write("\u0fee\3\2\2\2\u0fee\u0fef\5\u0186\u00c4\2\u0fef\u0179")
        buf.write("\3\2\2\2\u0ff0\u0ff1\7\u00b6\2\2\u0ff1\u0ff6\5\u03e0\u01f1")
        buf.write("\2\u0ff2\u0ff3\7\u0278\2\2\u0ff3\u0ff5\5\u03e0\u01f1\2")
        buf.write("\u0ff4\u0ff2\3\2\2\2\u0ff5\u0ff8\3\2\2\2\u0ff6\u0ff4\3")
        buf.write("\2\2\2\u0ff6\u0ff7\3\2\2\2\u0ff7\u017b\3\2\2\2\u0ff8\u0ff6")
        buf.write("\3\2\2\2\u0ff9\u0ffa\7\u022b\2\2\u0ffa\u0ffb\7\u0272\2")
        buf.write("\2\u0ffb\u0ffc\5\u032e\u0198\2\u0ffc\u0ffd\7\u0273\2\2")
        buf.write("\u0ffd\u017d\3\2\2\2\u0ffe\u1003\7#\2\2\u0fff\u1003\7")
        buf.write("\b\2\2\u1000\u1001\7\u00e7\2\2\u1001\u1003\7\u0152\2\2")
        buf.write("\u1002\u0ffe\3\2\2\2\u1002\u0fff\3\2\2\2\u1002\u1000\3")
        buf.write("\2\2\2\u1003\u1004\3\2\2\2\u1004\u1006\5\u0190\u00c9\2")
        buf.write("\u1005\u1007\5\u0196\u00cc\2\u1006\u1005\3\2\2\2\u1006")
        buf.write("\u1007\3\2\2\2\u1007\u1009\3\2\2\2\u1008\u100a\5\u0180")
        buf.write("\u00c1\2\u1009\u1008\3\2\2\2\u1009\u100a\3\2\2\2\u100a")
        buf.write("\u017f\3\2\2\2\u100b\u100c\7\u00b7\2\2\u100c\u100d\7\u0090")
        buf.write("\2\2\u100d\u100e\7\u01aa\2\2\u100e\u0181\3\2\2\2\u100f")
        buf.write("\u1010\7\u00b7\2\2\u1010\u1012\5\u0190\u00c9\2\u1011\u1013")
        buf.write("\5\u0196\u00cc\2\u1012\u1011\3\2\2\2\u1012\u1013\3\2\2")
        buf.write("\2\u1013\u0183\3\2\2\2\u1014\u1015\t&\2\2\u1015\u101a")
        buf.write("\5\u018e\u00c8\2\u1016\u1017\7\u015d\2\2\u1017\u1019\5")
        buf.write("\u018e\u00c8\2\u1018\u1016\3\2\2\2\u1019\u101c\3\2\2\2")
        buf.write("\u101a\u1018\3\2\2\2\u101a\u101b\3\2\2\2\u101b\u101d\3")
        buf.write("\2\2\2\u101c\u101a\3\2\2\2\u101d\u1025\7\u0158\2\2\u101e")
        buf.write("\u1026\7m\2\2\u101f\u1020\5\u03c0\u01e1\2\u1020\u1021")
        buf.write("\7\u026b\2\2\u1021\u1023\3\2\2\2\u1022\u101f\3\2\2\2\u1022")
        buf.write("\u1023\3\2\2\2\u1023\u1024\3\2\2\2\u1024\u1026\7\u01b3")
        buf.write("\2\2\u1025\u101e\3\2\2\2\u1025\u1022\3\2\2\2\u1026\u0185")
        buf.write("\3\2\2\2\u1027\u1028\7R\2\2\u1028\u102d\7\u0205\2\2\u1029")
        buf.write("\u102a\78\2\2\u102a\u102d\5\u0418\u020d\2\u102b\u102d")
        buf.write("\5\u0250\u0129\2\u102c\u1027\3\2\2\2\u102c\u1029\3\2\2")
        buf.write("\2\u102c\u102b\3\2\2\2\u102d\u0187\3\2\2\2\u102e\u1030")
        buf.write("\5\u03c2\u01e2\2\u102f\u1031\5\u03f8\u01fd\2\u1030\u102f")
        buf.write("\3\2\2\2\u1030\u1031\3\2\2\2\u1031\u0189\3\2\2\2\u1032")
        buf.write("\u1033\7R\2\2\u1033\u1037\7\u0205\2\2\u1034\u1036\5\u0202")
        buf.write("\u0102\2\u1035\u1034\3\2\2\2\u1036\u1039\3\2\2\2\u1037")
        buf.write("\u1035\3\2\2\2\u1037\u1038\3\2\2\2\u1038\u103b\3\2\2\2")
        buf.write("\u1039\u1037\3\2\2\2\u103a\u103c\5\u018c\u00c7\2\u103b")
        buf.write("\u103a\3\2\2\2\u103c\u103d\3\2\2\2\u103d\u103b\3\2\2\2")
        buf.write("\u103d\u103e\3\2\2\2\u103e\u103f\3\2\2\2\u103f\u1040\7")
        buf.write("\u0098\2\2\u1040\u1041\5\u03e0\u01f1\2\u1041\u018b\3\2")
        buf.write("\2\2\u1042\u1043\7#\2\2\u1043\u1044\7\u01dc\2\2\u1044")
        buf.write("\u1045\7\u00ef\2\2\u1045\u1046\5\u0250\u0129\2\u1046\u1047")
        buf.write("\7#\2\2\u1047\u1048\7\u01dc\2\2\u1048\u1049\7\u027e\2")
        buf.write("\2\u1049\u1067\3\2\2\2\u104a\u104b\7#\2\2\u104b\u104c")
        buf.write("\7\u0090\2\2\u104c\u104d\7\u01aa\2\2\u104d\u104e\7\u00ef")
        buf.write("\2\2\u104e\u104f\5\u0250\u0129\2\u104f\u1050\7#\2\2\u1050")
        buf.write("\u1051\7\u0090\2\2\u1051\u1052\7\u01aa\2\2\u1052\u1053")
        buf.write("\7\u027e\2\2\u1053\u1067\3\2\2\2\u1054\u1055\7\b\2\2\u1055")
        buf.write("\u1056\7\u01dc\2\2\u1056\u1057\7\u00ef\2\2\u1057\u1058")
        buf.write("\5\u0250\u0129\2\u1058\u1059\7\b\2\2\u1059\u105a\7\u01dc")
        buf.write("\2\2\u105a\u105b\7\u027e\2\2\u105b\u1067\3\2\2\2\u105c")
        buf.write("\u105d\7\b\2\2\u105d\u105e\7\u0090\2\2\u105e\u105f\7\u01aa")
        buf.write("\2\2\u105f\u1060\7\u00ef\2\2\u1060\u1061\5\u0250\u0129")
        buf.write("\2\u1061\u1062\7\b\2\2\u1062\u1063\7\u0090\2\2\u1063\u1064")
        buf.write("\7\u01aa\2\2\u1064\u1065\7\u027e\2\2\u1065\u1067\3\2\2")
        buf.write("\2\u1066\u1042\3\2\2\2\u1066\u104a\3\2\2\2\u1066\u1054")
        buf.write("\3\2\2\2\u1066\u105c\3\2\2\2\u1067\u018d\3\2\2\2\u1068")
        buf.write("\u1083\7\16\2\2\u1069\u1083\7\20\2\2\u106a\u106b\7\30")
        buf.write("\2\2\u106b\u1083\7\u01df\2\2\u106c\u1083\7\33\2\2\u106d")
        buf.write("\u1083\7L\2\2\u106e\u1083\7c\2\2\u106f\u1070\7\u008a\2")
        buf.write("\2\u1070\u1083\7\u01df\2\2\u1071\u1083\7\u008e\2\2\u1072")
        buf.write("\u1083\7\u00c4\2\2\u1073\u1083\7\u0135\2\2\u1074\u1083")
        buf.write("\7\u019b\2\2\u1075\u1083\7\u01a6\2\2\u1076\u1083\7\u0208")
        buf.write("\2\2\u1077\u1083\7s\2\2\u1078\u1083\7\u01db\2\2\u1079")
        buf.write("\u1083\7\u01ca\2\2\u107a\u1083\7q\2\2\u107b\u1083\7\u010f")
        buf.write("\2\2\u107c\u1083\7\u010e\2\2\u107d\u1083\7\u01c2\2\2\u107e")
        buf.write("\u1083\7\u01eb\2\2\u107f\u1083\7m\2\2\u1080\u1083\7\u01b3")
        buf.write("\2\2\u1081\u1083\7\u00b6\2\2\u1082\u1068\3\2\2\2\u1082")
        buf.write("\u1069\3\2\2\2\u1082\u106a\3\2\2\2\u1082\u106c\3\2\2\2")
        buf.write("\u1082\u106d\3\2\2\2\u1082\u106e\3\2\2\2\u1082\u106f\3")
        buf.write("\2\2\2\u1082\u1071\3\2\2\2\u1082\u1072\3\2\2\2\u1082\u1073")
        buf.write("\3\2\2\2\u1082\u1074\3\2\2\2\u1082\u1075\3\2\2\2\u1082")
        buf.write("\u1076\3\2\2\2\u1082\u1077\3\2\2\2\u1082\u1078\3\2\2\2")
        buf.write("\u1082\u1079\3\2\2\2\u1082\u107a\3\2\2\2\u1082\u107b\3")
        buf.write("\2\2\2\u1082\u107c\3\2\2\2\u1082\u107d\3\2\2\2\u1082\u107e")
        buf.write("\3\2\2\2\u1082\u107f\3\2\2\2\u1082\u1080\3\2\2\2\u1082")
        buf.write("\u1081\3\2\2\2\u1083\u018f\3\2\2\2\u1084\u1089\5\u0192")
        buf.write("\u00ca\2\u1085\u1086\7\u015d\2\2\u1086\u1088\5\u0192\u00ca")
        buf.write("\2\u1087\u1085\3\2\2\2\u1088\u108b\3\2\2\2\u1089\u1087")
        buf.write("\3\2\2\2\u1089\u108a\3\2\2\2\u108a\u108c\3\2\2\2\u108b")
        buf.write("\u1089\3\2\2\2\u108c\u108e\7\u0158\2\2\u108d\u108f\5\u0194")
        buf.write("\u00cb\2\u108e\u108d\3\2\2\2\u108e\u108f\3\2\2\2\u108f")
        buf.write("\u1090\3\2\2\2\u1090\u1091\5\u03f0\u01f9\2\u1091\u0191")
        buf.write("\3\2\2\2\u1092\u109c\t\'\2\2\u1093\u1094\7\u0152\2\2\u1094")
        buf.write("\u1099\5\u03ee\u01f8\2\u1095\u1096\7\u0278\2\2\u1096\u1098")
        buf.write("\5\u03ee\u01f8\2\u1097\u1095\3\2\2\2\u1098\u109b\3\2\2")
        buf.write("\2\u1099\u1097\3\2\2\2\u1099\u109a\3\2\2\2\u109a\u109d")
        buf.write("\3\2\2\2\u109b\u1099\3\2\2\2\u109c\u1093\3\2\2\2\u109c")
        buf.write("\u109d\3\2\2\2\u109d\u0193\3\2\2\2\u109e\u109f\7\u0131")
        buf.write("\2\2\u109f\u10a0\7\u01ed\2\2\u10a0\u10a1\5\u03f0\u01f9")
        buf.write("\2\u10a1\u10a2\7\u0152\2\2\u10a2\u0195\3\2\2\2\u10a3\u10a5")
        buf.write("\7\u0195\2\2\u10a4\u10a6\5\u0198\u00cd\2\u10a5\u10a4\3")
        buf.write("\2\2\2\u10a6\u10a7\3\2\2\2\u10a7\u10a5\3\2\2\2\u10a7\u10a8")
        buf.write("\3\2\2\2\u10a8\u0197\3\2\2\2\u10a9\u10aa\t(\2\2\u10aa")
        buf.write("\u10ab\5\u03a8\u01d5\2\u10ab\u0199\3\2\2\2\u10ac\u10ad")
        buf.write("\7\u008e\2\2\u10ad\u10af\7\u0209\2\2\u10ae\u10b0\7/\2")
        buf.write("\2\u10af\u10ae\3\2\2\2\u10af\u10b0\3\2\2\2\u10b0\u10b1")
        buf.write("\3\2\2\2\u10b1\u10b3\5\u03d6\u01ec\2\u10b2\u10b4\t)\2")
        buf.write("\2\u10b3\u10b2\3\2\2\2\u10b3\u10b4\3\2\2\2\u10b4\u019b")
        buf.write("\3\2\2\2\u10b5\u10b6\7\16\2\2\u10b6\u10b7\7\u0209\2\2")
        buf.write("\u10b7\u10bd\5\u03d6\u01ec\2\u10b8\u10be\5\u019e\u00d0")
        buf.write("\2\u10b9\u10be\5\u01a0\u00d1\2\u10ba\u10be\5\u01a2\u00d2")
        buf.write("\2\u10bb\u10be\5\u01aa\u00d6\2\u10bc\u10be\5\u01cc\u00e7")
        buf.write("\2\u10bd\u10b8\3\2\2\2\u10bd\u10b9\3\2\2\2\u10bd\u10ba")
        buf.write("\3\2\2\2\u10bd\u10bb\3\2\2\2\u10bd\u10bc\3\2\2\2\u10be")
        buf.write("\u10c0\3\2\2\2\u10bf\u10c1\5\u01ac\u00d7\2\u10c0\u10bf")
        buf.write("\3\2\2\2\u10c0\u10c1\3\2\2\2\u10c1\u019d\3\2\2\2\u10c2")
        buf.write("\u10c4\7Q\2\2\u10c3\u10c5\7t\2\2\u10c4\u10c3\3\2\2\2\u10c4")
        buf.write("\u10c5\3\2\2\2\u10c5\u10c7\3\2\2\2\u10c6\u10c8\t*\2\2")
        buf.write("\u10c7\u10c6\3\2\2\2\u10c7\u10c8\3\2\2\2\u10c8\u10cc\3")
        buf.write("\2\2\2\u10c9\u10cb\5\u01f2\u00fa\2\u10ca\u10c9\3\2\2\2")
        buf.write("\u10cb\u10ce\3\2\2\2\u10cc\u10ca\3\2\2\2\u10cc\u10cd\3")
        buf.write("\2\2\2\u10cd\u10d1\3\2\2\2\u10ce\u10cc\3\2\2\2\u10cf\u10d0")
        buf.write("\7\u01a4\2\2\u10d0\u10d2\7\u01c6\2\2\u10d1\u10cf\3\2\2")
        buf.write("\2\u10d1\u10d2\3\2\2\2\u10d2\u019f\3\2\2\2\u10d3\u10d5")
        buf.write("\7\u019c\2\2\u10d4\u10d6\5\u01f0\u00f9\2\u10d5\u10d4\3")
        buf.write("\2\2\2\u10d5\u10d6\3\2\2\2\u10d6\u10d7\3\2\2\2\u10d7\u10d8")
        buf.write("\7\26\2\2\u10d8\u10d9\7\u0151\2\2\u10d9\u10da\7\u0272")
        buf.write("\2\2\u10da\u10df\5\u01ce\u00e8\2\u10db\u10dc\7\u0278\2")
        buf.write("\2\u10dc\u10de\5\u01ce\u00e8\2\u10dd\u10db\3\2\2\2\u10de")
        buf.write("\u10e1\3\2\2\2\u10df\u10dd\3\2\2\2\u10df\u10e0\3\2\2\2")
        buf.write("\u10e0\u10e2\3\2\2\2\u10e1\u10df\3\2\2\2\u10e2\u10e3\7")
        buf.write("\u0273\2\2\u10e3\u01a1\3\2\2\2\u10e4\u10e9\5\u01a4\u00d3")
        buf.write("\2\u10e5\u10e6\7\u0278\2\2\u10e6\u10e8\5\u01a4\u00d3\2")
        buf.write("\u10e7\u10e5\3\2\2\2\u10e8\u10eb\3\2\2\2\u10e9\u10e7\3")
        buf.write("\2\2\2\u10e9\u10ea\3\2\2\2\u10ea\u01a3\3\2\2\2\u10eb\u10e9")
        buf.write("\3\2\2\2\u10ec\u10ef\t+\2\2\u10ed\u10f0\5\u01de\u00f0")
        buf.write("\2\u10ee\u10f0\5\u01d6\u00ec\2\u10ef\u10ed\3\2\2\2\u10ef")
        buf.write("\u10ee\3\2\2\2\u10f0\u01a5\3\2\2\2\u10f1\u10f2\t,\2\2")
        buf.write("\u10f2\u10ff\7\32\2\2\u10f3\u1100\5\u01a8\u00d5\2\u10f4")
        buf.write("\u10f5\7\u0272\2\2\u10f5\u10fa\5\u01a8\u00d5\2\u10f6\u10f7")
        buf.write("\7\u0278\2\2\u10f7\u10f9\5\u01a8\u00d5\2\u10f8\u10f6\3")
        buf.write("\2\2\2\u10f9\u10fc\3\2\2\2\u10fa\u10f8\3\2\2\2\u10fa\u10fb")
        buf.write("\3\2\2\2\u10fb\u10fd\3\2\2\2\u10fc\u10fa\3\2\2\2\u10fd")
        buf.write("\u10fe\7\u0273\2\2\u10fe\u1100\3\2\2\2\u10ff\u10f3\3\2")
        buf.write("\2\2\u10ff\u10f4\3\2\2\2\u1100\u01a7\3\2\2\2\u1101\u1103")
        buf.write("\5\u03b8\u01dd\2\u1102\u1104\5\u0402\u0202\2\u1103\u1102")
        buf.write("\3\2\2\2\u1103\u1104\3\2\2\2\u1104\u01a9\3\2\2\2\u1105")
        buf.write("\u110b\7\u0125\2\2\u1106\u1107\7\u0104\2\2\u1107\u110c")
        buf.write("\5\u0330\u0199\2\u1108\u1109\7\u0091\2\2\u1109\u110a\7")
        buf.write("\u0209\2\2\u110a\u110c\5\u0402\u0202\2\u110b\u1106\3\2")
        buf.write("\2\2\u110b\u1108\3\2\2\2\u110c\u01ab\3\2\2\2\u110d\u111e")
        buf.write("\7\u00ed\2\2\u110e\u1118\7:\2\2\u110f\u1110\7^\2\2\u1110")
        buf.write("\u1111\7\u01fe\2\2\u1111\u1119\7\u01e6\2\2\u1112\u1114")
        buf.write("\7\u0148\2\2\u1113\u1112\3\2\2\2\u1113\u1114\3\2\2\2\u1114")
        buf.write("\u1115\3\2\2\2\u1115\u1116\7\u00d5\2\2\u1116\u1117\7\u01ed")
        buf.write("\2\2\u1117\u1119\7l\2\2\u1118\u110f\3\2\2\2\u1118\u1113")
        buf.write("\3\2\2\2\u1118\u1119\3\2\2\2\u1119\u111b\3\2\2\2\u111a")
        buf.write("\u111c\5\u01ae\u00d8\2\u111b\u111a\3\2\2\2\u111b\u111c")
        buf.write("\3\2\2\2\u111c\u111e\3\2\2\2\u111d\u110d\3\2\2\2\u111d")
        buf.write("\u110e\3\2\2\2\u111e\u01ad\3\2\2\2\u111f\u1121\7\u00b9")
        buf.write("\2\2\u1120\u111f\3\2\2\2\u1120\u1121\3\2\2\2\u1121\u1122")
        buf.write("\3\2\2\2\u1122\u1123\7\u00a1\2\2\u1123\u1124\7\u00ec\2")
        buf.write("\2\u1124\u1125\5\u03f0\u01f9\2\u1125\u01af\3\2\2\2\u1126")
        buf.write("\u1129\7c\2\2\u1127\u1128\7\u015d\2\2\u1128\u112a\7\u019c")
        buf.write("\2\2\u1129\u1127\3\2\2\2\u1129\u112a\3\2\2\2\u112a\u112b")
        buf.write("\3\2\2\2\u112b\u112e\7\u0209\2\2\u112c\u112f\5\u01b2\u00da")
        buf.write("\2\u112d\u112f\5\u01be\u00e0\2\u112e\u112c\3\2\2\2\u112e")
        buf.write("\u112d\3\2\2\2\u112f\u01b1\3\2\2\2\u1130\u1133\5\u03d6")
        buf.write("\u01ec\2\u1131\u1132\7\u0154\2\2\u1132\u1134\7\u026e\2")
        buf.write("\2\u1133\u1131\3\2\2\2\u1133\u1134\3\2\2\2\u1134\u1136")
        buf.write("\3\2\2\2\u1135\u1137\5\u01b4\u00db\2\u1136\u1135\3\2\2")
        buf.write("\2\u1136\u1137\3\2\2\2\u1137\u01b3\3\2\2\2\u1138\u113a")
        buf.write("\5\u01f0\u00f9\2\u1139\u1138\3\2\2\2\u1139\u113a\3\2\2")
        buf.write("\2\u113a\u113d\3\2\2\2\u113b\u113e\5\u01b6\u00dc\2\u113c")
        buf.write("\u113e\5\u01b8\u00dd\2\u113d\u113b\3\2\2\2\u113d\u113c")
        buf.write("\3\2\2\2\u113e\u1140\3\2\2\2\u113f\u1141\5\u01bc\u00df")
        buf.write("\2\u1140\u113f\3\2\2\2\u1140\u1141\3\2\2\2\u1141\u114d")
        buf.write("\3\2\2\2\u1142\u1143\7\u0272\2\2\u1143\u1148\5\u01ce\u00e8")
        buf.write("\2\u1144\u1145\7\u0278\2\2\u1145\u1147\5\u01ce\u00e8\2")
        buf.write("\u1146\u1144\3\2\2\2\u1147\u114a\3\2\2\2\u1148\u1146\3")
        buf.write("\2\2\2\u1148\u1149\3\2\2\2\u1149\u114b\3\2\2\2\u114a\u1148")
        buf.write("\3\2\2\2\u114b\u114c\7\u0273\2\2\u114c\u114e\3\2\2\2\u114d")
        buf.write("\u1142\3\2\2\2\u114d\u114e\3\2\2\2\u114e\u1152\3\2\2\2")
        buf.write("\u114f\u1151\5\u01cc\u00e7\2\u1150\u114f\3\2\2\2\u1151")
        buf.write("\u1154\3\2\2\2\u1152\u1150\3\2\2\2\u1152\u1153\3\2\2\2")
        buf.write("\u1153\u01b5\3\2\2\2\u1154\u1152\3\2\2\2\u1155\u1159\t")
        buf.write("!\2\2\u1156\u115a\7\u0151\2\2\u1157\u115a\5\u021e\u0110")
        buf.write("\2\u1158\u115a\5\u01ba\u00de\2\u1159\u1156\3\2\2\2\u1159")
        buf.write("\u1157\3\2\2\2\u1159\u1158\3\2\2\2\u115a\u01b7\3\2\2\2")
        buf.write("\u115b\u115c\7\u020b\2\2\u115c\u115d\5\u0402\u0202\2\u115d")
        buf.write("\u01b9\3\2\2\2\u115e\u115f\7\u01ed\2\2\u115f\u1160\7\u0152")
        buf.write("\2\2\u1160\u1163\5\u0402\u0202\2\u1161\u1162\7\u0148\2")
        buf.write("\2\u1162\u1164\7\u014c\2\2\u1163\u1161\3\2\2\2\u1163\u1164")
        buf.write("\3\2\2\2\u1164\u01bb\3\2\2\2\u1165\u1166\7\u00a9\2\2\u1166")
        buf.write("\u1167\7\u0129\2\2\u1167\u1168\5\u0330\u0199\2\u1168\u1169")
        buf.write("\7\u00f7\2\2\u1169\u116a\7\u00f2\2\2\u116a\u116b\7\u0219")
        buf.write("\2\2\u116b\u116c\t-\2\2\u116c\u01bd\3\2\2\2\u116d\u116e")
        buf.write("\7/\2\2\u116e\u116f\5\u03d6\u01ec\2\u116f\u1171\t!\2\2")
        buf.write("\u1170\u1172\5\u01c0\u00e1\2\u1171\u1170\3\2\2\2\u1172")
        buf.write("\u1173\3\2\2\2\u1173\u1171\3\2\2\2\u1173\u1174\3\2\2\2")
        buf.write("\u1174\u1175\3\2\2\2\u1175\u1176\7\u0098\2\2\u1176\u01bf")
        buf.write("\3\2\2\2\u1177\u117a\5\u01c2\u00e2\2\u1178\u117a\5\u01c4")
        buf.write("\u00e3\2\u1179\u1177\3\2\2\2\u1179\u1178\3\2\2\2\u117a")
        buf.write("\u01c1\3\2\2\2\u117b\u117c\t.\2\2\u117c\u117d\7\u011b")
        buf.write("\2\2\u117d\u117e\5\u01c8\u00e5\2\u117e\u01c3\3\2\2\2\u117f")
        buf.write("\u1183\t/\2\2\u1180\u1184\5\u01c6\u00e4\2\u1181\u1184")
        buf.write("\5\u01c8\u00e5\2\u1182\u1184\5\u01ca\u00e6\2\u1183\u1180")
        buf.write("\3\2\2\2\u1183\u1181\3\2\2\2\u1183\u1182\3\2\2\2\u1184")
        buf.write("\u01c5\3\2\2\2\u1185\u1186\7\u0185\2\2\u1186\u1187\5\u03de")
        buf.write("\u01f0\2\u1187\u1188\7\u0272\2\2\u1188\u118d\5\u01e4\u00f3")
        buf.write("\2\u1189\u118a\7\u0278\2\2\u118a\u118c\5\u01e4\u00f3\2")
        buf.write("\u118b\u1189\3\2\2\2\u118c\u118f\3\2\2\2\u118d\u118b\3")
        buf.write("\2\2\2\u118d\u118e\3\2\2\2\u118e\u1190\3\2\2\2\u118f\u118d")
        buf.write("\3\2\2\2\u1190\u1191\7\u0273\2\2\u1191\u119f\t!\2\2\u1192")
        buf.write("\u11a0\5\u01f4\u00fb\2\u1193\u1195\7x\2\2\u1194\u1193")
        buf.write("\3\2\2\2\u1194\u1195\3\2\2\2\u1195\u1199\3\2\2\2\u1196")
        buf.write("\u1198\5\u0202\u0102\2\u1197\u1196\3\2\2\2\u1198\u119b")
        buf.write("\3\2\2\2\u1199\u1197\3\2\2\2\u1199\u119a\3\2\2\2\u119a")
        buf.write("\u119c\3\2\2\2\u119b\u1199\3\2\2\2\u119c\u119d\5\u024c")
        buf.write("\u0127\2\u119d\u119e\7\u027e\2\2\u119e\u11a0\3\2\2\2\u119f")
        buf.write("\u1192\3\2\2\2\u119f\u1194\3\2\2\2\u11a0\u01c7\3\2\2\2")
        buf.write("\u11a1\u11a2\7\u00c0\2\2\u11a2\u11ae\5\u03dc\u01ef\2\u11a3")
        buf.write("\u11a4\7\u0272\2\2\u11a4\u11a9\5\u01e4\u00f3\2\u11a5\u11a6")
        buf.write("\7\u0278\2\2\u11a6\u11a8\5\u01e4\u00f3\2\u11a7\u11a5\3")
        buf.write("\2\2\2\u11a8\u11ab\3\2\2\2\u11a9\u11a7\3\2\2\2\u11a9\u11aa")
        buf.write("\3\2\2\2\u11aa\u11ac\3\2\2\2\u11ab\u11a9\3\2\2\2\u11ac")
        buf.write("\u11ad\7\u0273\2\2\u11ad\u11af\3\2\2\2\u11ae\u11a3\3\2")
        buf.write("\2\2\u11ae\u11af\3\2\2\2\u11af\u11b0\3\2\2\2\u11b0\u11b1")
        buf.write("\7\u01a2\2\2\u11b1\u11b2\5\u0402\u0202\2\u11b2\u11c0\t")
        buf.write("!\2\2\u11b3\u11c1\5\u01f4\u00fb\2\u11b4\u11b6\7x\2\2\u11b5")
        buf.write("\u11b4\3\2\2\2\u11b5\u11b6\3\2\2\2\u11b6\u11ba\3\2\2\2")
        buf.write("\u11b7\u11b9\5\u0202\u0102\2\u11b8\u11b7\3\2\2\2\u11b9")
        buf.write("\u11bc\3\2\2\2\u11ba\u11b8\3\2\2\2\u11ba\u11bb\3\2\2\2")
        buf.write("\u11bb\u11bd\3\2\2\2\u11bc\u11ba\3\2\2\2\u11bd\u11be\5")
        buf.write("\u024c\u0127\2\u11be\u11bf\7\u027e\2\2\u11bf\u11c1\3\2")
        buf.write("\2\2\u11c0\u11b3\3\2\2\2\u11c0\u11b5\3\2\2\2\u11c1\u01c9")
        buf.write("\3\2\2\2\u11c2\u11c4\7\u00af\2\2\u11c3\u11c2\3\2\2\2\u11c3")
        buf.write("\u11c4\3\2\2\2\u11c4\u11c6\3\2\2\2\u11c5\u11c7\7\u00e6")
        buf.write("\2\2\u11c6\u11c5\3\2\2\2\u11c6\u11c7\3\2\2\2\u11c7\u11c8")
        buf.write("\3\2\2\2\u11c8\u11c9\7Z\2\2\u11c9\u11ca\7\u00c0\2\2\u11ca")
        buf.write("\u11dc\5\u0402\u0202\2\u11cb\u11cc\7\u0272\2\2\u11cc\u11cd")
        buf.write("\7\u01bd\2\2\u11cd\u11ce\7\u00d3\2\2\u11ce\u11cf\7\u0162")
        buf.write("\2\2\u11cf\u11d0\5\u0402\u0202\2\u11d0\u11d1\7\u0278\2")
        buf.write("\2\u11d1\u11d2\3\2\2\2\u11d2\u11d7\5\u01e4\u00f3\2\u11d3")
        buf.write("\u11d4\7\u0278\2\2\u11d4\u11d6\5\u01e4\u00f3\2\u11d5\u11d3")
        buf.write("\3\2\2\2\u11d6\u11d9\3\2\2\2\u11d7\u11d5\3\2\2\2\u11d7")
        buf.write("\u11d8\3\2\2\2\u11d8\u11da\3\2\2\2\u11d9\u11d7\3\2\2\2")
        buf.write("\u11da\u11db\7\u0273\2\2\u11db\u11dd\3\2\2\2\u11dc\u11cb")
        buf.write("\3\2\2\2\u11dc\u11dd\3\2\2\2\u11dd\u11de\3\2\2\2\u11de")
        buf.write("\u11df\7\u01a2\2\2\u11df\u11e0\7\u01bd\2\2\u11e0\u11e1")
        buf.write("\7\26\2\2\u11e1\u11e2\7\u019f\2\2\u11e2\u11f0\t!\2\2\u11e3")
        buf.write("\u11f1\5\u01f4\u00fb\2\u11e4\u11e6\7x\2\2\u11e5\u11e4")
        buf.write("\3\2\2\2\u11e5\u11e6\3\2\2\2\u11e6\u11ea\3\2\2\2\u11e7")
        buf.write("\u11e9\5\u0202\u0102\2\u11e8\u11e7\3\2\2\2\u11e9\u11ec")
        buf.write("\3\2\2\2\u11ea\u11e8\3\2\2\2\u11ea\u11eb\3\2\2\2\u11eb")
        buf.write("\u11ed\3\2\2\2\u11ec\u11ea\3\2\2\2\u11ed\u11ee\5\u024c")
        buf.write("\u0127\2\u11ee\u11ef\7\u027e\2\2\u11ef\u11f1\3\2\2\2\u11f0")
        buf.write("\u11e3\3\2\2\2\u11f0\u11e5\3\2\2\2\u11f1\u01cb\3\2\2\2")
        buf.write("\u11f2\u11f4\7\u0148\2\2\u11f3\u11f2\3\2\2\2\u11f3\u11f4")
        buf.write("\3\2\2\2\u11f4\u11f5\3\2\2\2\u11f5\u11f6\t\60\2\2\u11f6")
        buf.write("\u01cd\3\2\2\2\u11f7\u11f8\5\u0418\u020d\2\u11f8\u11fa")
        buf.write("\5\u0402\u0202\2\u11f9\u11fb\5\u01d0\u00e9\2\u11fa\u11f9")
        buf.write("\3\2\2\2\u11fa\u11fb\3\2\2\2\u11fb\u11fe\3\2\2\2\u11fc")
        buf.write("\u11fe\5\u01d2\u00ea\2\u11fd\u11f7\3\2\2\2\u11fd\u11fc")
        buf.write("\3\2\2\2\u11fe\u01cf\3\2\2\2\u11ff\u1200\7\u00a9\2\2\u1200")
        buf.write("\u1201\7\u0129\2\2\u1201\u1202\5\u0330\u0199\2\u1202\u01d1")
        buf.write("\3\2\2\2\u1203\u1205\5\u01cc\u00e7\2\u1204\u1203\3\2\2")
        buf.write("\2\u1204\u1205\3\2\2\2\u1205\u1207\3\2\2\2\u1206\u1208")
        buf.write("\5\u01d4\u00eb\2\u1207\u1206\3\2\2\2\u1208\u1209\3\2\2")
        buf.write("\2\u1209\u1207\3\2\2\2\u1209\u120a\3\2\2\2\u120a\u120d")
        buf.write("\3\2\2\2\u120b\u120c\7\u0278\2\2\u120c\u120e\5\u01e0\u00f1")
        buf.write("\2\u120d\u120b\3\2\2\2\u120d\u120e\3\2\2\2\u120e\u01d3")
        buf.write("\3\2\2\2\u120f\u1213\5\u01d6\u00ec\2\u1210\u1213\5\u01dc")
        buf.write("\u00ef\2\u1211\u1213\5\u01de\u00f0\2\u1212\u120f\3\2\2")
        buf.write("\2\u1212\u1210\3\2\2\2\u1212\u1211\3\2\2\2\u1213\u01d5")
        buf.write("\3\2\2\2\u1214\u1217\t/\2\2\u1215\u1218\5\u01d8\u00ed")
        buf.write("\2\u1216\u1218\5\u01da\u00ee\2\u1217\u1215\3\2\2\2\u1217")
        buf.write("\u1216\3\2\2\2\u1218\u01d7\3\2\2\2\u1219\u121a\7\u0185")
        buf.write("\2\2\u121a\u121b\5\u03de\u01f0\2\u121b\u121c\7\u0272\2")
        buf.write("\2\u121c\u1221\5\u01e4\u00f3\2\u121d\u121e\7\u0278\2\2")
        buf.write("\u121e\u1220\5\u01e4\u00f3\2\u121f\u121d\3\2\2\2\u1220")
        buf.write("\u1223\3\2\2\2\u1221\u121f\3\2\2\2\u1221\u1222\3\2\2\2")
        buf.write("\u1222\u1224\3\2\2\2\u1223\u1221\3\2\2\2\u1224\u1227\7")
        buf.write("\u0273\2\2\u1225\u1226\t!\2\2\u1226\u1228\5\u01f4\u00fb")
        buf.write("\2\u1227\u1225\3\2\2\2\u1227\u1228\3\2\2\2\u1228\u01d9")
        buf.write("\3\2\2\2\u1229\u122a\7\u00c0\2\2\u122a\u1236\5\u03dc\u01ef")
        buf.write("\2\u122b\u122c\7\u0272\2\2\u122c\u1231\5\u01e4\u00f3\2")
        buf.write("\u122d\u122e\7\u0278\2\2\u122e\u1230\5\u01e4\u00f3\2\u122f")
        buf.write("\u122d\3\2\2\2\u1230\u1233\3\2\2\2\u1231\u122f\3\2\2\2")
        buf.write("\u1231\u1232\3\2\2\2\u1232\u1234\3\2\2\2\u1233\u1231\3")
        buf.write("\2\2\2\u1234\u1235\7\u0273\2\2\u1235\u1237\3\2\2\2\u1236")
        buf.write("\u122b\3\2\2\2\u1236\u1237\3\2\2\2\u1237\u1238\3\2\2\2")
        buf.write("\u1238\u123d\7\u01a2\2\2\u1239\u123e\5\u0402\u0202\2\u123a")
        buf.write("\u123b\7\u01bd\2\2\u123b\u123c\7\26\2\2\u123c\u123e\7")
        buf.write("\u019f\2\2\u123d\u1239\3\2\2\2\u123d\u123a\3\2\2\2\u123e")
        buf.write("\u1247\3\2\2\2\u123f\u1240\t!\2\2\u1240\u1248\5\u01f4")
        buf.write("\u00fb\2\u1241\u1243\7\u00a9\2\2\u1242\u1244\7\u021f\2")
        buf.write("\2\u1243\u1242\3\2\2\2\u1243\u1244\3\2\2\2\u1244\u1245")
        buf.write("\3\2\2\2\u1245\u1246\7\u0129\2\2\u1246\u1248\5\u0330\u0199")
        buf.write("\2\u1247\u123f\3\2\2\2\u1247\u1241\3\2\2\2\u1247\u1248")
        buf.write("\3\2\2\2\u1248\u01db\3\2\2\2\u1249\u124b\7\u00af\2\2\u124a")
        buf.write("\u1249\3\2\2\2\u124a\u124b\3\2\2\2\u124b\u124d\3\2\2\2")
        buf.write("\u124c\u124e\7\u00e6\2\2\u124d\u124c\3\2\2\2\u124d\u124e")
        buf.write("\3\2\2\2\u124e\u124f\3\2\2\2\u124f\u1250\7Z\2\2\u1250")
        buf.write("\u1251\7\u00c0\2\2\u1251\u1263\5\u0402\u0202\2\u1252\u1253")
        buf.write("\7\u0272\2\2\u1253\u1254\7\u01bd\2\2\u1254\u1255\7\u00d3")
        buf.write("\2\2\u1255\u1256\7\u0162\2\2\u1256\u1257\5\u0402\u0202")
        buf.write("\2\u1257\u1258\7\u0278\2\2\u1258\u1259\3\2\2\2\u1259\u125e")
        buf.write("\5\u01e4\u00f3\2\u125a\u125b\7\u0278\2\2\u125b\u125d\5")
        buf.write("\u01e4\u00f3\2\u125c\u125a\3\2\2\2\u125d\u1260\3\2\2\2")
        buf.write("\u125e\u125c\3\2\2\2\u125e\u125f\3\2\2\2\u125f\u1261\3")
        buf.write("\2\2\2\u1260\u125e\3\2\2\2\u1261\u1262\7\u0273\2\2\u1262")
        buf.write("\u1264\3\2\2\2\u1263\u1252\3\2\2\2\u1263\u1264\3\2\2\2")
        buf.write("\u1264\u1265\3\2\2\2\u1265\u1266\7\u01a2\2\2\u1266\u1267")
        buf.write("\7\u01bd\2\2\u1267\u1268\7\26\2\2\u1268\u126b\7\u019f")
        buf.write("\2\2\u1269\u126a\t!\2\2\u126a\u126c\5\u01f4\u00fb\2\u126b")
        buf.write("\u1269\3\2\2\2\u126b\u126c\3\2\2\2\u126c\u01dd\3\2\2\2")
        buf.write("\u126d\u126e\t.\2\2\u126e\u126f\7\u011b\2\2\u126f\u1270")
        buf.write("\5\u01da\u00ee\2\u1270\u01df\3\2\2\2\u1271\u1272\7\u017e")
        buf.write("\2\2\u1272\u1273\7\u019e\2\2\u1273\u1274\7\u0272\2\2\u1274")
        buf.write("\u1279\5\u01e2\u00f2\2\u1275\u1276\7\u0278\2\2\u1276\u1278")
        buf.write("\5\u01e2\u00f2\2\u1277\u1275\3\2\2\2\u1278\u127b\3\2\2")
        buf.write("\2\u1279\u1277\3\2\2\2\u1279\u127a\3\2\2\2\u127a\u127c")
        buf.write("\3\2\2\2\u127b\u1279\3\2\2\2\u127c\u127d\7\u0273\2\2\u127d")
        buf.write("\u01e1\3\2\2\2\u127e\u1281\5\u0418\u020d\2\u127f\u1281")
        buf.write("\7~\2\2\u1280\u127e\3\2\2\2\u1280\u127f\3\2\2\2\u1281")
        buf.write("\u01e3\3\2\2\2\u1282\u1283\5\u03c8\u01e5\2\u1283\u1284")
        buf.write("\5\u0402\u0202\2\u1284\u01e5\3\2\2\2\u1285\u1286\7\u008e")
        buf.write("\2\2\u1286\u1287\7\u01be\2\2\u1287\u1288\5\u03d8\u01ed")
        buf.write("\2\u1288\u01e7\3\2\2\2\u1289\u128a\7\16\2\2\u128a\u128b")
        buf.write("\7\u01be\2\2\u128b\u128d\5\u03d8\u01ed\2\u128c\u128e\5")
        buf.write("\u01ec\u00f7\2\u128d\u128c\3\2\2\2\u128e\u128f\3\2\2\2")
        buf.write("\u128f\u128d\3\2\2\2\u128f\u1290\3\2\2\2\u1290\u01e9\3")
        buf.write("\2\2\2\u1291\u1292\7c\2\2\u1292\u1293\7\u01be\2\2\u1293")
        buf.write("\u1298\5\u03d8\u01ed\2\u1294\u1297\5\u01ee\u00f8\2\u1295")
        buf.write("\u1297\5\u01ec\u00f7\2\u1296\u1294\3\2\2\2\u1296\u1295")
        buf.write("\3\2\2\2\u1297\u129a\3\2\2\2\u1298\u1296\3\2\2\2\u1298")
        buf.write("\u1299\3\2\2\2\u1299\u01eb\3\2\2\2\u129a\u1298\3\2\2\2")
        buf.write("\u129b\u129c\7\u00d6\2\2\u129c\u129d\7\64\2\2\u129d\u12ac")
        buf.write("\7\u026c\2\2\u129e\u129f\7\u0118\2\2\u129f\u12ac\7\u026c")
        buf.write("\2\2\u12a0\u12ac\7\u013d\2\2\u12a1\u12a2\7\u0121\2\2\u12a2")
        buf.write("\u12ac\7\u026c\2\2\u12a3\u12ac\7\u013f\2\2\u12a4\u12ac")
        buf.write("\7k\2\2\u12a5\u12ac\7\u0139\2\2\u12a6\u12a7\7\67\2\2\u12a7")
        buf.write("\u12ac\7\u026c\2\2\u12a8\u12ac\7\u0136\2\2\u12a9\u12ac")
        buf.write("\7\u015f\2\2\u12aa\u12ac\7\u0142\2\2\u12ab\u129b\3\2\2")
        buf.write("\2\u12ab\u129e\3\2\2\2\u12ab\u12a0\3\2\2\2\u12ab\u12a1")
        buf.write("\3\2\2\2\u12ab\u12a3\3\2\2\2\u12ab\u12a4\3\2\2\2\u12ab")
        buf.write("\u12a5\3\2\2\2\u12ab\u12a6\3\2\2\2\u12ab\u12a8\3\2\2\2")
        buf.write("\u12ab\u12a9\3\2\2\2\u12ab\u12aa\3\2\2\2\u12ac\u01ed\3")
        buf.write("\2\2\2\u12ad\u12ae\7\u01da\2\2\u12ae\u12af\7\u022f\2\2")
        buf.write("\u12af\u12b0\7\u026c\2\2\u12b0\u01ef\3\2\2\2\u12b1\u12b2")
        buf.write("\7\34\2\2\u12b2\u12b3\t\61\2\2\u12b3\u01f1\3\2\2\2\u12b4")
        buf.write("\u12b5\5\u0418\u020d\2\u12b5\u12b6\7\u0289\2\2\u12b6\u12b7")
        buf.write("\5\u0330\u0199\2\u12b7\u01f3\3\2\2\2\u12b8\u12bb\7\u00f7")
        buf.write("\2\2\u12b9\u12bc\5\u01f6\u00fc\2\u12ba\u12bc\5\u01f8\u00fd")
        buf.write("\2\u12bb\u12b9\3\2\2\2\u12bb\u12ba\3\2\2\2\u12bc\u01f5")
        buf.write("\3\2\2\2\u12bd\u12be\7\u00f2\2\2\u12be\u12bf\7\u0129\2")
        buf.write("\2\u12bf\u12c0\7\u026e\2\2\u12c0\u01f7\3\2\2\2\u12c1\u12c4")
        buf.write("\7\66\2\2\u12c2\u12c3\7\u0129\2\2\u12c3\u12c5\7\u026e")
        buf.write("\2\2\u12c4\u12c2\3\2\2\2\u12c4\u12c5\3\2\2\2\u12c5\u12c6")
        buf.write("\3\2\2\2\u12c6\u12c7\7\u00ff\2\2\u12c7\u12c9\5\u0418\u020d")
        buf.write("\2\u12c8\u12ca\5\u01fa\u00fe\2\u12c9\u12c8\3\2\2\2\u12c9")
        buf.write("\u12ca\3\2\2\2\u12ca\u12cd\3\2\2\2\u12cb\u12cc\7\u022f")
        buf.write("\2\2\u12cc\u12ce\7\\\2\2\u12cd\u12cb\3\2\2\2\u12cd\u12ce")
        buf.write("\3\2\2\2\u12ce\u12d0\3\2\2\2\u12cf\u12d1\5\u01fc\u00ff")
        buf.write("\2\u12d0\u12cf\3\2\2\2\u12d0\u12d1\3\2\2\2\u12d1\u01f9")
        buf.write("\3\2\2\2\u12d2\u12d3\7\t\2\2\u12d3\u12d4\7\u00d3\2\2\u12d4")
        buf.write("\u12d5\7\u0272\2\2\u12d5\u12da\5\u0330\u0199\2\u12d6\u12d7")
        buf.write("\7\u0278\2\2\u12d7\u12d9\5\u0330\u0199\2\u12d8\u12d6\3")
        buf.write("\2\2\2\u12d9\u12dc\3\2\2\2\u12da\u12d8\3\2\2\2\u12da\u12db")
        buf.write("\3\2\2\2\u12db\u12dd\3\2\2\2\u12dc\u12da\3\2\2\2\u12dd")
        buf.write("\u12de\7\u0273\2\2\u12de\u01fb\3\2\2\2\u12df\u12e0\7\u016a")
        buf.write("\2\2\u12e0\u12ec\7\u0272\2\2\u12e1\u12e6\5\u0330\u0199")
        buf.write("\2\u12e2\u12e3\7\u0278\2\2\u12e3\u12e5\5\u0330\u0199\2")
        buf.write("\u12e4\u12e2\3\2\2\2\u12e5\u12e8\3\2\2\2\u12e6\u12e4\3")
        buf.write("\2\2\2\u12e6\u12e7\3\2\2\2\u12e7\u12ed\3\2\2\2\u12e8\u12e6")
        buf.write("\3\2\2\2\u12e9\u12ea\7\u026b\2\2\u12ea\u12eb\7\u026b\2")
        buf.write("\2\u12eb\u12ed\7\u026b\2\2\u12ec\u12e1\3\2\2\2\u12ec\u12e9")
        buf.write("\3\2\2\2\u12ed\u12ee\3\2\2\2\u12ee\u12ef\7\u0273\2\2\u12ef")
        buf.write("\u01fd\3\2\2\2\u12f0\u12f4\5\u03c8\u01e5\2\u12f1\u12f3")
        buf.write("\t\62\2\2\u12f2\u12f1\3\2\2\2\u12f3\u12f6\3\2\2\2\u12f4")
        buf.write("\u12f2\3\2\2\2\u12f4\u12f5\3\2\2\2\u12f5\u12f8\3\2\2\2")
        buf.write("\u12f6\u12f4\3\2\2\2\u12f7\u12f9\5\u0402\u0202\2\u12f8")
        buf.write("\u12f7\3\2\2\2\u12f8\u12f9\3\2\2\2\u12f9\u12fb\3\2\2\2")
        buf.write("\u12fa\u12fc\5\u0200\u0101\2\u12fb\u12fa\3\2\2\2\u12fb")
        buf.write("\u12fc\3\2\2\2\u12fc\u01ff\3\2\2\2\u12fd\u12fe\t\63\2")
        buf.write("\2\u12fe\u12ff\5\u0330\u0199\2\u12ff\u0201\3\2\2\2\u1300")
        buf.write("\u130a\5\u0204\u0103\2\u1301\u130a\5\u0206\u0104\2\u1302")
        buf.write("\u130a\5\u0208\u0105\2\u1303\u130a\5\u020c\u0107\2\u1304")
        buf.write("\u130a\5\u020e\u0108\2\u1305\u130a\5\u0210\u0109\2\u1306")
        buf.write("\u130a\5\u0218\u010d\2\u1307\u130a\5\u0172\u00ba\2\u1308")
        buf.write("\u130a\5\u0150\u00a9\2\u1309\u1300\3\2\2\2\u1309\u1301")
        buf.write("\3\2\2\2\u1309\u1302\3\2\2\2\u1309\u1303\3\2\2\2\u1309")
        buf.write("\u1304\3\2\2\2\u1309\u1305\3\2\2\2\u1309\u1306\3\2\2\2")
        buf.write("\u1309\u1307\3\2\2\2\u1309\u1308\3\2\2\2\u130a\u0203\3")
        buf.write("\2\2\2\u130b\u130d\5\u03e2\u01f2\2\u130c\u130e\7W\2\2")
        buf.write("\u130d\u130c\3\2\2\2\u130d\u130e\3\2\2\2\u130e\u130f\3")
        buf.write("\2\2\2\u130f\u1312\5\u0402\u0202\2\u1310\u1311\7\u0148")
        buf.write("\2\2\u1311\u1313\7\u014c\2\2\u1312\u1310\3\2\2\2\u1312")
        buf.write("\u1313\3\2\2\2\u1313\u1315\3\2\2\2\u1314\u1316\5\u0200")
        buf.write("\u0101\2\u1315\u1314\3\2\2\2\u1315\u1316\3\2\2\2\u1316")
        buf.write("\u1317\3\2\2\2\u1317\u1318\7\u027e\2\2\u1318\u0205\3\2")
        buf.write("\2\2\u1319\u131a\7\u01e8\2\2\u131a\u131b\5\u03d6\u01ec")
        buf.write("\2\u131b\u131c\7\u00ef\2\2\u131c\u1322\5\u0402\u0202\2")
        buf.write("\u131d\u131e\7\u0189\2\2\u131e\u131f\5\u0330\u0199\2\u131f")
        buf.write("\u1320\7\3\2\2\u1320\u1321\5\u0330\u0199\2\u1321\u1323")
        buf.write("\3\2\2\2\u1322\u131d\3\2\2\2\u1322\u1323\3\2\2\2\u1323")
        buf.write("\u1326\3\2\2\2\u1324\u1325\7\u0148\2\2\u1325\u1327\7\u014c")
        buf.write("\2\2\u1326\u1324\3\2\2\2\u1326\u1327\3\2\2\2\u1327\u1328")
        buf.write("\3\2\2\2\u1328\u1329\7\u027e\2\2\u1329\u0207\3\2\2\2\u132a")
        buf.write("\u132b\7i\2\2\u132b\u1337\5\u03e6\u01f4\2\u132c\u132d")
        buf.write("\7\u0272\2\2\u132d\u1332\5\u020a\u0106\2\u132e\u132f\7")
        buf.write("\u0278\2\2\u132f\u1331\5\u020a\u0106\2\u1330\u132e\3\2")
        buf.write("\2\2\u1331\u1334\3\2\2\2\u1332\u1330\3\2\2\2\u1332\u1333")
        buf.write("\3\2\2\2\u1333\u1335\3\2\2\2\u1334\u1332\3\2\2\2\u1335")
        buf.write("\u1336\7\u0273\2\2\u1336\u1338\3\2\2\2\u1337\u132c\3\2")
        buf.write("\2\2\u1337\u1338\3\2\2\2\u1338\u133b\3\2\2\2\u1339\u133a")
        buf.write("\7\u01a2\2\2\u133a\u133c\5\u0402\u0202\2\u133b\u1339\3")
        buf.write("\2\2\2\u133b\u133c\3\2\2\2\u133c\u133f\3\2\2\2\u133d\u133e")
        buf.write("\7\u00ef\2\2\u133e\u1340\5\u0276\u013c\2\u133f\u133d\3")
        buf.write("\2\2\2\u133f\u1340\3\2\2\2\u1340\u1341\3\2\2\2\u1341\u1342")
        buf.write("\7\u027e\2\2\u1342\u0209\3\2\2\2\u1343\u1348\5\u03c8\u01e5")
        buf.write("\2\u1344\u1346\7\u00d3\2\2\u1345\u1344\3\2\2\2\u1345\u1346")
        buf.write("\3\2\2\2\u1346\u1347\3\2\2\2\u1347\u1349\5\u0402\u0202")
        buf.write("\2\u1348\u1345\3\2\2\2\u1348\u1349\3\2\2\2\u1349\u134b")
        buf.write("\3\2\2\2\u134a\u134c\5\u0200\u0101\2\u134b\u134a\3\2\2")
        buf.write("\2\u134b\u134c\3\2\2\2\u134c\u020b\3\2\2\2\u134d\u134e")
        buf.write("\5\u03da\u01ee\2\u134e\u134f\7\u009f\2\2\u134f\u1350\7")
        buf.write("\u027e\2\2\u1350\u020d\3\2\2\2\u1351\u1370\7\u017e\2\2")
        buf.write("\u1352\u1371\7\u01c1\2\2\u1353\u1371\7\37\2\2\u1354\u1355")
        buf.write("\7\u00a0\2\2\u1355\u1356\7\u0272\2\2\u1356\u1357\5\u03da")
        buf.write("\u01ee\2\u1357\u1358\7\u0278\2\2\u1358\u1359\5\u0414\u020b")
        buf.write("\2\u1359\u135a\7\u0273\2\2\u135a\u1371\3\2\2\2\u135b\u135c")
        buf.write("\7\u00e1\2\2\u135c\u135d\7\u0272\2\2\u135d\u135e\5\u0418")
        buf.write("\u020d\2\u135e\u135f\7\u0278\2\2\u135f\u1360\5\u0330\u0199")
        buf.write("\2\u1360\u1361\7\u0273\2\2\u1361\u1371\3\2\2\2\u1362\u1363")
        buf.write("\7\u019e\2\2\u1363\u1366\7\u0272\2\2\u1364\u1367\5\u0418")
        buf.write("\u020d\2\u1365\u1367\7~\2\2\u1366\u1364\3\2\2\2\u1366")
        buf.write("\u1365\3\2\2\2\u1367\u136a\3\2\2\2\u1368\u1369\7\u0278")
        buf.write("\2\2\u1369\u136b\5\u0418\u020d\2\u136a\u1368\3\2\2\2\u136b")
        buf.write("\u136c\3\2\2\2\u136c\u136a\3\2\2\2\u136c\u136d\3\2\2\2")
        buf.write("\u136d\u136e\3\2\2\2\u136e\u136f\7\u0273\2\2\u136f\u1371")
        buf.write("\3\2\2\2\u1370\u1352\3\2\2\2\u1370\u1353\3\2\2\2\u1370")
        buf.write("\u1354\3\2\2\2\u1370\u135b\3\2\2\2\u1370\u1362\3\2\2\2")
        buf.write("\u1371\u1372\3\2\2\2\u1372\u1373\7\u027e\2\2\u1373\u020f")
        buf.write("\3\2\2\2\u1374\u1377\5\u0212\u010a\2\u1375\u1377\5\u0216")
        buf.write("\u010c\2\u1376\u1374\3\2\2\2\u1376\u1375\3\2\2\2\u1377")
        buf.write("\u0211\3\2\2\2\u1378\u1379\7\u0209\2\2\u1379\u137a\5\u03d6")
        buf.write("\u01ec\2\u137a\u138d\7\u00ef\2\2\u137b\u137c\7\u018f\2")
        buf.write("\2\u137c\u137d\7\u0272\2\2\u137d\u1382\5\u0214\u010b\2")
        buf.write("\u137e\u137f\7\u0278\2\2\u137f\u1381\5\u0214\u010b\2\u1380")
        buf.write("\u137e\3\2\2\2\u1381\u1384\3\2\2\2\u1382\u1380\3\2\2\2")
        buf.write("\u1382\u1383\3\2\2\2\u1383\u1385\3\2\2\2\u1384\u1382\3")
        buf.write("\2\2\2\u1385\u1386\7\u0273\2\2\u1386\u138e\3\2\2\2\u1387")
        buf.write("\u1388\7\u0192\2\2\u1388\u138b\7i\2\2\u1389\u138a\7\u01a2")
        buf.write("\2\2\u138a\u138c\5\u0402\u0202\2\u138b\u1389\3\2\2\2\u138b")
        buf.write("\u138c\3\2\2\2\u138c\u138e\3\2\2\2\u138d\u137b\3\2\2\2")
        buf.write("\u138d\u1387\3\2\2\2\u138e\u138f\3\2\2\2\u138f\u1390\7")
        buf.write("\u027e\2\2\u1390\u0213\3\2\2\2\u1391\u1393\5\u03ee\u01f8")
        buf.write("\2\u1392\u1394\5\u0402\u0202\2\u1393\u1392\3\2\2\2\u1393")
        buf.write("\u1394\3\2\2\2\u1394\u1397\3\2\2\2\u1395\u1396\7\u0148")
        buf.write("\2\2\u1396\u1398\7\u014c\2\2\u1397\u1395\3\2\2\2\u1397")
        buf.write("\u1398\3\2\2\2\u1398\u139a\3\2\2\2\u1399\u139b\5\u0200")
        buf.write("\u0101\2\u139a\u1399\3\2\2\2\u139a\u139b\3\2\2\2\u139b")
        buf.write("\u0215\3\2\2\2\u139c\u139d\5\u03e8\u01f5\2\u139d\u139e")
        buf.write("\5\u03d6\u01ec\2\u139e\u139f\t\64\2\2\u139f\u13a0\7\u027e")
        buf.write("\2\2\u13a0\u0217\3\2\2\2\u13a1\u13a4\5\u021a\u010e\2\u13a2")
        buf.write("\u13a4\5\u0220\u0111\2\u13a3\u13a1\3\2\2\2\u13a3\u13a2")
        buf.write("\3\2\2\2\u13a4\u13a5\3\2\2\2\u13a5\u13a6\7\u027e\2\2\u13a6")
        buf.write("\u0219\3\2\2\2\u13a7\u13a8\7\u0209\2\2\u13a8\u13a9\5\u03d6")
        buf.write("\u01ec\2\u13a9\u13b5\7\u00ef\2\2\u13aa\u13ab\7\u01ed\2")
        buf.write("\2\u13ab\u13ac\7\u0152\2\2\u13ac\u13ae\5\u0402\u0202\2")
        buf.write("\u13ad\u13af\5\u021c\u010f\2\u13ae\u13ad\3\2\2\2\u13ae")
        buf.write("\u13af\3\2\2\2\u13af\u13b2\3\2\2\2\u13b0\u13b1\7\u0148")
        buf.write("\2\2\u13b1\u13b3\7\u014c\2\2\u13b2\u13b0\3\2\2\2\u13b2")
        buf.write("\u13b3\3\2\2\2\u13b3\u13b6\3\2\2\2\u13b4\u13b6\5\u021e")
        buf.write("\u0110\2\u13b5\u13aa\3\2\2\2\u13b5\u13b4\3\2\2\2\u13b6")
        buf.write("\u021b\3\2\2\2\u13b7\u13ba\7\u00d9\2\2\u13b8\u13ba\7\u00d8")
        buf.write("\2\2\u13b9\u13b7\3\2\2\2\u13b9\u13b8\3\2\2\2\u13ba\u13bb")
        buf.write("\3\2\2\2\u13bb\u13bc\7\64\2\2\u13bc\u13bd\5\u0402\u0202")
        buf.write("\2\u13bd\u021d\3\2\2\2\u13be\u13c2\7\u0220\2\2\u13bf\u13c0")
        buf.write("\7\u0222\2\2\u13c0\u13c2\7\25\2\2\u13c1\u13be\3\2\2\2")
        buf.write("\u13c1\u13bf\3\2\2\2\u13c2\u13c3\3\2\2\2\u13c3\u13c4\7")
        buf.write("\u0272\2\2\u13c4\u13c5\5\u0330\u0199\2\u13c5\u13c6\7\u0273")
        buf.write("\2\2\u13c6\u13c7\7\u0152\2\2\u13c7\u13ca\5\u0402\u0202")
        buf.write("\2\u13c8\u13c9\7\u0148\2\2\u13c9\u13cb\7\u014c\2\2\u13ca")
        buf.write("\u13c8\3\2\2\2\u13ca\u13cb\3\2\2\2\u13cb\u021f\3\2\2\2")
        buf.write("\u13cc\u13cd\5\u03be\u01e0\2\u13cd\u13ce\5\u0402\u0202")
        buf.write("\2\u13ce\u0221\3\2\2\2\u13cf\u13d0\5\u0226\u0114\2\u13d0")
        buf.write("\u13d1\t\65\2\2\u13d1\u13d4\3\2\2\2\u13d2\u13d4\5\u0224")
        buf.write("\u0113\2\u13d3\u13cf\3\2\2\2\u13d3\u13d2\3\2\2\2\u13d4")
        buf.write("\u13d5\3\2\2\2\u13d5\u13d3\3\2\2\2\u13d5\u13d6\3\2\2\2")
        buf.write("\u13d6\u0223\3\2\2\2\u13d7\u13d8\7\u0280\2\2\u13d8\u13d9")
        buf.write("\7\u0280\2\2\u13d9\u13da\5\u03d4\u01eb\2\u13da\u13db\7")
        buf.write("\u0286\2\2\u13db\u13dc\7\u0286\2\2\u13dc\u0225\3\2\2\2")
        buf.write("\u13dd\u13de\7c\2\2\u13de\u13f8\5\2\2\2\u13df\u13e0\7")
        buf.write("\16\2\2\u13e0\u13f8\5\2\2\2\u13e1\u13e3\7\u00c4\2\2\u13e2")
        buf.write("\u13e4\7\13\2\2\u13e3\u13e2\3\2\2\2\u13e3\u13e4\3\2\2")
        buf.write("\2\u13e4\u13e5\3\2\2\2\u13e5\u13f8\5\2\2\2\u13e6\u13e7")
        buf.write("\7\u0208\2\2\u13e7\u13f8\5\2\2\2\u13e8\u13f8\5\u024c\u0127")
        buf.write("\2\u13e9\u13f8\5\u0252\u012a\2\u13ea\u13f8\5\u0228\u0115")
        buf.write("\2\u13eb\u13f8\5\u022a\u0116\2\u13ec\u13f8\5\u022c\u0117")
        buf.write("\2\u13ed\u13f8\5\u022e\u0118\2\u13ee\u13f8\5\u0230\u0119")
        buf.write("\2\u13ef\u13f8\5\u0236\u011c\2\u13f0\u13f8\5\u023a\u011e")
        buf.write("\2\u13f1\u13f8\5\u0244\u0123\2\u13f2\u13f8\5\u0246\u0124")
        buf.write("\2\u13f3\u13f8\5\u0248\u0125\2\u13f4\u13f8\5\u0354\u01ab")
        buf.write("\2\u13f5\u13f8\5\u0254\u012b\2\u13f6\u13f8\5\u024a\u0126")
        buf.write("\2\u13f7\u13dd\3\2\2\2\u13f7\u13df\3\2\2\2\u13f7\u13e1")
        buf.write("\3\2\2\2\u13f7\u13e6\3\2\2\2\u13f7\u13e8\3\2\2\2\u13f7")
        buf.write("\u13e9\3\2\2\2\u13f7\u13ea\3\2\2\2\u13f7\u13eb\3\2\2\2")
        buf.write("\u13f7\u13ec\3\2\2\2\u13f7\u13ed\3\2\2\2\u13f7\u13ee\3")
        buf.write("\2\2\2\u13f7\u13ef\3\2\2\2\u13f7\u13f0\3\2\2\2\u13f7\u13f1")
        buf.write("\3\2\2\2\u13f7\u13f2\3\2\2\2\u13f7\u13f3\3\2\2\2\u13f7")
        buf.write("\u13f4\3\2\2\2\u13f7\u13f5\3\2\2\2\u13f7\u13f6\3\2\2\2")
        buf.write("\u13f8\u0227\3\2\2\2\u13f9\u13fc\5\u040c\u0207\2\u13fa")
        buf.write("\u13fc\5\u040a\u0206\2\u13fb\u13f9\3\2\2\2\u13fb\u13fa")
        buf.write("\3\2\2\2\u13fc\u13fd\3\2\2\2\u13fd\u13fe\7\u027b\2\2\u13fe")
        buf.write("\u13ff\5\u0330\u0199\2\u13ff\u0229\3\2\2\2\u1400\u1402")
        buf.write("\7]\2\2\u1401\u1403\5\u03d4\u01eb\2\u1402\u1401\3\2\2")
        buf.write("\2\u1402\u1403\3\2\2\2\u1403\u1406\3\2\2\2\u1404\u1405")
        buf.write("\7\u022b\2\2\u1405\u1407\5\u032e\u0198\2\u1406\u1404\3")
        buf.write("\2\2\2\u1406\u1407\3\2\2\2\u1407\u022b\3\2\2\2\u1408\u140a")
        buf.write("\7\u00a6\2\2\u1409\u140b\5\u03d4\u01eb\2\u140a\u1409\3")
        buf.write("\2\2\2\u140a\u140b\3\2\2\2\u140b\u140e\3\2\2\2\u140c\u140d")
        buf.write("\7\u022b\2\2\u140d\u140f\5\u032e\u0198\2\u140e\u140c\3")
        buf.write("\2\2\2\u140e\u140f\3\2\2\2\u140f\u022d\3\2\2\2\u1410\u1411")
        buf.write("\7\u00c3\2\2\u1411\u1412\5\u03d4\u01eb\2\u1412\u022f\3")
        buf.write("\2\2\2\u1413\u1414\7\u00cf\2\2\u1414\u1415\5\u032e\u0198")
        buf.write("\2\u1415\u1416\7\u01f4\2\2\u1416\u141a\5\u0222\u0112\2")
        buf.write("\u1417\u1419\5\u0232\u011a\2\u1418\u1417\3\2\2\2\u1419")
        buf.write("\u141c\3\2\2\2\u141a\u1418\3\2\2\2\u141a\u141b\3\2\2\2")
        buf.write("\u141b\u141e\3\2\2\2\u141c\u141a\3\2\2\2\u141d\u141f\5")
        buf.write("\u0234\u011b\2\u141e\u141d\3\2\2\2\u141e\u141f\3\2\2\2")
        buf.write("\u141f\u1420\3\2\2\2\u1420\u1421\7\u0098\2\2\u1421\u1422")
        buf.write("\7\u00cf\2\2\u1422\u0231\3\2\2\2\u1423\u1424\7\u0093\2")
        buf.write("\2\u1424\u1425\5\u032e\u0198\2\u1425\u1426\7\u01f4\2\2")
        buf.write("\u1426\u1427\5\u0222\u0112\2\u1427\u0233\3\2\2\2\u1428")
        buf.write("\u1429\7\u0092\2\2\u1429\u142a\5\u0222\u0112\2\u142a\u0235")
        buf.write("\3\2\2\2\u142b\u142d\5\u03d4\u01eb\2\u142c\u142b\3\2\2")
        buf.write("\2\u142c\u142d\3\2\2\2\u142d\u1432\3\2\2\2\u142e\u142f")
        buf.write("\7\u022e\2\2\u142f\u1433\5\u032e\u0198\2\u1430\u1431\7")
        buf.write("\u00b7\2\2\u1431\u1433\5\u0238\u011d\2\u1432\u142e\3\2")
        buf.write("\2\2\u1432\u1430\3\2\2\2\u1432\u1433\3\2\2\2\u1433\u1434")
        buf.write("\3\2\2\2\u1434\u1435\7\u0111\2\2\u1435\u1436\5\u0222\u0112")
        buf.write("\2\u1436\u1437\7\u0098\2\2\u1437\u1439\7\u0111\2\2\u1438")
        buf.write("\u143a\5\u03d4\u01eb\2\u1439\u1438\3\2\2\2\u1439\u143a")
        buf.write("\3\2\2\2\u143a\u0237\3\2\2\2\u143b\u143c\5\u03e4\u01f3")
        buf.write("\2\u143c\u143e\7\u00d3\2\2\u143d\u143f\7\u01a5\2\2\u143e")
        buf.write("\u143d\3\2\2\2\u143e\u143f\3\2\2\2\u143f\u1440\3\2\2\2")
        buf.write("\u1440\u1441\5\u0240\u0121\2\u1441\u1442\7\3\2\2\u1442")
        buf.write("\u1443\5\u0242\u0122\2\u1443\u1451\3\2\2\2\u1444\u1445")
        buf.write("\5\u03e8\u01f5\2\u1445\u144e\7\u00d3\2\2\u1446\u1448\5")
        buf.write("\u03e6\u01f4\2\u1447\u1449\5\u032c\u0197\2\u1448\u1447")
        buf.write("\3\2\2\2\u1448\u1449\3\2\2\2\u1449\u144f\3\2\2\2\u144a")
        buf.write("\u144b\7\u0272\2\2\u144b\u144c\5\u0276\u013c\2\u144c\u144d")
        buf.write("\7\u0273\2\2\u144d\u144f\3\2\2\2\u144e\u1446\3\2\2\2\u144e")
        buf.write("\u144a\3\2\2\2\u144f\u1451\3\2\2\2\u1450\u143b\3\2\2\2")
        buf.write("\u1450\u1444\3\2\2\2\u1451\u0239\3\2\2\2\u1452\u1453\7")
        buf.write("\u00b8\2\2\u1453\u1454\5\u03e4\u01f3\2\u1454\u1455\7\u00d3")
        buf.write("\2\2\u1455\u1456\5\u023c\u011f\2\u1456\u1459\5\u0254\u012b")
        buf.write("\2\u1457\u1458\7\u01b1\2\2\u1458\u145a\7\u00a1\2\2\u1459")
        buf.write("\u1457\3\2\2\2\u1459\u145a\3\2\2\2\u145a\u023b\3\2\2\2")
        buf.write("\u145b\u145c\5\u0240\u0121\2\u145c\u145d\7\3\2\2\u145d")
        buf.write("\u145e\5\u0242\u0122\2\u145e\u1469\3\2\2\2\u145f\u1460")
        buf.write("\7\u00dc\2\2\u1460\u1461\7\u0152\2\2\u1461\u1463\5\u03ea")
        buf.write("\u01f6\2\u1462\u1464\5\u023e\u0120\2\u1463\u1462\3\2\2")
        buf.write("\2\u1463\u1464\3\2\2\2\u1464\u1469\3\2\2\2\u1465\u1466")
        buf.write("\7\u021c\2\2\u1466\u1467\7\u0152\2\2\u1467\u1469\5\u03e4")
        buf.write("\u01f3\2\u1468\u145b\3\2\2\2\u1468\u145f\3\2\2\2\u1468")
        buf.write("\u1465\3\2\2\2\u1469\u023d\3\2\2\2\u146a\u146b\7%\2\2")
        buf.write("\u146b\u146c\5\u0240\u0121\2\u146c\u146d\7\21\2\2\u146d")
        buf.write("\u146e\5\u0242\u0122\2\u146e\u023f\3\2\2\2\u146f\u1470")
        buf.write("\5\u0340\u01a1\2\u1470\u0241\3\2\2\2\u1471\u1472\5\u0340")
        buf.write("\u01a1\2\u1472\u0243\3\2\2\2\u1473\u1474\7\u014c\2\2\u1474")
        buf.write("\u0245\3\2\2\2\u1475\u1477\7\u0188\2\2\u1476\u1478\5\u03da")
        buf.write("\u01ee\2\u1477\u1476\3\2\2\2\u1477\u1478\3\2\2\2\u1478")
        buf.write("\u0247\3\2\2\2\u1479\u147b\7\u01a2\2\2\u147a\u147c\5\u032e")
        buf.write("\u0198\2\u147b\u147a\3\2\2\2\u147b\u147c\3\2\2\2\u147c")
        buf.write("\u0249\3\2\2\2\u147d\u147f\78\2\2\u147e\u147d\3\2\2\2")
        buf.write("\u147e\u147f\3\2\2\2\u147f\u1480\3\2\2\2\u1480\u1482\5")
        buf.write("\u03c2\u01e2\2\u1481\u1483\5\u03f8\u01fd\2\u1482\u1481")
        buf.write("\3\2\2\2\u1482\u1483\3\2\2\2\u1483\u024b\3\2\2\2\u1484")
        buf.write("\u1485\7$\2\2\u1485\u148c\5\u0222\u0112\2\u1486\u1488")
        buf.write("\7\u009f\2\2\u1487\u1489\5\u024e\u0128\2\u1488\u1487\3")
        buf.write("\2\2\2\u1489\u148a\3\2\2\2\u148a\u1488\3\2\2\2\u148a\u148b")
        buf.write("\3\2\2\2\u148b\u148d\3\2\2\2\u148c\u1486\3\2\2\2\u148c")
        buf.write("\u148d\3\2\2\2\u148d\u148e\3\2\2\2\u148e\u1490\7\u0098")
        buf.write("\2\2\u148f\u1491\5\u03d4\u01eb\2\u1490\u148f\3\2\2\2\u1490")
        buf.write("\u1491\3\2\2\2\u1491\u024d\3\2\2\2\u1492\u1493\7\u022b")
        buf.write("\2\2\u1493\u1498\5\u03da\u01ee\2\u1494\u1495\7\u015d\2")
        buf.write("\2\u1495\u1497\5\u03da\u01ee\2\u1496\u1494\3\2\2\2\u1497")
        buf.write("\u149a\3\2\2\2\u1498\u1496\3\2\2\2\u1498\u1499\3\2\2\2")
        buf.write("\u1499\u149b\3\2\2\2\u149a\u1498\3\2\2\2\u149b\u149c\7")
        buf.write("\u01f4\2\2\u149c\u149d\5\u0222\u0112\2\u149d\u024f\3\2")
        buf.write("\2\2\u149e\u14a0\7x\2\2\u149f\u149e\3\2\2\2\u149f\u14a0")
        buf.write("\3\2\2\2\u14a0\u14a2\3\2\2\2\u14a1\u14a3\5\u0202\u0102")
        buf.write("\2\u14a2\u14a1\3\2\2\2\u14a3\u14a4\3\2\2\2\u14a4\u14a2")
        buf.write("\3\2\2\2\u14a4\u14a5\3\2\2\2\u14a5\u14a7\3\2\2\2\u14a6")
        buf.write("\u149f\3\2\2\2\u14a6\u14a7\3\2\2\2\u14a7\u14a8\3\2\2\2")
        buf.write("\u14a8\u14a9\5\u024c\u0127\2\u14a9\u0251\3\2\2\2\u14aa")
        buf.write("\u14ac\7x\2\2\u14ab\u14aa\3\2\2\2\u14ab\u14ac\3\2\2\2")
        buf.write("\u14ac\u14ae\3\2\2\2\u14ad\u14af\5\u0202\u0102\2\u14ae")
        buf.write("\u14ad\3\2\2\2\u14af\u14b0\3\2\2\2\u14b0\u14ae\3\2\2\2")
        buf.write("\u14b0\u14b1\3\2\2\2\u14b1\u14b2\3\2\2\2\u14b2\u14b3\5")
        buf.write("\u024c\u0127\2\u14b3\u0253\3\2\2\2\u14b4\u14b9\5\u0256")
        buf.write("\u012c\2\u14b5\u14b9\5\u025a\u012e\2\u14b6\u14b9\5\u025c")
        buf.write("\u012f\2\u14b7\u14b9\5\u0266\u0134\2\u14b8\u14b4\3\2\2")
        buf.write("\2\u14b8\u14b5\3\2\2\2\u14b8\u14b6\3\2\2\2\u14b8\u14b7")
        buf.write("\3\2\2\2\u14b9\u0255\3\2\2\2\u14ba\u14bb\7\u00a4\2\2\u14bb")
        buf.write("\u14bc\7\u00d2\2\2\u14bc\u14c6\5\u0330\u0199\2\u14bd\u14bf")
        buf.write("\5\u03b2\u01da\2\u14be\u14c0\5\u037a\u01be\2\u14bf\u14be")
        buf.write("\3\2\2\2\u14bf\u14c0\3\2\2\2\u14c0\u14c7\3\2\2\2\u14c1")
        buf.write("\u14c3\5\u037a\u01be\2\u14c2\u14c4\5\u0258\u012d\2\u14c3")
        buf.write("\u14c2\3\2\2\2\u14c3\u14c4\3\2\2\2\u14c4\u14c7\3\2\2\2")
        buf.write("\u14c5\u14c7\5\u0258\u012d\2\u14c6\u14bd\3\2\2\2\u14c6")
        buf.write("\u14c1\3\2\2\2\u14c6\u14c5\3\2\2\2\u14c6\u14c7\3\2\2\2")
        buf.write("\u14c7\u0257\3\2\2\2\u14c8\u14c9\t\66\2\2\u14c9\u14ca")
        buf.write("\5\u03b2\u01da\2\u14ca\u0259\3\2\2\2\u14cb\u14d3\5\u0302")
        buf.write("\u0182\2\u14cc\u14d3\5\u030e\u0188\2\u14cd\u14d3\5\u0276")
        buf.write("\u013c\2\u14ce\u14d3\5\u02e8\u0175\2\u14cf\u14d3\5\u02ee")
        buf.write("\u0178\2\u14d0\u14d3\5\u02f0\u0179\2\u14d1\u14d3\5\u0274")
        buf.write("\u013b\2\u14d2\u14cb\3\2\2\2\u14d2\u14cc\3\2\2\2\u14d2")
        buf.write("\u14cd\3\2\2\2\u14d2\u14ce\3\2\2\2\u14d2\u14cf\3\2\2\2")
        buf.write("\u14d2\u14d0\3\2\2\2\u14d2\u14d1\3\2\2\2\u14d3\u025b\3")
        buf.write("\2\2\2\u14d4\u14d9\5\u025e\u0130\2\u14d5\u14d9\5\u0260")
        buf.write("\u0131\2\u14d6\u14d9\5\u0262\u0132\2\u14d7\u14d9\5\u0264")
        buf.write("\u0133\2\u14d8\u14d4\3\2\2\2\u14d8\u14d5\3\2\2\2\u14d8")
        buf.write("\u14d6\3\2\2\2\u14d8\u14d7\3\2\2\2\u14d9\u025d\3\2\2\2")
        buf.write("\u14da\u14db\7E\2\2\u14db\u14dc\5\u03e6\u01f4\2\u14dc")
        buf.write("\u025f\3\2\2\2\u14dd\u14de\7\u015a\2\2\u14de\u14e0\5\u03e6")
        buf.write("\u01f4\2\u14df\u14e1\5\u032c\u0197\2\u14e0\u14df\3\2\2")
        buf.write("\2\u14e0\u14e1\3\2\2\2\u14e1\u0261\3\2\2\2\u14e2\u14e3")
        buf.write("\7\u00ad\2\2\u14e3\u14f8\5\u03e6\u01f4\2\u14e4\u14e5\7")
        buf.write("\u00ec\2\2\u14e5\u14ea\5\u03e2\u01f2\2\u14e6\u14e7\7\u0278")
        buf.write("\2\2\u14e7\u14e9\5\u03e2\u01f2\2\u14e8\u14e6\3\2\2\2\u14e9")
        buf.write("\u14ec\3\2\2\2\u14ea\u14e8\3\2\2\2\u14ea\u14eb\3\2\2\2")
        buf.write("\u14eb\u14f9\3\2\2\2\u14ec\u14ea\3\2\2\2\u14ed\u14ee\7")
        buf.write("\63\2\2\u14ee\u14ef\7H\2\2\u14ef\u14f0\7\u00ec\2\2\u14f0")
        buf.write("\u14f5\5\u03e2\u01f2\2\u14f1\u14f2\7\u0278\2\2\u14f2\u14f4")
        buf.write("\5\u03e2\u01f2\2\u14f3\u14f1\3\2\2\2\u14f4\u14f7\3\2\2")
        buf.write("\2\u14f5\u14f3\3\2\2\2\u14f5\u14f6\3\2\2\2\u14f6\u14f9")
        buf.write("\3\2\2\2\u14f7\u14f5\3\2\2\2\u14f8\u14e4\3\2\2\2\u14f8")
        buf.write("\u14ed\3\2\2\2\u14f9\u0263\3\2\2\2\u14fa\u14fb\7\u015a")
        buf.write("\2\2\u14fb\u14fc\5\u03e2\u01f2\2\u14fc\u14ff\7\u00b7\2")
        buf.write("\2\u14fd\u1500\5\u0276\u013c\2\u14fe\u1500\5\u0330\u0199")
        buf.write("\2\u14ff\u14fd\3\2\2\2\u14ff\u14fe\3\2\2\2\u1500\u1502")
        buf.write("\3\2\2\2\u1501\u1503\5\u037a\u01be\2\u1502\u1501\3\2\2")
        buf.write("\2\u1502\u1503\3\2\2\2\u1503\u0265\3\2\2\2\u1504\u150a")
        buf.write("\5\u0268\u0135\2\u1505\u150a\5\u026a\u0136\2\u1506\u150a")
        buf.write("\5\u026c\u0137\2\u1507\u150a\5\u0270\u0139\2\u1508\u150a")
        buf.write("\5\u0272\u013a\2\u1509\u1504\3\2\2\2\u1509\u1505\3\2\2")
        buf.write("\2\u1509\u1506\3\2\2\2\u1509\u1507\3\2\2\2\u1509\u1508")
        buf.write("\3\2\2\2\u150a\u0267\3\2\2\2\u150b\u150c\7\u01c4\2\2\u150c")
        buf.write("\u151a\7\u0202\2\2\u150d\u150e\7\u018b\2\2\u150e\u151b")
        buf.write("\t\67\2\2\u150f\u1510\7\u00f0\2\2\u1510\u1514\7\u00fd")
        buf.write("\2\2\u1511\u1515\7\u01c0\2\2\u1512\u1513\7\u018b\2\2\u1513")
        buf.write("\u1515\7N\2\2\u1514\u1511\3\2\2\2\u1514\u1512\3\2\2\2")
        buf.write("\u1515\u151b\3\2\2\2\u1516\u1517\7\u0218\2\2\u1517\u1518")
        buf.write("\7\u01a8\2\2\u1518\u1519\7\u01bb\2\2\u1519\u151b\5\u03bc")
        buf.write("\u01df\2\u151a\u150d\3\2\2\2\u151a\u150f\3\2\2\2\u151a")
        buf.write("\u1516\3\2\2\2\u151a\u151b\3\2\2\2\u151b\u151e\3\2\2\2")
        buf.write("\u151c\u151d\7\u0129\2\2\u151d\u151f\5\u0416\u020c\2\u151e")
        buf.write("\u151c\3\2\2\2\u151e\u151f\3\2\2\2\u151f\u0269\3\2\2\2")
        buf.write("\u1520\u1521\7\u01c4\2\2\u1521\u152b\t8\2\2\u1522\u152c")
        buf.write("\7\13\2\2\u1523\u1528\5\u03d2\u01ea\2\u1524\u1525\7\u0278")
        buf.write("\2\2\u1525\u1527\5\u03d2\u01ea\2\u1526\u1524\3\2\2\2\u1527")
        buf.write("\u152a\3\2\2\2\u1528\u1526\3\2\2\2\u1528\u1529\3\2\2\2")
        buf.write("\u1529\u152c\3\2\2\2\u152a\u1528\3\2\2\2\u152b\u1522\3")
        buf.write("\2\2\2\u152b\u1523\3\2\2\2\u152c\u152d\3\2\2\2\u152d\u152e")
        buf.write("\t\17\2\2\u152e\u026b\3\2\2\2\u152f\u1531\7M\2\2\u1530")
        buf.write("\u1532\7\u0231\2\2\u1531\u1530\3\2\2\2\u1531\u1532\3\2")
        buf.write("\2\2\u1532\u1540\3\2\2\2\u1533\u1534\7L\2\2\u1534\u1541")
        buf.write("\5\u0330\u0199\2\u1535\u153e\7\u00b9\2\2\u1536\u1537\7")
        buf.write("_\2\2\u1537\u153f\5\u0330\u0199\2\u1538\u153f\7`\2\2\u1539")
        buf.write("\u153c\5\u0330\u0199\2\u153a\u153b\7\u0278\2\2\u153b\u153d")
        buf.write("\5\u0330\u0199\2\u153c\u153a\3\2\2\2\u153c\u153d\3\2\2")
        buf.write("\2\u153d\u153f\3\2\2\2\u153e\u1536\3\2\2\2\u153e\u1538")
        buf.write("\3\2\2\2\u153e\u1539\3\2\2\2\u153f\u1541\3\2\2\2\u1540")
        buf.write("\u1533\3\2\2\2\u1540\u1535\3\2\2\2\u1540\u1541\3\2\2\2")
        buf.write("\u1541\u1543\3\2\2\2\u1542\u1544\5\u026e\u0138\2\u1543")
        buf.write("\u1542\3\2\2\2\u1543\u1544\3\2\2\2\u1544\u026d\3\2\2\2")
        buf.write("\u1545\u1547\7\u0232\2\2\u1546\u1548\t9\2\2\u1547\u1546")
        buf.write("\3\2\2\2\u1547\u1548\3\2\2\2\u1548\u154a\3\2\2\2\u1549")
        buf.write("\u154b\t:\2\2\u154a\u1549\3\2\2\2\u154a\u154b\3\2\2\2")
        buf.write("\u154b\u026f\3\2\2\2\u154c\u154e\7\u01a8\2\2\u154d\u154f")
        buf.write("\7\u0231\2\2\u154e\u154d\3\2\2\2\u154e\u154f\3\2\2\2\u154f")
        buf.write("\u1557\3\2\2\2\u1550\u1552\7\u01fe\2\2\u1551\u1553\7\u01b2")
        buf.write("\2\2\u1552\u1551\3\2\2\2\u1552\u1553\3\2\2\2\u1553\u1554")
        buf.write("\3\2\2\2\u1554\u1558\5\u03ba\u01de\2\u1555\u1556\7\u00b9")
        buf.write("\2\2\u1556\u1558\5\u0416\u020c\2\u1557\u1550\3\2\2\2\u1557")
        buf.write("\u1555\3\2\2\2\u1557\u1558\3\2\2\2\u1558\u0271\3\2\2\2")
        buf.write("\u1559\u155a\7\u01b2\2\2\u155a\u155b\5\u03ba\u01de\2\u155b")
        buf.write("\u0273\3\2\2\2\u155c\u155d\7\u00a7\2\2\u155d\u1562\7\u0178")
        buf.write("\2\2\u155e\u155f\7\u01c4\2\2\u155f\u1560\7\u01dd\2\2\u1560")
        buf.write("\u1561\7\u0289\2\2\u1561\u1563\5\u0416\u020c\2\u1562\u155e")
        buf.write("\3\2\2\2\u1562\u1563\3\2\2\2\u1563\u1566\3\2\2\2\u1564")
        buf.write("\u1565\7\u00ec\2\2\u1565\u1567\5\u03f0\u01f9\2\u1566\u1564")
        buf.write("\3\2\2\2\u1566\u1567\3\2\2\2\u1567\u1568\3\2\2\2\u1568")
        buf.write("\u156e\7\u00b7\2\2\u1569\u156f\5\u0276\u013c\2\u156a\u156f")
        buf.write("\5\u02e8\u0175\2\u156b\u156f\5\u02ee\u0178\2\u156c\u156f")
        buf.write("\5\u02f0\u0179\2\u156d\u156f\5\u0302\u0182\2\u156e\u1569")
        buf.write("\3\2\2\2\u156e\u156a\3\2\2\2\u156e\u156b\3\2\2\2\u156e")
        buf.write("\u156c\3\2\2\2\u156e\u156d\3\2\2\2\u156f\u0275\3\2\2\2")
        buf.write("\u1570\u1572\5\u0278\u013d\2\u1571\u1570\3\2\2\2\u1571")
        buf.write("\u1572\3\2\2\2\u1572\u1573\3\2\2\2\u1573\u1574\5\u0280")
        buf.write("\u0141\2\u1574\u0277\3\2\2\2\u1575\u1576\7\u022f\2\2\u1576")
        buf.write("\u157b\5\u027a\u013e\2\u1577\u1578\7\u0278\2\2\u1578\u157a")
        buf.write("\5\u027a\u013e\2\u1579\u1577\3\2\2\2\u157a\u157d\3\2\2")
        buf.write("\2\u157b\u1579\3\2\2\2\u157b\u157c\3\2\2\2\u157c\u0279")
        buf.write("\3\2\2\2\u157d\u157b\3\2\2\2\u157e\u1580\5\u03d0\u01e9")
        buf.write("\2\u157f\u1581\5\u009aN\2\u1580\u157f\3\2\2\2\u1580\u1581")
        buf.write("\3\2\2\2\u1581\u1582\3\2\2\2\u1582\u1583\7\26\2\2\u1583")
        buf.write("\u1584\7\u0272\2\2\u1584\u1586\5\u0280\u0141\2\u1585\u1587")
        buf.write("\5\u02dc\u016f\2\u1586\u1585\3\2\2\2\u1586\u1587\3\2\2")
        buf.write("\2\u1587\u1588\3\2\2\2\u1588\u158a\7\u0273\2\2\u1589\u158b")
        buf.write("\5\u027c\u013f\2\u158a\u1589\3\2\2\2\u158a\u158b\3\2\2")
        buf.write("\2\u158b\u158d\3\2\2\2\u158c\u158e\5\u027e\u0140\2\u158d")
        buf.write("\u158c\3\2\2\2\u158d\u158e\3\2\2\2\u158e\u027b\3\2\2\2")
        buf.write("\u158f\u1590\7\u01b7\2\2\u1590\u1591\t;\2\2\u1591\u1592")
        buf.write("\7\u00b0\2\2\u1592\u1593\7\64\2\2\u1593\u1595\5\u03ee")
        buf.write("\u01f8\2\u1594\u1596\7\27\2\2\u1595\u1594\3\2\2\2\u1595")
        buf.write("\u1596\3\2\2\2\u1596\u1598\3\2\2\2\u1597\u1599\7\u0085")
        buf.write("\2\2\u1598\u1597\3\2\2\2\u1598\u1599\3\2\2\2\u1599\u159c")
        buf.write("\3\2\2\2\u159a\u159b\7\u014d\2\2\u159b\u159d\7\u00b0\2")
        buf.write("\2\u159c\u159a\3\2\2\2\u159c\u159d\3\2\2\2\u159d\u15a0")
        buf.write("\3\2\2\2\u159e\u159f\7\u014d\2\2\u159f\u15a1\7\u00f8\2")
        buf.write("\2\u15a0\u159e\3\2\2\2\u15a0\u15a1\3\2\2\2\u15a1\u15b4")
        buf.write("\3\2\2\2\u15a2\u15a3\7\u0278\2\2\u15a3\u15a5\5\u03ee\u01f8")
        buf.write("\2\u15a4\u15a6\7\27\2\2\u15a5\u15a4\3\2\2\2\u15a5\u15a6")
        buf.write("\3\2\2\2\u15a6\u15a8\3\2\2\2\u15a7\u15a9\7\u0085\2\2\u15a8")
        buf.write("\u15a7\3\2\2\2\u15a8\u15a9\3\2\2\2\u15a9\u15ac\3\2\2\2")
        buf.write("\u15aa\u15ab\7\u014d\2\2\u15ab\u15ad\7\u00b0\2\2\u15ac")
        buf.write("\u15aa\3\2\2\2\u15ac\u15ad\3\2\2\2\u15ad\u15b0\3\2\2\2")
        buf.write("\u15ae\u15af\7\u014d\2\2\u15af\u15b1\7\u00f8\2\2\u15b0")
        buf.write("\u15ae\3\2\2\2\u15b0\u15b1\3\2\2\2\u15b1\u15b3\3\2\2\2")
        buf.write("\u15b2\u15a2\3\2\2\2\u15b3\u15b6\3\2\2\2\u15b4\u15b2\3")
        buf.write("\2\2\2\u15b4\u15b5\3\2\2\2\u15b5\u15b7\3\2\2\2\u15b6\u15b4")
        buf.write("\3\2\2\2\u15b7\u15b8\7\u01c4\2\2\u15b8\u15b9\5\u03ee\u01f8")
        buf.write("\2\u15b9\u027d\3\2\2\2\u15ba\u15bb\7k\2\2\u15bb\u15c0")
        buf.write("\5\u03ee\u01f8\2\u15bc\u15bd\7\u0278\2\2\u15bd\u15bf\5")
        buf.write("\u03ee\u01f8\2\u15be\u15bc\3\2\2\2\u15bf\u15c2\3\2\2\2")
        buf.write("\u15c0\u15be\3\2\2\2\u15c0\u15c1\3\2\2\2\u15c1\u15c3\3")
        buf.write("\2\2\2\u15c2\u15c0\3\2\2\2\u15c3\u15c4\7\u01c4\2\2\u15c4")
        buf.write("\u15c5\5\u03ee\u01f8\2\u15c5\u15c6\7\u01fe\2\2\u15c6\u15c7")
        buf.write("\5\u0330\u0199\2\u15c7\u15c8\7~\2\2\u15c8\u15c9\5\u0330")
        buf.write("\u0199\2\u15c9\u027f\3\2\2\2\u15ca\u15cb\b\u0141\1\2\u15cb")
        buf.write("\u15cc\7\u0272\2\2\u15cc\u15cd\5\u0280\u0141\2\u15cd\u15ce")
        buf.write("\7\u0273\2\2\u15ce\u15d1\3\2\2\2\u15cf\u15d1\5\u0284\u0143")
        buf.write("\2\u15d0\u15ca\3\2\2\2\u15d0\u15cf\3\2\2\2\u15d1\u15da")
        buf.write("\3\2\2\2\u15d2\u15d3\f\4\2\2\u15d3\u15d4\5\u0282\u0142")
        buf.write("\2\u15d4\u15d6\5\u0280\u0141\2\u15d5\u15d7\5\u02dc\u016f")
        buf.write("\2\u15d6\u15d5\3\2\2\2\u15d6\u15d7\3\2\2\2\u15d7\u15d9")
        buf.write("\3\2\2\2\u15d8\u15d2\3\2\2\2\u15d9\u15dc\3\2\2\2\u15da")
        buf.write("\u15d8\3\2\2\2\u15da\u15db\3\2\2\2\u15db\u0281\3\2\2\2")
        buf.write("\u15dc\u15da\3\2\2\2\u15dd\u15df\t<\2\2\u15de\u15e0\7")
        buf.write("\13\2\2\u15df\u15de\3\2\2\2\u15df\u15e0\3\2\2\2\u15e0")
        buf.write("\u0283\3\2\2\2\u15e1\u15e3\7\u01bc\2\2\u15e2\u15e4\t=")
        buf.write("\2\2\u15e3\u15e2\3\2\2\2\u15e3\u15e4\3\2\2\2\u15e4\u15e5")
        buf.write("\3\2\2\2\u15e5\u15ea\5\u0286\u0144\2\u15e6\u15e7\7\u0278")
        buf.write("\2\2\u15e7\u15e9\5\u0286\u0144\2\u15e8\u15e6\3\2\2\2\u15e9")
        buf.write("\u15ec\3\2\2\2\u15ea\u15e8\3\2\2\2\u15ea\u15eb\3\2\2\2")
        buf.write("\u15eb\u15ee\3\2\2\2\u15ec\u15ea\3\2\2\2\u15ed\u15ef\5")
        buf.write("\u03b2\u01da\2\u15ee\u15ed\3\2\2\2\u15ee\u15ef\3\2\2\2")
        buf.write("\u15ef\u15f1\3\2\2\2\u15f0\u15f2\5\u0288\u0145\2\u15f1")
        buf.write("\u15f0\3\2\2\2\u15f1\u15f2\3\2\2\2\u15f2\u15f4\3\2\2\2")
        buf.write("\u15f3\u15f5\5\u03ae\u01d8\2\u15f4\u15f3\3\2\2\2\u15f4")
        buf.write("\u15f5\3\2\2\2\u15f5\u15f7\3\2\2\2\u15f6\u15f8\5\u02ae")
        buf.write("\u0158\2\u15f7\u15f6\3\2\2\2\u15f7\u15f8\3\2\2\2\u15f8")
        buf.write("\u15fd\3\2\2\2\u15f9\u15fc\5\u02b2\u015a\2\u15fa\u15fc")
        buf.write("\5\u02bc\u015f\2\u15fb\u15f9\3\2\2\2\u15fb\u15fa\3\2\2")
        buf.write("\2\u15fc\u15ff\3\2\2\2\u15fd\u15fb\3\2\2\2\u15fd\u15fe")
        buf.write("\3\2\2\2\u15fe\u1601\3\2\2\2\u15ff\u15fd\3\2\2\2\u1600")
        buf.write("\u1602\5\u02be\u0160\2\u1601\u1600\3\2\2\2\u1601\u1602")
        buf.write("\3\2\2\2\u1602\u1608\3\2\2\2\u1603\u1607\5\u02e0\u0171")
        buf.write("\2\u1604\u1607\5\u02dc\u016f\2\u1605\u1607\5\u02e6\u0174")
        buf.write("\2\u1606\u1603\3\2\2\2\u1606\u1604\3\2\2\2\u1606\u1605")
        buf.write("\3\2\2\2\u1607\u160a\3\2\2\2\u1608\u1606\3\2\2\2\u1608")
        buf.write("\u1609\3\2\2\2\u1609\u0285\3\2\2\2\u160a\u1608\3\2\2\2")
        buf.write("\u160b\u1616\5\u03f4\u01fb\2\u160c\u160d\5\u03f2\u01fa")
        buf.write("\2\u160d\u160e\7\u026b\2\2\u160e\u160f\5\u03f4\u01fb\2")
        buf.write("\u160f\u1616\3\2\2\2\u1610\u1616\5\u03f0\u01f9\2\u1611")
        buf.write("\u1613\5\u0330\u0199\2\u1612\u1614\5\u03a8\u01d5\2\u1613")
        buf.write("\u1612\3\2\2\2\u1613\u1614\3\2\2\2\u1614\u1616\3\2\2\2")
        buf.write("\u1615\u160b\3\2\2\2\u1615\u160c\3\2\2\2\u1615\u1610\3")
        buf.write("\2\2\2\u1615\u1611\3\2\2\2\u1616\u0287\3\2\2\2\u1617\u1618")
        buf.write("\7\u00be\2\2\u1618\u161d\5\u028c\u0147\2\u1619\u161a\7")
        buf.write("\u0278\2\2\u161a\u161c\5\u028c\u0147\2\u161b\u1619\3\2")
        buf.write("\2\2\u161c\u161f\3\2\2\2\u161d\u161b\3\2\2\2\u161d\u161e")
        buf.write("\3\2\2\2\u161e\u0289\3\2\2\2\u161f\u161d\3\2\2\2\u1620")
        buf.write("\u1623\5\u028c\u0147\2\u1621\u1624\5\u029c\u014f\2\u1622")
        buf.write("\u1624\5\u02a8\u0155\2\u1623\u1621\3\2\2\2\u1623\u1622")
        buf.write("\3\2\2\2\u1623\u1624\3\2\2\2\u1624\u028b\3\2\2\2\u1625")
        buf.write("\u1626\b\u0147\1\2\u1626\u162a\5\u028e\u0148\2\u1627\u1629")
        buf.write("\5\u029a\u014e\2\u1628\u1627\3\2\2\2\u1629\u162c\3\2\2")
        buf.write("\2\u162a\u1628\3\2\2\2\u162a\u162b\3\2\2\2\u162b\u1638")
        buf.write("\3\2\2\2\u162c\u162a\3\2\2\2\u162d\u1631\5\u028e\u0148")
        buf.write("\2\u162e\u1630\5\u029a\u014e\2\u162f\u162e\3\2\2\2\u1630")
        buf.write("\u1633\3\2\2\2\u1631\u162f\3\2\2\2\u1631\u1632\3\2\2\2")
        buf.write("\u1632\u1635\3\2\2\2\u1633\u1631\3\2\2\2\u1634\u1636\5")
        buf.write("\u03aa\u01d6\2\u1635\u1634\3\2\2\2\u1635\u1636\3\2\2\2")
        buf.write("\u1636\u1638\3\2\2\2\u1637\u1625\3\2\2\2\u1637\u162d\3")
        buf.write("\2\2\2\u1638\u163d\3\2\2\2\u1639\u163a\f\5\2\2\u163a\u163c")
        buf.write("\5\u0290\u0149\2\u163b\u1639\3\2\2\2\u163c\u163f\3\2\2")
        buf.write("\2\u163d\u163b\3\2\2\2\u163d\u163e\3\2\2\2\u163e\u028d")
        buf.write("\3\2\2\2\u163f\u163d\3\2\2\2\u1640\u1643\5\u0320\u0191")
        buf.write("\2\u1641\u1644\5\u029c\u014f\2\u1642\u1644\5\u02a8\u0155")
        buf.write("\2\u1643\u1641\3\2\2\2\u1643\u1642\3\2\2\2\u1643\u1644")
        buf.write("\3\2\2\2\u1644\u164b\3\2\2\2\u1645\u1646\7\u0159\2\2\u1646")
        buf.write("\u1647\7\u0272\2\2\u1647\u1648\5\u0320\u0191\2\u1648\u1649")
        buf.write("\7\u0273\2\2\u1649\u164b\3\2\2\2\u164a\u1640\3\2\2\2\u164a")
        buf.write("\u1645\3\2\2\2\u164b\u028f\3\2\2\2\u164c\u164e\5\u0298")
        buf.write("\u014d\2\u164d\u164c\3\2\2\2\u164d\u164e\3\2\2\2\u164e")
        buf.write("\u1650\3\2\2\2\u164f\u1651\5\u0296\u014c\2\u1650\u164f")
        buf.write("\3\2\2\2\u1650\u1651\3\2\2\2\u1651\u1652\3\2\2\2\u1652")
        buf.write("\u1653\7\u00f3\2\2\u1653\u1655\5\u028c\u0147\2\u1654\u1656")
        buf.write("\5\u0298\u014d\2\u1655\u1654\3\2\2\2\u1655\u1656\3\2\2")
        buf.write("\2\u1656\u1659\3\2\2\2\u1657\u165a\5\u0292\u014a\2\u1658")
        buf.write("\u165a\5\u0294\u014b\2\u1659\u1657\3\2\2\2\u1659\u1658")
        buf.write("\3\2\2\2\u1659\u165a\3\2\2\2\u165a\u0291\3\2\2\2\u165b")
        buf.write("\u165c\7\u0158\2\2\u165c\u165d\5\u032e\u0198\2\u165d\u0293")
        buf.write("\3\2\2\2\u165e\u165f\7\u0219\2\2\u165f\u1660\7\u0272\2")
        buf.write("\2\u1660\u1665\5\u03ee\u01f8\2\u1661\u1662\7\u0278\2\2")
        buf.write("\u1662\u1664\5\u03ee\u01f8\2\u1663\u1661\3\2\2\2\u1664")
        buf.write("\u1667\3\2\2\2\u1665\u1663\3\2\2\2\u1665\u1666\3\2\2\2")
        buf.write("\u1666\u1668\3\2\2\2\u1667\u1665\3\2\2\2\u1668\u1669\7")
        buf.write("\u0273\2\2\u1669\u0295\3\2\2\2\u166a\u1676\7e\2\2\u166b")
        buf.write("\u166d\7\u012b\2\2\u166c\u166b\3\2\2\2\u166c\u166d\3\2")
        buf.write("\2\2\u166d\u1673\3\2\2\2\u166e\u1674\7\u00e2\2\2\u166f")
        buf.write("\u1671\t>\2\2\u1670\u1672\7\u0163\2\2\u1671\u1670\3\2")
        buf.write("\2\2\u1671\u1672\3\2\2\2\u1672\u1674\3\2\2\2\u1673\u166e")
        buf.write("\3\2\2\2\u1673\u166f\3\2\2\2\u1674\u1676\3\2\2\2\u1675")
        buf.write("\u166a\3\2\2\2\u1675\u166c\3\2\2\2\u1676\u0297\3\2\2\2")
        buf.write("\u1677\u1678\7\u016c\2\2\u1678\u1686\7\64\2\2\u1679\u167a")
        buf.write("\7\u0272\2\2\u167a\u167b\5\u0280\u0141\2\u167b\u167c\7")
        buf.write("\u0273\2\2\u167c\u1687\3\2\2\2\u167d\u1687\5\u032c\u0197")
        buf.write("\2\u167e\u1683\5\u0330\u0199\2\u167f\u1680\7\u0278\2\2")
        buf.write("\u1680\u1682\5\u0330\u0199\2\u1681\u167f\3\2\2\2\u1682")
        buf.write("\u1685\3\2\2\2\u1683\u1681\3\2\2\2\u1683\u1684\3\2\2\2")
        buf.write("\u1684\u1687\3\2\2\2\u1685\u1683\3\2\2\2\u1686\u1679\3")
        buf.write("\2\2\2\u1686\u167d\3\2\2\2\u1686\u167e\3\2\2\2\u1687\u0299")
        buf.write("\3\2\2\2\u1688\u1689\7\u0225\2\2\u1689\u168a\7%\2\2\u168a")
        buf.write("\u168b\t?\2\2\u168b\u1691\5\u0330\u0199\2\u168c\u168d")
        buf.write("\7\26\2\2\u168d\u168e\7\u0152\2\2\u168e\u168f\t@\2\2\u168f")
        buf.write("\u1691\5\u0330\u0199\2\u1690\u1688\3\2\2\2\u1690\u168c")
        buf.write("\3\2\2\2\u1691\u029b\3\2\2\2\u1692\u1694\7\u0177\2\2\u1693")
        buf.write("\u1695\7\u0234\2\2\u1694\u1693\3\2\2\2\u1694\u1695\3\2")
        buf.write("\2\2\u1695\u1696\3\2\2\2\u1696\u1697\7\u0272\2\2\u1697")
        buf.write("\u169c\5\u029e\u0150\2\u1698\u1699\7\u0278\2\2\u1699\u169b")
        buf.write("\5\u029e\u0150\2\u169a\u1698\3\2\2\2\u169b\u169e\3\2\2")
        buf.write("\2\u169c\u169a\3\2\2\2\u169c\u169d\3\2\2\2\u169d\u169f")
        buf.write("\3\2\2\2\u169e\u169c\3\2\2\2\u169f\u16a0\5\u02a0\u0151")
        buf.write("\2\u16a0\u16a1\5\u02a2\u0152\2\u16a1\u16a2\7\u0273\2\2")
        buf.write("\u16a2\u029d\3\2\2\2\u16a3\u16a4\5\u03ce\u01e8\2\u16a4")
        buf.write("\u16a5\7\u0272\2\2\u16a5\u16a6\5\u0330\u0199\2\u16a6\u16a8")
        buf.write("\7\u0273\2\2\u16a7\u16a9\5\u03a8\u01d5\2\u16a8\u16a7\3")
        buf.write("\2\2\2\u16a8\u16a9\3\2\2\2\u16a9\u029f\3\2\2\2\u16aa\u16b7")
        buf.write("\7\u00b7\2\2\u16ab\u16b8\5\u03ee\u01f8\2\u16ac\u16ad\7")
        buf.write("\u0272\2\2\u16ad\u16b2\5\u03ee\u01f8\2\u16ae\u16af\7\u0278")
        buf.write("\2\2\u16af\u16b1\5\u03ee\u01f8\2\u16b0\u16ae\3\2\2\2\u16b1")
        buf.write("\u16b4\3\2\2\2\u16b2\u16b0\3\2\2\2\u16b2\u16b3\3\2\2\2")
        buf.write("\u16b3\u16b5\3\2\2\2\u16b4\u16b2\3\2\2\2\u16b5\u16b6\7")
        buf.write("\u0273\2\2\u16b6\u16b8\3\2\2\2\u16b7\u16ab\3\2\2\2\u16b7")
        buf.write("\u16ac\3\2\2\2\u16b8\u02a1\3\2\2\2\u16b9\u16ba\7\u00d3")
        buf.write("\2\2\u16ba\u16cc\7\u0272\2\2\u16bb\u16cd\5\u0280\u0141")
        buf.write("\2\u16bc\u16c1\7\22\2\2\u16bd\u16be\7\u0278\2\2\u16be")
        buf.write("\u16c0\7\22\2\2\u16bf\u16bd\3\2\2\2\u16c0\u16c3\3\2\2")
        buf.write("\2\u16c1\u16bf\3\2\2\2\u16c1\u16c2\3\2\2\2\u16c2\u16cd")
        buf.write("\3\2\2\2\u16c3\u16c1\3\2\2\2\u16c4\u16c9\5\u02a4\u0153")
        buf.write("\2\u16c5\u16c6\7\u0278\2\2\u16c6\u16c8\5\u02a4\u0153\2")
        buf.write("\u16c7\u16c5\3\2\2\2\u16c8\u16cb\3\2\2\2\u16c9\u16c7\3")
        buf.write("\2\2\2\u16c9\u16ca\3\2\2\2\u16ca\u16cd\3\2\2\2\u16cb\u16c9")
        buf.write("\3\2\2\2\u16cc\u16bb\3\2\2\2\u16cc\u16bc\3\2\2\2\u16cc")
        buf.write("\u16c4\3\2\2\2\u16cd\u16ce\3\2\2\2\u16ce\u16cf\7\u0273")
        buf.write("\2\2\u16cf\u02a3\3\2\2\2\u16d0\u16d2\5\u02a6\u0154\2\u16d1")
        buf.write("\u16d3\5\u03a8\u01d5\2\u16d2\u16d1\3\2\2\2\u16d2\u16d3")
        buf.write("\3\2\2\2\u16d3\u02a5\3\2\2\2\u16d4\u16d7\5\u0330\u0199")
        buf.write("\2\u16d5\u16d7\5\u032c\u0197\2\u16d6\u16d4\3\2\2\2\u16d6")
        buf.write("\u16d5\3\2\2\2\u16d7\u02a7\3\2\2\2\u16d8\u16db\7\u020f")
        buf.write("\2\2\u16d9\u16da\tA\2\2\u16da\u16dc\7\u014d\2\2\u16db")
        buf.write("\u16d9\3\2\2\2\u16db\u16dc\3\2\2\2\u16dc\u16dd\3\2\2\2")
        buf.write("\u16dd\u16ea\7\u0272\2\2\u16de\u16eb\5\u03ee\u01f8\2\u16df")
        buf.write("\u16e0\7\u0272\2\2\u16e0\u16e5\5\u03ee\u01f8\2\u16e1\u16e2")
        buf.write("\7\u0278\2\2\u16e2\u16e4\5\u03ee\u01f8\2\u16e3\u16e1\3")
        buf.write("\2\2\2\u16e4\u16e7\3\2\2\2\u16e5\u16e3\3\2\2\2\u16e5\u16e6")
        buf.write("\3\2\2\2\u16e6\u16e8\3\2\2\2\u16e7\u16e5\3\2\2\2\u16e8")
        buf.write("\u16e9\7\u0273\2\2\u16e9\u16eb\3\2\2\2\u16ea\u16de\3\2")
        buf.write("\2\2\u16ea\u16df\3\2\2\2\u16eb\u16ec\3\2\2\2\u16ec\u16ed")
        buf.write("\5\u02a0\u0151\2\u16ed\u16ee\5\u02aa\u0156\2\u16ee\u16ef")
        buf.write("\7\u0273\2\2\u16ef\u02a9\3\2\2\2\u16f0\u16f1\7\u00d3\2")
        buf.write("\2\u16f1\u16f2\7\u0272\2\2\u16f2\u16f7\5\u02ac\u0157\2")
        buf.write("\u16f3\u16f4\7\u0278\2\2\u16f4\u16f6\5\u02ac\u0157\2\u16f5")
        buf.write("\u16f3\3\2\2\2\u16f6\u16f9\3\2\2\2\u16f7\u16f5\3\2\2\2")
        buf.write("\u16f7\u16f8\3\2\2\2\u16f8\u16fa\3\2\2\2\u16f9\u16f7\3")
        buf.write("\2\2\2\u16fa\u16fb\7\u0273\2\2\u16fb\u02ab\3\2\2\2\u16fc")
        buf.write("\u1709\5\u03ee\u01f8\2\u16fd\u16fe\7\u0272\2\2\u16fe\u1703")
        buf.write("\5\u03ee\u01f8\2\u16ff\u1700\7\u0278\2\2\u1700\u1702\5")
        buf.write("\u03ee\u01f8\2\u1701\u16ff\3\2\2\2\u1702\u1705\3\2\2\2")
        buf.write("\u1703\u1701\3\2\2\2\u1703\u1704\3\2\2\2\u1704\u1706\3")
        buf.write("\2\2\2\u1705\u1703\3\2\2\2\u1706\u1707\7\u0273\2\2\u1707")
        buf.write("\u1709\3\2\2\2\u1708\u16fc\3\2\2\2\u1708\u16fd\3\2\2\2")
        buf.write("\u1709\u1719\3\2\2\2\u170a\u1717\7\26\2\2\u170b\u1718")
        buf.write("\5\u0410\u0209\2\u170c\u170d\7\u0272\2\2\u170d\u1712\5")
        buf.write("\u0410\u0209\2\u170e\u170f\7\u0278\2\2\u170f\u1711\5\u0410")
        buf.write("\u0209\2\u1710\u170e\3\2\2\2\u1711\u1714\3\2\2\2\u1712")
        buf.write("\u1710\3\2\2\2\u1712\u1713\3\2\2\2\u1713\u1715\3\2\2\2")
        buf.write("\u1714\u1712\3\2\2\2\u1715\u1716\7\u0273\2\2\u1716\u1718")
        buf.write("\3\2\2\2\u1717\u170b\3\2\2\2\u1717\u170c\3\2\2\2\u1718")
        buf.write("\u171a\3\2\2\2\u1719\u170a\3\2\2\2\u1719\u171a\3\2\2\2")
        buf.write("\u171a\u02ad\3\2\2\2\u171b\u171c\7U\2\2\u171c\u171e\7")
        buf.write("\64\2\2\u171d\u171f\7\u0139\2\2\u171e\u171d\3\2\2\2\u171e")
        buf.write("\u171f\3\2\2\2\u171f\u1720\3\2\2\2\u1720\u1722\5\u032e")
        buf.write("\u0198\2\u1721\u1723\5\u02b0\u0159\2\u1722\u1721\3\2\2")
        buf.write("\2\u1722\u1723\3\2\2\2\u1723\u172d\3\2\2\2\u1724\u1725")
        buf.write("\5\u02b0\u0159\2\u1725\u1726\7U\2\2\u1726\u1728\7\64\2")
        buf.write("\2\u1727\u1729\7\u0139\2\2\u1728\u1727\3\2\2\2\u1728\u1729")
        buf.write("\3\2\2\2\u1729\u172a\3\2\2\2\u172a\u172b\5\u032e\u0198")
        buf.write("\2\u172b\u172d\3\2\2\2\u172c\u171b\3\2\2\2\u172c\u1724")
        buf.write("\3\2\2\2\u172d\u02af\3\2\2\2\u172e\u172f\7\u01da\2\2\u172f")
        buf.write("\u1730\7\u022f\2\2\u1730\u1731\5\u032e\u0198\2\u1731\u02b1")
        buf.write("\3\2\2\2\u1732\u1733\7\u00c5\2\2\u1733\u1734\7\64\2\2")
        buf.write("\u1734\u1739\5\u02b4\u015b\2\u1735\u1736\7\u0278\2\2\u1736")
        buf.write("\u1738\5\u02b4\u015b\2\u1737\u1735\3\2\2\2\u1738\u173b")
        buf.write("\3\2\2\2\u1739\u1737\3\2\2\2\u1739\u173a\3\2\2\2\u173a")
        buf.write("\u02b3\3\2\2\2\u173b\u1739\3\2\2\2\u173c\u1740\5\u02b8")
        buf.write("\u015d\2\u173d\u1740\5\u02b6\u015c\2\u173e\u1740\5\u0330")
        buf.write("\u0199\2\u173f\u173c\3\2\2\2\u173f\u173d\3\2\2\2\u173f")
        buf.write("\u173e\3\2\2\2\u1740\u02b5\3\2\2\2\u1741\u1742\tB\2\2")
        buf.write("\u1742\u1743\7\u0272\2\2\u1743\u1748\5\u02ba\u015e\2\u1744")
        buf.write("\u1745\7\u0278\2\2\u1745\u1747\5\u02ba\u015e\2\u1746\u1744")
        buf.write("\3\2\2\2\u1747\u174a\3\2\2\2\u1748\u1746\3\2\2\2\u1748")
        buf.write("\u1749\3\2\2\2\u1749\u174b\3\2\2\2\u174a\u1748\3\2\2\2")
        buf.write("\u174b\u174c\7\u0273\2\2\u174c\u02b7\3\2\2\2\u174d\u174e")
        buf.write("\7\u00c7\2\2\u174e\u174f\7\u01c5\2\2\u174f\u1750\7\u0272")
        buf.write("\2\2\u1750\u1755\5\u02ba\u015e\2\u1751\u1752\7\u0278\2")
        buf.write("\2\u1752\u1754\5\u02ba\u015e\2\u1753\u1751\3\2\2\2\u1754")
        buf.write("\u1757\3\2\2\2\u1755\u1753\3\2\2\2\u1755\u1756\3\2\2\2")
        buf.write("\u1756\u1758\3\2\2\2\u1757\u1755\3\2\2\2\u1758\u1759\7")
        buf.write("\u0273\2\2\u1759\u02b9\3\2\2\2\u175a\u175e\5\u02b6\u015c")
        buf.write("\2\u175b\u175e\5\u032c\u0197\2\u175c\u175e\5\u0330\u0199")
        buf.write("\2\u175d\u175a\3\2\2\2\u175d\u175b\3\2\2\2\u175d\u175c")
        buf.write("\3\2\2\2\u175e\u02bb\3\2\2\2\u175f\u1760\7\u00c9\2\2\u1760")
        buf.write("\u1761\5\u032e\u0198\2\u1761\u02bd\3\2\2\2\u1762\u1766")
        buf.write("\7\u0124\2\2\u1763\u1765\5\u02c0\u0161\2\u1764\u1763\3")
        buf.write("\2\2\2\u1765\u1768\3\2\2\2\u1766\u1764\3\2\2\2\u1766\u1767")
        buf.write("\3\2\2\2\u1767\u176a\3\2\2\2\u1768\u1766\3\2\2\2\u1769")
        buf.write("\u176b\5\u02c2\u0162\2\u176a\u1769\3\2\2\2\u176a\u176b")
        buf.write("\3\2\2\2\u176b\u176f\3\2\2\2\u176c\u176e\5\u02c4\u0163")
        buf.write("\2\u176d\u176c\3\2\2\2\u176e\u1771\3\2\2\2\u176f\u176d")
        buf.write("\3\2\2\2\u176f\u1770\3\2\2\2\u1770\u1772\3\2\2\2\u1771")
        buf.write("\u176f\3\2\2\2\u1772\u1773\5\u02c6\u0164\2\u1773\u02bf")
        buf.write("\3\2\2\2\u1774\u1775\tC\2\2\u1775\u177d\7\u012d\2\2\u1776")
        buf.write("\u177a\7\u020d\2\2\u1777\u177b\7\u0087\2\2\u1778\u1779")
        buf.write("\7\u01ce\2\2\u1779\u177b\7\u0193\2\2\u177a\u1777\3\2\2")
        buf.write("\2\u177a\u1778\3\2\2\2\u177b\u177d\3\2\2\2\u177c\u1774")
        buf.write("\3\2\2\2\u177c\u1776\3\2\2\2\u177d\u02c1\3\2\2\2\u177e")
        buf.write("\u177f\7\u01a2\2\2\u177f\u1780\tD\2\2\u1780\u1781\7\u01ad")
        buf.write("\2\2\u1781\u02c3\3\2\2\2\u1782\u1783\7\u0193\2\2\u1783")
        buf.write("\u1784\5\u03ca\u01e6\2\u1784\u1785\7\u0158\2\2\u1785\u1786")
        buf.write("\7\u0272\2\2\u1786\u1787\5\u0280\u0141\2\u1787\u1788\7")
        buf.write("\u0273\2\2\u1788\u178c\5\u02c8\u0165\2\u1789\u178b\5\u02c0")
        buf.write("\u0161\2\u178a\u1789\3\2\2\2\u178b\u178e\3\2\2\2\u178c")
        buf.write("\u178a\3\2\2\2\u178c\u178d\3\2\2\2\u178d\u02c5\3\2\2\2")
        buf.write("\u178e\u178c\3\2\2\2\u178f\u1790\7\u0113\2\2\u1790\u1792")
        buf.write("\5\u03cc\u01e7\2\u1791\u178f\3\2\2\2\u1791\u1792\3\2\2")
        buf.write("\2\u1792\u1793\3\2\2\2\u1793\u1797\5\u02c8\u0165\2\u1794")
        buf.write("\u1796\5\u02c0\u0161\2\u1795\u1794\3\2\2\2\u1796\u1799")
        buf.write("\3\2\2\2\u1797\u1795\3\2\2\2\u1797\u1798\3\2\2\2\u1798")
        buf.write("\u179a\3\2\2\2\u1799\u1797\3\2\2\2\u179a\u179b\5\u02d0")
        buf.write("\u0169\2\u179b\u02c7\3\2\2\2\u179c\u179e\5\u02ca\u0166")
        buf.write("\2\u179d\u179c\3\2\2\2\u179d\u179e\3\2\2\2\u179e\u179f")
        buf.write("\3\2\2\2\u179f\u17a0\7\u0087\2\2\u17a0\u17a1\7\64\2\2")
        buf.write("\u17a1\u17a2\5\u02cc\u0167\2\u17a2\u17a3\7\u0119\2\2\u17a3")
        buf.write("\u17a4\5\u02cc\u0167\2\u17a4\u02c9\3\2\2\2\u17a5\u17a6")
        buf.write("\7\u016c\2\2\u17a6\u17a7\7\64\2\2\u17a7\u17a8\5\u02cc")
        buf.write("\u0167\2\u17a8\u02cb\3\2\2\2\u17a9\u17aa\7\u0272\2\2\u17aa")
        buf.write("\u17af\5\u02ce\u0168\2\u17ab\u17ac\7\u0278\2\2\u17ac\u17ae")
        buf.write("\5\u02ce\u0168\2\u17ad\u17ab\3\2\2\2\u17ae\u17b1\3\2\2")
        buf.write("\2\u17af\u17ad\3\2\2\2\u17af\u17b0\3\2\2\2\u17b0\u17b2")
        buf.write("\3\2\2\2\u17b1\u17af\3\2\2\2\u17b2\u17b3\7\u0273\2\2\u17b3")
        buf.write("\u02cd\3\2\2\2\u17b4\u17b6\5\u0330\u0199\2\u17b5\u17b7")
        buf.write("\5\u03aa\u01d6\2\u17b6\u17b5\3\2\2\2\u17b6\u17b7\3\2\2")
        buf.write("\2\u17b7\u02cf\3\2\2\2\u17b8\u17ba\5\u02d2\u016a\2\u17b9")
        buf.write("\u17b8\3\2\2\2\u17b9\u17ba\3\2\2\2\u17ba\u17bb\3\2\2\2")
        buf.write("\u17bb\u17bc\7\u0272\2\2\u17bc\u17c1\5\u02d4\u016b\2\u17bd")
        buf.write("\u17be\7\u0278\2\2\u17be\u17c0\5\u02d4\u016b\2\u17bf\u17bd")
        buf.write("\3\2\2\2\u17c0\u17c3\3\2\2\2\u17c1\u17bf\3\2\2\2\u17c1")
        buf.write("\u17c2\3\2\2\2\u17c2\u17c4\3\2\2\2\u17c3\u17c1\3\2\2\2")
        buf.write("\u17c4\u17c5\7\u0273\2\2\u17c5\u02d1\3\2\2\2\u17c6\u17cc")
        buf.write("\7\u01ae\2\2\u17c7\u17cd\7\u0213\2\2\u17c8\u17ca\7\u0216")
        buf.write("\2\2\u17c9\u17cb\7\13\2\2\u17ca\u17c9\3\2\2\2\u17ca\u17cb")
        buf.write("\3\2\2\2\u17cb\u17cd\3\2\2\2\u17cc\u17c7\3\2\2\2\u17cc")
        buf.write("\u17c8\3\2\2\2\u17cc\u17cd\3\2\2\2\u17cd\u17d0\3\2\2\2")
        buf.write("\u17ce\u17cf\tE\2\2\u17cf\u17d1\7\u015f\2\2\u17d0\u17ce")
        buf.write("\3\2\2\2\u17d0\u17d1\3\2\2\2\u17d1\u17d3\3\2\2\2\u17d2")
        buf.write("\u17d4\5\u02d8\u016d\2\u17d3\u17d2\3\2\2\2\u17d3\u17d4")
        buf.write("\3\2\2\2\u17d4\u02d3\3\2\2\2\u17d5\u17db\7\u0213\2\2\u17d6")
        buf.write("\u17d8\7\u0216\2\2\u17d7\u17d9\7\13\2\2\u17d8\u17d7\3")
        buf.write("\2\2\2\u17d8\u17d9\3\2\2\2\u17d9\u17db\3\2\2\2\u17da\u17d5")
        buf.write("\3\2\2\2\u17da\u17d6\3\2\2\2\u17da\u17db\3\2\2\2\u17db")
        buf.write("\u17dc\3\2\2\2\u17dc\u17de\5\u02d6\u016c\2\u17dd\u17df")
        buf.write("\5\u02dc\u016f\2\u17de\u17dd\3\2\2\2\u17de\u17df\3\2\2")
        buf.write("\2\u17df\u17e0\3\2\2\2\u17e0\u17e1\7\u0289\2\2\u17e1\u17e2")
        buf.write("\5\u0330\u0199\2\u17e2\u02d5\3\2\2\2\u17e3\u17e4\5\u0346")
        buf.write("\u01a4\2\u17e4\u02d7\3\2\2\2\u17e5\u17e6\7\u00f1\2\2\u17e6")
        buf.write("\u17e7\7\u0272\2\2\u17e7\u17e8\5\u0330\u0199\2\u17e8\u17ea")
        buf.write("\7\u0273\2\2\u17e9\u17eb\5\u02da\u016e\2\u17ea\u17e9\3")
        buf.write("\2\2\2\u17ea\u17eb\3\2\2\2\u17eb\u02d9\3\2\2\2\u17ec\u17ed")
        buf.write("\7\u0210\2\2\u17ed\u17ee\7\u0272\2\2\u17ee\u17ef\5\u032e")
        buf.write("\u0198\2\u17ef\u17f0\7\u0273\2\2\u17f0\u02db\3\2\2\2\u17f1")
        buf.write("\u17f3\7\u015f\2\2\u17f2\u17f4\7\u01cb\2\2\u17f3\u17f2")
        buf.write("\3\2\2\2\u17f3\u17f4\3\2\2\2\u17f4\u17f5\3\2\2\2\u17f5")
        buf.write("\u17f6\7\64\2\2\u17f6\u17fb\5\u02de\u0170\2\u17f7\u17f8")
        buf.write("\7\u0278\2\2\u17f8\u17fa\5\u02de\u0170\2\u17f9\u17f7\3")
        buf.write("\2\2\2\u17fa\u17fd\3\2\2\2\u17fb\u17f9\3\2\2\2\u17fb\u17fc")
        buf.write("\3\2\2\2\u17fc\u02dd\3\2\2\2\u17fd\u17fb\3\2\2\2\u17fe")
        buf.write("\u1800\5\u0330\u0199\2\u17ff\u1801\t\6\2\2\u1800\u17ff")
        buf.write("\3\2\2\2\u1800\u1801\3\2\2\2\u1801\u1804\3\2\2\2\u1802")
        buf.write("\u1803\7\u014d\2\2\u1803\u1805\tF\2\2\u1804\u1802\3\2")
        buf.write("\2\2\u1804\u1805\3\2\2\2\u1805\u02df\3\2\2\2\u1806\u1807")
        buf.write("\7\u00b7\2\2\u1807\u1809\7\u0213\2\2\u1808\u180a\5\u02e2")
        buf.write("\u0172\2\u1809\u1808\3\2\2\2\u1809\u180a\3\2\2\2\u180a")
        buf.write("\u180c\3\2\2\2\u180b\u180d\5\u02e4\u0173\2\u180c\u180b")
        buf.write("\3\2\2\2\u180c\u180d\3\2\2\2\u180d\u02e1\3\2\2\2\u180e")
        buf.write("\u180f\7\u0152\2\2\u180f\u1814\5\u03ee\u01f8\2\u1810\u1811")
        buf.write("\7\u0278\2\2\u1811\u1813\5\u03ee\u01f8\2\u1812\u1810\3")
        buf.write("\2\2\2\u1813\u1816\3\2\2\2\u1814\u1812\3\2\2\2\u1814\u1815")
        buf.write("\3\2\2\2\u1815\u02e3\3\2\2\2\u1816\u1814\3\2\2\2\u1817")
        buf.write("\u1818\7\u01d0\2\2\u1818\u181d\7\u010b\2\2\u1819\u181d")
        buf.write("\7\u014a\2\2\u181a\u181b\7\u0228\2\2\u181b\u181d\5\u0330")
        buf.write("\u0199\2\u181c\u1817\3\2\2\2\u181c\u1819\3\2\2\2\u181c")
        buf.write("\u181a\3\2\2\2\u181d\u02e5\3\2\2\2\u181e\u181f\7\u0104")
        buf.write("\2\2\u181f\u1820\5\u0330\u0199\2\u1820\u02e7\3\2\2\2\u1821")
        buf.write("\u1822\7\u0213\2\2\u1822\u1823\5\u0316\u018c\2\u1823\u1825")
        buf.write("\5\u02ea\u0176\2\u1824\u1826\5\u0288\u0145\2\u1825\u1824")
        buf.write("\3\2\2\2\u1825\u1826\3\2\2\2\u1826\u1828\3\2\2\2\u1827")
        buf.write("\u1829\5\u03ae\u01d8\2\u1828\u1827\3\2\2\2\u1828\u1829")
        buf.write("\3\2\2\2\u1829\u182b\3\2\2\2\u182a\u182c\5\u0318\u018d")
        buf.write("\2\u182b\u182a\3\2\2\2\u182b\u182c\3\2\2\2\u182c\u182e")
        buf.write("\3\2\2\2\u182d\u182f\5\u031a\u018e\2\u182e\u182d\3\2\2")
        buf.write("\2\u182e\u182f\3\2\2\2\u182f\u02e9\3\2\2\2\u1830\u1840")
        buf.write("\7\u01c4\2\2\u1831\u1836\5\u02ec\u0177\2\u1832\u1833\7")
        buf.write("\u0278\2\2\u1833\u1835\5\u02ec\u0177\2\u1834\u1832\3\2")
        buf.write("\2\2\u1835\u1838\3\2\2\2\u1836\u1834\3\2\2\2\u1836\u1837")
        buf.write("\3\2\2\2\u1837\u1841\3\2\2\2\u1838\u1836\3\2\2\2\u1839")
        buf.write("\u183a\7\u021b\2\2\u183a\u183b\7\u0272\2\2\u183b\u183c")
        buf.write("\5\u0418\u020d\2\u183c\u183d\7\u0273\2\2\u183d\u183e\7")
        buf.write("\u0289\2\2\u183e\u183f\5\u0330\u0199\2\u183f\u1841\3\2")
        buf.write("\2\2\u1840\u1831\3\2\2\2\u1840\u1839\3\2\2\2\u1841\u02eb")
        buf.write("\3\2\2\2\u1842\u1843\5\u03ee\u01f8\2\u1843\u1844\7\u0289")
        buf.write("\2\2\u1844\u1845\5\u0330\u0199\2\u1845\u184b\3\2\2\2\u1846")
        buf.write("\u1847\5\u009aN\2\u1847\u1848\7\u0289\2\2\u1848\u1849")
        buf.write("\5\u0280\u0141\2\u1849\u184b\3\2\2\2\u184a\u1842\3\2\2")
        buf.write("\2\u184a\u1846\3\2\2\2\u184b\u02ed\3\2\2\2\u184c\u184e")
        buf.write("\7\u0083\2\2\u184d\u184f\7\u00be\2\2\u184e\u184d\3\2\2")
        buf.write("\2\u184e\u184f\3\2\2\2\u184f\u1850\3\2\2\2\u1850\u1852")
        buf.write("\5\u0316\u018c\2\u1851\u1853\5\u03ae\u01d8\2\u1852\u1851")
        buf.write("\3\2\2\2\u1852\u1853\3\2\2\2\u1853\u1855\3\2\2\2\u1854")
        buf.write("\u1856\5\u0318\u018d\2\u1855\u1854\3\2\2\2\u1855\u1856")
        buf.write("\3\2\2\2\u1856\u1858\3\2\2\2\u1857\u1859\5\u031a\u018e")
        buf.write("\2\u1858\u1857\3\2\2\2\u1858\u1859\3\2\2\2\u1859\u02ef")
        buf.write("\3\2\2\2\u185a\u185d\7\u00e4\2\2\u185b\u185e\5\u02f2\u017a")
        buf.write("\2\u185c\u185e\5\u02f4\u017b\2\u185d\u185b\3\2\2\2\u185d")
        buf.write("\u185c\3\2\2\2\u185e\u02f1\3\2\2\2\u185f\u1865\5\u02fe")
        buf.write("\u0180\2\u1860\u1862\5\u0300\u0181\2\u1861\u1863\5\u0318")
        buf.write("\u018d\2\u1862\u1861\3\2\2\2\u1862\u1863\3\2\2\2\u1863")
        buf.write("\u1866\3\2\2\2\u1864\u1866\5\u0276\u013c\2\u1865\u1860")
        buf.write("\3\2\2\2\u1865\u1864\3\2\2\2\u1866\u1868\3\2\2\2\u1867")
        buf.write("\u1869\5\u031a\u018e\2\u1868\u1867\3\2\2\2\u1868\u1869")
        buf.write("\3\2\2\2\u1869\u02f3\3\2\2\2\u186a\u186c\7\13\2\2\u186b")
        buf.write("\u186d\5\u02f6\u017c\2\u186c\u186b\3\2\2\2\u186d\u186e")
        buf.write("\3\2\2\2\u186e\u186c\3\2\2\2\u186e\u186f\3\2\2\2\u186f")
        buf.write("\u1872\3\2\2\2\u1870\u1872\5\u02f8\u017d\2\u1871\u186a")
        buf.write("\3\2\2\2\u1871\u1870\3\2\2\2\u1872\u1873\3\2\2\2\u1873")
        buf.write("\u1874\5\u0276\u013c\2\u1874\u02f5\3\2\2\2\u1875\u1877")
        buf.write("\5\u02fe\u0180\2\u1876\u1878\5\u0300\u0181\2\u1877\u1876")
        buf.write("\3\2\2\2\u1877\u1878\3\2\2\2\u1878\u187a\3\2\2\2\u1879")
        buf.write("\u187b\5\u031a\u018e\2\u187a\u1879\3\2\2\2\u187a\u187b")
        buf.write("\3\2\2\2\u187b\u02f7\3\2\2\2\u187c\u187e\tG\2\2\u187d")
        buf.write("\u187c\3\2\2\2\u187d\u187e\3\2\2\2\u187e\u1880\3\2\2\2")
        buf.write("\u187f\u1881\5\u02fa\u017e\2\u1880\u187f\3\2\2\2\u1881")
        buf.write("\u1882\3\2\2\2\u1882\u1880\3\2\2\2\u1882\u1883\3\2\2\2")
        buf.write("\u1883\u1885\3\2\2\2\u1884\u1886\5\u02fc\u017f\2\u1885")
        buf.write("\u1884\3\2\2\2\u1885\u1886\3\2\2\2\u1886\u02f9\3\2\2\2")
        buf.write("\u1887\u1888\7\u022b\2\2\u1888\u1889\5\u032e\u0198\2\u1889")
        buf.write("\u188b\7\u01f4\2\2\u188a\u188c\5\u02f6\u017c\2\u188b\u188a")
        buf.write("\3\2\2\2\u188c\u188d\3\2\2\2\u188d\u188b\3\2\2\2\u188d")
        buf.write("\u188e\3\2\2\2\u188e\u02fb\3\2\2\2\u188f\u1891\7\u0092")
        buf.write("\2\2\u1890\u1892\5\u02f6\u017c\2\u1891\u1890\3\2\2\2\u1892")
        buf.write("\u1893\3\2\2\2\u1893\u1891\3\2\2\2\u1893\u1894\3\2\2\2")
        buf.write("\u1894\u02fd\3\2\2\2\u1895\u1896\7\u00ec\2\2\u1896\u1898")
        buf.write("\5\u0316\u018c\2\u1897\u1899\5\u009aN\2\u1898\u1897\3")
        buf.write("\2\2\2\u1898\u1899\3\2\2\2\u1899\u02ff\3\2\2\2\u189a\u189b")
        buf.write("\7\u021c\2\2\u189b\u18a0\5\u032c\u0197\2\u189c\u189d\7")
        buf.write("\u0278\2\2\u189d\u189f\5\u032c\u0197\2\u189e\u189c\3\2")
        buf.write("\2\2\u189f\u18a2\3\2\2\2\u18a0\u189e\3\2\2\2\u18a0\u18a1")
        buf.write("\3\2\2\2\u18a1\u0301\3\2\2\2\u18a2\u18a0\3\2\2\2\u18a3")
        buf.write("\u18a4\7\u011c\2\2\u18a4\u18a5\7\u00ec\2\2\u18a5\u18a7")
        buf.write("\5\u03f0\u01f9\2\u18a6\u18a8\5\u03aa\u01d6\2\u18a7\u18a6")
        buf.write("\3\2\2\2\u18a7\u18a8\3\2\2\2\u18a8\u18a9\3\2\2\2\u18a9")
        buf.write("\u18aa\7\u0219\2\2\u18aa\u18ab\5\u030c\u0187\2\u18ab\u18ac")
        buf.write("\7\u0158\2\2\u18ac\u18ad\7\u0272\2\2\u18ad\u18ae\5\u032e")
        buf.write("\u0198\2\u18ae\u18b7\7\u0273\2\2\u18af\u18b1\5\u0304\u0183")
        buf.write("\2\u18b0\u18b2\5\u030a\u0186\2\u18b1\u18b0\3\2\2\2\u18b1")
        buf.write("\u18b2\3\2\2\2\u18b2\u18b8\3\2\2\2\u18b3\u18b5\5\u030a")
        buf.write("\u0186\2\u18b4\u18b6\5\u0304\u0183\2\u18b5\u18b4\3\2\2")
        buf.write("\2\u18b5\u18b6\3\2\2\2\u18b6\u18b8\3\2\2\2\u18b7\u18af")
        buf.write("\3\2\2\2\u18b7\u18b3\3\2\2\2\u18b7\u18b8\3\2\2\2\u18b8")
        buf.write("\u18ba\3\2\2\2\u18b9\u18bb\5\u031a\u018e\2\u18ba\u18b9")
        buf.write("\3\2\2\2\u18ba\u18bb\3\2\2\2\u18bb\u0303\3\2\2\2\u18bc")
        buf.write("\u18bd\7\u022b\2\2\u18bd\u18be\7\u0116\2\2\u18be\u18bf")
        buf.write("\7\u01f4\2\2\u18bf\u18c0\7\u0213\2\2\u18c0\u18c1\7\u01c4")
        buf.write("\2\2\u18c1\u18c6\5\u0306\u0184\2\u18c2\u18c3\7\u0278\2")
        buf.write("\2\u18c3\u18c5\5\u0306\u0184\2\u18c4\u18c2\3\2\2\2\u18c5")
        buf.write("\u18c8\3\2\2\2\u18c6\u18c4\3\2\2\2\u18c6\u18c7\3\2\2\2")
        buf.write("\u18c7\u18ca\3\2\2\2\u18c8\u18c6\3\2\2\2\u18c9\u18cb\5")
        buf.write("\u03ae\u01d8\2\u18ca\u18c9\3\2\2\2\u18ca\u18cb\3\2\2\2")
        buf.write("\u18cb\u18cd\3\2\2\2\u18cc\u18ce\5\u0308\u0185\2\u18cd")
        buf.write("\u18cc\3\2\2\2\u18cd\u18ce\3\2\2\2\u18ce\u0305\3\2\2\2")
        buf.write("\u18cf\u18d0\5\u03ee\u01f8\2\u18d0\u18d1\7\u0289\2\2\u18d1")
        buf.write("\u18d2\5\u0330\u0199\2\u18d2\u0307\3\2\2\2\u18d3\u18d4")
        buf.write("\7\u0083\2\2\u18d4\u18d5\5\u03ae\u01d8\2\u18d5\u0309\3")
        buf.write("\2\2\2\u18d6\u18d7\7\u022b\2\2\u18d7\u18d8\7\u0148\2\2")
        buf.write("\u18d8\u18d9\7\u0116\2\2\u18d9\u18da\7\u01f4\2\2\u18da")
        buf.write("\u18dc\7\u00e4\2\2\u18db\u18dd\5\u009aN\2\u18dc\u18db")
        buf.write("\3\2\2\2\u18dc\u18dd\3\2\2\2\u18dd\u18de\3\2\2\2\u18de")
        buf.write("\u18df\7\u021c\2\2\u18df\u18e1\5\u032c\u0197\2\u18e0\u18e2")
        buf.write("\5\u03ae\u01d8\2\u18e1\u18e0\3\2\2\2\u18e1\u18e2\3\2\2")
        buf.write("\2\u18e2\u030b\3\2\2\2\u18e3\u18e9\5\u03f0\u01f9\2\u18e4")
        buf.write("\u18e5\7\u0272\2\2\u18e5\u18e6\5\u0276\u013c\2\u18e6\u18e7")
        buf.write("\7\u0273\2\2\u18e7\u18e9\3\2\2\2\u18e8\u18e3\3\2\2\2\u18e8")
        buf.write("\u18e4\3\2\2\2\u18e9\u18eb\3\2\2\2\u18ea\u18ec\5\u03aa")
        buf.write("\u01d6\2\u18eb\u18ea\3\2\2\2\u18eb\u18ec\3\2\2\2\u18ec")
        buf.write("\u030d\3\2\2\2\u18ed\u18ee\7\u010a\2\2\u18ee\u18ef\7\u01ed")
        buf.write("\2\2\u18ef\u18f4\5\u0312\u018a\2\u18f0\u18f1\7\u0278\2")
        buf.write("\2\u18f1\u18f3\5\u0312\u018a\2\u18f2\u18f0\3\2\2\2\u18f3")
        buf.write("\u18f6\3\2\2\2\u18f4\u18f2\3\2\2\2\u18f4\u18f5\3\2\2\2")
        buf.write("\u18f5\u18f7\3\2\2\2\u18f6\u18f4\3\2\2\2\u18f7\u18f8\7")
        buf.write("\u00d3\2\2\u18f8\u18f9\5\u0314\u018b\2\u18f9\u18fb\7\u0123")
        buf.write("\2\2\u18fa\u18fc\5\u0310\u0189\2\u18fb\u18fa\3\2\2\2\u18fb")
        buf.write("\u18fc\3\2\2\2\u18fc\u030f\3\2\2\2\u18fd\u18fe\7\u0228")
        buf.write("\2\2\u18fe\u1901\5\u0330\u0199\2\u18ff\u1901\7\u014a\2")
        buf.write("\2\u1900\u18fd\3\2\2\2\u1900\u18ff\3\2\2\2\u1901\u0311")
        buf.write("\3\2\2\2\u1902\u1904\5\u03f0\u01f9\2\u1903\u1905\5\u03a6")
        buf.write("\u01d4\2\u1904\u1903\3\2\2\2\u1904\u1905\3\2\2\2\u1905")
        buf.write("\u0313\3\2\2\2\u1906\u1907\7\u01aa\2\2\u1907\u1913\7\u01c7")
        buf.write("\2\2\u1908\u1909\7\u01aa\2\2\u1909\u1913\7\u00a3\2\2\u190a")
        buf.write("\u190c\7\u01c7\2\2\u190b\u190d\7\u0213\2\2\u190c\u190b")
        buf.write("\3\2\2\2\u190c\u190d\3\2\2\2\u190d\u1913\3\2\2\2\u190e")
        buf.write("\u190f\7\u01c7\2\2\u190f\u1910\7\u01aa\2\2\u1910\u1913")
        buf.write("\7\u00a3\2\2\u1911\u1913\7\u00a3\2\2\u1912\u1906\3\2\2")
        buf.write("\2\u1912\u1908\3\2\2\2\u1912\u190a\3\2\2\2\u1912\u190e")
        buf.write("\3\2\2\2\u1912\u1911\3\2\2\2\u1913\u0315\3\2\2\2\u1914")
        buf.write("\u191b\5\u0320\u0191\2\u1915\u1916\7\u0159\2\2\u1916\u1917")
        buf.write("\7\u0272\2\2\u1917\u1918\5\u0320\u0191\2\u1918\u1919\7")
        buf.write("\u0273\2\2\u1919\u191b\3\2\2\2\u191a\u1914\3\2\2\2\u191a")
        buf.write("\u1915\3\2\2\2\u191b\u191d\3\2\2\2\u191c\u191e\5\u03aa")
        buf.write("\u01d6\2\u191d\u191c\3\2\2\2\u191d\u191e\3\2\2\2\u191e")
        buf.write("\u0317\3\2\2\2\u191f\u1920\t\66\2\2\u1920\u1925\5\u0330")
        buf.write("\u0199\2\u1921\u1922\7\u0278\2\2\u1922\u1924\5\u0330\u0199")
        buf.write("\2\u1923\u1921\3\2\2\2\u1924\u1927\3\2\2\2\u1925\u1923")
        buf.write("\3\2\2\2\u1925\u1926\3\2\2\2\u1926\u1928\3\2\2\2\u1927")
        buf.write("\u1925\3\2\2\2\u1928\u1929\5\u03b2\u01da\2\u1929\u0319")
        buf.write("\3\2\2\2\u192a\u192b\7\u010c\2\2\u192b\u192d\7\u009b\2")
        buf.write("\2\u192c\u192e\5\u031c\u018f\2\u192d\u192c\3\2\2\2\u192d")
        buf.write("\u192e\3\2\2\2\u192e\u1930\3\2\2\2\u192f\u1931\5\u0330")
        buf.write("\u0199\2\u1930\u192f\3\2\2\2\u1930\u1931\3\2\2\2\u1931")
        buf.write("\u1933\3\2\2\2\u1932\u1934\5\u031e\u0190\2\u1933\u1932")
        buf.write("\3\2\2\2\u1933\u1934\3\2\2\2\u1934\u031b\3\2\2\2\u1935")
        buf.write("\u1936\7\u00ec\2\2\u1936\u1937\5\u03f0\u01f9\2\u1937\u031d")
        buf.write("\3\2\2\2\u1938\u1939\7\u0196\2\2\u1939\u193c\7\u0104\2")
        buf.write("\2\u193a\u193d\7\u020e\2\2\u193b\u193d\5\u0330\u0199\2")
        buf.write("\u193c\u193a\3\2\2\2\u193c\u193b\3\2\2\2\u193d\u031f\3")
        buf.write("\2\2\2\u193e\u194b\5\u0322\u0192\2\u193f\u1940\7\u0272")
        buf.write("\2\2\u1940\u1942\5\u0276\u013c\2\u1941\u1943\5\u0324\u0193")
        buf.write("\2\u1942\u1941\3\2\2\2\u1942\u1943\3\2\2\2\u1943\u1944")
        buf.write("\3\2\2\2\u1944\u1945\7\u0273\2\2\u1945\u194b\3\2\2\2\u1946")
        buf.write("\u1948\5\u03f0\u01f9\2\u1947\u1949\5\u0326\u0194\2\u1948")
        buf.write("\u1947\3\2\2\2\u1948\u1949\3\2\2\2\u1949\u194b\3\2\2\2")
        buf.write("\u194a\u193e\3\2\2\2\u194a\u193f\3\2\2\2\u194a\u1946\3")
        buf.write("\2\2\2\u194b\u0321\3\2\2\2\u194c\u1959\tH\2\2\u194d\u194e")
        buf.write("\7\u0272\2\2\u194e\u194f\5\u0280\u0141\2\u194f\u1950\7")
        buf.write("\u0273\2\2\u1950\u195a\3\2\2\2\u1951\u1952\7\u0272\2\2")
        buf.write("\u1952\u1953\5\u0330\u0199\2\u1953\u1957\7\u0273\2\2\u1954")
        buf.write("\u1955\7\u0272\2\2\u1955\u1956\7\u0276\2\2\u1956\u1958")
        buf.write("\7\u0273\2\2\u1957\u1954\3\2\2\2\u1957\u1958\3\2\2\2\u1958")
        buf.write("\u195a\3\2\2\2\u1959\u194d\3\2\2\2\u1959\u1951\3\2\2\2")
        buf.write("\u195a\u0323\3\2\2\2\u195b\u1964\7\u022f\2\2\u195c\u195d")
        buf.write("\7\u018b\2\2\u195d\u1965\7\u0159\2\2\u195e\u195f\7@\2")
        buf.write("\2\u195f\u1962\7\u015c\2\2\u1960\u1961\7X\2\2\u1961\u1963")
        buf.write("\5\u03d2\u01ea\2\u1962\u1960\3\2\2\2\u1962\u1963\3\2\2")
        buf.write("\2\u1963\u1965\3\2\2\2\u1964\u195c\3\2\2\2\u1964\u195e")
        buf.write("\3\2\2\2\u1965\u0325\3\2\2\2\u1966\u1968\7\u01b0\2\2\u1967")
        buf.write("\u1969\7.\2\2\u1968\u1967\3\2\2\2\u1968\u1969\3\2\2\2")
        buf.write("\u1969\u196a\3\2\2\2\u196a\u196b\7\u0272\2\2\u196b\u196e")
        buf.write("\5\u0330\u0199\2\u196c\u196d\7\u0278\2\2\u196d\u196f\5")
        buf.write("\u0330\u0199\2\u196e\u196c\3\2\2\2\u196e\u196f\3\2\2\2")
        buf.write("\u196f\u1970\3\2\2\2\u1970\u1972\7\u0273\2\2\u1971\u1973")
        buf.write("\5\u0328\u0195\2\u1972\u1971\3\2\2\2\u1972\u1973\3\2\2")
        buf.write("\2\u1973\u0327\3\2\2\2\u1974\u1975\7\u01ba\2\2\u1975\u1976")
        buf.write("\7\u0272\2\2\u1976\u1977\5\u0330\u0199\2\u1977\u1978\7")
        buf.write("\u0273\2\2\u1978\u0329\3\2\2\2\u1979\u197a\7i\2\2\u197a")
        buf.write("\u197b\7\u0272\2\2\u197b\u197c\5\u0280\u0141\2\u197c\u197d")
        buf.write("\7\u0273\2\2\u197d\u032b\3\2\2\2\u197e\u1980\7\u0272\2")
        buf.write("\2\u197f\u1981\5\u0330\u0199\2\u1980\u197f\3\2\2\2\u1980")
        buf.write("\u1981\3\2\2\2\u1981\u1986\3\2\2\2\u1982\u1983\7\u0278")
        buf.write("\2\2\u1983\u1985\5\u0330\u0199\2\u1984\u1982\3\2\2\2\u1985")
        buf.write("\u1988\3\2\2\2\u1986\u1984\3\2\2\2\u1986\u1987\3\2\2\2")
        buf.write("\u1987\u1989\3\2\2\2\u1988\u1986\3\2\2\2\u1989\u198a\7")
        buf.write("\u0273\2\2\u198a\u032d\3\2\2\2\u198b\u198c\5\u0330\u0199")
        buf.write("\2\u198c\u032f\3\2\2\2\u198d\u198e\b\u0199\1\2\u198e\u198f")
        buf.write("\7i\2\2\u198f\u1998\5\u0334\u019b\2\u1990\u1991\7\u0148")
        buf.write("\2\2\u1991\u1998\5\u0330\u0199\7\u1992\u1998\5\u0342\u01a2")
        buf.write("\2\u1993\u1994\7\u0272\2\2\u1994\u1995\5\u0330\u0199\2")
        buf.write("\u1995\u1996\7\u0273\2\2\u1996\u1998\3\2\2\2\u1997\u198d")
        buf.write("\3\2\2\2\u1997\u1990\3\2\2\2\u1997\u1992\3\2\2\2\u1997")
        buf.write("\u1993\3\2\2\2\u1998\u19cd\3\2\2\2\u1999\u199b\f\f\2\2")
        buf.write("\u199a\u199c\7\u0148\2\2\u199b\u199a\3\2\2\2\u199b\u199c")
        buf.write("\3\2\2\2\u199c\u199d\3\2\2\2\u199d\u199e\7%\2\2\u199e")
        buf.write("\u199f\5\u0330\u0199\2\u199f\u19a0\7\21\2\2\u19a0\u19a1")
        buf.write("\5\u0330\u0199\r\u19a1\u19cc\3\2\2\2\u19a2\u19a3\f\n\2")
        buf.write("\2\u19a3\u19a4\5\u0338\u019d\2\u19a4\u19a5\5\u0330\u0199")
        buf.write("\13\u19a5\u19cc\3\2\2\2\u19a6\u19a7\f\6\2\2\u19a7\u19a8")
        buf.write("\7\21\2\2\u19a8\u19cc\5\u0330\u0199\7\u19a9\u19aa\f\5")
        buf.write("\2\2\u19aa\u19ab\7\u015d\2\2\u19ab\u19cc\5\u0330\u0199")
        buf.write("\6\u19ac\u19ad\f\16\2\2\u19ad\u19ae\7\u00ef\2\2\u19ae")
        buf.write("\u19cc\5\u0332\u019a\2\u19af\u19b1\f\r\2\2\u19b0\u19b2")
        buf.write("\7\u0148\2\2\u19b1\u19b0\3\2\2\2\u19b1\u19b2\3\2\2\2\u19b2")
        buf.write("\u19b3\3\2\2\2\u19b3\u19b9\7\u00d3\2\2\u19b4\u19b5\7\u0272")
        buf.write("\2\2\u19b5\u19b6\5\u0280\u0141\2\u19b6\u19b7\7\u0273\2")
        buf.write("\2\u19b7\u19ba\3\2\2\2\u19b8\u19ba\5\u032c\u0197\2\u19b9")
        buf.write("\u19b4\3\2\2\2\u19b9\u19b8\3\2\2\2\u19ba\u19cc\3\2\2\2")
        buf.write("\u19bb\u19bd\f\13\2\2\u19bc\u19be\7\u0148\2\2\u19bd\u19bc")
        buf.write("\3\2\2\2\u19bd\u19be\3\2\2\2\u19be\u19bf\3\2\2\2\u19bf")
        buf.write("\u19c0\5\u033a\u019e\2\u19c0\u19c3\5\u0330\u0199\2\u19c1")
        buf.write("\u19c2\7\u009c\2\2\u19c2\u19c4\5\u0330\u0199\2\u19c3\u19c1")
        buf.write("\3\2\2\2\u19c3\u19c4\3\2\2\2\u19c4\u19cc\3\2\2\2\u19c5")
        buf.write("\u19c6\f\t\2\2\u19c6\u19c8\tI\2\2\u19c7\u19c9\7\u0152")
        buf.write("\2\2\u19c8\u19c7\3\2\2\2\u19c8\u19c9\3\2\2\2\u19c9\u19ca")
        buf.write("\3\2\2\2\u19ca\u19cc\5\u0342\u01a2\2\u19cb\u1999\3\2\2")
        buf.write("\2\u19cb\u19a2\3\2\2\2\u19cb\u19a6\3\2\2\2\u19cb\u19a9")
        buf.write("\3\2\2\2\u19cb\u19ac\3\2\2\2\u19cb\u19af\3\2\2\2\u19cb")
        buf.write("\u19bb\3\2\2\2\u19cb\u19c5\3\2\2\2\u19cc\u19cf\3\2\2\2")
        buf.write("\u19cd\u19cb\3\2\2\2\u19cd\u19ce\3\2\2\2\u19ce\u0331\3")
        buf.write("\2\2\2\u19cf\u19cd\3\2\2\2\u19d0\u19d2\7\u0148\2\2\u19d1")
        buf.write("\u19d0\3\2\2\2\u19d1\u19d2\3\2\2\2\u19d2\u19ec\3\2\2\2")
        buf.write("\u19d3\u19ed\7\u014c\2\2\u19d4\u19ed\7\u012a\2\2\u19d5")
        buf.write("\u19ed\7\u0181\2\2\u19d6\u19ed\7\u00dd\2\2\u19d7\u19d8")
        buf.write("\7\6\2\2\u19d8\u19ed\7\u01c4\2\2\u19d9\u19ed\7\u0094\2")
        buf.write("\2\u19da\u19dc\7\u0152\2\2\u19db\u19dd\7\u0209\2\2\u19dc")
        buf.write("\u19db\3\2\2\2\u19dc\u19dd\3\2\2\2\u19dd\u19de\3\2\2\2")
        buf.write("\u19de\u19e0\7\u0272\2\2\u19df\u19e1\7\u0159\2\2\u19e0")
        buf.write("\u19df\3\2\2\2\u19e0\u19e1\3\2\2\2\u19e1\u19e2\3\2\2\2")
        buf.write("\u19e2\u19e7\5\u0402\u0202\2\u19e3\u19e4\7\u0278\2\2\u19e4")
        buf.write("\u19e6\5\u0402\u0202\2\u19e5\u19e3\3\2\2\2\u19e6\u19e9")
        buf.write("\3\2\2\2\u19e7\u19e5\3\2\2\2\u19e7\u19e8\3\2\2\2\u19e8")
        buf.write("\u19ea\3\2\2\2\u19e9\u19e7\3\2\2\2\u19ea\u19eb\7\u0273")
        buf.write("\2\2\u19eb\u19ed\3\2\2\2\u19ec\u19d3\3\2\2\2\u19ec\u19d4")
        buf.write("\3\2\2\2\u19ec\u19d5\3\2\2\2\u19ec\u19d6\3\2\2\2\u19ec")
        buf.write("\u19d7\3\2\2\2\u19ec\u19d9\3\2\2\2\u19ec\u19da\3\2\2\2")
        buf.write("\u19ed\u0333\3\2\2\2\u19ee\u19ef\7\u0272\2\2\u19ef\u19f0")
        buf.write("\5\u0280\u0141\2\u19f0\u19f1\7\u0273\2\2\u19f1\u0335\3")
        buf.write("\2\2\2\u19f2\u19f3\tI\2\2\u19f3\u0337\3\2\2\2\u19f4\u19fb")
        buf.write("\7\u0289\2\2\u19f5\u19fb\5\u041c\u020f\2\u19f6\u19fb\7")
        buf.write("\u0280\2\2\u19f7\u19fb\7\u0286\2\2\u19f8\u19fb\5\u0420")
        buf.write("\u0211\2\u19f9\u19fb\5\u041e\u0210\2\u19fa\u19f4\3\2\2")
        buf.write("\2\u19fa\u19f5\3\2\2\2\u19fa\u19f6\3\2\2\2\u19fa\u19f7")
        buf.write("\3\2\2\2\u19fa\u19f8\3\2\2\2\u19fa\u19f9\3\2\2\2\u19fb")
        buf.write("\u0339\3\2\2\2\u19fc\u19fd\tJ\2\2\u19fd\u033b\3\2\2\2")
        buf.write("\u19fe\u19ff\7\u009c\2\2\u19ff\u1a00\5\u0340\u01a1\2\u1a00")
        buf.write("\u033d\3\2\2\2\u1a01\u1a02\5\u0340\u01a1\2\u1a02\u1a03")
        buf.write("\7\21\2\2\u1a03\u1a04\5\u0340\u01a1\2\u1a04\u033f\3\2")
        buf.write("\2\2\u1a05\u1a06\5\u0342\u01a2\2\u1a06\u0341\3\2\2\2\u1a07")
        buf.write("\u1a08\b\u01a2\1\2\u1a08\u1a09\7\u0272\2\2\u1a09\u1a0a")
        buf.write("\5\u0342\u01a2\2\u1a0a\u1a0b\7\u0273\2\2\u1a0b\u1a0e\3")
        buf.write("\2\2\2\u1a0c\u1a0e\5\u0352\u01aa\2\u1a0d\u1a07\3\2\2\2")
        buf.write("\u1a0d\u1a0c\3\2\2\2\u1a0e\u1a28\3\2\2\2\u1a0f\u1a10\f")
        buf.write("\b\2\2\u1a10\u1a11\tK\2\2\u1a11\u1a27\5\u0342\u01a2\t")
        buf.write("\u1a12\u1a13\f\7\2\2\u1a13\u1a14\tL\2\2\u1a14\u1a27\5")
        buf.write("\u0342\u01a2\b\u1a15\u1a16\f\6\2\2\u1a16\u1a17\7\u0287")
        buf.write("\2\2\u1a17\u1a27\5\u0342\u01a2\7\u1a18\u1a19\f\5\2\2\u1a19")
        buf.write("\u1a1a\7\4\2\2\u1a1a\u1a27\5\u0342\u01a2\6\u1a1b\u1a24")
        buf.write("\f\t\2\2\u1a1c\u1a21\7\31\2\2\u1a1d\u1a22\7\u0106\2\2")
        buf.write("\u1a1e\u1a1f\7\u01f5\2\2\u1a1f\u1a20\7\u0249\2\2\u1a20")
        buf.write("\u1a22\5\u0342\u01a2\2\u1a21\u1a1d\3\2\2\2\u1a21\u1a1e")
        buf.write("\3\2\2\2\u1a22\u1a25\3\2\2\2\u1a23\u1a25\5\u0344\u01a3")
        buf.write("\2\u1a24\u1a1c\3\2\2\2\u1a24\u1a23\3\2\2\2\u1a25\u1a27")
        buf.write("\3\2\2\2\u1a26\u1a0f\3\2\2\2\u1a26\u1a12\3\2\2\2\u1a26")
        buf.write("\u1a15\3\2\2\2\u1a26\u1a18\3\2\2\2\u1a26\u1a1b\3\2\2\2")
        buf.write("\u1a27\u1a2a\3\2\2\2\u1a28\u1a26\3\2\2\2\u1a28\u1a29\3")
        buf.write("\2\2\2\u1a29\u0343\3\2\2\2\u1a2a\u1a28\3\2\2\2\u1a2b\u1a30")
        buf.write("\7p\2\2\u1a2c\u1a2d\7\u0272\2\2\u1a2d\u1a2e\5\u0340\u01a1")
        buf.write("\2\u1a2e\u1a2f\7\u0273\2\2\u1a2f\u1a31\3\2\2\2\u1a30\u1a2c")
        buf.write("\3\2\2\2\u1a30\u1a31\3\2\2\2\u1a31\u1a32\3\2\2\2\u1a32")
        buf.write("\u1a33\7\u01fe\2\2\u1a33\u1a38\7\u01b8\2\2\u1a34\u1a35")
        buf.write("\7\u0272\2\2\u1a35\u1a36\5\u0340\u01a1\2\u1a36\u1a37\7")
        buf.write("\u0273\2\2\u1a37\u1a39\3\2\2\2\u1a38\u1a34\3\2\2\2\u1a38")
        buf.write("\u1a39\3\2\2\2\u1a39\u1a44\3\2\2\2\u1a3a\u1a3f\7\u0246")
        buf.write("\2\2\u1a3b\u1a3c\7\u0272\2\2\u1a3c\u1a3d\5\u0340\u01a1")
        buf.write("\2\u1a3d\u1a3e\7\u0273\2\2\u1a3e\u1a40\3\2\2\2\u1a3f\u1a3b")
        buf.write("\3\2\2\2\u1a3f\u1a40\3\2\2\2\u1a40\u1a41\3\2\2\2\u1a41")
        buf.write("\u1a42\7\u01fe\2\2\u1a42\u1a44\7\u0126\2\2\u1a43\u1a2b")
        buf.write("\3\2\2\2\u1a43\u1a3a\3\2\2\2\u1a44\u0345\3\2\2\2\u1a45")
        buf.write("\u1a46\5\u0352\u01aa\2\u1a46\u1a47\7\u028a\2\2\u1a47\u1a48")
        buf.write("\5\u0348\u01a5\2\u1a48\u1a49\7\u028b\2\2\u1a49\u0347\3")
        buf.write("\2\2\2\u1a4a\u1a4d\7\22\2\2\u1a4b\u1a4d\5\u0330\u0199")
        buf.write("\2\u1a4c\u1a4a\3\2\2\2\u1a4c\u1a4b\3\2\2\2\u1a4d\u1a55")
        buf.write("\3\2\2\2\u1a4e\u1a51\7\u0278\2\2\u1a4f\u1a52\7\22\2\2")
        buf.write("\u1a50\u1a52\5\u0330\u0199\2\u1a51\u1a4f\3\2\2\2\u1a51")
        buf.write("\u1a50\3\2\2\2\u1a52\u1a54\3\2\2\2\u1a53\u1a4e\3\2\2\2")
        buf.write("\u1a54\u1a57\3\2\2\2\u1a55\u1a53\3\2\2\2\u1a55\u1a56\3")
        buf.write("\2\2\2\u1a56\u1a62\3\2\2\2\u1a57\u1a55\3\2\2\2\u1a58\u1a5d")
        buf.write("\5\u034a\u01a6\2\u1a59\u1a5a\7\u0278\2\2\u1a5a\u1a5c\5")
        buf.write("\u034a\u01a6\2\u1a5b\u1a59\3\2\2\2\u1a5c\u1a5f\3\2\2\2")
        buf.write("\u1a5d\u1a5b\3\2\2\2\u1a5d\u1a5e\3\2\2\2\u1a5e\u1a62\3")
        buf.write("\2\2\2\u1a5f\u1a5d\3\2\2\2\u1a60\u1a62\5\u0350\u01a9\2")
        buf.write("\u1a61\u1a4c\3\2\2\2\u1a61\u1a58\3\2\2\2\u1a61\u1a60\3")
        buf.write("\2\2\2\u1a62\u0349\3\2\2\2\u1a63\u1a64\7\u00b7\2\2\u1a64")
        buf.write("\u1a71\5\u03ee\u01f8\2\u1a65\u1a66\7\u00d3\2\2\u1a66\u1a72")
        buf.write("\5\u032c\u0197\2\u1a67\u1a69\5\u034c\u01a7\2\u1a68\u1a67")
        buf.write("\3\2\2\2\u1a68\u1a69\3\2\2\2\u1a69\u1a6a\3\2\2\2\u1a6a")
        buf.write("\u1a6b\7\u00be\2\2\u1a6b\u1a6c\5\u0330\u0199\2\u1a6c\u1a6d")
        buf.write("\7\u01fe\2\2\u1a6d\u1a6e\5\u0330\u0199\2\u1a6e\u1a6f\5")
        buf.write("\u034e\u01a8\2\u1a6f\u1a70\5\u0330\u0199\2\u1a70\u1a72")
        buf.write("\3\2\2\2\u1a71\u1a65\3\2\2\2\u1a71\u1a68\3\2\2\2\u1a72")
        buf.write("\u034b\3\2\2\2\u1a73\u1a74\7\u0100\2\2\u1a74\u1a75\5\u0330")
        buf.write("\u0199\2\u1a75\u034d\3\2\2\2\u1a76\u1a77\tM\2\2\u1a77")
        buf.write("\u034f\3\2\2\2\u1a78\u1a79\7\u00b7\2\2\u1a79\u1a7a\7\u0272")
        buf.write("\2\2\u1a7a\u1a7f\5\u03ee\u01f8\2\u1a7b\u1a7c\7\u0278\2")
        buf.write("\2\u1a7c\u1a7e\5\u03ee\u01f8\2\u1a7d\u1a7b\3\2\2\2\u1a7e")
        buf.write("\u1a81\3\2\2\2\u1a7f\u1a7d\3\2\2\2\u1a7f\u1a80\3\2\2\2")
        buf.write("\u1a80\u1a82\3\2\2\2\u1a81\u1a7f\3\2\2\2\u1a82\u1a83\7")
        buf.write("\u0273\2\2\u1a83\u1a84\7\u00d3\2\2\u1a84\u1a91\7\u0272")
        buf.write("\2\2\u1a85\u1a92\5\u0280\u0141\2\u1a86\u1a87\7\u0272\2")
        buf.write("\2\u1a87\u1a8c\5\u032c\u0197\2\u1a88\u1a89\7\u0278\2\2")
        buf.write("\u1a89\u1a8b\5\u032c\u0197\2\u1a8a\u1a88\3\2\2\2\u1a8b")
        buf.write("\u1a8e\3\2\2\2\u1a8c\u1a8a\3\2\2\2\u1a8c\u1a8d\3\2\2\2")
        buf.write("\u1a8d\u1a8f\3\2\2\2\u1a8e\u1a8c\3\2\2\2\u1a8f\u1a90\7")
        buf.write("\u0273\2\2\u1a90\u1a92\3\2\2\2\u1a91\u1a85\3\2\2\2\u1a91")
        buf.write("\u1a86\3\2\2\2\u1a92\u1a93\3\2\2\2\u1a93\u1a94\7\u0273")
        buf.write("\2\2\u1a94\u0351\3\2\2\2\u1a95\u1a96\b\u01aa\1\2\u1a96")
        buf.write("\u1a97\tL\2\2\u1a97\u1aa7\5\u0352\u01aa\f\u1a98\u1a99")
        buf.write("\7\u0184\2\2\u1a99\u1aa7\5\u0352\u01aa\13\u1a9a\u1a9b")
        buf.write("\7V\2\2\u1a9b\u1aa7\5\u0352\u01aa\n\u1a9c\u1a9d\7\u0132")
        buf.write("\2\2\u1a9d\u1aa7\5\u0352\u01aa\t\u1a9e\u1a9f\7\u008b\2")
        buf.write("\2\u1a9f\u1aa7\5\u0352\u01aa\b\u1aa0\u1aa1\7\13\2\2\u1aa1")
        buf.write("\u1aa7\5\u0352\u01aa\7\u1aa2\u1aa7\5\u0354\u01ab\2\u1aa3")
        buf.write("\u1aa7\5\u0366\u01b4\2\u1aa4\u1aa7\5\u0368\u01b5\2\u1aa5")
        buf.write("\u1aa7\5\u0360\u01b1\2\u1aa6\u1a95\3\2\2\2\u1aa6\u1a98")
        buf.write("\3\2\2\2\u1aa6\u1a9a\3\2\2\2\u1aa6\u1a9c\3\2\2\2\u1aa6")
        buf.write("\u1a9e\3\2\2\2\u1aa6\u1aa0\3\2\2\2\u1aa6\u1aa2\3\2\2\2")
        buf.write("\u1aa6\u1aa3\3\2\2\2\u1aa6\u1aa4\3\2\2\2\u1aa6\u1aa5\3")
        buf.write("\2\2\2\u1aa7\u1aaf\3\2\2\2\u1aa8\u1aa9\f\r\2\2\u1aa9\u1aaa")
        buf.write("\7\u028a\2\2\u1aaa\u1aab\5\u0348\u01a5\2\u1aab\u1aac\7")
        buf.write("\u028b\2\2\u1aac\u1aae\3\2\2\2\u1aad\u1aa8\3\2\2\2\u1aae")
        buf.write("\u1ab1\3\2\2\2\u1aaf\u1aad\3\2\2\2\u1aaf\u1ab0\3\2\2\2")
        buf.write("\u1ab0\u0353\3\2\2\2\u1ab1\u1aaf\3\2\2\2\u1ab2\u1ab5\5")
        buf.write("\u035a\u01ae\2\u1ab3\u1ab5\5\u0356\u01ac\2\u1ab4\u1ab2")
        buf.write("\3\2\2\2\u1ab4\u1ab3\3\2\2\2\u1ab5\u0355\3\2\2\2\u1ab6")
        buf.write("\u1ab8\5\u03d4\u01eb\2\u1ab7\u1ab6\3\2\2\2\u1ab7\u1ab8")
        buf.write("\3\2\2\2\u1ab8\u1ab9\3\2\2\2\u1ab9\u1aba\7;\2\2\u1aba")
        buf.write("\u1abc\5\u0360\u01b1\2\u1abb\u1abd\5\u0358\u01ad\2\u1abc")
        buf.write("\u1abb\3\2\2\2\u1abd\u1abe\3\2\2\2\u1abe\u1abc\3\2\2\2")
        buf.write("\u1abe\u1abf\3\2\2\2\u1abf\u1ac1\3\2\2\2\u1ac0\u1ac2\5")
        buf.write("\u035e\u01b0\2\u1ac1\u1ac0\3\2\2\2\u1ac1\u1ac2\3\2\2\2")
        buf.write("\u1ac2\u1ac3\3\2\2\2\u1ac3\u1ac5\7\u0098\2\2\u1ac4\u1ac6")
        buf.write("\7;\2\2\u1ac5\u1ac4\3\2\2\2\u1ac5\u1ac6\3\2\2\2\u1ac6")
        buf.write("\u1ac8\3\2\2\2\u1ac7\u1ac9\5\u03d4\u01eb\2\u1ac8\u1ac7")
        buf.write("\3\2\2\2\u1ac8\u1ac9\3\2\2\2\u1ac9\u0357\3\2\2\2\u1aca")
        buf.write("\u1acb\7\u022b\2\2\u1acb\u1acc\5\u0330\u0199\2\u1acc\u1acf")
        buf.write("\7\u01f4\2\2\u1acd\u1ad0\5\u0222\u0112\2\u1ace\u1ad0\5")
        buf.write("\u0330\u0199\2\u1acf\u1acd\3\2\2\2\u1acf\u1ace\3\2\2\2")
        buf.write("\u1ad0\u0359\3\2\2\2\u1ad1\u1ad3\5\u03d4\u01eb\2\u1ad2")
        buf.write("\u1ad1\3\2\2\2\u1ad2\u1ad3\3\2\2\2\u1ad3\u1ad4\3\2\2\2")
        buf.write("\u1ad4\u1ad6\7;\2\2\u1ad5\u1ad7\5\u035c\u01af\2\u1ad6")
        buf.write("\u1ad5\3\2\2\2\u1ad7\u1ad8\3\2\2\2\u1ad8\u1ad6\3\2\2\2")
        buf.write("\u1ad8\u1ad9\3\2\2\2\u1ad9\u1adb\3\2\2\2\u1ada\u1adc\5")
        buf.write("\u035e\u01b0\2\u1adb\u1ada\3\2\2\2\u1adb\u1adc\3\2\2\2")
        buf.write("\u1adc\u1add\3\2\2\2\u1add\u1adf\7\u0098\2\2\u1ade\u1ae0")
        buf.write("\7;\2\2\u1adf\u1ade\3\2\2\2\u1adf\u1ae0\3\2\2\2\u1ae0")
        buf.write("\u1ae2\3\2\2\2\u1ae1\u1ae3\5\u03d4\u01eb\2\u1ae2\u1ae1")
        buf.write("\3\2\2\2\u1ae2\u1ae3\3\2\2\2\u1ae3\u035b\3\2\2\2\u1ae4")
        buf.write("\u1ae5\7\u022b\2\2\u1ae5\u1ae6\5\u0330\u0199\2\u1ae6\u1ae9")
        buf.write("\7\u01f4\2\2\u1ae7\u1aea\5\u0222\u0112\2\u1ae8\u1aea\5")
        buf.write("\u0330\u0199\2\u1ae9\u1ae7\3\2\2\2\u1ae9\u1ae8\3\2\2\2")
        buf.write("\u1aea\u035d\3\2\2\2\u1aeb\u1aee\7\u0092\2\2\u1aec\u1aef")
        buf.write("\5\u0222\u0112\2\u1aed\u1aef\5\u0330\u0199\2\u1aee\u1aec")
        buf.write("\3\2\2\2\u1aee\u1aed\3\2\2\2\u1aef\u035f\3\2\2\2\u1af0")
        buf.write("\u1af1\5\u040e\u0208\2\u1af1\u1af2\5\u0424\u0213\2\u1af2")
        buf.write("\u1b03\3\2\2\2\u1af3\u1b03\5\u040a\u0206\2\u1af4\u1b03")
        buf.write("\5\u0410\u0209\2\u1af5\u1b03\5,\27\2\u1af6\u1b03\5\u040c")
        buf.write("\u0207\2\u1af7\u1af8\7\u0272\2\2\u1af8\u1af9\5\u0360\u01b1")
        buf.write("\2\u1af9\u1afa\7\u0273\2\2\u1afa\u1b03\3\2\2\2\u1afb\u1afc")
        buf.write("\7\u0272\2\2\u1afc\u1afd\5\u0280\u0141\2\u1afd\u1afe\7")
        buf.write("\u0273\2\2\u1afe\u1b01\3\2\2\2\u1aff\u1b01\5\u032c\u0197")
        buf.write("\2\u1b00\u1afb\3\2\2\2\u1b00\u1aff\3\2\2\2\u1b01\u1b03")
        buf.write("\3\2\2\2\u1b02\u1af0\3\2\2\2\u1b02\u1af3\3\2\2\2\u1b02")
        buf.write("\u1af4\3\2\2\2\u1b02\u1af5\3\2\2\2\u1b02\u1af6\3\2\2\2")
        buf.write("\u1b02\u1af7\3\2\2\2\u1b02\u1b00\3\2\2\2\u1b03\u0361\3")
        buf.write("\2\2\2\u1b04\u1b06\5\u0330\u0199\2\u1b05\u1b07\5\u0364")
        buf.write("\u01b3\2\u1b06\u1b05\3\2\2\2\u1b06\u1b07\3\2\2\2\u1b07")
        buf.write("\u0363\3\2\2\2\u1b08\u1b09\7\u0278\2\2\u1b09\u1b0e\5\u0330")
        buf.write("\u0199\2\u1b0a\u1b0b\7\u0278\2\2\u1b0b\u1b0d\5\u0330\u0199")
        buf.write("\2\u1b0c\u1b0a\3\2\2\2\u1b0d\u1b10\3\2\2\2\u1b0e\u1b0c")
        buf.write("\3\2\2\2\u1b0e\u1b0f\3\2\2\2\u1b0f\u0365\3\2\2\2\u1b10")
        buf.write("\u1b0e\3\2\2\2\u1b11\u1b1a\tN\2\2\u1b12\u1b13\7\u0272")
        buf.write("\2\2\u1b13\u1b14\5\u0280\u0141\2\u1b14\u1b15\7\u0273\2")
        buf.write("\2\u1b15\u1b1b\3\2\2\2\u1b16\u1b17\7\u0272\2\2\u1b17\u1b18")
        buf.write("\5\u0330\u0199\2\u1b18\u1b19\7\u0273\2\2\u1b19\u1b1b\3")
        buf.write("\2\2\2\u1b1a\u1b12\3\2\2\2\u1b1a\u1b16\3\2\2\2\u1b1b\u0367")
        buf.write("\3\2\2\2\u1b1c\u1b1d\b\u01b5\1\2\u1b1d\u1c59\5\u036a\u01b6")
        buf.write("\2\u1b1e\u1b1f\5\u0426\u0214\2\u1b1f\u1b21\5\u03fc\u01ff")
        buf.write("\2\u1b20\u1b22\5\u037a\u01be\2\u1b21\u1b20\3\2\2\2\u1b21")
        buf.write("\u1b22\3\2\2\2\u1b22\u1c59\3\2\2\2\u1b23\u1b24\tO\2\2")
        buf.write("\u1b24\u1b2c\7\u0272\2\2\u1b25\u1b26\7\u0128\2\2\u1b26")
        buf.write("\u1b27\7\u0272\2\2\u1b27\u1b28\5\u0280\u0141\2\u1b28\u1b29")
        buf.write("\7\u0273\2\2\u1b29\u1b2d\3\2\2\2\u1b2a\u1b2d\5\u0340\u01a1")
        buf.write("\2\u1b2b\u1b2d\5\u0330\u0199\2\u1b2c\u1b25\3\2\2\2\u1b2c")
        buf.write("\u1b2a\3\2\2\2\u1b2c\u1b2b\3\2\2\2\u1b2d\u1b2e\3\2\2\2")
        buf.write("\u1b2e\u1b2f\7\26\2\2\u1b2f\u1b30\5\u0402\u0202\2\u1b30")
        buf.write("\u1b31\7\u0273\2\2\u1b31\u1c59\3\2\2\2\u1b32\u1b35\5\u0280")
        buf.write("\u0141\2\u1b33\u1b35\5\u0360\u01b1\2\u1b34\u1b32\3\2\2")
        buf.write("\2\u1b34\u1b33\3\2\2\2\u1b35\u1b36\3\2\2\2\u1b36\u1b37")
        buf.write("\7\5\2\2\u1b37\u1b38\5\u0402\u0202\2\u1b38\u1c59\3\2\2")
        buf.write("\2\u1b39\u1b3a\7B\2\2\u1b3a\u1b3b\7\u0272\2\2\u1b3b\u1b3c")
        buf.write("\5\u0340\u01a1\2\u1b3c\u1b3d\7\u0219\2\2\u1b3d\u1b3e\7")
        buf.write("\u012f\2\2\u1b3e\u1b3f\7\u0273\2\2\u1b3f\u1c59\3\2\2\2")
        buf.write("\u1b40\u1b41\7H\2\2\u1b41\u1b43\7\u0272\2\2\u1b42\u1b44")
        buf.write("\tP\2\2\u1b43\u1b42\3\2\2\2\u1b43\u1b44\3\2\2\2\u1b44")
        buf.write("\u1b45\3\2\2\2\u1b45\u1b47\5\u0340\u01a1\2\u1b46\u1b48")
        buf.write("\5\u037e\u01c0\2\u1b47\u1b46\3\2\2\2\u1b47\u1b48\3\2\2")
        buf.write("\2\u1b48\u1b49\3\2\2\2\u1b49\u1b4a\7\u0273\2\2\u1b4a\u1c59")
        buf.write("\3\2\2\2\u1b4b\u1b4c\5\u036e\u01b8\2\u1b4c\u1b4e\5\u03f8")
        buf.write("\u01fd\2\u1b4d\u1b4f\5\u0380\u01c1\2\u1b4e\u1b4d\3\2\2")
        buf.write("\2\u1b4f\u1b50\3\2\2\2\u1b50\u1b4e\3\2\2\2\u1b50\u1b51")
        buf.write("\3\2\2\2\u1b51\u1c59\3\2\2\2\u1b52\u1b53\7z\2\2\u1b53")
        buf.write("\u1b54\7\u0272\2\2\u1b54\u1b56\5\u0340\u01a1\2\u1b55\u1b57")
        buf.write("\tQ\2\2\u1b56\u1b55\3\2\2\2\u1b56\u1b57\3\2\2\2\u1b57")
        buf.write("\u1b58\3\2\2\2\u1b58\u1b59\7\u0273\2\2\u1b59\u1c59\3\2")
        buf.write("\2\2\u1b5a\u1b5b\7\u00aa\2\2\u1b5b\u1b5e\7\u0272\2\2\u1b5c")
        buf.write("\u1b5f\5\u0426\u0214\2\u1b5d\u1b5f\5\u0330\u0199\2\u1b5e")
        buf.write("\u1b5c\3\2\2\2\u1b5e\u1b5d\3\2\2\2\u1b5f\u1b60\3\2\2\2")
        buf.write("\u1b60\u1b61\7\u00be\2\2\u1b61\u1b62\5\u0340\u01a1\2\u1b62")
        buf.write("\u1b63\7\u0273\2\2\u1b63\u1c59\3\2\2\2\u1b64\u1b65\tR")
        buf.write("\2\2\u1b65\u1b67\5\u03fa\u01fe\2\u1b66\u1b68\5\u03fe\u0200")
        buf.write("\2\u1b67\u1b66\3\2\2\2\u1b67\u1b68\3\2\2\2\u1b68\u1b69")
        buf.write("\3\2\2\2\u1b69\u1b6a\5\u0372\u01ba\2\u1b6a\u1c59\3\2\2")
        buf.write("\2\u1b6b\u1b6c\5\u0370\u01b9\2\u1b6c\u1b6d\7\u0272\2\2")
        buf.write("\u1b6d\u1b72\5\u0330\u0199\2\u1b6e\u1b6f\7\u0278\2\2\u1b6f")
        buf.write("\u1b71\5\u0330\u0199\2\u1b70\u1b6e\3\2\2\2\u1b71\u1b74")
        buf.write("\3\2\2\2\u1b72\u1b70\3\2\2\2\u1b72\u1b73\3\2\2\2\u1b73")
        buf.write("\u1b76\3\2\2\2\u1b74\u1b72\3\2\2\2\u1b75\u1b77\5\u0382")
        buf.write("\u01c2\2\u1b76\u1b75\3\2\2\2\u1b76\u1b77\3\2\2\2\u1b77")
        buf.write("\u1b79\3\2\2\2\u1b78\u1b7a\5\u037a\u01be\2\u1b79\u1b78")
        buf.write("\3\2\2\2\u1b79\u1b7a\3\2\2\2\u1b7a\u1b7b\3\2\2\2\u1b7b")
        buf.write("\u1b7c\7\u0273\2\2\u1b7c\u1c59\3\2\2\2\u1b7d\u1b7e\7\u017b")
        buf.write("\2\2\u1b7e\u1b7f\7\u0272\2\2\u1b7f\u1b80\5\u0330\u0199")
        buf.write("\2\u1b80\u1b81\7\u00d3\2\2\u1b81\u1b82\5\u0330\u0199\2")
        buf.write("\u1b82\u1b83\7\u0273\2\2\u1b83\u1c59\3\2\2\2\u1b84\u1b85")
        buf.write("\7\u0203\2\2\u1b85\u1b86\7\u0272\2\2\u1b86\u1b89\5\u0330")
        buf.write("\u0199\2\u1b87\u1b88\7\u0219\2\2\u1b88\u1b8a\tS\2\2\u1b89")
        buf.write("\u1b87\3\2\2\2\u1b89\u1b8a\3\2\2\2\u1b8a\u1b8f\3\2\2\2")
        buf.write("\u1b8b\u1b8c\7\u0278\2\2\u1b8c\u1b8e\5\u0330\u0199\2\u1b8d")
        buf.write("\u1b8b\3\2\2\2\u1b8e\u1b91\3\2\2\2\u1b8f\u1b8d\3\2\2\2")
        buf.write("\u1b8f\u1b90\3\2\2\2\u1b90\u1b92\3\2\2\2\u1b91\u1b8f\3")
        buf.write("\2\2\2\u1b92\u1b93\7\u0273\2\2\u1b93\u1c59\3\2\2\2\u1b94")
        buf.write("\u1b95\7\u0204\2\2\u1b95\u1b96\7\u0272\2\2\u1b96\u1b97")
        buf.write("\5\u0330\u0199\2\u1b97\u1b99\7\26\2\2\u1b98\u1b9a\7\u0192")
        buf.write("\2\2\u1b99\u1b98\3\2\2\2\u1b99\u1b9a\3\2\2\2\u1b9a\u1b9b")
        buf.write("\3\2\2\2\u1b9b\u1b9c\5\u0402\u0202\2\u1b9c\u1b9d\7\u0273")
        buf.write("\2\2\u1b9d\u1c59\3\2\2\2\u1b9e\u1b9f\7\u0206\2\2\u1b9f")
        buf.write("\u1ba7\7\u0272\2\2\u1ba0\u1ba2\t\7\2\2\u1ba1\u1ba0\3\2")
        buf.write("\2\2\u1ba1\u1ba2\3\2\2\2\u1ba2\u1ba4\3\2\2\2\u1ba3\u1ba5")
        buf.write("\5\u0416\u020c\2\u1ba4\u1ba3\3\2\2\2\u1ba4\u1ba5\3\2\2")
        buf.write("\2\u1ba5\u1ba6\3\2\2\2\u1ba6\u1ba8\7\u00be\2\2\u1ba7\u1ba1")
        buf.write("\3\2\2\2\u1ba7\u1ba8\3\2\2\2\u1ba8\u1ba9\3\2\2\2\u1ba9")
        buf.write("\u1baa\5\u0340\u01a1\2\u1baa\u1bab\7\u0273\2\2\u1bab\u1c59")
        buf.write("\3\2\2\2\u1bac\u1bad\7\u0235\2\2\u1bad\u1bae\7\u0272\2")
        buf.write("\2\u1bae\u1bb0\5\u0330\u0199\2\u1baf\u1bb1\5\u02dc\u016f")
        buf.write("\2\u1bb0\u1baf\3\2\2\2\u1bb0\u1bb1\3\2\2\2\u1bb1\u1bb2")
        buf.write("\3\2\2\2\u1bb2\u1bb5\7\u0273\2\2\u1bb3\u1bb4\7\u026b\2")
        buf.write("\2\u1bb4\u1bb6\5\u040c\u0207\2\u1bb5\u1bb3\3\2\2\2\u1bb5")
        buf.write("\u1bb6\3\2\2\2\u1bb6\u1c59\3\2\2\2\u1bb7\u1bb8\tT\2\2")
        buf.write("\u1bb8\u1bb9\7\u0272\2\2\u1bb9\u1bbe\5\u038e\u01c8\2\u1bba")
        buf.write("\u1bbb\7\u0278\2\2\u1bbb\u1bbd\5\u038e\u01c8\2\u1bbc\u1bba")
        buf.write("\3\2\2\2\u1bbd\u1bc0\3\2\2\2\u1bbe\u1bbc\3\2\2\2\u1bbe")
        buf.write("\u1bbf\3\2\2\2\u1bbf\u1bc1\3\2\2\2\u1bc0\u1bbe\3\2\2\2")
        buf.write("\u1bc1\u1bc4\7\u0273\2\2\u1bc2\u1bc3\7\u026b\2\2\u1bc3")
        buf.write("\u1bc5\5\u040c\u0207\2\u1bc4\u1bc2\3\2\2\2\u1bc4\u1bc5")
        buf.write("\3\2\2\2\u1bc5\u1c59\3\2\2\2\u1bc6\u1bc7\7\u0239\2\2\u1bc7")
        buf.write("\u1bc9\7\u0272\2\2\u1bc8\u1bca\tU\2\2\u1bc9\u1bc8\3\2")
        buf.write("\2\2\u1bc9\u1bca\3\2\2\2\u1bca\u1bcc\3\2\2\2\u1bcb\u1bcd")
        buf.write("\tV\2\2\u1bcc\u1bcb\3\2\2\2\u1bcc\u1bcd\3\2\2\2\u1bcd")
        buf.write("\u1bce\3\2\2\2\u1bce\u1bd1\5\u0330\u0199\2\u1bcf\u1bd0")
        buf.write("\7\u0278\2\2\u1bd0\u1bd2\5\u0386\u01c4\2\u1bd1\u1bcf\3")
        buf.write("\2\2\2\u1bd1\u1bd2\3\2\2\2\u1bd2\u1bda\3\2\2\2\u1bd3\u1bd4")
        buf.write("\7\u0278\2\2\u1bd4\u1bd6\5\u0330\u0199\2\u1bd5\u1bd7\5")
        buf.write("\u03a8\u01d5\2\u1bd6\u1bd5\3\2\2\2\u1bd6\u1bd7\3\2\2\2")
        buf.write("\u1bd7\u1bd9\3\2\2\2\u1bd8\u1bd3\3\2\2\2\u1bd9\u1bdc\3")
        buf.write("\2\2\2\u1bda\u1bd8\3\2\2\2\u1bda\u1bdb\3\2\2\2\u1bdb\u1bdd")
        buf.write("\3\2\2\2\u1bdc\u1bda\3\2\2\2\u1bdd\u1be0\7\u0273\2\2\u1bde")
        buf.write("\u1bdf\7\u026b\2\2\u1bdf\u1be1\5\u040c\u0207\2\u1be0\u1bde")
        buf.write("\3\2\2\2\u1be0\u1be1\3\2\2\2\u1be1\u1c59\3\2\2\2\u1be2")
        buf.write("\u1be3\7\u023a\2\2\u1be3\u1be4\7\u0272\2\2\u1be4\u1be6")
        buf.write("\5\u0330\u0199\2\u1be5\u1be7\5\u0384\u01c3\2\u1be6\u1be5")
        buf.write("\3\2\2\2\u1be6\u1be7\3\2\2\2\u1be7\u1be8\3\2\2\2\u1be8")
        buf.write("\u1be9\7\u0273\2\2\u1be9\u1c59\3\2\2\2\u1bea\u1beb\7\u023e")
        buf.write("\2\2\u1beb\u1bec\7\u0272\2\2\u1bec\u1bed\tW\2\2\u1bed")
        buf.write("\u1bef\5\u0340\u01a1\2\u1bee\u1bf0\7\u022a\2\2\u1bef\u1bee")
        buf.write("\3\2\2\2\u1bef\u1bf0\3\2\2\2\u1bf0\u1bf1\3\2\2\2\u1bf1")
        buf.write("\u1bf4\7\u0273\2\2\u1bf2\u1bf3\7\u026b\2\2\u1bf3\u1bf5")
        buf.write("\5\u040c\u0207\2\u1bf4\u1bf2\3\2\2\2\u1bf4\u1bf5\3\2\2")
        buf.write("\2\u1bf5\u1c59\3\2\2\2\u1bf6\u1bf7\7\u023f\2\2\u1bf7\u1bfc")
        buf.write("\7\u0272\2\2\u1bf8\u1bf9\7\u0129\2\2\u1bf9\u1bfd\5\u0418")
        buf.write("\u020d\2\u1bfa\u1bfb\7\u009d\2\2\u1bfb\u1bfd\5\u0340\u01a1")
        buf.write("\2\u1bfc\u1bf8\3\2\2\2\u1bfc\u1bfa\3\2\2\2\u1bfd\u1c00")
        buf.write("\3\2\2\2\u1bfe\u1bff\7\u0278\2\2\u1bff\u1c01\5\u0340\u01a1")
        buf.write("\2\u1c00\u1bfe\3\2\2\2\u1c00\u1c01\3\2\2\2\u1c01\u1c02")
        buf.write("\3\2\2\2\u1c02\u1c05\7\u0273\2\2\u1c03\u1c04\7\u026b\2")
        buf.write("\2\u1c04\u1c06\5\u040c\u0207\2\u1c05\u1c03\3\2\2\2\u1c05")
        buf.write("\u1c06\3\2\2\2\u1c06\u1c59\3\2\2\2\u1c07\u1c08\7\u0240")
        buf.write("\2\2\u1c08\u1c09\7\u0272\2\2\u1c09\u1c0b\5\u0340\u01a1")
        buf.write("\2\u1c0a\u1c0c\5\u0384\u01c3\2\u1c0b\u1c0a\3\2\2\2\u1c0b")
        buf.write("\u1c0c\3\2\2\2\u1c0c\u1c0d\3\2\2\2\u1c0d\u1c0e\7\u01a3")
        buf.write("\2\2\u1c0e\u1c12\7[\2\2\u1c0f\u1c10\7\u014c\2\2\u1c10")
        buf.write("\u1c11\7\u0158\2\2\u1c11\u1c13\7\u0094\2\2\u1c12\u1c0f")
        buf.write("\3\2\2\2\u1c12\u1c13\3\2\2\2\u1c13\u1c14\3\2\2\2\u1c14")
        buf.write("\u1c17\7\u0273\2\2\u1c15\u1c16\7\u026b\2\2\u1c16\u1c18")
        buf.write("\5\u040c\u0207\2\u1c17\u1c15\3\2\2\2\u1c17\u1c18\3\2\2")
        buf.write("\2\u1c18\u1c59\3\2\2\2\u1c19\u1c1a\7\u0241\2\2\u1c1a\u1c1b")
        buf.write("\7\u0272\2\2\u1c1b\u1c1e\5\u0340\u01a1\2\u1c1c\u1c1d\7")
        buf.write("\u0278\2\2\u1c1d\u1c1f\5\u0390\u01c9\2\u1c1e\u1c1c\3\2")
        buf.write("\2\2\u1c1e\u1c1f\3\2\2\2\u1c1f\u1c22\3\2\2\2\u1c20\u1c21")
        buf.write("\7\u0278\2\2\u1c21\u1c23\5\u0392\u01ca\2\u1c22\u1c20\3")
        buf.write("\2\2\2\u1c22\u1c23\3\2\2\2\u1c23\u1c24\3\2\2\2\u1c24\u1c27")
        buf.write("\7\u0273\2\2\u1c25\u1c26\7\u026b\2\2\u1c26\u1c28\5\u040c")
        buf.write("\u0207\2\u1c27\u1c25\3\2\2\2\u1c27\u1c28\3\2\2\2\u1c28")
        buf.write("\u1c59\3\2\2\2\u1c29\u1c2a\7\u0243\2\2\u1c2a\u1c2b\7\u0272")
        buf.write("\2\2\u1c2b\u1c2c\tW\2\2\u1c2c\u1c2f\5\u0340\u01a1\2\u1c2d")
        buf.write("\u1c2e\7\26\2\2\u1c2e\u1c30\5\u0402\u0202\2\u1c2f\u1c2d")
        buf.write("\3\2\2\2\u1c2f\u1c30\3\2\2\2\u1c30\u1c32\3\2\2\2\u1c31")
        buf.write("\u1c33\5\u0394\u01cb\2\u1c32\u1c31\3\2\2\2\u1c32\u1c33")
        buf.write("\3\2\2\2\u1c33\u1c35\3\2\2\2\u1c34\u1c36\5\u0396\u01cc")
        buf.write("\2\u1c35\u1c34\3\2\2\2\u1c35\u1c36\3\2\2\2\u1c36\u1c38")
        buf.write("\3\2\2\2\u1c37\u1c39\5\u0398\u01cd\2\u1c38\u1c37\3\2\2")
        buf.write("\2\u1c38\u1c39\3\2\2\2\u1c39\u1c3c\3\2\2\2\u1c3a\u1c3b")
        buf.write("\tX\2\2\u1c3b\u1c3d\7\177\2\2\u1c3c\u1c3a\3\2\2\2\u1c3c")
        buf.write("\u1c3d\3\2\2\2\u1c3d\u1c3e\3\2\2\2\u1c3e\u1c41\7\u0273")
        buf.write("\2\2\u1c3f\u1c40\7\u026b\2\2\u1c40\u1c42\5\u040c\u0207")
        buf.write("\2\u1c41\u1c3f\3\2\2\2\u1c41\u1c42\3\2\2\2\u1c42\u1c59")
        buf.write("\3\2\2\2\u1c43\u1c44\7\u0244\2\2\u1c44\u1c46\7\u0272\2")
        buf.write("\2\u1c45\u1c47\5\u0388\u01c5\2\u1c46\u1c45\3\2\2\2\u1c46")
        buf.write("\u1c47\3\2\2\2\u1c47\u1c48\3\2\2\2\u1c48\u1c4a\5\u0340")
        buf.write("\u01a1\2\u1c49\u1c4b\5\u0384\u01c3\2\u1c4a\u1c49\3\2\2")
        buf.write("\2\u1c4a\u1c4b\3\2\2\2\u1c4b\u1c51\3\2\2\2\u1c4c\u1c4d")
        buf.write("\7J\2\2\u1c4d\u1c4e\5\u038a\u01c6\2\u1c4e\u1c4f\7\u0278")
        buf.write("\2\2\u1c4f\u1c50\5\u038a\u01c6\2\u1c50\u1c52\3\2\2\2\u1c51")
        buf.write("\u1c4c\3\2\2\2\u1c51\u1c52\3\2\2\2\u1c52\u1c53\3\2\2\2")
        buf.write("\u1c53\u1c56\7\u0273\2\2\u1c54\u1c55\7\u026b\2\2\u1c55")
        buf.write("\u1c57\5\u040c\u0207\2\u1c56\u1c54\3\2\2\2\u1c56\u1c57")
        buf.write("\3\2\2\2\u1c57\u1c59\3\2\2\2\u1c58\u1b1c\3\2\2\2\u1c58")
        buf.write("\u1b1e\3\2\2\2\u1c58\u1b23\3\2\2\2\u1c58\u1b34\3\2\2\2")
        buf.write("\u1c58\u1b39\3\2\2\2\u1c58\u1b40\3\2\2\2\u1c58\u1b4b\3")
        buf.write("\2\2\2\u1c58\u1b52\3\2\2\2\u1c58\u1b5a\3\2\2\2\u1c58\u1b64")
        buf.write("\3\2\2\2\u1c58\u1b6b\3\2\2\2\u1c58\u1b7d\3\2\2\2\u1c58")
        buf.write("\u1b84\3\2\2\2\u1c58\u1b94\3\2\2\2\u1c58\u1b9e\3\2\2\2")
        buf.write("\u1c58\u1bac\3\2\2\2\u1c58\u1bb7\3\2\2\2\u1c58\u1bc6\3")
        buf.write("\2\2\2\u1c58\u1be2\3\2\2\2\u1c58\u1bea\3\2\2\2\u1c58\u1bf6")
        buf.write("\3\2\2\2\u1c58\u1c07\3\2\2\2\u1c58\u1c19\3\2\2\2\u1c58")
        buf.write("\u1c29\3\2\2\2\u1c58\u1c43\3\2\2\2\u1c59\u1c5f\3\2\2\2")
        buf.write("\u1c5a\u1c5b\f\30\2\2\u1c5b\u1c5c\7\5\2\2\u1c5c\u1c5e")
        buf.write("\5\u0402\u0202\2\u1c5d\u1c5a\3\2\2\2\u1c5e\u1c61\3\2\2")
        buf.write("\2\u1c5f\u1c5d\3\2\2\2\u1c5f\u1c60\3\2\2\2\u1c60\u0369")
        buf.write("\3\2\2\2\u1c61\u1c5f\3\2\2\2\u1c62\u1c63\5\u036c\u01b7")
        buf.write("\2\u1c63\u1c65\5\u03fa\u01fe\2\u1c64\u1c66\5\u0372\u01ba")
        buf.write("\2\u1c65\u1c64\3\2\2\2\u1c65\u1c66\3\2\2\2\u1c66\u1c75")
        buf.write("\3\2\2\2\u1c67\u1c68\7b\2\2\u1c68\u1c6e\7\u0272\2\2\u1c69")
        buf.write("\u1c6f\5\u03f4\u01fb\2\u1c6a\u1c6c\t=\2\2\u1c6b\u1c6a")
        buf.write("\3\2\2\2\u1c6b\u1c6c\3\2\2\2\u1c6c\u1c6d\3\2\2\2\u1c6d")
        buf.write("\u1c6f\5\u0340\u01a1\2\u1c6e\u1c69\3\2\2\2\u1c6e\u1c6b")
        buf.write("\3\2\2\2\u1c6f\u1c70\3\2\2\2\u1c70\u1c72\7\u0273\2\2\u1c71")
        buf.write("\u1c73\5\u0372\u01ba\2\u1c72\u1c71\3\2\2\2\u1c72\u1c73")
        buf.write("\3\2\2\2\u1c73\u1c75\3\2\2\2\u1c74\u1c62\3\2\2\2\u1c74")
        buf.write("\u1c67\3\2\2\2\u1c75\u036b\3\2\2\2\u1c76\u1c77\tY\2\2")
        buf.write("\u1c77\u036d\3\2\2\2\u1c78\u1c79\tZ\2\2\u1c79\u036f\3")
        buf.write("\2\2\2\u1c7a\u1c7b\t[\2\2\u1c7b\u0371\3\2\2\2\u1c7c\u1c7d")
        buf.write("\7\u0164\2\2\u1c7d\u1c7f\7\u0272\2\2\u1c7e\u1c80\5\u0298")
        buf.write("\u014d\2\u1c7f\u1c7e\3\2\2\2\u1c7f\u1c80\3\2\2\2\u1c80")
        buf.write("\u1c85\3\2\2\2\u1c81\u1c83\5\u02dc\u016f\2\u1c82\u1c84")
        buf.write("\5\u0374\u01bb\2\u1c83\u1c82\3\2\2\2\u1c83\u1c84\3\2\2")
        buf.write("\2\u1c84\u1c86\3\2\2\2\u1c85\u1c81\3\2\2\2\u1c85\u1c86")
        buf.write("\3\2\2\2\u1c86\u1c87\3\2\2\2\u1c87\u1c88\7\u0273\2\2\u1c88")
        buf.write("\u0373\3\2\2\2\u1c89\u1c90\5\u0376\u01bc\2\u1c8a\u1c8b")
        buf.write("\7%\2\2\u1c8b\u1c8c\5\u0378\u01bd\2\u1c8c\u1c8d\7\21\2")
        buf.write("\2\u1c8d\u1c8e\5\u0378\u01bd\2\u1c8e\u1c91\3\2\2\2\u1c8f")
        buf.write("\u1c91\5\u0378\u01bd\2\u1c90\u1c8a\3\2\2\2\u1c90\u1c8f")
        buf.write("\3\2\2\2\u1c91\u0375\3\2\2\2\u1c92\u1c93\t\\\2\2\u1c93")
        buf.write("\u0377\3\2\2\2\u1c94\u1c95\7\u020a\2\2\u1c95\u1c9c\7\u017f")
        buf.write("\2\2\u1c96\u1c97\7g\2\2\u1c97\u1c9c\7\u01aa\2\2\u1c98")
        buf.write("\u1c99\5\u0340\u01a1\2\u1c99\u1c9a\t]\2\2\u1c9a\u1c9c")
        buf.write("\3\2\2\2\u1c9b\u1c94\3\2\2\2\u1c9b\u1c96\3\2\2\2\u1c9b")
        buf.write("\u1c98\3\2\2\2\u1c9c\u0379\3\2\2\2\u1c9d\u1ca7\7\u0219")
        buf.write("\2\2\u1c9e\u1ca8\5\u03f4\u01fb\2\u1c9f\u1ca4\5\u037c\u01bf")
        buf.write("\2\u1ca0\u1ca1\7\u0278\2\2\u1ca1\u1ca3\5\u037c\u01bf\2")
        buf.write("\u1ca2\u1ca0\3\2\2\2\u1ca3\u1ca6\3\2\2\2\u1ca4\u1ca2\3")
        buf.write("\2\2\2\u1ca4\u1ca5\3\2\2\2\u1ca5\u1ca8\3\2\2\2\u1ca6\u1ca4")
        buf.write("\3\2\2\2\u1ca7\u1c9e\3\2\2\2\u1ca7\u1c9f\3\2\2\2\u1ca8")
        buf.write("\u037b\3\2\2\2\u1ca9\u1cab\7\u00d3\2\2\u1caa\u1cac\7\u0162")
        buf.write("\2\2\u1cab\u1caa\3\2\2\2\u1cab\u1cac\3\2\2\2\u1cac\u1caf")
        buf.write("\3\2\2\2\u1cad\u1caf\7\u0162\2\2\u1cae\u1ca9\3\2\2\2\u1cae")
        buf.write("\u1cad\3\2\2\2\u1cae\u1caf\3\2\2\2\u1caf\u1cb0\3\2\2\2")
        buf.write("\u1cb0\u1cb2\5\u0286\u0144\2\u1cb1\u1cb3\5\u03a8\u01d5")
        buf.write("\2\u1cb2\u1cb1\3\2\2\2\u1cb2\u1cb3\3\2\2\2\u1cb3\u037d")
        buf.write("\3\2\2\2\u1cb4\u1cb5\7\u015f\2\2\u1cb5\u1cb6\7\64\2\2")
        buf.write("\u1cb6\u1cb7\5\u0340\u01a1\2\u1cb7\u037f\3\2\2\2\u1cb8")
        buf.write("\u1cb9\7\u0230\2\2\u1cb9\u1cba\7\u00c5\2\2\u1cba\u1cbb")
        buf.write("\7\u0272\2\2\u1cbb\u1cbc\5\u02dc\u016f\2\u1cbc\u1cbd\7")
        buf.write("\u0273\2\2\u1cbd\u1cc0\3\2\2\2\u1cbe\u1cc0\5\u0372\u01ba")
        buf.write("\2\u1cbf\u1cb8\3\2\2\2\u1cbf\u1cbe\3\2\2\2\u1cc0\u0381")
        buf.write("\3\2\2\2\u1cc1\u1cd3\7a\2\2\u1cc2\u1cc4\7\u0124\2\2\u1cc3")
        buf.write("\u1cc5\7\35\2\2\u1cc4\u1cc3\3\2\2\2\u1cc4\u1cc5\3\2\2")
        buf.write("\2\u1cc5\u1cd4\3\2\2\2\u1cc6\u1cc7\7\u0272\2\2\u1cc7\u1ccc")
        buf.write("\5\u03b6\u01dc\2\u1cc8\u1cc9\7\u0278\2\2\u1cc9\u1ccb\5")
        buf.write("\u03b6\u01dc\2\u1cca\u1cc8\3\2\2\2\u1ccb\u1cce\3\2\2\2")
        buf.write("\u1ccc\u1cca\3\2\2\2\u1ccc\u1ccd\3\2\2\2\u1ccd\u1ccf\3")
        buf.write("\2\2\2\u1cce\u1ccc\3\2\2\2\u1ccf\u1cd0\7\u0273\2\2\u1cd0")
        buf.write("\u1cd1\7\u021c\2\2\u1cd1\u1cd2\5\u032c\u0197\2\u1cd2\u1cd4")
        buf.write("\3\2\2\2\u1cd3\u1cc2\3\2\2\2\u1cd3\u1cc6\3\2\2\2\u1cd4")
        buf.write("\u0383\3\2\2\2\u1cd5\u1cd8\7\u016d\2\2\u1cd6\u1cd7\7\64")
        buf.write("\2\2\u1cd7\u1cd9\7\u021b\2\2\u1cd8\u1cd6\3\2\2\2\u1cd8")
        buf.write("\u1cd9\3\2\2\2\u1cd9\u1cda\3\2\2\2\u1cda\u1cdc\5\u0330")
        buf.write("\u0199\2\u1cdb\u1cdd\5\u03a8\u01d5\2\u1cdc\u1cdb\3\2\2")
        buf.write("\2\u1cdc\u1cdd\3\2\2\2\u1cdd\u1cde\3\2\2\2\u1cde\u1cdf")
        buf.write("\7\u0278\2\2\u1cdf\u1ce1\5\u0330\u0199\2\u1ce0\u1ce2\5")
        buf.write("\u03a8\u01d5\2\u1ce1\u1ce0\3\2\2\2\u1ce1\u1ce2\3\2\2\2")
        buf.write("\u1ce2\u0385\3\2\2\2\u1ce3\u1ce4\7\u0236\2\2\u1ce4\u1ce6")
        buf.write("\7\u0272\2\2\u1ce5\u1ce7\tU\2\2\u1ce6\u1ce5\3\2\2\2\u1ce6")
        buf.write("\u1ce7\3\2\2\2\u1ce7\u1ce9\3\2\2\2\u1ce8\u1cea\t^\2\2")
        buf.write("\u1ce9\u1ce8\3\2\2\2\u1ce9\u1cea\3\2\2\2\u1cea\u1ceb\3")
        buf.write("\2\2\2\u1ceb\u1cf0\5\u038e\u01c8\2\u1cec\u1ced\7\u0278")
        buf.write("\2\2\u1ced\u1cef\5\u038e\u01c8\2\u1cee\u1cec\3\2\2\2\u1cef")
        buf.write("\u1cf2\3\2\2\2\u1cf0\u1cee\3\2\2\2\u1cf0\u1cf1\3\2\2\2")
        buf.write("\u1cf1\u1cf3\3\2\2\2\u1cf2\u1cf0\3\2\2\2\u1cf3\u1cf4\7")
        buf.write("\u0273\2\2\u1cf4\u0387\3\2\2\2\u1cf5\u1cf6\7\u023d\2\2")
        buf.write("\u1cf6\u1cfa\7\u0272\2\2\u1cf7\u1cf8\5\u0340\u01a1\2\u1cf8")
        buf.write("\u1cf9\5\u03a8\u01d5\2\u1cf9\u1cfb\3\2\2\2\u1cfa\u1cf7")
        buf.write("\3\2\2\2\u1cfa\u1cfb\3\2\2\2\u1cfb\u1d02\3\2\2\2\u1cfc")
        buf.write("\u1cfd\7\u0278\2\2\u1cfd\u1cfe\5\u0340\u01a1\2\u1cfe\u1cff")
        buf.write("\5\u03a8\u01d5\2\u1cff\u1d01\3\2\2\2\u1d00\u1cfc\3\2\2")
        buf.write("\2\u1d01\u1d04\3\2\2\2\u1d02\u1d00\3\2\2\2\u1d02\u1d03")
        buf.write("\3\2\2\2\u1d03\u1d06\3\2\2\2\u1d04\u1d02\3\2\2\2\u1d05")
        buf.write("\u1d07\5\u038c\u01c7\2\u1d06\u1d05\3\2\2\2\u1d06\u1d07")
        buf.write("\3\2\2\2\u1d07\u1d08\3\2\2\2\u1d08\u1d09\7\u0273\2\2\u1d09")
        buf.write("\u0389\3\2\2\2\u1d0a\u1d15\5\u03b4\u01db\2\u1d0b\u1d0c")
        buf.write("\7\u00b7\2\2\u1d0c\u1d16\7\u0160\2\2\u1d0d\u1d10\5\u0402")
        buf.write("\u0202\2\u1d0e\u1d0f\7\u016e\2\2\u1d0f\u1d11\5\u0340\u01a1")
        buf.write("\2\u1d10\u1d0e\3\2\2\2\u1d10\u1d11\3\2\2\2\u1d11\u1d13")
        buf.write("\3\2\2\2\u1d12\u1d14\5\u038c\u01c7\2\u1d13\u1d12\3\2\2")
        buf.write("\2\u1d13\u1d14\3\2\2\2\u1d14\u1d16\3\2\2\2\u1d15\u1d0b")
        buf.write("\3\2\2\2\u1d15\u1d0d\3\2\2\2\u1d16\u038b\3\2\2\2\u1d17")
        buf.write("\u1d18\7~\2\2\u1d18\u1d19\5\u0340\u01a1\2\u1d19\u038d")
        buf.write("\3\2\2\2\u1d1a\u1d21\5\u0330\u0199\2\u1d1b\u1d1f\7\26")
        buf.write("\2\2\u1d1c\u1d20\5\u041a\u020e\2\u1d1d\u1d1e\7\u009d\2")
        buf.write("\2\u1d1e\u1d20\5\u0340\u01a1\2\u1d1f\u1d1c\3\2\2\2\u1d1f")
        buf.write("\u1d1d\3\2\2\2\u1d20\u1d22\3\2\2\2\u1d21\u1d1b\3\2\2\2")
        buf.write("\u1d21\u1d22\3\2\2\2\u1d22\u038f\3\2\2\2\u1d23\u1d27\7")
        buf.write("\u0224\2\2\u1d24\u1d25\7\u0134\2\2\u1d25\u1d28\7\u021b")
        buf.write("\2\2\u1d26\u1d28\5\u0330\u0199\2\u1d27\u1d24\3\2\2\2\u1d27")
        buf.write("\u1d26\3\2\2\2\u1d28\u0391\3\2\2\2\u1d29\u1d2f\7\u01d9")
        buf.write("\2\2\u1d2a\u1d30\7\u0247\2\2\u1d2b\u1d2d\7\u0134\2\2\u1d2c")
        buf.write("\u1d2e\7\u021b\2\2\u1d2d\u1d2c\3\2\2\2\u1d2d\u1d2e\3\2")
        buf.write("\2\2\u1d2e\u1d30\3\2\2\2\u1d2f\u1d2a\3\2\2\2\u1d2f\u1d2b")
        buf.write("\3\2\2\2\u1d30\u0393\3\2\2\2\u1d31\u1d32\7\u0096\2\2\u1d32")
        buf.write("\u1d33\5\u0340\u01a1\2\u1d33\u0395\3\2\2\2\u1d34\u1d35")
        buf.write("\7\u0224\2\2\u1d35\u1d36\5\u0340\u01a1\2\u1d36\u0397\3")
        buf.write("\2\2\2\u1d37\u1d38\7\u0134\2\2\u1d38\u1d40\7\u00d7\2\2")
        buf.write("\u1d39\u1d3d\7\u00d7\2\2\u1d3a\u1d3b\7\u01cf\2\2\u1d3b")
        buf.write("\u1d3c\7\u0289\2\2\u1d3c\u1d3e\5\u0340\u01a1\2\u1d3d\u1d3a")
        buf.write("\3\2\2\2\u1d3d\u1d3e\3\2\2\2\u1d3e\u1d40\3\2\2\2\u1d3f")
        buf.write("\u1d37\3\2\2\2\u1d3f\u1d39\3\2\2\2\u1d40\u0399\3\2\2\2")
        buf.write("\u1d41\u1d48\7\u0279\2\2\u1d42\u1d48\5\u039c\u01cf\2\u1d43")
        buf.write("\u1d48\5\u03a0\u01d1\2\u1d44\u1d48\5\u03a2\u01d2\2\u1d45")
        buf.write("\u1d48\5\u039e\u01d0\2\u1d46\u1d48\5\u03a4\u01d3\2\u1d47")
        buf.write("\u1d41\3\2\2\2\u1d47\u1d42\3\2\2\2\u1d47\u1d43\3\2\2\2")
        buf.write("\u1d47\u1d44\3\2\2\2\u1d47\u1d45\3\2\2\2\u1d47\u1d46\3")
        buf.write("\2\2\2\u1d48\u039b\3\2\2\2\u1d49\u1d4a\7\u022c\2\2\u1d4a")
        buf.write("\u1d50\t_\2\2\u1d4b\u1d4c\7\u00a6\2\2\u1d4c\u1d4d\t`\2")
        buf.write("\2\u1d4d\u1d51\ta\2\2\u1d4e\u1d4f\7]\2\2\u1d4f\u1d51\t")
        buf.write("b\2\2\u1d50\u1d4b\3\2\2\2\u1d50\u1d4e\3\2\2\2\u1d51\u039d")
        buf.write("\3\2\2\2\u1d52\u1d53\7\u01c4\2\2\u1d53\u1d59\5\u0426\u0214")
        buf.write("\2\u1d54\u1d5a\7\u026e\2\2\u1d55\u1d5a\7\u0158\2\2\u1d56")
        buf.write("\u1d5a\7\u0153\2\2\u1d57\u1d5a\5\u0412\u020a\2\u1d58\u1d5a")
        buf.write("\5\u0426\u0214\2\u1d59\u1d54\3\2\2\2\u1d59\u1d55\3\2\2")
        buf.write("\2\u1d59\u1d56\3\2\2\2\u1d59\u1d57\3\2\2\2\u1d59\u1d58")
        buf.write("\3\2\2\2\u1d5a\u039f\3\2\2\2\u1d5b\u1d5c\7\u00a6\2\2\u1d5c")
        buf.write("\u03a1\3\2\2\2\u1d5d\u1d5e\7\u0290\2\2\u1d5e\u03a3\3\2")
        buf.write("\2\2\u1d5f\u1d60\7\u01c8\2\2\u1d60\u1d64\7\u009a\2\2\u1d61")
        buf.write("\u1d62\7\u01c8\2\2\u1d62\u1d64\7\u009b\2\2\u1d63\u1d5f")
        buf.write("\3\2\2\2\u1d63\u1d61\3\2\2\2\u1d64\u03a5\3\2\2\2\u1d65")
        buf.write("\u1d67\tc\2\2\u1d66\u1d68\7\u00b7\2\2\u1d67\u1d66\3\2")
        buf.write("\2\2\u1d67\u1d68\3\2\2\2\u1d68\u1d69\3\2\2\2\u1d69\u1d6a")
        buf.write("\5\u032c\u0197\2\u1d6a\u03a7\3\2\2\2\u1d6b\u1d6d\7\26")
        buf.write("\2\2\u1d6c\u1d6b\3\2\2\2\u1d6c\u1d6d\3\2\2\2\u1d6d\u1d70")
        buf.write("\3\2\2\2\u1d6e\u1d71\5\u0418\u020d\2\u1d6f\u1d71\5\u03ac")
        buf.write("\u01d7\2\u1d70\u1d6e\3\2\2\2\u1d70\u1d6f\3\2\2\2\u1d71")
        buf.write("\u1d74\3\2\2\2\u1d72\u1d74\7\26\2\2\u1d73\u1d6c\3\2\2")
        buf.write("\2\u1d73\u1d72\3\2\2\2\u1d74\u03a9\3\2\2\2\u1d75\u1d77")
        buf.write("\7\26\2\2\u1d76\u1d75\3\2\2\2\u1d76\u1d77\3\2\2\2\u1d77")
        buf.write("\u1d7a\3\2\2\2\u1d78\u1d7b\5\u0418\u020d\2\u1d79\u1d7b")
        buf.write("\5\u03ac\u01d7\2\u1d7a\u1d78\3\2\2\2\u1d7a\u1d79\3\2\2")
        buf.write("\2\u1d7b\u03ab\3\2\2\2\u1d7c\u1d7d\5\u0416\u020c\2\u1d7d")
        buf.write("\u03ad\3\2\2\2\u1d7e\u1d81\7\u022d\2\2\u1d7f\u1d82\5\u03b0")
        buf.write("\u01d9\2\u1d80\u1d82\5\u0330\u0199\2\u1d81\u1d7f\3\2\2")
        buf.write("\2\u1d81\u1d80\3\2\2\2\u1d82\u03af\3\2\2\2\u1d83\u1d84")
        buf.write("\7g\2\2\u1d84\u1d85\7\u0152\2\2\u1d85\u1d86\5\u03e6\u01f4")
        buf.write("\2\u1d86\u03b1\3\2\2\2\u1d87\u1d88\7\u00ec\2\2\u1d88\u1d8d")
        buf.write("\5\u03e2\u01f2\2\u1d89\u1d8a\7\u0278\2\2\u1d8a\u1d8c\5")
        buf.write("\u03e2\u01f2\2\u1d8b\u1d89\3\2\2\2\u1d8c\u1d8f\3\2\2\2")
        buf.write("\u1d8d\u1d8b\3\2\2\2\u1d8d\u1d8e\3\2\2\2\u1d8e\u1d9c\3")
        buf.write("\2\2\2\u1d8f\u1d8d\3\2\2\2\u1d90\u1d91\7\63\2\2\u1d91")
        buf.write("\u1d92\7H\2\2\u1d92\u1d93\7\u00ec\2\2\u1d93\u1d98\5\u03e2")
        buf.write("\u01f2\2\u1d94\u1d95\7\u0278\2\2\u1d95\u1d97\5\u03e2\u01f2")
        buf.write("\2\u1d96\u1d94\3\2\2\2\u1d97\u1d9a\3\2\2\2\u1d98\u1d96")
        buf.write("\3\2\2\2\u1d98\u1d99\3\2\2\2\u1d99\u1d9c\3\2\2\2\u1d9a")
        buf.write("\u1d98\3\2\2\2\u1d9b\u1d87\3\2\2\2\u1d9b\u1d90\3\2\2\2")
        buf.write("\u1d9c\u03b3\3\2\2\2\u1d9d\u1da0\5\u0418\u020d\2\u1d9e")
        buf.write("\u1da0\5\u0416\u020c\2\u1d9f\u1d9d\3\2\2\2\u1d9f\u1d9e")
        buf.write("\3\2\2\2\u1da0\u03b5\3\2\2\2\u1da1\u1da2\5\u0418\u020d")
        buf.write("\2\u1da2\u03b7\3\2\2\2\u1da3\u1da4\5\u0418\u020d\2\u1da4")
        buf.write("\u03b9\3\2\2\2\u1da5\u1da6\5\u0418\u020d\2\u1da6\u03bb")
        buf.write("\3\2\2\2\u1da7\u1da8\5\u0418\u020d\2\u1da8\u03bd\3\2\2")
        buf.write("\2\u1da9\u1daa\5\u0418\u020d\2\u1daa\u03bf\3\2\2\2\u1dab")
        buf.write("\u1dac\5\u0418\u020d\2\u1dac\u03c1\3\2\2\2\u1dad\u1db2")
        buf.write("\5\u0418\u020d\2\u1dae\u1daf\7\u026b\2\2\u1daf\u1db1\5")
        buf.write("\u041a\u020e\2\u1db0\u1dae\3\2\2\2\u1db1\u1db4\3\2\2\2")
        buf.write("\u1db2\u1db0\3\2\2\2\u1db2\u1db3\3\2\2\2\u1db3\u1db7\3")
        buf.write("\2\2\2\u1db4\u1db2\3\2\2\2\u1db5\u1db6\7\u027a\2\2\u1db6")
        buf.write("\u1db8\5\u03ec\u01f7\2\u1db7\u1db5\3\2\2\2\u1db7\u1db8")
        buf.write("\3\2\2\2\u1db8\u03c3\3\2\2\2\u1db9\u1dba\5\u0418\u020d")
        buf.write("\2\u1dba\u03c5\3\2\2\2\u1dbb\u1dbe\5\u0418\u020d\2\u1dbc")
        buf.write("\u1dbd\7\u026b\2\2\u1dbd\u1dbf\5\u041a\u020e\2\u1dbe\u1dbc")
        buf.write("\3\2\2\2\u1dbe\u1dbf\3\2\2\2\u1dbf\u03c7\3\2\2\2\u1dc0")
        buf.write("\u1dc1\5\u0418\u020d\2\u1dc1\u03c9\3\2\2\2\u1dc2\u1dc3")
        buf.write("\5\u0418\u020d\2\u1dc3\u03cb\3\2\2\2\u1dc4\u1dc5\5\u0418")
        buf.write("\u020d\2\u1dc5\u03cd\3\2\2\2\u1dc6\u1dcb\5\u0418\u020d")
        buf.write("\2\u1dc7\u1dc8\7\u026b\2\2\u1dc8\u1dca\5\u041a\u020e\2")
        buf.write("\u1dc9\u1dc7\3\2\2\2\u1dca\u1dcd\3\2\2\2\u1dcb\u1dc9\3")
        buf.write("\2\2\2\u1dcb\u1dcc\3\2\2\2\u1dcc\u03cf\3\2\2\2\u1dcd\u1dcb")
        buf.write("\3\2\2\2\u1dce\u1dcf\5\u0418\u020d\2\u1dcf\u03d1\3\2\2")
        buf.write("\2\u1dd0\u1dd5\5\u0418\u020d\2\u1dd1\u1dd2\7\u026b\2\2")
        buf.write("\u1dd2\u1dd4\5\u041a\u020e\2\u1dd3\u1dd1\3\2\2\2\u1dd4")
        buf.write("\u1dd7\3\2\2\2\u1dd5\u1dd3\3\2\2\2\u1dd5\u1dd6\3\2\2\2")
        buf.write("\u1dd6\u1dda\3\2\2\2\u1dd7\u1dd5\3\2\2\2\u1dd8\u1dd9\7")
        buf.write("\u027a\2\2\u1dd9\u1ddb\5\u03ec\u01f7\2\u1dda\u1dd8\3\2")
        buf.write("\2\2\u1dda\u1ddb\3\2\2\2\u1ddb\u03d3\3\2\2\2\u1ddc\u1ddd")
        buf.write("\5\u041a\u020e\2\u1ddd\u03d5\3\2\2\2\u1dde\u1de3\5\u041a")
        buf.write("\u020e\2\u1ddf\u1de0\7\u026b\2\2\u1de0\u1de2\5\u041a\u020e")
        buf.write("\2\u1de1\u1ddf\3\2\2\2\u1de2\u1de5\3\2\2\2\u1de3\u1de1")
        buf.write("\3\2\2\2\u1de3\u1de4\3\2\2\2\u1de4\u03d7\3\2\2\2\u1de5")
        buf.write("\u1de3\3\2\2\2\u1de6\u1deb\5\u041a\u020e\2\u1de7\u1de8")
        buf.write("\7\u026b\2\2\u1de8\u1dea\5\u041a\u020e\2\u1de9\u1de7\3")
        buf.write("\2\2\2\u1dea\u1ded\3\2\2\2\u1deb\u1de9\3\2\2\2\u1deb\u1dec")
        buf.write("\3\2\2\2\u1dec\u03d9\3\2\2\2\u1ded\u1deb\3\2\2\2\u1dee")
        buf.write("\u1df3\5\u0418\u020d\2\u1def\u1df0\7\u026b\2\2\u1df0\u1df2")
        buf.write("\5\u041a\u020e\2\u1df1\u1def\3\2\2\2\u1df2\u1df5\3\2\2")
        buf.write("\2\u1df3\u1df1\3\2\2\2\u1df3\u1df4\3\2\2\2\u1df4\u03db")
        buf.write("\3\2\2\2\u1df5\u1df3\3\2\2\2\u1df6\u1df9\5\u0418\u020d")
        buf.write("\2\u1df7\u1df8\7\u026b\2\2\u1df8\u1dfa\5\u041a\u020e\2")
        buf.write("\u1df9\u1df7\3\2\2\2\u1df9\u1dfa\3\2\2\2\u1dfa\u03dd\3")
        buf.write("\2\2\2\u1dfb\u1dfe\5\u0418\u020d\2\u1dfc\u1dfd\7\u026b")
        buf.write("\2\2\u1dfd\u1dff\5\u041a\u020e\2\u1dfe\u1dfc\3\2\2\2\u1dfe")
        buf.write("\u1dff\3\2\2\2\u1dff\u03df\3\2\2\2\u1e00\u1e03\5\u0418")
        buf.write("\u020d\2\u1e01\u1e02\7\u026b\2\2\u1e02\u1e04\5\u041a\u020e")
        buf.write("\2\u1e03\u1e01\3\2\2\2\u1e03\u1e04\3\2\2\2\u1e04\u03e1")
        buf.write("\3\2\2\2\u1e05\u1e08\5\u03f2\u01fa\2\u1e06\u1e08\5\u040a")
        buf.write("\u0206\2\u1e07\u1e05\3\2\2\2\u1e07\u1e06\3\2\2\2\u1e08")
        buf.write("\u03e3\3\2\2\2\u1e09\u1e0a\5\u0418\u020d\2\u1e0a\u03e5")
        buf.write("\3\2\2\2\u1e0b\u1e0e\5\u0418\u020d\2\u1e0c\u1e0e\5\u040a")
        buf.write("\u0206\2\u1e0d\u1e0b\3\2\2\2\u1e0d\u1e0c\3\2\2\2\u1e0e")
        buf.write("\u03e7\3\2\2\2\u1e0f\u1e12\5\u0418\u020d\2\u1e10\u1e12")
        buf.write("\5\u040a\u0206\2\u1e11\u1e0f\3\2\2\2\u1e11\u1e10\3\2\2")
        buf.write("\2\u1e12\u03e9\3\2\2\2\u1e13\u1e16\5\u0418\u020d\2\u1e14")
        buf.write("\u1e15\7\u026b\2\2\u1e15\u1e17\5\u041a\u020e\2\u1e16\u1e14")
        buf.write("\3\2\2\2\u1e16\u1e17\3\2\2\2\u1e17\u03eb\3\2\2\2\u1e18")
        buf.write("\u1e19\5\u0418\u020d\2\u1e19\u03ed\3\2\2\2\u1e1a\u1e1f")
        buf.write("\5\u0418\u020d\2\u1e1b\u1e1c\7\u026b\2\2\u1e1c\u1e1e\5")
        buf.write("\u041a\u020e\2\u1e1d\u1e1b\3\2\2\2\u1e1e\u1e21\3\2\2\2")
        buf.write("\u1e1f\u1e1d\3\2\2\2\u1e1f\u1e20\3\2\2\2\u1e20\u03ef\3")
        buf.write("\2\2\2\u1e21\u1e1f\3\2\2\2\u1e22\u1e26\5\u03f2\u01fa\2")
        buf.write("\u1e23\u1e24\7\u027a\2\2\u1e24\u1e27\5\u03ec\u01f7\2\u1e25")
        buf.write("\u1e27\5\u03a6\u01d4\2\u1e26\u1e23\3\2\2\2\u1e26\u1e25")
        buf.write("\3\2\2\2\u1e26\u1e27\3\2\2\2\u1e27\u03f1\3\2\2\2\u1e28")
        buf.write("\u1e2d\5\u041a\u020e\2\u1e29\u1e2a\7\u026b\2\2\u1e2a\u1e2c")
        buf.write("\5\u041a\u020e\2\u1e2b\u1e29\3\2\2\2\u1e2c\u1e2f\3\2\2")
        buf.write("\2\u1e2d\u1e2b\3\2\2\2\u1e2d\u1e2e\3\2\2\2\u1e2e\u03f3")
        buf.write("\3\2\2\2\u1e2f\u1e2d\3\2\2\2\u1e30\u1e31\7\u0275\2\2\u1e31")
        buf.write("\u03f5\3\2\2\2\u1e32\u1e33\7\u00f4\2\2\u1e33\u1e34\7\u0272")
        buf.write("\2\2\u1e34\u1e35\7\u0251\2\2\u1e35\u1e36\tF\2\2\u1e36")
        buf.write("\u1e37\5\u02dc\u016f\2\u1e37\u1e39\7\u0273\2\2\u1e38\u1e3a")
        buf.write("\5\u0372\u01ba\2\u1e39\u1e38\3\2\2\2\u1e39\u1e3a\3\2\2")
        buf.write("\2\u1e3a\u03f7\3\2\2\2\u1e3b\u1e3d\7\u0272\2\2\u1e3c\u1e3e")
        buf.write("\5\u0400\u0201\2\u1e3d\u1e3c\3\2\2\2\u1e3d\u1e3e\3\2\2")
        buf.write("\2\u1e3e\u1e43\3\2\2\2\u1e3f\u1e40\7\u0278\2\2\u1e40\u1e42")
        buf.write("\5\u0400\u0201\2\u1e41\u1e3f\3\2\2\2\u1e42\u1e45\3\2\2")
        buf.write("\2\u1e43\u1e41\3\2\2\2\u1e43\u1e44\3\2\2\2\u1e44\u1e46")
        buf.write("\3\2\2\2\u1e45\u1e43\3\2\2\2\u1e46\u1e48\7\u0273\2\2\u1e47")
        buf.write("\u1e49\5\u03f6\u01fc\2\u1e48\u1e47\3\2\2\2\u1e48\u1e49")
        buf.write("\3\2\2\2\u1e49\u03f9\3\2\2\2\u1e4a\u1e4f\7\u0272\2\2\u1e4b")
        buf.write("\u1e4d\5\u0400\u0201\2\u1e4c\u1e4e\5\u03fe\u0200\2\u1e4d")
        buf.write("\u1e4c\3\2\2\2\u1e4d\u1e4e\3\2\2\2\u1e4e\u1e50\3\2\2\2")
        buf.write("\u1e4f\u1e4b\3\2\2\2\u1e4f\u1e50\3\2\2\2\u1e50\u1e58\3")
        buf.write("\2\2\2\u1e51\u1e52\7\u0278\2\2\u1e52\u1e54\5\u0400\u0201")
        buf.write("\2\u1e53\u1e55\5\u03fe\u0200\2\u1e54\u1e53\3\2\2\2\u1e54")
        buf.write("\u1e55\3\2\2\2\u1e55\u1e57\3\2\2\2\u1e56\u1e51\3\2\2\2")
        buf.write("\u1e57\u1e5a\3\2\2\2\u1e58\u1e56\3\2\2\2\u1e58\u1e59\3")
        buf.write("\2\2\2\u1e59\u1e5b\3\2\2\2\u1e5a\u1e58\3\2\2\2\u1e5b\u1e5d")
        buf.write("\7\u0273\2\2\u1e5c\u1e5e\5\u03f6\u01fc\2\u1e5d\u1e5c\3")
        buf.write("\2\2\2\u1e5d\u1e5e\3\2\2\2\u1e5e\u03fb\3\2\2\2\u1e5f\u1e60")
        buf.write("\7\u0272\2\2\u1e60\u1e6d\5\u03ee\u01f8\2\u1e61\u1e64\7")
        buf.write("\u0278\2\2\u1e62\u1e65\5\u0412\u020a\2\u1e63\u1e65\7\u014c")
        buf.write("\2\2\u1e64\u1e62\3\2\2\2\u1e64\u1e63\3\2\2\2\u1e65\u1e6b")
        buf.write("\3\2\2\2\u1e66\u1e69\7\u0278\2\2\u1e67\u1e6a\5\u0412\u020a")
        buf.write("\2\u1e68\u1e6a\7\u014c\2\2\u1e69\u1e67\3\2\2\2\u1e69\u1e68")
        buf.write("\3\2\2\2\u1e6a\u1e6c\3\2\2\2\u1e6b\u1e66\3\2\2\2\u1e6b")
        buf.write("\u1e6c\3\2\2\2\u1e6c\u1e6e\3\2\2\2\u1e6d\u1e61\3\2\2\2")
        buf.write("\u1e6d\u1e6e\3\2\2\2\u1e6e\u1e6f\3\2\2\2\u1e6f\u1e83\7")
        buf.write("\u0219\2\2\u1e70\u1e71\5\u03f0\u01f9\2\u1e71\u1e72\7\u026b")
        buf.write("\2\2\u1e72\u1e73\5\u03f4\u01fb\2\u1e73\u1e84\3\2\2\2\u1e74")
        buf.write("\u1e84\5\u03f4\u01fb\2\u1e75\u1e77\5\u0330\u0199\2\u1e76")
        buf.write("\u1e78\5\u03a8\u01d5\2\u1e77\u1e76\3\2\2\2\u1e77\u1e78")
        buf.write("\3\2\2\2\u1e78\u1e80\3\2\2\2\u1e79\u1e7a\7\u0278\2\2\u1e7a")
        buf.write("\u1e7c\5\u0330\u0199\2\u1e7b\u1e7d\5\u03a8\u01d5\2\u1e7c")
        buf.write("\u1e7b\3\2\2\2\u1e7c\u1e7d\3\2\2\2\u1e7d\u1e7f\3\2\2\2")
        buf.write("\u1e7e\u1e79\3\2\2\2\u1e7f\u1e82\3\2\2\2\u1e80\u1e7e\3")
        buf.write("\2\2\2\u1e80\u1e81\3\2\2\2\u1e81\u1e84\3\2\2\2\u1e82\u1e80")
        buf.write("\3\2\2\2\u1e83\u1e70\3\2\2\2\u1e83\u1e74\3\2\2\2\u1e83")
        buf.write("\u1e75\3\2\2\2\u1e84\u1e85\3\2\2\2\u1e85\u1e87\7\u0273")
        buf.write("\2\2\u1e86\u1e88\5\u03f6\u01fc\2\u1e87\u1e86\3\2\2\2\u1e87")
        buf.write("\u1e88\3\2\2\2\u1e88\u03fd\3\2\2\2\u1e89\u1e8a\td\2\2")
        buf.write("\u1e8a\u1e8b\7\u014d\2\2\u1e8b\u03ff\3\2\2\2\u1e8c\u1e8d")
        buf.write("\5\u0418\u020d\2\u1e8d\u1e8e\7\u0289\2\2\u1e8e\u1e8f\7")
        buf.write("\u0286\2\2\u1e8f\u1e91\3\2\2\2\u1e90\u1e8c\3\2\2\2\u1e90")
        buf.write("\u1e91\3\2\2\2\u1e91\u1e92\3\2\2\2\u1e92\u1e93\5\u0330")
        buf.write("\u0199\2\u1e93\u0401\3\2\2\2\u1e94\u1e9d\5\u0404\u0203")
        buf.write("\2\u1e95\u1e97\7\u0192\2\2\u1e96\u1e95\3\2\2\2\u1e96\u1e97")
        buf.write("\3\2\2\2\u1e97\u1e98\3\2\2\2\u1e98\u1e9a\5\u03d6\u01ec")
        buf.write("\2\u1e99\u1e9b\t\64\2\2\u1e9a\u1e99\3\2\2\2\u1e9a\u1e9b")
        buf.write("\3\2\2\2\u1e9b\u1e9d\3\2\2\2\u1e9c\u1e94\3\2\2\2\u1e9c")
        buf.write("\u1e96\3\2\2\2\u1e9d\u0403\3\2\2\2\u1e9e\u1ea0\5\u0408")
        buf.write("\u0205\2\u1e9f\u1ea1\5\u0406\u0204\2\u1ea0\u1e9f\3\2\2")
        buf.write("\2\u1ea0\u1ea1\3\2\2\2\u1ea1\u1ea8\3\2\2\2\u1ea2\u1ea4")
        buf.write("\7\u022f\2\2\u1ea3\u1ea5\7\u0106\2\2\u1ea4\u1ea3\3\2\2")
        buf.write("\2\u1ea4\u1ea5\3\2\2\2\u1ea5\u1ea6\3\2\2\2\u1ea6\u1ea7")
        buf.write("\7\u01f5\2\2\u1ea7\u1ea9\7\u0249\2\2\u1ea8\u1ea2\3\2\2")
        buf.write("\2\u1ea8\u1ea9\3\2\2\2\u1ea9\u1ebb\3\2\2\2\u1eaa\u1eab")
        buf.write("\7\u00eb\2\2\u1eab\u1eb0\te\2\2\u1eac\u1ead\7\u0272\2")
        buf.write("\2\u1ead\u1eae\5\u0330\u0199\2\u1eae\u1eaf\7\u0273\2\2")
        buf.write("\u1eaf\u1eb1\3\2\2\2\u1eb0\u1eac\3\2\2\2\u1eb0\u1eb1\3")
        buf.write("\2\2\2\u1eb1\u1eb2\3\2\2\2\u1eb2\u1eb3\7\u01fe\2\2\u1eb3")
        buf.write("\u1eb8\tf\2\2\u1eb4\u1eb5\7\u0272\2\2\u1eb5\u1eb6\5\u0330")
        buf.write("\u0199\2\u1eb6\u1eb7\7\u0273\2\2\u1eb7\u1eb9\3\2\2\2\u1eb8")
        buf.write("\u1eb4\3\2\2\2\u1eb8\u1eb9\3\2\2\2\u1eb9\u1ebb\3\2\2\2")
        buf.write("\u1eba\u1e9e\3\2\2\2\u1eba\u1eaa\3\2\2\2\u1ebb\u0405\3")
        buf.write("\2\2\2\u1ebc\u1ebd\7\u0272\2\2\u1ebd\u1ec0\5\u0412\u020a")
        buf.write("\2\u1ebe\u1ebf\7\u0278\2\2\u1ebf\u1ec1\5\u0412\u020a\2")
        buf.write("\u1ec0\u1ebe\3\2\2\2\u1ec0\u1ec1\3\2\2\2\u1ec1\u1ec3\3")
        buf.write("\2\2\2\u1ec2\u1ec4\tg\2\2\u1ec3\u1ec2\3\2\2\2\u1ec3\u1ec4")
        buf.write("\3\2\2\2\u1ec4\u1ec5\3\2\2\2\u1ec5\u1ec6\7\u0273\2\2\u1ec6")
        buf.write("\u0407\3\2\2\2\u1ec7\u1f04\7*\2\2\u1ec8\u1f04\7\u0179")
        buf.write("\2\2\u1ec9\u1f04\7\u012b\2\2\u1eca\u1f04\7)\2\2\u1ecb")
        buf.write("\u1f04\7(\2\2\u1ecc\u1f04\7\u012c\2\2\u1ecd\u1f04\7\u017c")
        buf.write("\2\2\u1ece\u1f04\7\u017d\2\2\u1ecf\u1f04\7\u01cc\2\2\u1ed0")
        buf.write("\u1f04\7\u01cd\2\2\u1ed1\u1f04\7\u0150\2\2\u1ed2\u1f04")
        buf.write("\7v\2\2\u1ed3\u1f04\7\u00e9\2\2\u1ed4\u1f04\7\u00e8\2")
        buf.write("\2\u1ed5\u1f04\7\u014f\2\2\u1ed6\u1f04\7\u01d1\2\2\u1ed7")
        buf.write("\u1f04\7\u014e\2\2\u1ed8\u1f04\7w\2\2\u1ed9\u1edb\7\u008d")
        buf.write("\2\2\u1eda\u1edc\7\u0180\2\2\u1edb\u1eda\3\2\2\2\u1edb")
        buf.write("\u1edc\3\2\2\2\u1edc\u1f04\3\2\2\2\u1edd\u1f04\7\u00b4")
        buf.write("\2\2\u1ede\u1f04\7\u018d\2\2\u1edf\u1f04\7\u012e\2\2\u1ee0")
        buf.write("\u1ee2\7\u0110\2\2\u1ee1\u1ee3\7\u018a\2\2\u1ee2\u1ee1")
        buf.write("\3\2\2\2\u1ee2\u1ee3\3\2\2\2\u1ee3\u1f04\3\2\2\2\u1ee4")
        buf.write("\u1f04\7=\2\2\u1ee5\u1f04\7?\2\2\u1ee6\u1f04\7\u021e\2")
        buf.write("\2\u1ee7\u1f04\7\u021d\2\2\u1ee8\u1f04\7\u01e2\2\2\u1ee9")
        buf.write("\u1f04\7\u018a\2\2\u1eea\u1f04\7\60\2\2\u1eeb\u1f04\7")
        buf.write("o\2\2\u1eec\u1f04\7\u01ac\2\2\u1eed\u1f04\7\u0217\2\2")
        buf.write("\u1eee\u1f04\7\u0246\2\2\u1eef\u1f04\7\u0126\2\2\u1ef0")
        buf.write("\u1f04\7p\2\2\u1ef1\u1f04\7\u00cc\2\2\u1ef2\u1f04\7\u0120")
        buf.write("\2\2\u1ef3\u1f04\7\u01b8\2\2\u1ef4\u1f04\7\u01fb\2\2\u1ef5")
        buf.write("\u1f04\7\u01fc\2\2\u1ef6\u1f04\7\u01fd\2\2\u1ef7\u1f04")
        buf.write("\7\u01fa\2\2\u1ef8\u1f04\7\u01f6\2\2\u1ef9\u1f04\7\u01f9")
        buf.write("\2\2\u1efa\u1f04\7\u01f8\2\2\u1efb\u1f04\7\u01f7\2\2\u1efc")
        buf.write("\u1f04\7\u0248\2\2\u1efd\u1f04\7\u008f\2\2\u1efe\u1f04")
        buf.write("\7&\2\2\u1eff\u1f04\7-\2\2\u1f00\u1f04\7D\2\2\u1f01\u1f04")
        buf.write("\7\u0130\2\2\u1f02\u1f04\7\u0122\2\2\u1f03\u1ec7\3\2\2")
        buf.write("\2\u1f03\u1ec8\3\2\2\2\u1f03\u1ec9\3\2\2\2\u1f03\u1eca")
        buf.write("\3\2\2\2\u1f03\u1ecb\3\2\2\2\u1f03\u1ecc\3\2\2\2\u1f03")
        buf.write("\u1ecd\3\2\2\2\u1f03\u1ece\3\2\2\2\u1f03\u1ecf\3\2\2\2")
        buf.write("\u1f03\u1ed0\3\2\2\2\u1f03\u1ed1\3\2\2\2\u1f03\u1ed2\3")
        buf.write("\2\2\2\u1f03\u1ed3\3\2\2\2\u1f03\u1ed4\3\2\2\2\u1f03\u1ed5")
        buf.write("\3\2\2\2\u1f03\u1ed6\3\2\2\2\u1f03\u1ed7\3\2\2\2\u1f03")
        buf.write("\u1ed8\3\2\2\2\u1f03\u1ed9\3\2\2\2\u1f03\u1edd\3\2\2\2")
        buf.write("\u1f03\u1ede\3\2\2\2\u1f03\u1edf\3\2\2\2\u1f03\u1ee0\3")
        buf.write("\2\2\2\u1f03\u1ee4\3\2\2\2\u1f03\u1ee5\3\2\2\2\u1f03\u1ee6")
        buf.write("\3\2\2\2\u1f03\u1ee7\3\2\2\2\u1f03\u1ee8\3\2\2\2\u1f03")
        buf.write("\u1ee9\3\2\2\2\u1f03\u1eea\3\2\2\2\u1f03\u1eeb\3\2\2\2")
        buf.write("\u1f03\u1eec\3\2\2\2\u1f03\u1eed\3\2\2\2\u1f03\u1eee\3")
        buf.write("\2\2\2\u1f03\u1eef\3\2\2\2\u1f03\u1ef0\3\2\2\2\u1f03\u1ef1")
        buf.write("\3\2\2\2\u1f03\u1ef2\3\2\2\2\u1f03\u1ef3\3\2\2\2\u1f03")
        buf.write("\u1ef4\3\2\2\2\u1f03\u1ef5\3\2\2\2\u1f03\u1ef6\3\2\2\2")
        buf.write("\u1f03\u1ef7\3\2\2\2\u1f03\u1ef8\3\2\2\2\u1f03\u1ef9\3")
        buf.write("\2\2\2\u1f03\u1efa\3\2\2\2\u1f03\u1efb\3\2\2\2\u1f03\u1efc")
        buf.write("\3\2\2\2\u1f03\u1efd\3\2\2\2\u1f03\u1efe\3\2\2\2\u1f03")
        buf.write("\u1eff\3\2\2\2\u1f03\u1f00\3\2\2\2\u1f03\u1f01\3\2\2\2")
        buf.write("\u1f03\u1f02\3\2\2\2\u1f04\u0409\3\2\2\2\u1f05\u1f09\7")
        buf.write("\u027c\2\2\u1f06\u1f07\7\u027d\2\2\u1f07\u1f09\7\u026c")
        buf.write("\2\2\u1f08\u1f05\3\2\2\2\u1f08\u1f06\3\2\2\2\u1f09\u1f12")
        buf.write("\3\2\2\2\u1f0a\u1f0c\7\u00db\2\2\u1f0b\u1f0a\3\2\2\2\u1f0b")
        buf.write("\u1f0c\3\2\2\2\u1f0c\u1f10\3\2\2\2\u1f0d\u1f11\7\u027c")
        buf.write("\2\2\u1f0e\u1f0f\7\u027d\2\2\u1f0f\u1f11\7\u026c\2\2\u1f10")
        buf.write("\u1f0d\3\2\2\2\u1f10\u1f0e\3\2\2\2\u1f11\u1f13\3\2\2\2")
        buf.write("\u1f12\u1f0b\3\2\2\2\u1f12\u1f13\3\2\2\2\u1f13\u1f18\3")
        buf.write("\2\2\2\u1f14\u1f15\7\u026b\2\2\u1f15\u1f17\5\u040c\u0207")
        buf.write("\2\u1f16\u1f14\3\2\2\2\u1f17\u1f1a\3\2\2\2\u1f18\u1f16")
        buf.write("\3\2\2\2\u1f18\u1f19\3\2\2\2\u1f19\u040b\3\2\2\2\u1f1a")
        buf.write("\u1f18\3\2\2\2\u1f1b\u1f1c\5\u03f2\u01fa\2\u1f1c\u1f1d")
        buf.write("\5\u03f8\u01fd\2\u1f1d\u1f20\3\2\2\2\u1f1e\u1f20\5\u03f2")
        buf.write("\u01fa\2\u1f1f\u1f1b\3\2\2\2\u1f1f\u1f1e\3\2\2\2\u1f20")
        buf.write("\u040d\3\2\2\2\u1f21\u1f22\5\u03f2\u01fa\2\u1f22\u040f")
        buf.write("\3\2\2\2\u1f23\u1f26\7\u01f6\2\2\u1f24\u1f27\5\u0416\u020c")
        buf.write("\2\u1f25\u1f27\5\u040a\u0206\2\u1f26\u1f24\3\2\2\2\u1f26")
        buf.write("\u1f25\3\2\2\2\u1f27\u1f2c\3\2\2\2\u1f28\u1f29\7\31\2")
        buf.write("\2\u1f29\u1f2a\7\u01f5\2\2\u1f2a\u1f2b\7\u0249\2\2\u1f2b")
        buf.write("\u1f2d\5\u0416\u020c\2\u1f2c\u1f28\3\2\2\2\u1f2c\u1f2d")
        buf.write("\3\2\2\2\u1f2d\u1f62\3\2\2\2\u1f2e\u1f32\7\u00eb\2\2\u1f2f")
        buf.write("\u1f33\5\u0416\u020c\2\u1f30\u1f33\5\u040a\u0206\2\u1f31")
        buf.write("\u1f33\5\u040c\u0207\2\u1f32\u1f2f\3\2\2\2\u1f32\u1f30")
        buf.write("\3\2\2\2\u1f32\u1f31\3\2\2\2\u1f33\u1f34\3\2\2\2\u1f34")
        buf.write("\u1f42\th\2\2\u1f35\u1f38\7\u0272\2\2\u1f36\u1f39\7\u026c")
        buf.write("\2\2\u1f37\u1f39\5\u040a\u0206\2\u1f38\u1f36\3\2\2\2\u1f38")
        buf.write("\u1f37\3\2\2\2\u1f39\u1f3f\3\2\2\2\u1f3a\u1f3d\7\u0278")
        buf.write("\2\2\u1f3b\u1f3e\7\u026c\2\2\u1f3c\u1f3e\5\u040a\u0206")
        buf.write("\2\u1f3d\u1f3b\3\2\2\2\u1f3d\u1f3c\3\2\2\2\u1f3e\u1f40")
        buf.write("\3\2\2\2\u1f3f\u1f3a\3\2\2\2\u1f3f\u1f40\3\2\2\2\u1f40")
        buf.write("\u1f41\3\2\2\2\u1f41\u1f43\7\u0273\2\2\u1f42\u1f35\3\2")
        buf.write("\2\2\u1f42\u1f43\3\2\2\2\u1f43\u1f53\3\2\2\2\u1f44\u1f51")
        buf.write("\7\u01fe\2\2\u1f45\u1f52\7p\2\2\u1f46\u1f52\7\u00cc\2")
        buf.write("\2\u1f47\u1f52\7\u0120\2\2\u1f48\u1f4f\7\u01b8\2\2\u1f49")
        buf.write("\u1f4c\7\u0272\2\2\u1f4a\u1f4d\7\u026c\2\2\u1f4b\u1f4d")
        buf.write("\5\u040a\u0206\2\u1f4c\u1f4a\3\2\2\2\u1f4c\u1f4b\3\2\2")
        buf.write("\2\u1f4d\u1f4e\3\2\2\2\u1f4e\u1f50\7\u0273\2\2\u1f4f\u1f49")
        buf.write("\3\2\2\2\u1f4f\u1f50\3\2\2\2\u1f50\u1f52\3\2\2\2\u1f51")
        buf.write("\u1f45\3\2\2\2\u1f51\u1f46\3\2\2\2\u1f51\u1f47\3\2\2\2")
        buf.write("\u1f51\u1f48\3\2\2\2\u1f52\u1f54\3\2\2\2\u1f53\u1f44\3")
        buf.write("\2\2\2\u1f53\u1f54\3\2\2\2\u1f54\u1f62\3\2\2\2\u1f55\u1f62")
        buf.write("\5\u0412\u020a\2\u1f56\u1f57\7o\2\2\u1f57\u1f62\5\u0416")
        buf.write("\u020c\2\u1f58\u1f62\5\u0416\u020c\2\u1f59\u1f62\7\u014c")
        buf.write("\2\2\u1f5a\u1f62\7\u0207\2\2\u1f5b\u1f62\7\u00ac\2\2\u1f5c")
        buf.write("\u1f62\7r\2\2\u1f5d\u1f62\7\u01c3\2\2\u1f5e\u1f62\7\u0121")
        buf.write("\2\2\u1f5f\u1f62\7\u0118\2\2\u1f60\u1f62\7~\2\2\u1f61")
        buf.write("\u1f23\3\2\2\2\u1f61\u1f2e\3\2\2\2\u1f61\u1f55\3\2\2\2")
        buf.write("\u1f61\u1f56\3\2\2\2\u1f61\u1f58\3\2\2\2\u1f61\u1f59\3")
        buf.write("\2\2\2\u1f61\u1f5a\3\2\2\2\u1f61\u1f5b\3\2\2\2\u1f61\u1f5c")
        buf.write("\3\2\2\2\u1f61\u1f5d\3\2\2\2\u1f61\u1f5e\3\2\2\2\u1f61")
        buf.write("\u1f5f\3\2\2\2\u1f61\u1f60\3\2\2\2\u1f62\u0411\3\2\2\2")
        buf.write("\u1f63\u1f64\ti\2\2\u1f64\u0413\3\2\2\2\u1f65\u1f66\7")
        buf.write("\u0277\2\2\u1f66\u1f67\5\u0412\u020a\2\u1f67\u0415\3\2")
        buf.write("\2\2\u1f68\u1f69\tj\2\2\u1f69\u0417\3\2\2\2\u1f6a\u1f6b")
        buf.write("\5\u03f2\u01fa\2\u1f6b\u0419\3\2\2\2\u1f6c\u1f6f\5\u0426")
        buf.write("\u0214\2\u1f6d\u1f6f\7\u026f\2\2\u1f6e\u1f6c\3\2\2\2\u1f6e")
        buf.write("\u1f6d\3\2\2\2\u1f6f\u041b\3\2\2\2\u1f70\u1f78\7\u0282")
        buf.write("\2\2\u1f71\u1f72\7\u0280\2\2\u1f72\u1f78\7\u0286\2\2\u1f73")
        buf.write("\u1f74\7\u0285\2\2\u1f74\u1f78\7\u0289\2\2\u1f75\u1f76")
        buf.write("\7\u0283\2\2\u1f76\u1f78\7\u0289\2\2\u1f77\u1f70\3\2\2")
        buf.write("\2\u1f77\u1f71\3\2\2\2\u1f77\u1f73\3\2\2\2\u1f77\u1f75")
        buf.write("\3\2\2\2\u1f78\u041d\3\2\2\2\u1f79\u1f7d\7\u0281\2\2\u1f7a")
        buf.write("\u1f7b\7\u0286\2\2\u1f7b\u1f7d\7\u0289\2\2\u1f7c\u1f79")
        buf.write("\3\2\2\2\u1f7c\u1f7a\3\2\2\2\u1f7d\u041f\3\2\2\2\u1f7e")
        buf.write("\u1f82\7\u027f\2\2\u1f7f\u1f80\7\u0280\2\2\u1f80\u1f82")
        buf.write("\7\u0289\2\2\u1f81\u1f7e\3\2\2\2\u1f81\u1f7f\3\2\2\2\u1f82")
        buf.write("\u0421\3\2\2\2\u1f83\u1f87\7\u0287\2\2\u1f84\u1f85\7\u0288")
        buf.write("\2\2\u1f85\u1f87\7\u0288\2\2\u1f86\u1f83\3\2\2\2\u1f86")
        buf.write("\u1f84\3\2\2\2\u1f87\u0423\3\2\2\2\u1f88\u1f89\7\u0272")
        buf.write("\2\2\u1f89\u1f8a\7\u0276\2\2\u1f8a\u1f8b\7\u0273\2\2\u1f8b")
        buf.write("\u0425\3\2\2\2\u1f8c\u1f8d\tk\2\2\u1f8d\u0427\3\2\2\2")
        buf.write("\u049f\u042b\u0430\u0437\u043c\u0440\u0444\u0446\u044c")
        buf.write("\u044f\u0452\u046d\u0471\u0479\u047c\u0481\u0486\u048f")
        buf.write("\u0496\u0498\u049f\u04a8\u04aa\u04ae\u04b2\u04b6\u04ba")
        buf.write("\u04be\u04c2\u04c7\u04c9\u04cf\u04d1\u04e0\u04e2\u04e6")
        buf.write("\u04ed\u04f2\u04f6\u04fe\u0507\u0510\u0514\u051d\u0521")
        buf.write("\u0525\u053f\u0542\u0545\u054f\u0557\u055d\u0561\u0565")
        buf.write("\u056c\u0571\u0575\u0578\u057c\u0585\u058f\u0594\u0596")
        buf.write("\u059e\u05a0\u05a2\u05a5\u05ae\u05b6\u05bd\u05c6\u05cb")
        buf.write("\u05d5\u05da\u05de\u05e2\u05e9\u05ee\u05f2\u05fb\u05ff")
        buf.write("\u0603\u0607\u0609\u060b\u060e\u0612\u0618\u061c\u0620")
        buf.write("\u0622\u0624\u0627\u062b\u0633\u0638\u063e\u0642\u0646")
        buf.write("\u0649\u064c\u0650\u0653\u0659\u065e\u0662\u0666\u066a")
        buf.write("\u066e\u0670\u0672\u0676\u067a\u0682\u0687\u068d\u0691")
        buf.write("\u0695\u0698\u069b\u069f\u06a2\u06a8\u06ab\u06b2\u06b7")
        buf.write("\u06c0\u06c9\u06cd\u06d1\u06d5\u06d9\u06dc\u06e1\u06e7")
        buf.write("\u06eb\u06f0\u06f4\u06f8\u06fc\u0701\u0708\u070c\u070f")
        buf.write("\u0713\u0716\u071d\u0721\u0727\u072d\u0730\u0733\u0736")
        buf.write("\u0739\u0740\u0743\u0746\u074b\u074d\u0750\u0753\u0756")
        buf.write("\u075d\u0761\u0766\u0769\u076d\u0772\u0777\u077a\u077d")
        buf.write("\u0780\u0782\u0787\u078b\u0794\u0798\u079a\u079e\u07a2")
        buf.write("\u07a9\u07ae\u07b3\u07c0\u07c3\u07ca\u07d1\u07e4\u07ea")
        buf.write("\u07ef\u07f4\u07f6\u07fc\u0802\u0807\u080b\u080f\u0816")
        buf.write("\u081e\u0822\u0828\u082c\u0836\u0838\u0841\u0843\u0859")
        buf.write("\u0860\u0862\u0868\u0870\u0873\u087a\u087f\u0886\u088c")
        buf.write("\u0892\u0895\u0898\u08a4\u08a6\u08aa\u08ae\u08b1\u08b7")
        buf.write("\u08bb\u08be\u08c3\u08c6\u08cb\u08cf\u08d2\u08da\u08dd")
        buf.write("\u08e8\u08ed\u08f4\u08f7\u0900\u0902\u090c\u0911\u0915")
        buf.write("\u091a\u091e\u0925\u092b\u092e\u0944\u0947\u0949\u094b")
        buf.write("\u0953\u095a\u095c\u0960\u0965\u0968\u096b\u096e\u0973")
        buf.write("\u0978\u0982\u0984\u0991\u0993\u0995\u0999\u099d\u09a0")
        buf.write("\u09a7\u09ac\u09b3\u09b9\u09bb\u09c1\u09c5\u09cc\u09d1")
        buf.write("\u09dd\u09eb\u09f0\u09f4\u09f6\u09fa\u09fe\u0a05\u0a0e")
        buf.write("\u0a13\u0a18\u0a1b\u0a1f\u0a23\u0a25\u0a2a\u0a34\u0a38")
        buf.write("\u0a3f\u0a46\u0a4b\u0a4e\u0a58\u0a66\u0a6b\u0a6f\u0a71")
        buf.write("\u0a76\u0a7a\u0a7f\u0a88\u0a91\u0a97\u0a9c\u0a9f\u0aa4")
        buf.write("\u0aa7\u0aac\u0aae\u0ab3\u0ab7\u0abb\u0abf\u0ac3\u0ac7")
        buf.write("\u0aca\u0ad8\u0add\u0ae1\u0ae4\u0ae8\u0aee\u0af3\u0af6")
        buf.write("\u0afb\u0afe\u0b03\u0b05\u0b0a\u0b0c\u0b14\u0b19\u0b1d")
        buf.write("\u0b28\u0b2c\u0b31\u0b37\u0b3d\u0b42\u0b45\u0b4a\u0b4d")
        buf.write("\u0b52\u0b54\u0b59\u0b5b\u0b65\u0b6b\u0b6f\u0b79\u0b7e")
        buf.write("\u0b82\u0b86\u0b90\u0b95\u0b97\u0b9b\u0ba3\u0ba6\u0ba9")
        buf.write("\u0bac\u0bb0\u0bb7\u0bc2\u0bc7\u0bcb\u0bd0\u0bd4\u0bda")
        buf.write("\u0bdd\u0be0\u0be3\u0be6\u0be9\u0bec\u0bf3\u0bf6\u0bf9")
        buf.write("\u0bfe\u0c00\u0c03\u0c06\u0c09\u0c17\u0c1b\u0c21\u0c23")
        buf.write("\u0c2d\u0c31\u0c34\u0c37\u0c3d\u0c40\u0c43\u0c46\u0c49")
        buf.write("\u0c4c\u0c4f\u0c56\u0c59\u0c5c\u0c61\u0c63\u0c66\u0c69")
        buf.write("\u0c6f\u0c79\u0c81\u0c85\u0c8e\u0c9b\u0cae\u0cb0\u0cb3")
        buf.write("\u0cb7\u0cbd\u0cc1\u0cc6\u0ccd\u0cd1\u0cd4\u0cdf\u0ce1")
        buf.write("\u0ce4\u0cea\u0cee\u0cf6\u0cfe\u0d04\u0d07\u0d0c\u0d10")
        buf.write("\u0d14\u0d1c\u0d1e\u0d20\u0d25\u0d29\u0d2d\u0d31\u0d34")
        buf.write("\u0d39\u0d3c\u0d42\u0d49\u0d4d\u0d54\u0d58\u0d61\u0d65")
        buf.write("\u0d70\u0d72\u0d7f\u0d82\u0d85\u0d8a\u0d8c\u0d92\u0d98")
        buf.write("\u0d9a\u0d9e\u0da2\u0da6\u0da9\u0dab\u0db1\u0db3\u0db6")
        buf.write("\u0dbb\u0dc0\u0dc6\u0dca\u0dd4\u0dd6\u0dda\u0dde\u0de3")
        buf.write("\u0de8\u0dec\u0df1\u0df8\u0e00\u0e05\u0e09\u0e0e\u0e10")
        buf.write("\u0e18\u0e1d\u0e21\u0e26\u0e28\u0e2d\u0e34\u0e38\u0e3c")
        buf.write("\u0e69\u0e6c\u0e71\u0e73\u0e7e\u0e83\u0e88\u0e8d\u0e8f")
        buf.write("\u0e99\u0e9e\u0ea6\u0ea8\u0eac\u0eb0\u0eb5\u0eba\u0ebf")
        buf.write("\u0ec3\u0ed1\u0ed6\u0ed9\u0edf\u0ee8\u0ef6\u0efe\u0f07")
        buf.write("\u0f0a\u0f0f\u0f14\u0f19\u0f1e\u0f26\u0f2d\u0f2f\u0f33")
        buf.write("\u0f39\u0f3e\u0f49\u0f53\u0f58\u0f64\u0f69\u0f6e\u0f71")
        buf.write("\u0f7f\u0f8a\u0f8f\u0f94\u0f99\u0f9b\u0fa5\u0faa\u0fad")
        buf.write("\u0fb1\u0fb6\u0fbc\u0fcb\u0fd0\u0fd5\u0fd7\u0fdc\u0fe3")
        buf.write("\u0fe6\u0fe9\u0fec\u0ff6\u1002\u1006\u1009\u1012\u101a")
        buf.write("\u1022\u1025\u102c\u1030\u1037\u103d\u1066\u1082\u1089")
        buf.write("\u108e\u1099\u109c\u10a7\u10af\u10b3\u10bd\u10c0\u10c4")
        buf.write("\u10c7\u10cc\u10d1\u10d5\u10df\u10e9\u10ef\u10fa\u10ff")
        buf.write("\u1103\u110b\u1113\u1118\u111b\u111d\u1120\u1129\u112e")
        buf.write("\u1133\u1136\u1139\u113d\u1140\u1148\u114d\u1152\u1159")
        buf.write("\u1163\u1173\u1179\u1183\u118d\u1194\u1199\u119f\u11a9")
        buf.write("\u11ae\u11b5\u11ba\u11c0\u11c3\u11c6\u11d7\u11dc\u11e5")
        buf.write("\u11ea\u11f0\u11f3\u11fa\u11fd\u1204\u1209\u120d\u1212")
        buf.write("\u1217\u1221\u1227\u1231\u1236\u123d\u1243\u1247\u124a")
        buf.write("\u124d\u125e\u1263\u126b\u1279\u1280\u128f\u1296\u1298")
        buf.write("\u12ab\u12bb\u12c4\u12c9\u12cd\u12d0\u12da\u12e6\u12ec")
        buf.write("\u12f4\u12f8\u12fb\u1309\u130d\u1312\u1315\u1322\u1326")
        buf.write("\u1332\u1337\u133b\u133f\u1345\u1348\u134b\u1366\u136c")
        buf.write("\u1370\u1376\u1382\u138b\u138d\u1393\u1397\u139a\u13a3")
        buf.write("\u13ae\u13b2\u13b5\u13b9\u13c1\u13ca\u13d3\u13d5\u13e3")
        buf.write("\u13f7\u13fb\u1402\u1406\u140a\u140e\u141a\u141e\u142c")
        buf.write("\u1432\u1439\u143e\u1448\u144e\u1450\u1459\u1463\u1468")
        buf.write("\u1477\u147b\u147e\u1482\u148a\u148c\u1490\u1498\u149f")
        buf.write("\u14a4\u14a6\u14ab\u14b0\u14b8\u14bf\u14c3\u14c6\u14d2")
        buf.write("\u14d8\u14e0\u14ea\u14f5\u14f8\u14ff\u1502\u1509\u1514")
        buf.write("\u151a\u151e\u1528\u152b\u1531\u153c\u153e\u1540\u1543")
        buf.write("\u1547\u154a\u154e\u1552\u1557\u1562\u1566\u156e\u1571")
        buf.write("\u157b\u1580\u1586\u158a\u158d\u1595\u1598\u159c\u15a0")
        buf.write("\u15a5\u15a8\u15ac\u15b0\u15b4\u15c0\u15d0\u15d6\u15da")
        buf.write("\u15df\u15e3\u15ea\u15ee\u15f1\u15f4\u15f7\u15fb\u15fd")
        buf.write("\u1601\u1606\u1608\u1613\u1615\u161d\u1623\u162a\u1631")
        buf.write("\u1635\u1637\u163d\u1643\u164a\u164d\u1650\u1655\u1659")
        buf.write("\u1665\u166c\u1671\u1673\u1675\u1683\u1686\u1690\u1694")
        buf.write("\u169c\u16a8\u16b2\u16b7\u16c1\u16c9\u16cc\u16d2\u16d6")
        buf.write("\u16db\u16e5\u16ea\u16f7\u1703\u1708\u1712\u1717\u1719")
        buf.write("\u171e\u1722\u1728\u172c\u1739\u173f\u1748\u1755\u175d")
        buf.write("\u1766\u176a\u176f\u177a\u177c\u178c\u1791\u1797\u179d")
        buf.write("\u17af\u17b6\u17b9\u17c1\u17ca\u17cc\u17d0\u17d3\u17d8")
        buf.write("\u17da\u17de\u17ea\u17f3\u17fb\u1800\u1804\u1809\u180c")
        buf.write("\u1814\u181c\u1825\u1828\u182b\u182e\u1836\u1840\u184a")
        buf.write("\u184e\u1852\u1855\u1858\u185d\u1862\u1865\u1868\u186e")
        buf.write("\u1871\u1877\u187a\u187d\u1882\u1885\u188d\u1893\u1898")
        buf.write("\u18a0\u18a7\u18b1\u18b5\u18b7\u18ba\u18c6\u18ca\u18cd")
        buf.write("\u18dc\u18e1\u18e8\u18eb\u18f4\u18fb\u1900\u1904\u190c")
        buf.write("\u1912\u191a\u191d\u1925\u192d\u1930\u1933\u193c\u1942")
        buf.write("\u1948\u194a\u1957\u1959\u1962\u1964\u1968\u196e\u1972")
        buf.write("\u1980\u1986\u1997\u199b\u19b1\u19b9\u19bd\u19c3\u19c8")
        buf.write("\u19cb\u19cd\u19d1\u19dc\u19e0\u19e7\u19ec\u19fa\u1a0d")
        buf.write("\u1a21\u1a24\u1a26\u1a28\u1a30\u1a38\u1a3f\u1a43\u1a4c")
        buf.write("\u1a51\u1a55\u1a5d\u1a61\u1a68\u1a71\u1a7f\u1a8c\u1a91")
        buf.write("\u1aa6\u1aaf\u1ab4\u1ab7\u1abe\u1ac1\u1ac5\u1ac8\u1acf")
        buf.write("\u1ad2\u1ad8\u1adb\u1adf\u1ae2\u1ae9\u1aee\u1b00\u1b02")
        buf.write("\u1b06\u1b0e\u1b1a\u1b21\u1b2c\u1b34\u1b43\u1b47\u1b50")
        buf.write("\u1b56\u1b5e\u1b67\u1b72\u1b76\u1b79\u1b89\u1b8f\u1b99")
        buf.write("\u1ba1\u1ba4\u1ba7\u1bb0\u1bb5\u1bbe\u1bc4\u1bc9\u1bcc")
        buf.write("\u1bd1\u1bd6\u1bda\u1be0\u1be6\u1bef\u1bf4\u1bfc\u1c00")
        buf.write("\u1c05\u1c0b\u1c12\u1c17\u1c1e\u1c22\u1c27\u1c2f\u1c32")
        buf.write("\u1c35\u1c38\u1c3c\u1c41\u1c46\u1c4a\u1c51\u1c56\u1c58")
        buf.write("\u1c5f\u1c65\u1c6b\u1c6e\u1c72\u1c74\u1c7f\u1c83\u1c85")
        buf.write("\u1c90\u1c9b\u1ca4\u1ca7\u1cab\u1cae\u1cb2\u1cbf\u1cc4")
        buf.write("\u1ccc\u1cd3\u1cd8\u1cdc\u1ce1\u1ce6\u1ce9\u1cf0\u1cfa")
        buf.write("\u1d02\u1d06\u1d10\u1d13\u1d15\u1d1f\u1d21\u1d27\u1d2d")
        buf.write("\u1d2f\u1d3d\u1d3f\u1d47\u1d50\u1d59\u1d63\u1d67\u1d6c")
        buf.write("\u1d70\u1d73\u1d76\u1d7a\u1d81\u1d8d\u1d98\u1d9b\u1d9f")
        buf.write("\u1db2\u1db7\u1dbe\u1dcb\u1dd5\u1dda\u1de3\u1deb\u1df3")
        buf.write("\u1df9\u1dfe\u1e03\u1e07\u1e0d\u1e11\u1e16\u1e1f\u1e26")
        buf.write("\u1e2d\u1e39\u1e3d\u1e43\u1e48\u1e4d\u1e4f\u1e54\u1e58")
        buf.write("\u1e5d\u1e64\u1e69\u1e6b\u1e6d\u1e77\u1e7c\u1e80\u1e83")
        buf.write("\u1e87\u1e90\u1e96\u1e9a\u1e9c\u1ea0\u1ea4\u1ea8\u1eb0")
        buf.write("\u1eb8\u1eba\u1ec0\u1ec3\u1edb\u1ee2\u1f03\u1f08\u1f0b")
        buf.write("\u1f10\u1f12\u1f18\u1f1f\u1f26\u1f2c\u1f32\u1f38\u1f3d")
        buf.write("\u1f3f\u1f42\u1f4c\u1f4f\u1f51\u1f53\u1f61\u1f6e\u1f77")
        buf.write("\u1f7c\u1f81\u1f86")
        return buf.getvalue()


class plsqlParser ( Parser ):

    grammarFileName = "plsql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'..'", "'@@'", "'::'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'.'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'%'", "'&'", 
                     "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", 
                     "'@'", "':='", "<INVALID>", "':'", "';'", "'<='", "'<'", 
                     "'>='", "<INVALID>", "'^'", "'~'", "'!'", "'>'", "'||'", 
                     "'|'", "'='", "'['", "']'", "'_'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'@!'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", 
                      "ALL", "ALLOCATE", "ALLOW", "ALTER", "ALWAYS", "ANALYZE", 
                      "AND", "ANY", "ANYSCHEMA", "ARCHIVE", "ARRAY", "AS", 
                      "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", "AUDIT", "AUTHID", 
                      "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", "BASIC", 
                      "BASICFILE", "BATCH", "BEFORE", "BEGIN", "BETWEEN", 
                      "BFILE", "BINARY", "BINARY_DOUBLE", "BINARY_FLOAT", 
                      "BINARY_INTEGER", "BITMAP", "BUFFER_POOL", "BLOB", 
                      "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH", "BULK", 
                      "BY", "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", 
                      "CASCADE", "CASE", "CAST", "CHAR", "CHAR_CS", "CHARACTER", 
                      "CHECK", "CHECKPOINT", "CHR", "CHUNK", "CLOB", "CLOSE", 
                      "CLUSTER", "COALESCE", "COLLECT", "COLUMN", "COLUMNS", 
                      "COLUMN_VALUE", "COMMENT", "COMMIT", "COMMITTED", 
                      "COMPACT", "COMPATIBILITY", "COMPILE", "COMPOUND", 
                      "COMPRESS", "CONCAT", "CONNECT", "CONNECT_BY_ROOT", 
                      "CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", 
                      "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID", 
                      "CORRUPT_XID_ALL", "COST", "COUNT", "CREATE", "CREATION", 
                      "CROSS", "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", 
                      "CUSTOMDATUM", "CYCLE", "DATA", "DATABASE", "DATAFILE", 
                      "DATE", "DAY", "DB_ROLE_CHANGE", "DBTIMEZONE", "DDL", 
                      "DEBUG", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", 
                      "DECODE", "DECOMPOSE", "DECREMENT", "DECRYPT", "DEDUPLICATE", 
                      "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", 
                      "DELETE", "DEPTH", "DESC", "DETERMINISTIC", "DIMENSION", 
                      "DISABLE", "DISALLOW", "DISASSOCIATE", "DISTINCT", 
                      "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
                      "EACH", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", 
                      "ENCODING", "ENCRYPT", "END", "ENTITYESCAPING", "ERR", 
                      "ERRORS", "ESCAPE", "EVALNAME", "EXCEPT", "EXCEPTION", 
                      "EXCEPTION_INIT", "EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", 
                      "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", "EXTENT", 
                      "EXTERNAL", "EXTRACT", "FAILURE", "FALSE", "FETCH", 
                      "FILESYSTEM_LIKE_LOGGING", "FINAL", "FIRST", "FIRST_VALUE", 
                      "FLASHBACK", "FLASH_CACHE", "FLOAT", "FOLLOWING", 
                      "FOLLOWS", "FOR", "FORALL", "FORCE", "FOREIGN", "FREELIST", 
                      "FREELISTS", "FREEPOOLS", "FROM", "FULL", "FUNCTION", 
                      "GENERATED", "GLOBAL", "GOTO", "GRANT", "GROUP", "GROUPS", 
                      "GROUPING", "HASH", "HAVING", "HIDE", "HIGH", "HOUR", 
                      "IDENTIFIED", "IDENTIFIER", "IF", "IGNORE", "ILIKE", 
                      "IMMEDIATE", "IN", "INCLUDE", "INCLUDING", "INCREMENT", 
                      "INDENT", "INDEX", "INDEXED", "INDEXTYPE", "INDICATOR", 
                      "INDICES", "INFINITE", "INITIAL", "INITIALLY", "INITRANS", 
                      "INLINE", "INNER", "INOUT", "INSERT", "INSTANCE", 
                      "INSTANTIABLE", "INSTEAD", "INT", "INTEGER", "INTERSECT", 
                      "INTERVAL", "INTO", "INVALIDATE", "INVISIBLE", "IS", 
                      "ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", "KEEP_DUPLICATES", 
                      "KEY", "LANGUAGE", "LAST", "LAST_VALUE", "LEADING", 
                      "LEFT", "LESS", "LEVEL", "LEVELS", "LIBRARY", "LIKE", 
                      "LIKE2", "LIKE4", "LIKEC", "LIMIT", "LIST", "LOCAL", 
                      "LOB", "LOBS", "LOCATOR", "LOCK", "LOCKED", "LOG", 
                      "LOGGING", "LOGOFF", "LOGON", "LONG", "LOOP", "LOW", 
                      "MAIN", "MAP", "MAPPING", "MATCHED", "MAXEXTENTS", 
                      "MAXVALUE", "MEASURES", "MEDIUM", "MEMBER", "MERGE", 
                      "MINEXTENTS", "MINIMIZE", "MINUS", "MINUTE", "MINVALUE", 
                      "MLSLABEL", "MODE", "MODEL", "MODIFY", "MONTH", "MOVEMENT", 
                      "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", 
                      "NAV", "NCHAR", "NCHAR_CS", "NCLOB", "NESTED", "NEW", 
                      "NEXT", "NO", "NOAUDIT", "NOCACHE", "NOCOMPRESS", 
                      "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", "NOLOGGING", 
                      "NOMAPPING", "NOMAXVALUE", "NOMINIMIZE", "NOMINVALUE", 
                      "NONE", "NONSCHEMA", "NOORDER", "NOPARALLEL", "NORELY", 
                      "NOROWDEPENDENCIES", "NOSCHEMACHECK", "NOSORT", "NOT", 
                      "NOVALIDATE", "NOWAIT", "NVL", "NULL", "NULLS", "NUMBER", 
                      "NUMERIC", "NVARCHAR2", "OBJECT", "OF", "OFF", "OID", 
                      "OIDINDEX", "OLD", "OLTP", "ON", "ONLY", "OPEN", "OPTIMAL", 
                      "OPTION", "OR", "ORADATA", "ORDER", "ORDINALITY", 
                      "OSERROR", "OUT", "OUTER", "OVER", "OVERFLOW", "OVERRIDING", 
                      "PACKAGE", "PARALLEL", "PARALLEL_ENABLE", "PARAMETERS", 
                      "PARENT", "PARTITION", "PASSING", "PATH", "PCTFREE", 
                      "PCTINCREASE", "PCTTHRESHOLD", "PCTUSED", "PCTVERSION", 
                      "PERCENT_ROWTYPE", "PERCENT_TYPE", "PIPELINED", "PIVOT", 
                      "PLAN", "PLS_INTEGER", "PARTITIONS", "POSITION", "POSITIVE", 
                      "POSITIVEN", "PRAGMA", "PRECEDING", "PRECISION", "PRESENT", 
                      "PRESERVE", "PRIMARY", "PRIOR", "PROCEDURE", "PURGE", 
                      "QUERY", "RAISE", "RANGE", "RAW", "READ", "READS", 
                      "REAL", "REBUILD", "RECORD", "RECORDS_PER_BLOCK", 
                      "RECYCLE", "REF", "REFERENCE", "REFERENCES", "REFERENCING", 
                      "REJECT", "REKEY", "RELATIONAL", "RELIES_ON", "RELY", 
                      "RENAME", "REPLACE", "RESPECT", "RESTRICT_REFERENCES", 
                      "RESULT", "RESULT_CACHE", "RETENTION", "RETURN", "RETURNING", 
                      "REUSE", "REVERSE", "REVOKE", "RIGHT", "ROLLBACK", 
                      "ROLLUP", "ROW", "ROWDEPENDENCIES", "ROWID", "ROWS", 
                      "RULES", "SALT", "SAMPLE", "SAVE", "SAVEPOINT", "SCHEMA", 
                      "SCHEMACHECK", "SCN", "SCOPE", "SEARCH", "SECOND", 
                      "SECUREFILE", "SEED", "SEGMENT", "SELECT", "SELF", 
                      "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", "SERIALLY_REUSABLE", 
                      "SERVERERROR", "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", 
                      "SHARE", "SHOW", "SHRINK", "SHUTDOWN", "SIBLINGS", 
                      "SIGNTYPE", "SIMPLE_INTEGER", "SINGLE", "SIZE", "SKIP_", 
                      "SMALLINT", "SNAPSHOT", "SOME", "SORT", "SPACE_KEYWORD", 
                      "SPECIFICATION", "SQLDATA", "SQLERROR", "STANDALONE", 
                      "START", "STARTUP", "STATEMENT", "STATEMENT_ID", "STATIC", 
                      "STATISTICS", "STORAGE", "STORE", "STRING", "SUBMULTISET", 
                      "SUBPARTITION", "SUBPARTITIONS", "SUBSTITUTABLE", 
                      "SUBSTRING", "SUBTYPE", "SUCCESS", "SUPPLEMENTAL", 
                      "SUSPEND", "SYSTEM", "TABLE", "TABLES", "TABLESPACE", 
                      "TEMPLATE", "TEMPORARY", "THAN", "THE", "THEN", "TIME", 
                      "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP_TZ_UNCONSTRAINED", 
                      "TIMESTAMP_UNCONSTRAINED", "TIMEZONE_ABBR", "TIMEZONE_HOUR", 
                      "TIMEZONE_MINUTE", "TIMEZONE_REGION", "TO", "TO_CHAR", 
                      "TO_DATE", "TRAILING", "TRANSACTION", "TRANSLATE", 
                      "TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", "TYPE", 
                      "UNBOUNDED", "UNDER", "UNION", "UNIQUE", "UNLIMITED", 
                      "UNPIVOT", "UNTIL", "UNUSABLE", "UNUSED", "UPDATE", 
                      "UPDATED", "UPGRADE", "UPSERT", "UROWID", "USE", "USING", 
                      "VALIDATE", "VALUE", "VALUES", "VARCHAR", "VARCHAR2", 
                      "VARIABLE", "VARRAY", "VARRAYS", "VARYING", "VERBOSE", 
                      "VERSION", "VERSIONS", "VIRTUAL", "VISIBLE", "WAIT", 
                      "WARNING", "WELLFORMED", "WHEN", "WHENEVER", "WHERE", 
                      "WHILE", "WITH", "WITHIN", "WORK", "WRITE", "XDB", 
                      "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", 
                      "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLINDEX", 
                      "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLQUERY", 
                      "XMLROOT", "XMLSCHEMA", "XMLSERIALIZE", "XMLTABLE", 
                      "XMLTYPE", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", 
                      "ZONE", "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", 
                      "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
                      "CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", 
                      "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", "AVG", 
                      "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", 
                      "RATIO_TO_REPORT", "ROW_NUMBER", "SUM", "VARIANCE", 
                      "REGR_", "STDDEV", "VAR_", "COVAR_", "NATIONAL_CHAR_STRING_LIT", 
                      "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
                      "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
                      "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
                      "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", 
                      "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
                      "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
                      "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", 
                      "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
                      "GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", 
                      "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", 
                      "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
                      "PROMPT", "REGULAR_ID", "ZV" ]

    RULE_swallow_to_semi = 0
    RULE_compilation_unit = 1
    RULE_sql_script = 2
    RULE_sql_explain = 3
    RULE_unit_statement = 4
    RULE_unit_statement_body = 5
    RULE_create_index = 6
    RULE_cluster_index_clause = 7
    RULE_cluster_name = 8
    RULE_index_attributes = 9
    RULE_tablespace = 10
    RULE_key_compression = 11
    RULE_sort_or_nosort = 12
    RULE_visible_or_invisible = 13
    RULE_parallel_clause = 14
    RULE_table_index_clause = 15
    RULE_index_expr = 16
    RULE_index_properties = 17
    RULE_global_partitioned_index = 18
    RULE_index_partitioning_clause = 19
    RULE_partition_name = 20
    RULE_literal = 21
    RULE_string_function = 22
    RULE_expressions = 23
    RULE_individual_hash_partitions = 24
    RULE_partitioning_storage_clause = 25
    RULE_table_compression = 26
    RULE_lob_partitioning_storage = 27
    RULE_lob_item = 28
    RULE_lob_segname = 29
    RULE_varray_item = 30
    RULE_hash_partitions_by_quantity = 31
    RULE_hash_partition_quantity = 32
    RULE_local_partitioned_index = 33
    RULE_on_range_partitioned_table = 34
    RULE_on_list_partitioned_table = 35
    RULE_on_hash_partitioned_table = 36
    RULE_on_comp_partitioned_table = 37
    RULE_index_subpartition_clause = 38
    RULE_subpartition_name = 39
    RULE_domain_index_clause = 40
    RULE_indextype = 41
    RULE_odci_parameters = 42
    RULE_local_domain_index_clause = 43
    RULE_xmlindex_clause = 44
    RULE_local_xmlindex_clause = 45
    RULE_bitmap_join_index_clause = 46
    RULE_create_table = 47
    RULE_relational_table = 48
    RULE_relational_properties = 49
    RULE_column_definition = 50
    RULE_inline_ref_constraint = 51
    RULE_virtual_column_definition = 52
    RULE_out_of_line_constraint = 53
    RULE_foreign_key_clause = 54
    RULE_on_delete_clause = 55
    RULE_out_of_line_ref_constraint = 56
    RULE_supplemental_logging_props = 57
    RULE_supplemental_log_grp_clause = 58
    RULE_log_grp = 59
    RULE_supplemental_id_key_clause = 60
    RULE_physical_properties = 61
    RULE_deferred_segment_creation = 62
    RULE_segment_attributes_clause = 63
    RULE_physical_attributes_clause = 64
    RULE_storage_clause = 65
    RULE_size_clause = 66
    RULE_logging_clause = 67
    RULE_column_properties = 68
    RULE_object_type_col_properties = 69
    RULE_substitutable_column_clause = 70
    RULE_nested_table_col_properties = 71
    RULE_nested_item = 72
    RULE_object_properties = 73
    RULE_inline_constraint = 74
    RULE_references_clause = 75
    RULE_paren_column_list = 76
    RULE_column_list = 77
    RULE_check_constraint = 78
    RULE_constraint_state = 79
    RULE_using_index_clause = 80
    RULE_varray_col_properties = 81
    RULE_varray_storage_clause = 82
    RULE_lob_storage_parameters = 83
    RULE_lob_parameters = 84
    RULE_lob_retention_clause = 85
    RULE_lob_deduplicate_clause = 86
    RULE_lob_compression_clause = 87
    RULE_encryption_spec = 88
    RULE_lob_storage_clause = 89
    RULE_xmltype_column_properties = 90
    RULE_xmltype_storage = 91
    RULE_xmlschema_spec = 92
    RULE_allow_or_disallow = 93
    RULE_table_partitioning_clauses = 94
    RULE_range_partitions = 95
    RULE_range_values_clause = 96
    RULE_table_partition_description = 97
    RULE_list_partitions = 98
    RULE_list_values_clause = 99
    RULE_hash_partitions = 100
    RULE_composite_range_partitions = 101
    RULE_subpartition_by_range = 102
    RULE_subpartition_by_list = 103
    RULE_subpartition_template = 104
    RULE_range_subpartition_desc = 105
    RULE_list_subpartition_desc = 106
    RULE_individual_hash_subparts = 107
    RULE_hash_subpartition_quantity = 108
    RULE_subpartition_by_hash = 109
    RULE_range_partition_desc = 110
    RULE_hash_subparts_by_quantity = 111
    RULE_composite_list_partitions = 112
    RULE_list_partition_desc = 113
    RULE_composite_hash_partitions = 114
    RULE_reference_partitioning = 115
    RULE_reference_partition_desc = 116
    RULE_system_partitioning = 117
    RULE_enable_disable_clause = 118
    RULE_exceptions_clause = 119
    RULE_row_movement_clause = 120
    RULE_flashback_archive_clause = 121
    RULE_object_table = 122
    RULE_object_table_substitution = 123
    RULE_oid_clause = 124
    RULE_oid_index_clause = 125
    RULE_xmltype_table = 126
    RULE_xmltype_virtual_columns = 127
    RULE_drop_table = 128
    RULE_alter_table = 129
    RULE_alter_table_properties = 130
    RULE_alter_table_properties_1 = 131
    RULE_supplemental_table_logging = 132
    RULE_allocate_extent_clause = 133
    RULE_deallocate_unused_clause = 134
    RULE_upgrade_table_clause = 135
    RULE_records_per_block_clause = 136
    RULE_alter_iot_clauses = 137
    RULE_index_org_table_clause = 138
    RULE_mapping_table_clause = 139
    RULE_index_org_overflow_clause = 140
    RULE_alter_overflow_clause = 141
    RULE_add_overflow_clause = 142
    RULE_shrink_clause = 143
    RULE_alter_mapping_table_clause = 144
    RULE_constraint_clauses = 145
    RULE_old_constraint_name = 146
    RULE_new_constraint_name = 147
    RULE_drop_constraint_clause = 148
    RULE_drop_primary_key_or_unique_or_generic_clause = 149
    RULE_column_clauses = 150
    RULE_add_modify_drop_column_clauses = 151
    RULE_add_column_clause = 152
    RULE_modify_column_clauses = 153
    RULE_alter_column_clause = 154
    RULE_modify_col_properties = 155
    RULE_modify_col_substitutable = 156
    RULE_drop_column_clause = 157
    RULE_rename_column_clause = 158
    RULE_old_column_name = 159
    RULE_new_column_name = 160
    RULE_modify_collection_retrieval = 161
    RULE_collection_item = 162
    RULE_modify_lob_storage_clause = 163
    RULE_modify_lob_parameters = 164
    RULE_drop_function = 165
    RULE_alter_function = 166
    RULE_create_function_body = 167
    RULE_parallel_enable_clause = 168
    RULE_partition_by_clause = 169
    RULE_result_cache_clause = 170
    RULE_relies_on_part = 171
    RULE_streaming_clause = 172
    RULE_drop_package = 173
    RULE_alter_package = 174
    RULE_create_package = 175
    RULE_package_body = 176
    RULE_package_spec = 177
    RULE_package_obj_spec = 178
    RULE_procedure_spec = 179
    RULE_function_spec = 180
    RULE_package_obj_body = 181
    RULE_drop_procedure = 182
    RULE_alter_procedure = 183
    RULE_create_procedure_body = 184
    RULE_drop_trigger = 185
    RULE_alter_trigger = 186
    RULE_create_trigger = 187
    RULE_trigger_follows_clause = 188
    RULE_trigger_when_clause = 189
    RULE_simple_dml_trigger = 190
    RULE_for_each_row = 191
    RULE_compound_dml_trigger = 192
    RULE_non_dml_trigger = 193
    RULE_trigger_body = 194
    RULE_routine_clause = 195
    RULE_compound_trigger_block = 196
    RULE_timing_point_section = 197
    RULE_non_dml_event = 198
    RULE_dml_event_clause = 199
    RULE_dml_event_element = 200
    RULE_dml_event_nested_clause = 201
    RULE_referencing_clause = 202
    RULE_referencing_element = 203
    RULE_drop_type = 204
    RULE_alter_type = 205
    RULE_compile_type_clause = 206
    RULE_replace_type_clause = 207
    RULE_alter_method_spec = 208
    RULE_alter_method_element = 209
    RULE_alter_attribute_definition = 210
    RULE_attribute_definition = 211
    RULE_alter_collection_clauses = 212
    RULE_dependent_handling_clause = 213
    RULE_dependent_exceptions_part = 214
    RULE_create_type = 215
    RULE_type_definition = 216
    RULE_object_type_def = 217
    RULE_object_as_part = 218
    RULE_object_under_part = 219
    RULE_nested_table_type_def = 220
    RULE_sqlj_object_type = 221
    RULE_type_body = 222
    RULE_type_body_elements = 223
    RULE_map_order_func_declaration = 224
    RULE_subprog_decl_in_type = 225
    RULE_proc_decl_in_type = 226
    RULE_func_decl_in_type = 227
    RULE_constructor_declaration = 228
    RULE_modifier_clause = 229
    RULE_object_member_spec = 230
    RULE_sqlj_object_type_attr = 231
    RULE_element_spec = 232
    RULE_element_spec_options = 233
    RULE_subprogram_spec = 234
    RULE_type_procedure_spec = 235
    RULE_type_function_spec = 236
    RULE_constructor_spec = 237
    RULE_map_order_function_spec = 238
    RULE_pragma_clause = 239
    RULE_pragma_elements = 240
    RULE_type_elements_parameter = 241
    RULE_drop_sequence = 242
    RULE_alter_sequence = 243
    RULE_create_sequence = 244
    RULE_sequence_spec = 245
    RULE_sequence_start_clause = 246
    RULE_invoker_rights_clause = 247
    RULE_compiler_parameters_clause = 248
    RULE_call_spec = 249
    RULE_java_spec = 250
    RULE_c_spec = 251
    RULE_c_agent_in_clause = 252
    RULE_c_parameters_clause = 253
    RULE_parameter = 254
    RULE_default_value_part = 255
    RULE_declare_spec = 256
    RULE_variable_declaration = 257
    RULE_subtype_declaration = 258
    RULE_cursor_declaration = 259
    RULE_parameter_spec = 260
    RULE_exception_declaration = 261
    RULE_pragma_declaration = 262
    RULE_record_declaration = 263
    RULE_record_type_dec = 264
    RULE_field_spec = 265
    RULE_record_var_dec = 266
    RULE_table_declaration = 267
    RULE_table_type_dec = 268
    RULE_table_indexed_by_part = 269
    RULE_varray_type_def = 270
    RULE_table_var_dec = 271
    RULE_seq_of_statements = 272
    RULE_label_declaration = 273
    RULE_statement = 274
    RULE_assignment_statement = 275
    RULE_continue_statement = 276
    RULE_exit_statement = 277
    RULE_goto_statement = 278
    RULE_if_statement = 279
    RULE_elsif_part = 280
    RULE_else_part = 281
    RULE_loop_statement = 282
    RULE_cursor_loop_param = 283
    RULE_forall_statement = 284
    RULE_bounds_clause = 285
    RULE_between_bound = 286
    RULE_lower_bound = 287
    RULE_upper_bound = 288
    RULE_null_statement = 289
    RULE_raise_statement = 290
    RULE_return_statement = 291
    RULE_function_call = 292
    RULE_body = 293
    RULE_exception_handler = 294
    RULE_trigger_block = 295
    RULE_block = 296
    RULE_sql_statement = 297
    RULE_execute_immediate = 298
    RULE_dynamic_returning_clause = 299
    RULE_data_manipulation_language_statements = 300
    RULE_cursor_manipulation_statements = 301
    RULE_close_statement = 302
    RULE_open_statement = 303
    RULE_fetch_statement = 304
    RULE_open_for_statement = 305
    RULE_transaction_control_statements = 306
    RULE_set_transaction_command = 307
    RULE_set_constraint_command = 308
    RULE_commit_statement = 309
    RULE_write_clause = 310
    RULE_rollback_statement = 311
    RULE_savepoint_statement = 312
    RULE_explain_statement = 313
    RULE_select_statement = 314
    RULE_subquery_factoring_clause = 315
    RULE_factoring_element = 316
    RULE_search_clause = 317
    RULE_cycle_clause = 318
    RULE_subquery = 319
    RULE_subquery_operation_part = 320
    RULE_query_block = 321
    RULE_selected_element = 322
    RULE_from_clause = 323
    RULE_table_ref_pivot = 324
    RULE_table_ref = 325
    RULE_table_ref_aux = 326
    RULE_join_clause = 327
    RULE_join_on_part = 328
    RULE_join_using_part = 329
    RULE_join_type = 330
    RULE_query_partition_clause = 331
    RULE_flashback_query_clause = 332
    RULE_pivot_clause = 333
    RULE_pivot_element = 334
    RULE_pivot_for_clause = 335
    RULE_pivot_in_clause = 336
    RULE_pivot_in_clause_element = 337
    RULE_pivot_in_clause_elements = 338
    RULE_unpivot_clause = 339
    RULE_unpivot_in_clause = 340
    RULE_unpivot_in_elements = 341
    RULE_hierarchical_query_clause = 342
    RULE_start_part = 343
    RULE_group_by_clause = 344
    RULE_group_by_elements = 345
    RULE_rollup_cube_clause = 346
    RULE_grouping_sets_clause = 347
    RULE_grouping_sets_elements = 348
    RULE_having_clause = 349
    RULE_model_clause = 350
    RULE_cell_reference_options = 351
    RULE_return_rows_clause = 352
    RULE_reference_model = 353
    RULE_main_model = 354
    RULE_model_column_clauses = 355
    RULE_model_column_partition_part = 356
    RULE_model_column_list = 357
    RULE_model_column = 358
    RULE_model_rules_clause = 359
    RULE_model_rules_part = 360
    RULE_model_rules_element = 361
    RULE_cell_assignment = 362
    RULE_model_iterate_clause = 363
    RULE_until_part = 364
    RULE_order_by_clause = 365
    RULE_order_by_elements = 366
    RULE_for_update_clause = 367
    RULE_for_update_of_part = 368
    RULE_for_update_options = 369
    RULE_limit_clause = 370
    RULE_update_statement = 371
    RULE_update_set_clause = 372
    RULE_column_based_update_set_clause = 373
    RULE_delete_statement = 374
    RULE_insert_statement = 375
    RULE_single_table_insert = 376
    RULE_multi_table_insert = 377
    RULE_multi_table_element = 378
    RULE_conditional_insert_clause = 379
    RULE_conditional_insert_when_part = 380
    RULE_conditional_insert_else_part = 381
    RULE_insert_into_clause = 382
    RULE_values_clause = 383
    RULE_merge_statement = 384
    RULE_merge_update_clause = 385
    RULE_merge_element = 386
    RULE_merge_update_delete_part = 387
    RULE_merge_insert_clause = 388
    RULE_selected_tableview = 389
    RULE_lock_table_statement = 390
    RULE_wait_nowait_part = 391
    RULE_lock_table_element = 392
    RULE_lock_mode = 393
    RULE_general_table_ref = 394
    RULE_static_returning_clause = 395
    RULE_error_logging_clause = 396
    RULE_error_logging_into_part = 397
    RULE_error_logging_reject_part = 398
    RULE_dml_table_expression_clause = 399
    RULE_table_collection_expression = 400
    RULE_subquery_restriction_clause = 401
    RULE_sample_clause = 402
    RULE_seed_part = 403
    RULE_cursor_expression = 404
    RULE_expression_list = 405
    RULE_condition = 406
    RULE_expression = 407
    RULE_is_part = 408
    RULE_cursor_part = 409
    RULE_multiset_type = 410
    RULE_relational_operator = 411
    RULE_like_type = 412
    RULE_like_escape_part = 413
    RULE_between_elements = 414
    RULE_concatenation = 415
    RULE_binary_expression = 416
    RULE_interval_expression = 417
    RULE_model_expression = 418
    RULE_model_expression_element = 419
    RULE_single_column_for_loop = 420
    RULE_for_like_part = 421
    RULE_for_increment_decrement_type = 422
    RULE_multi_column_for_loop = 423
    RULE_unary_expression = 424
    RULE_case_statement = 425
    RULE_simple_case_statement = 426
    RULE_simple_case_when_part = 427
    RULE_searched_case_statement = 428
    RULE_searched_case_when_part = 429
    RULE_case_else_part = 430
    RULE_atom = 431
    RULE_expression_or_vector = 432
    RULE_vector_expr = 433
    RULE_quantified_expression = 434
    RULE_standard_function = 435
    RULE_aggregate_windowed_function = 436
    RULE_over_clause_keyword = 437
    RULE_within_or_over_clause_keyword = 438
    RULE_standard_prediction_function_keyword = 439
    RULE_over_clause = 440
    RULE_windowing_clause = 441
    RULE_windowing_type = 442
    RULE_windowing_elements = 443
    RULE_using_clause = 444
    RULE_using_element = 445
    RULE_collect_order_by_part = 446
    RULE_within_or_over_part = 447
    RULE_cost_matrix_clause = 448
    RULE_xml_passing_clause = 449
    RULE_xml_attributes_clause = 450
    RULE_xml_namespaces_clause = 451
    RULE_xml_table_column = 452
    RULE_xml_general_default_part = 453
    RULE_xml_multiuse_expression_element = 454
    RULE_xmlroot_param_version_part = 455
    RULE_xmlroot_param_standalone_part = 456
    RULE_xmlserialize_param_enconding_part = 457
    RULE_xmlserialize_param_version_part = 458
    RULE_xmlserialize_param_ident_part = 459
    RULE_sql_plus_command = 460
    RULE_whenever_command = 461
    RULE_set_command = 462
    RULE_exit_command = 463
    RULE_prompt_command = 464
    RULE_show_errors_command = 465
    RULE_partition_extension_clause = 466
    RULE_column_alias = 467
    RULE_table_alias = 468
    RULE_alias_quoted_string = 469
    RULE_where_clause = 470
    RULE_current_of_clause = 471
    RULE_into_clause = 472
    RULE_xml_column_name = 473
    RULE_cost_class_name = 474
    RULE_attribute_name = 475
    RULE_savepoint_name = 476
    RULE_rollback_segment_name = 477
    RULE_table_var_name = 478
    RULE_schema_name = 479
    RULE_routine_name = 480
    RULE_package_name = 481
    RULE_implementation_type_name = 482
    RULE_parameter_name = 483
    RULE_reference_model_name = 484
    RULE_main_model_name = 485
    RULE_aggregate_function_name = 486
    RULE_query_name = 487
    RULE_constraint_name = 488
    RULE_label_name = 489
    RULE_type_name = 490
    RULE_sequence_name = 491
    RULE_exception_name = 492
    RULE_function_name = 493
    RULE_procedure_name = 494
    RULE_trigger_name = 495
    RULE_variable_name = 496
    RULE_index_name = 497
    RULE_cursor_name = 498
    RULE_record_name = 499
    RULE_collection_name = 500
    RULE_link_name = 501
    RULE_column_name = 502
    RULE_tableview_name = 503
    RULE_dot_id = 504
    RULE_star = 505
    RULE_keep_clause = 506
    RULE_function_argument = 507
    RULE_function_argument_analytic = 508
    RULE_function_argument_modeling = 509
    RULE_respect_or_ignore_nulls = 510
    RULE_argument = 511
    RULE_type_spec = 512
    RULE_datatype = 513
    RULE_precision_part = 514
    RULE_native_datatype_element = 515
    RULE_bind_variable = 516
    RULE_general_element = 517
    RULE_table_element = 518
    RULE_constant = 519
    RULE_numeric = 520
    RULE_numeric_negative = 521
    RULE_quoted_string = 522
    RULE_r_id = 523
    RULE_id_expression = 524
    RULE_not_equal_op = 525
    RULE_greater_than_or_equals_op = 526
    RULE_less_than_or_equals_op = 527
    RULE_concatenation_op = 528
    RULE_outer_join_sign = 529
    RULE_regular_id = 530

    ruleNames =  [ "swallow_to_semi", "compilation_unit", "sql_script", 
                   "sql_explain", "unit_statement", "unit_statement_body", 
                   "create_index", "cluster_index_clause", "cluster_name", 
                   "index_attributes", "tablespace", "key_compression", 
                   "sort_or_nosort", "visible_or_invisible", "parallel_clause", 
                   "table_index_clause", "index_expr", "index_properties", 
                   "global_partitioned_index", "index_partitioning_clause", 
                   "partition_name", "literal", "string_function", "expressions", 
                   "individual_hash_partitions", "partitioning_storage_clause", 
                   "table_compression", "lob_partitioning_storage", "lob_item", 
                   "lob_segname", "varray_item", "hash_partitions_by_quantity", 
                   "hash_partition_quantity", "local_partitioned_index", 
                   "on_range_partitioned_table", "on_list_partitioned_table", 
                   "on_hash_partitioned_table", "on_comp_partitioned_table", 
                   "index_subpartition_clause", "subpartition_name", "domain_index_clause", 
                   "indextype", "odci_parameters", "local_domain_index_clause", 
                   "xmlindex_clause", "local_xmlindex_clause", "bitmap_join_index_clause", 
                   "create_table", "relational_table", "relational_properties", 
                   "column_definition", "inline_ref_constraint", "virtual_column_definition", 
                   "out_of_line_constraint", "foreign_key_clause", "on_delete_clause", 
                   "out_of_line_ref_constraint", "supplemental_logging_props", 
                   "supplemental_log_grp_clause", "log_grp", "supplemental_id_key_clause", 
                   "physical_properties", "deferred_segment_creation", "segment_attributes_clause", 
                   "physical_attributes_clause", "storage_clause", "size_clause", 
                   "logging_clause", "column_properties", "object_type_col_properties", 
                   "substitutable_column_clause", "nested_table_col_properties", 
                   "nested_item", "object_properties", "inline_constraint", 
                   "references_clause", "paren_column_list", "column_list", 
                   "check_constraint", "constraint_state", "using_index_clause", 
                   "varray_col_properties", "varray_storage_clause", "lob_storage_parameters", 
                   "lob_parameters", "lob_retention_clause", "lob_deduplicate_clause", 
                   "lob_compression_clause", "encryption_spec", "lob_storage_clause", 
                   "xmltype_column_properties", "xmltype_storage", "xmlschema_spec", 
                   "allow_or_disallow", "table_partitioning_clauses", "range_partitions", 
                   "range_values_clause", "table_partition_description", 
                   "list_partitions", "list_values_clause", "hash_partitions", 
                   "composite_range_partitions", "subpartition_by_range", 
                   "subpartition_by_list", "subpartition_template", "range_subpartition_desc", 
                   "list_subpartition_desc", "individual_hash_subparts", 
                   "hash_subpartition_quantity", "subpartition_by_hash", 
                   "range_partition_desc", "hash_subparts_by_quantity", 
                   "composite_list_partitions", "list_partition_desc", "composite_hash_partitions", 
                   "reference_partitioning", "reference_partition_desc", 
                   "system_partitioning", "enable_disable_clause", "exceptions_clause", 
                   "row_movement_clause", "flashback_archive_clause", "object_table", 
                   "object_table_substitution", "oid_clause", "oid_index_clause", 
                   "xmltype_table", "xmltype_virtual_columns", "drop_table", 
                   "alter_table", "alter_table_properties", "alter_table_properties_1", 
                   "supplemental_table_logging", "allocate_extent_clause", 
                   "deallocate_unused_clause", "upgrade_table_clause", "records_per_block_clause", 
                   "alter_iot_clauses", "index_org_table_clause", "mapping_table_clause", 
                   "index_org_overflow_clause", "alter_overflow_clause", 
                   "add_overflow_clause", "shrink_clause", "alter_mapping_table_clause", 
                   "constraint_clauses", "old_constraint_name", "new_constraint_name", 
                   "drop_constraint_clause", "drop_primary_key_or_unique_or_generic_clause", 
                   "column_clauses", "add_modify_drop_column_clauses", "add_column_clause", 
                   "modify_column_clauses", "alter_column_clause", "modify_col_properties", 
                   "modify_col_substitutable", "drop_column_clause", "rename_column_clause", 
                   "old_column_name", "new_column_name", "modify_collection_retrieval", 
                   "collection_item", "modify_lob_storage_clause", "modify_lob_parameters", 
                   "drop_function", "alter_function", "create_function_body", 
                   "parallel_enable_clause", "partition_by_clause", "result_cache_clause", 
                   "relies_on_part", "streaming_clause", "drop_package", 
                   "alter_package", "create_package", "package_body", "package_spec", 
                   "package_obj_spec", "procedure_spec", "function_spec", 
                   "package_obj_body", "drop_procedure", "alter_procedure", 
                   "create_procedure_body", "drop_trigger", "alter_trigger", 
                   "create_trigger", "trigger_follows_clause", "trigger_when_clause", 
                   "simple_dml_trigger", "for_each_row", "compound_dml_trigger", 
                   "non_dml_trigger", "trigger_body", "routine_clause", 
                   "compound_trigger_block", "timing_point_section", "non_dml_event", 
                   "dml_event_clause", "dml_event_element", "dml_event_nested_clause", 
                   "referencing_clause", "referencing_element", "drop_type", 
                   "alter_type", "compile_type_clause", "replace_type_clause", 
                   "alter_method_spec", "alter_method_element", "alter_attribute_definition", 
                   "attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
                   "dependent_exceptions_part", "create_type", "type_definition", 
                   "object_type_def", "object_as_part", "object_under_part", 
                   "nested_table_type_def", "sqlj_object_type", "type_body", 
                   "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
                   "proc_decl_in_type", "func_decl_in_type", "constructor_declaration", 
                   "modifier_clause", "object_member_spec", "sqlj_object_type_attr", 
                   "element_spec", "element_spec_options", "subprogram_spec", 
                   "type_procedure_spec", "type_function_spec", "constructor_spec", 
                   "map_order_function_spec", "pragma_clause", "pragma_elements", 
                   "type_elements_parameter", "drop_sequence", "alter_sequence", 
                   "create_sequence", "sequence_spec", "sequence_start_clause", 
                   "invoker_rights_clause", "compiler_parameters_clause", 
                   "call_spec", "java_spec", "c_spec", "c_agent_in_clause", 
                   "c_parameters_clause", "parameter", "default_value_part", 
                   "declare_spec", "variable_declaration", "subtype_declaration", 
                   "cursor_declaration", "parameter_spec", "exception_declaration", 
                   "pragma_declaration", "record_declaration", "record_type_dec", 
                   "field_spec", "record_var_dec", "table_declaration", 
                   "table_type_dec", "table_indexed_by_part", "varray_type_def", 
                   "table_var_dec", "seq_of_statements", "label_declaration", 
                   "statement", "assignment_statement", "continue_statement", 
                   "exit_statement", "goto_statement", "if_statement", "elsif_part", 
                   "else_part", "loop_statement", "cursor_loop_param", "forall_statement", 
                   "bounds_clause", "between_bound", "lower_bound", "upper_bound", 
                   "null_statement", "raise_statement", "return_statement", 
                   "function_call", "body", "exception_handler", "trigger_block", 
                   "block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
                   "data_manipulation_language_statements", "cursor_manipulation_statements", 
                   "close_statement", "open_statement", "fetch_statement", 
                   "open_for_statement", "transaction_control_statements", 
                   "set_transaction_command", "set_constraint_command", 
                   "commit_statement", "write_clause", "rollback_statement", 
                   "savepoint_statement", "explain_statement", "select_statement", 
                   "subquery_factoring_clause", "factoring_element", "search_clause", 
                   "cycle_clause", "subquery", "subquery_operation_part", 
                   "query_block", "selected_element", "from_clause", "table_ref_pivot", 
                   "table_ref", "table_ref_aux", "join_clause", "join_on_part", 
                   "join_using_part", "join_type", "query_partition_clause", 
                   "flashback_query_clause", "pivot_clause", "pivot_element", 
                   "pivot_for_clause", "pivot_in_clause", "pivot_in_clause_element", 
                   "pivot_in_clause_elements", "unpivot_clause", "unpivot_in_clause", 
                   "unpivot_in_elements", "hierarchical_query_clause", "start_part", 
                   "group_by_clause", "group_by_elements", "rollup_cube_clause", 
                   "grouping_sets_clause", "grouping_sets_elements", "having_clause", 
                   "model_clause", "cell_reference_options", "return_rows_clause", 
                   "reference_model", "main_model", "model_column_clauses", 
                   "model_column_partition_part", "model_column_list", "model_column", 
                   "model_rules_clause", "model_rules_part", "model_rules_element", 
                   "cell_assignment", "model_iterate_clause", "until_part", 
                   "order_by_clause", "order_by_elements", "for_update_clause", 
                   "for_update_of_part", "for_update_options", "limit_clause", 
                   "update_statement", "update_set_clause", "column_based_update_set_clause", 
                   "delete_statement", "insert_statement", "single_table_insert", 
                   "multi_table_insert", "multi_table_element", "conditional_insert_clause", 
                   "conditional_insert_when_part", "conditional_insert_else_part", 
                   "insert_into_clause", "values_clause", "merge_statement", 
                   "merge_update_clause", "merge_element", "merge_update_delete_part", 
                   "merge_insert_clause", "selected_tableview", "lock_table_statement", 
                   "wait_nowait_part", "lock_table_element", "lock_mode", 
                   "general_table_ref", "static_returning_clause", "error_logging_clause", 
                   "error_logging_into_part", "error_logging_reject_part", 
                   "dml_table_expression_clause", "table_collection_expression", 
                   "subquery_restriction_clause", "sample_clause", "seed_part", 
                   "cursor_expression", "expression_list", "condition", 
                   "expression", "is_part", "cursor_part", "multiset_type", 
                   "relational_operator", "like_type", "like_escape_part", 
                   "between_elements", "concatenation", "binary_expression", 
                   "interval_expression", "model_expression", "model_expression_element", 
                   "single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
                   "multi_column_for_loop", "unary_expression", "case_statement", 
                   "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
                   "searched_case_when_part", "case_else_part", "atom", 
                   "expression_or_vector", "vector_expr", "quantified_expression", 
                   "standard_function", "aggregate_windowed_function", "over_clause_keyword", 
                   "within_or_over_clause_keyword", "standard_prediction_function_keyword", 
                   "over_clause", "windowing_clause", "windowing_type", 
                   "windowing_elements", "using_clause", "using_element", 
                   "collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
                   "xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
                   "xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
                   "xmlroot_param_version_part", "xmlroot_param_standalone_part", 
                   "xmlserialize_param_enconding_part", "xmlserialize_param_version_part", 
                   "xmlserialize_param_ident_part", "sql_plus_command", 
                   "whenever_command", "set_command", "exit_command", "prompt_command", 
                   "show_errors_command", "partition_extension_clause", 
                   "column_alias", "table_alias", "alias_quoted_string", 
                   "where_clause", "current_of_clause", "into_clause", "xml_column_name", 
                   "cost_class_name", "attribute_name", "savepoint_name", 
                   "rollback_segment_name", "table_var_name", "schema_name", 
                   "routine_name", "package_name", "implementation_type_name", 
                   "parameter_name", "reference_model_name", "main_model_name", 
                   "aggregate_function_name", "query_name", "constraint_name", 
                   "label_name", "type_name", "sequence_name", "exception_name", 
                   "function_name", "procedure_name", "trigger_name", "variable_name", 
                   "index_name", "cursor_name", "record_name", "collection_name", 
                   "link_name", "column_name", "tableview_name", "dot_id", 
                   "star", "keep_clause", "function_argument", "function_argument_analytic", 
                   "function_argument_modeling", "respect_or_ignore_nulls", 
                   "argument", "type_spec", "datatype", "precision_part", 
                   "native_datatype_element", "bind_variable", "general_element", 
                   "table_element", "constant", "numeric", "numeric_negative", 
                   "quoted_string", "r_id", "id_expression", "not_equal_op", 
                   "greater_than_or_equals_op", "less_than_or_equals_op", 
                   "concatenation_op", "outer_join_sign", "regular_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    A_LETTER=4
    ADD=5
    AFTER=6
    AGENT=7
    AGGREGATE=8
    ALL=9
    ALLOCATE=10
    ALLOW=11
    ALTER=12
    ALWAYS=13
    ANALYZE=14
    AND=15
    ANY=16
    ANYSCHEMA=17
    ARCHIVE=18
    ARRAY=19
    AS=20
    ASC=21
    ASSOCIATE=22
    AT=23
    ATTRIBUTE=24
    AUDIT=25
    AUTHID=26
    AUTO=27
    AUTOMATIC=28
    AUTONOMOUS_TRANSACTION=29
    BASIC=30
    BASICFILE=31
    BATCH=32
    BEFORE=33
    BEGIN=34
    BETWEEN=35
    BFILE=36
    BINARY=37
    BINARY_DOUBLE=38
    BINARY_FLOAT=39
    BINARY_INTEGER=40
    BITMAP=41
    BUFFER_POOL=42
    BLOB=43
    BLOCK=44
    BODY=45
    BOOLEAN=46
    BOTH=47
    BREADTH=48
    BULK=49
    BY=50
    BYTE=51
    C_LETTER=52
    CACHE=53
    CALL=54
    CANONICAL=55
    CASCADE=56
    CASE=57
    CAST=58
    CHAR=59
    CHAR_CS=60
    CHARACTER=61
    CHECK=62
    CHECKPOINT=63
    CHR=64
    CHUNK=65
    CLOB=66
    CLOSE=67
    CLUSTER=68
    COALESCE=69
    COLLECT=70
    COLUMN=71
    COLUMNS=72
    COLUMN_VALUE=73
    COMMENT=74
    COMMIT=75
    COMMITTED=76
    COMPACT=77
    COMPATIBILITY=78
    COMPILE=79
    COMPOUND=80
    COMPRESS=81
    CONCAT=82
    CONNECT=83
    CONNECT_BY_ROOT=84
    CONSTANT=85
    CONSTRAINT=86
    CONSTRAINTS=87
    CONSTRUCTOR=88
    CONTENT=89
    CONTEXT=90
    CONTINUE=91
    CONVERT=92
    CORRUPT_XID=93
    CORRUPT_XID_ALL=94
    COST=95
    COUNT=96
    CREATE=97
    CREATION=98
    CROSS=99
    CUBE=100
    CURRENT=101
    CURRENT_USER=102
    CURSOR=103
    CUSTOMDATUM=104
    CYCLE=105
    DATA=106
    DATABASE=107
    DATAFILE=108
    DATE=109
    DAY=110
    DB_ROLE_CHANGE=111
    DBTIMEZONE=112
    DDL=113
    DEBUG=114
    DEALLOCATE=115
    DEC=116
    DECIMAL=117
    DECLARE=118
    DECODE=119
    DECOMPOSE=120
    DECREMENT=121
    DECRYPT=122
    DEDUPLICATE=123
    DEFAULT=124
    DEFAULTS=125
    DEFERRABLE=126
    DEFERRED=127
    DEFINER=128
    DELETE=129
    DEPTH=130
    DESC=131
    DETERMINISTIC=132
    DIMENSION=133
    DISABLE=134
    DISALLOW=135
    DISASSOCIATE=136
    DISTINCT=137
    DOCUMENT=138
    DOUBLE=139
    DROP=140
    DSINTERVAL_UNCONSTRAINED=141
    EACH=142
    ELEMENT=143
    ELSE=144
    ELSIF=145
    EMPTY=146
    ENABLE=147
    ENCODING=148
    ENCRYPT=149
    END=150
    ENTITYESCAPING=151
    ERR=152
    ERRORS=153
    ESCAPE=154
    EVALNAME=155
    EXCEPT=156
    EXCEPTION=157
    EXCEPTION_INIT=158
    EXCEPTIONS=159
    EXCLUDE=160
    EXCLUSIVE=161
    EXECUTE=162
    EXISTS=163
    EXIT=164
    EXPLAIN=165
    EXTENT=166
    EXTERNAL=167
    EXTRACT=168
    FAILURE=169
    FALSE=170
    FETCH=171
    FILESYSTEM_LIKE_LOGGING=172
    FINAL=173
    FIRST=174
    FIRST_VALUE=175
    FLASHBACK=176
    FLASH_CACHE=177
    FLOAT=178
    FOLLOWING=179
    FOLLOWS=180
    FOR=181
    FORALL=182
    FORCE=183
    FOREIGN=184
    FREELIST=185
    FREELISTS=186
    FREEPOOLS=187
    FROM=188
    FULL=189
    FUNCTION=190
    GENERATED=191
    GLOBAL=192
    GOTO=193
    GRANT=194
    GROUP=195
    GROUPS=196
    GROUPING=197
    HASH=198
    HAVING=199
    HIDE=200
    HIGH=201
    HOUR=202
    IDENTIFIED=203
    IDENTIFIER=204
    IF=205
    IGNORE=206
    ILIKE=207
    IMMEDIATE=208
    IN=209
    INCLUDE=210
    INCLUDING=211
    INCREMENT=212
    INDENT=213
    INDEX=214
    INDEXED=215
    INDEXTYPE=216
    INDICATOR=217
    INDICES=218
    INFINITE=219
    INITIAL=220
    INITIALLY=221
    INITRANS=222
    INLINE=223
    INNER=224
    INOUT=225
    INSERT=226
    INSTANCE=227
    INSTANTIABLE=228
    INSTEAD=229
    INT=230
    INTEGER=231
    INTERSECT=232
    INTERVAL=233
    INTO=234
    INVALIDATE=235
    INVISIBLE=236
    IS=237
    ISOLATION=238
    ITERATE=239
    JAVA=240
    JOIN=241
    KEEP=242
    KEEP_DUPLICATES=243
    KEY=244
    LANGUAGE=245
    LAST=246
    LAST_VALUE=247
    LEADING=248
    LEFT=249
    LESS=250
    LEVEL=251
    LEVELS=252
    LIBRARY=253
    LIKE=254
    LIKE2=255
    LIKE4=256
    LIKEC=257
    LIMIT=258
    LIST=259
    LOCAL=260
    LOB=261
    LOBS=262
    LOCATOR=263
    LOCK=264
    LOCKED=265
    LOG=266
    LOGGING=267
    LOGOFF=268
    LOGON=269
    LONG=270
    LOOP=271
    LOW=272
    MAIN=273
    MAP=274
    MAPPING=275
    MATCHED=276
    MAXEXTENTS=277
    MAXVALUE=278
    MEASURES=279
    MEDIUM=280
    MEMBER=281
    MERGE=282
    MINEXTENTS=283
    MINIMIZE=284
    MINUS=285
    MINUTE=286
    MINVALUE=287
    MLSLABEL=288
    MODE=289
    MODEL=290
    MODIFY=291
    MONTH=292
    MOVEMENT=293
    MULTISET=294
    NAME=295
    NAN=296
    NATURAL=297
    NATURALN=298
    NAV=299
    NCHAR=300
    NCHAR_CS=301
    NCLOB=302
    NESTED=303
    NEW=304
    NEXT=305
    NO=306
    NOAUDIT=307
    NOCACHE=308
    NOCOMPRESS=309
    NOCOPY=310
    NOCYCLE=311
    NOENTITYESCAPING=312
    NOLOGGING=313
    NOMAPPING=314
    NOMAXVALUE=315
    NOMINIMIZE=316
    NOMINVALUE=317
    NONE=318
    NONSCHEMA=319
    NOORDER=320
    NOPARALLEL=321
    NORELY=322
    NOROWDEPENDENCIES=323
    NOSCHEMACHECK=324
    NOSORT=325
    NOT=326
    NOVALIDATE=327
    NOWAIT=328
    NVL=329
    NULL=330
    NULLS=331
    NUMBER=332
    NUMERIC=333
    NVARCHAR2=334
    OBJECT=335
    OF=336
    OFF=337
    OID=338
    OIDINDEX=339
    OLD=340
    OLTP=341
    ON=342
    ONLY=343
    OPEN=344
    OPTIMAL=345
    OPTION=346
    OR=347
    ORADATA=348
    ORDER=349
    ORDINALITY=350
    OSERROR=351
    OUT=352
    OUTER=353
    OVER=354
    OVERFLOW=355
    OVERRIDING=356
    PACKAGE=357
    PARALLEL=358
    PARALLEL_ENABLE=359
    PARAMETERS=360
    PARENT=361
    PARTITION=362
    PASSING=363
    PATH=364
    PCTFREE=365
    PCTINCREASE=366
    PCTTHRESHOLD=367
    PCTUSED=368
    PCTVERSION=369
    PERCENT_ROWTYPE=370
    PERCENT_TYPE=371
    PIPELINED=372
    PIVOT=373
    PLAN=374
    PLS_INTEGER=375
    PARTITIONS=376
    POSITION=377
    POSITIVE=378
    POSITIVEN=379
    PRAGMA=380
    PRECEDING=381
    PRECISION=382
    PRESENT=383
    PRESERVE=384
    PRIMARY=385
    PRIOR=386
    PROCEDURE=387
    PURGE=388
    QUERY=389
    RAISE=390
    RANGE=391
    RAW=392
    READ=393
    READS=394
    REAL=395
    REBUILD=396
    RECORD=397
    RECORDS_PER_BLOCK=398
    RECYCLE=399
    REF=400
    REFERENCE=401
    REFERENCES=402
    REFERENCING=403
    REJECT=404
    REKEY=405
    RELATIONAL=406
    RELIES_ON=407
    RELY=408
    RENAME=409
    REPLACE=410
    RESPECT=411
    RESTRICT_REFERENCES=412
    RESULT=413
    RESULT_CACHE=414
    RETENTION=415
    RETURN=416
    RETURNING=417
    REUSE=418
    REVERSE=419
    REVOKE=420
    RIGHT=421
    ROLLBACK=422
    ROLLUP=423
    ROW=424
    ROWDEPENDENCIES=425
    ROWID=426
    ROWS=427
    RULES=428
    SALT=429
    SAMPLE=430
    SAVE=431
    SAVEPOINT=432
    SCHEMA=433
    SCHEMACHECK=434
    SCN=435
    SCOPE=436
    SEARCH=437
    SECOND=438
    SECUREFILE=439
    SEED=440
    SEGMENT=441
    SELECT=442
    SELF=443
    SEQUENCE=444
    SEQUENTIAL=445
    SERIALIZABLE=446
    SERIALLY_REUSABLE=447
    SERVERERROR=448
    SESSIONTIMEZONE=449
    SET=450
    SETS=451
    SETTINGS=452
    SHARE=453
    SHOW=454
    SHRINK=455
    SHUTDOWN=456
    SIBLINGS=457
    SIGNTYPE=458
    SIMPLE_INTEGER=459
    SINGLE=460
    SIZE=461
    SKIP_=462
    SMALLINT=463
    SNAPSHOT=464
    SOME=465
    SORT=466
    SPACE_KEYWORD=467
    SPECIFICATION=468
    SQLDATA=469
    SQLERROR=470
    STANDALONE=471
    START=472
    STARTUP=473
    STATEMENT=474
    STATEMENT_ID=475
    STATIC=476
    STATISTICS=477
    STORAGE=478
    STORE=479
    STRING=480
    SUBMULTISET=481
    SUBPARTITION=482
    SUBPARTITIONS=483
    SUBSTITUTABLE=484
    SUBSTRING=485
    SUBTYPE=486
    SUCCESS=487
    SUPPLEMENTAL=488
    SUSPEND=489
    SYSTEM=490
    TABLE=491
    TABLES=492
    TABLESPACE=493
    TEMPLATE=494
    TEMPORARY=495
    THAN=496
    THE=497
    THEN=498
    TIME=499
    TIMESTAMP=500
    TIMESTAMP_LTZ_UNCONSTRAINED=501
    TIMESTAMP_TZ_UNCONSTRAINED=502
    TIMESTAMP_UNCONSTRAINED=503
    TIMEZONE_ABBR=504
    TIMEZONE_HOUR=505
    TIMEZONE_MINUTE=506
    TIMEZONE_REGION=507
    TO=508
    TO_CHAR=509
    TO_DATE=510
    TRAILING=511
    TRANSACTION=512
    TRANSLATE=513
    TREAT=514
    TRIGGER=515
    TRIM=516
    TRUE=517
    TRUNCATE=518
    TYPE=519
    UNBOUNDED=520
    UNDER=521
    UNION=522
    UNIQUE=523
    UNLIMITED=524
    UNPIVOT=525
    UNTIL=526
    UNUSABLE=527
    UNUSED=528
    UPDATE=529
    UPDATED=530
    UPGRADE=531
    UPSERT=532
    UROWID=533
    USE=534
    USING=535
    VALIDATE=536
    VALUE=537
    VALUES=538
    VARCHAR=539
    VARCHAR2=540
    VARIABLE=541
    VARRAY=542
    VARRAYS=543
    VARYING=544
    VERBOSE=545
    VERSION=546
    VERSIONS=547
    VIRTUAL=548
    VISIBLE=549
    WAIT=550
    WARNING=551
    WELLFORMED=552
    WHEN=553
    WHENEVER=554
    WHERE=555
    WHILE=556
    WITH=557
    WITHIN=558
    WORK=559
    WRITE=560
    XDB=561
    XML=562
    XMLAGG=563
    XMLATTRIBUTES=564
    XMLCAST=565
    XMLCOLATTVAL=566
    XMLELEMENT=567
    XMLEXISTS=568
    XMLFOREST=569
    XMLINDEX=570
    XMLNAMESPACES=571
    XMLPARSE=572
    XMLPI=573
    XMLQUERY=574
    XMLROOT=575
    XMLSCHEMA=576
    XMLSERIALIZE=577
    XMLTABLE=578
    XMLTYPE=579
    YEAR=580
    YES=581
    YMINTERVAL_UNCONSTRAINED=582
    ZONE=583
    PREDICTION=584
    PREDICTION_BOUNDS=585
    PREDICTION_COST=586
    PREDICTION_DETAILS=587
    PREDICTION_PROBABILITY=588
    PREDICTION_SET=589
    CUME_DIST=590
    DENSE_RANK=591
    LISTAGG=592
    PERCENT_RANK=593
    PERCENTILE_CONT=594
    PERCENTILE_DISC=595
    RANK=596
    AVG=597
    CORR=598
    LAG=599
    LEAD=600
    MAX=601
    MEDIAN=602
    MIN=603
    NTILE=604
    RATIO_TO_REPORT=605
    ROW_NUMBER=606
    SUM=607
    VARIANCE=608
    REGR_=609
    STDDEV=610
    VAR_=611
    COVAR_=612
    NATIONAL_CHAR_STRING_LIT=613
    BIT_STRING_LIT=614
    HEX_STRING_LIT=615
    DOUBLE_PERIOD=616
    PERIOD=617
    UNSIGNED_INTEGER=618
    APPROXIMATE_NUM_LIT=619
    CHAR_STRING=620
    DELIMITED_ID=621
    PERCENT=622
    AMPERSAND=623
    LEFT_PAREN=624
    RIGHT_PAREN=625
    DOUBLE_ASTERISK=626
    ASTERISK=627
    PLUS_SIGN=628
    MINUS_SIGN=629
    COMMA=630
    SOLIDUS=631
    AT_SIGN=632
    ASSIGN_OP=633
    BINDVAR=634
    COLON=635
    SEMICOLON=636
    LESS_THAN_OR_EQUALS_OP=637
    LESS_THAN_OP=638
    GREATER_THAN_OR_EQUALS_OP=639
    NOT_EQUAL_OP=640
    CARRET_OPERATOR_PART=641
    TILDE_OPERATOR_PART=642
    EXCLAMATION_OPERATOR_PART=643
    GREATER_THAN_OP=644
    CONCATENATION_OP=645
    VERTICAL_BAR=646
    EQUALS_OP=647
    LEFT_BRACKET=648
    RIGHT_BRACKET=649
    INTRODUCER=650
    SPACES=651
    SINGLE_LINE_COMMENT=652
    MULTI_LINE_COMMENT=653
    PROMPT=654
    REGULAR_ID=655
    ZV=656

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Swallow_to_semiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SEMICOLON)
            else:
                return self.getToken(plsqlParser.SEMICOLON, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_swallow_to_semi

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwallow_to_semi" ):
                return visitor.visitSwallow_to_semi(self)
            else:
                return visitor.visitChildren(self)




    def swallow_to_semi(self):

        localctx = plsqlParser.Swallow_to_semiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_swallow_to_semi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1062
                _la = self._input.LA(1)
                if _la <= 0 or _la==plsqlParser.SEMICOLON:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1065 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.T__0) | (1 << plsqlParser.T__1) | (1 << plsqlParser.T__2) | (1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ALLOCATE) | (1 << plsqlParser.ALLOW) | (1 << plsqlParser.ALTER) | (1 << plsqlParser.ALWAYS) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.AND) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ANYSCHEMA) | (1 << plsqlParser.ARCHIVE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASC) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BASIC) | (1 << plsqlParser.BASICFILE) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BEGIN) | (1 << plsqlParser.BETWEEN) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BITMAP) | (1 << plsqlParser.BUFFER_POOL) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BREADTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BY) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CACHE) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHECK) | (1 << plsqlParser.CHECKPOINT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CHUNK - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMN - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COLUMN_VALUE - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPACT - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.COMPRESS - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONNECT - 64)) | (1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CREATE - 64)) | (1 << (plsqlParser.CREATION - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATAFILE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEALLOCATE - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECLARE - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DECRYPT - 64)) | (1 << (plsqlParser.DEDUPLICATE - 64)) | (1 << (plsqlParser.DEFAULT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRABLE - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DELETE - 128)) | (1 << (plsqlParser.DEPTH - 128)) | (1 << (plsqlParser.DESC - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISALLOW - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DISTINCT - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DROP - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.ELSE - 128)) | (1 << (plsqlParser.ELSIF - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENCRYPT - 128)) | (1 << (plsqlParser.END - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPT - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXCLUSIVE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTENT - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FETCH - 128)) | (1 << (plsqlParser.FILESYSTEM_LIKE_LOGGING - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLASHBACK - 128)) | (1 << (plsqlParser.FLASH_CACHE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FOR - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FOREIGN - 128)) | (1 << (plsqlParser.FREELIST - 128)) | (1 << (plsqlParser.FREELISTS - 128)) | (1 << (plsqlParser.FREEPOOLS - 128)) | (1 << (plsqlParser.FROM - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)) | (1 << (plsqlParser.GENERATED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (plsqlParser.GLOBAL - 192)) | (1 << (plsqlParser.GOTO - 192)) | (1 << (plsqlParser.GRANT - 192)) | (1 << (plsqlParser.GROUP - 192)) | (1 << (plsqlParser.GROUPS - 192)) | (1 << (plsqlParser.GROUPING - 192)) | (1 << (plsqlParser.HASH - 192)) | (1 << (plsqlParser.HAVING - 192)) | (1 << (plsqlParser.HIDE - 192)) | (1 << (plsqlParser.HIGH - 192)) | (1 << (plsqlParser.HOUR - 192)) | (1 << (plsqlParser.IDENTIFIED - 192)) | (1 << (plsqlParser.IDENTIFIER - 192)) | (1 << (plsqlParser.IF - 192)) | (1 << (plsqlParser.IGNORE - 192)) | (1 << (plsqlParser.ILIKE - 192)) | (1 << (plsqlParser.IMMEDIATE - 192)) | (1 << (plsqlParser.IN - 192)) | (1 << (plsqlParser.INCLUDE - 192)) | (1 << (plsqlParser.INCLUDING - 192)) | (1 << (plsqlParser.INCREMENT - 192)) | (1 << (plsqlParser.INDENT - 192)) | (1 << (plsqlParser.INDEX - 192)) | (1 << (plsqlParser.INDEXED - 192)) | (1 << (plsqlParser.INDEXTYPE - 192)) | (1 << (plsqlParser.INDICATOR - 192)) | (1 << (plsqlParser.INDICES - 192)) | (1 << (plsqlParser.INFINITE - 192)) | (1 << (plsqlParser.INITIAL - 192)) | (1 << (plsqlParser.INITIALLY - 192)) | (1 << (plsqlParser.INITRANS - 192)) | (1 << (plsqlParser.INLINE - 192)) | (1 << (plsqlParser.INNER - 192)) | (1 << (plsqlParser.INOUT - 192)) | (1 << (plsqlParser.INSERT - 192)) | (1 << (plsqlParser.INSTANCE - 192)) | (1 << (plsqlParser.INSTANTIABLE - 192)) | (1 << (plsqlParser.INSTEAD - 192)) | (1 << (plsqlParser.INT - 192)) | (1 << (plsqlParser.INTEGER - 192)) | (1 << (plsqlParser.INTERSECT - 192)) | (1 << (plsqlParser.INTERVAL - 192)) | (1 << (plsqlParser.INTO - 192)) | (1 << (plsqlParser.INVALIDATE - 192)) | (1 << (plsqlParser.INVISIBLE - 192)) | (1 << (plsqlParser.IS - 192)) | (1 << (plsqlParser.ISOLATION - 192)) | (1 << (plsqlParser.ITERATE - 192)) | (1 << (plsqlParser.JAVA - 192)) | (1 << (plsqlParser.JOIN - 192)) | (1 << (plsqlParser.KEEP - 192)) | (1 << (plsqlParser.KEEP_DUPLICATES - 192)) | (1 << (plsqlParser.KEY - 192)) | (1 << (plsqlParser.LANGUAGE - 192)) | (1 << (plsqlParser.LAST - 192)) | (1 << (plsqlParser.LAST_VALUE - 192)) | (1 << (plsqlParser.LEADING - 192)) | (1 << (plsqlParser.LEFT - 192)) | (1 << (plsqlParser.LESS - 192)) | (1 << (plsqlParser.LEVEL - 192)) | (1 << (plsqlParser.LEVELS - 192)) | (1 << (plsqlParser.LIBRARY - 192)) | (1 << (plsqlParser.LIKE - 192)) | (1 << (plsqlParser.LIKE2 - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (plsqlParser.LIKE4 - 256)) | (1 << (plsqlParser.LIKEC - 256)) | (1 << (plsqlParser.LIMIT - 256)) | (1 << (plsqlParser.LIST - 256)) | (1 << (plsqlParser.LOCAL - 256)) | (1 << (plsqlParser.LOB - 256)) | (1 << (plsqlParser.LOBS - 256)) | (1 << (plsqlParser.LOCATOR - 256)) | (1 << (plsqlParser.LOCK - 256)) | (1 << (plsqlParser.LOCKED - 256)) | (1 << (plsqlParser.LOG - 256)) | (1 << (plsqlParser.LOGGING - 256)) | (1 << (plsqlParser.LOGOFF - 256)) | (1 << (plsqlParser.LOGON - 256)) | (1 << (plsqlParser.LONG - 256)) | (1 << (plsqlParser.LOOP - 256)) | (1 << (plsqlParser.LOW - 256)) | (1 << (plsqlParser.MAIN - 256)) | (1 << (plsqlParser.MAP - 256)) | (1 << (plsqlParser.MAPPING - 256)) | (1 << (plsqlParser.MATCHED - 256)) | (1 << (plsqlParser.MAXEXTENTS - 256)) | (1 << (plsqlParser.MAXVALUE - 256)) | (1 << (plsqlParser.MEASURES - 256)) | (1 << (plsqlParser.MEDIUM - 256)) | (1 << (plsqlParser.MEMBER - 256)) | (1 << (plsqlParser.MERGE - 256)) | (1 << (plsqlParser.MINEXTENTS - 256)) | (1 << (plsqlParser.MINIMIZE - 256)) | (1 << (plsqlParser.MINUS - 256)) | (1 << (plsqlParser.MINUTE - 256)) | (1 << (plsqlParser.MINVALUE - 256)) | (1 << (plsqlParser.MLSLABEL - 256)) | (1 << (plsqlParser.MODE - 256)) | (1 << (plsqlParser.MODEL - 256)) | (1 << (plsqlParser.MODIFY - 256)) | (1 << (plsqlParser.MONTH - 256)) | (1 << (plsqlParser.MOVEMENT - 256)) | (1 << (plsqlParser.MULTISET - 256)) | (1 << (plsqlParser.NAME - 256)) | (1 << (plsqlParser.NAN - 256)) | (1 << (plsqlParser.NATURAL - 256)) | (1 << (plsqlParser.NATURALN - 256)) | (1 << (plsqlParser.NAV - 256)) | (1 << (plsqlParser.NCHAR - 256)) | (1 << (plsqlParser.NCHAR_CS - 256)) | (1 << (plsqlParser.NCLOB - 256)) | (1 << (plsqlParser.NESTED - 256)) | (1 << (plsqlParser.NEW - 256)) | (1 << (plsqlParser.NEXT - 256)) | (1 << (plsqlParser.NO - 256)) | (1 << (plsqlParser.NOAUDIT - 256)) | (1 << (plsqlParser.NOCACHE - 256)) | (1 << (plsqlParser.NOCOMPRESS - 256)) | (1 << (plsqlParser.NOCOPY - 256)) | (1 << (plsqlParser.NOCYCLE - 256)) | (1 << (plsqlParser.NOENTITYESCAPING - 256)) | (1 << (plsqlParser.NOLOGGING - 256)) | (1 << (plsqlParser.NOMAPPING - 256)) | (1 << (plsqlParser.NOMAXVALUE - 256)) | (1 << (plsqlParser.NOMINIMIZE - 256)) | (1 << (plsqlParser.NOMINVALUE - 256)) | (1 << (plsqlParser.NONE - 256)) | (1 << (plsqlParser.NONSCHEMA - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (plsqlParser.NOORDER - 320)) | (1 << (plsqlParser.NOPARALLEL - 320)) | (1 << (plsqlParser.NORELY - 320)) | (1 << (plsqlParser.NOROWDEPENDENCIES - 320)) | (1 << (plsqlParser.NOSCHEMACHECK - 320)) | (1 << (plsqlParser.NOSORT - 320)) | (1 << (plsqlParser.NOT - 320)) | (1 << (plsqlParser.NOVALIDATE - 320)) | (1 << (plsqlParser.NOWAIT - 320)) | (1 << (plsqlParser.NVL - 320)) | (1 << (plsqlParser.NULL - 320)) | (1 << (plsqlParser.NULLS - 320)) | (1 << (plsqlParser.NUMBER - 320)) | (1 << (plsqlParser.NUMERIC - 320)) | (1 << (plsqlParser.NVARCHAR2 - 320)) | (1 << (plsqlParser.OBJECT - 320)) | (1 << (plsqlParser.OF - 320)) | (1 << (plsqlParser.OFF - 320)) | (1 << (plsqlParser.OID - 320)) | (1 << (plsqlParser.OIDINDEX - 320)) | (1 << (plsqlParser.OLD - 320)) | (1 << (plsqlParser.OLTP - 320)) | (1 << (plsqlParser.ON - 320)) | (1 << (plsqlParser.ONLY - 320)) | (1 << (plsqlParser.OPEN - 320)) | (1 << (plsqlParser.OPTIMAL - 320)) | (1 << (plsqlParser.OPTION - 320)) | (1 << (plsqlParser.OR - 320)) | (1 << (plsqlParser.ORADATA - 320)) | (1 << (plsqlParser.ORDER - 320)) | (1 << (plsqlParser.ORDINALITY - 320)) | (1 << (plsqlParser.OSERROR - 320)) | (1 << (plsqlParser.OUT - 320)) | (1 << (plsqlParser.OUTER - 320)) | (1 << (plsqlParser.OVER - 320)) | (1 << (plsqlParser.OVERFLOW - 320)) | (1 << (plsqlParser.OVERRIDING - 320)) | (1 << (plsqlParser.PACKAGE - 320)) | (1 << (plsqlParser.PARALLEL - 320)) | (1 << (plsqlParser.PARALLEL_ENABLE - 320)) | (1 << (plsqlParser.PARAMETERS - 320)) | (1 << (plsqlParser.PARENT - 320)) | (1 << (plsqlParser.PARTITION - 320)) | (1 << (plsqlParser.PASSING - 320)) | (1 << (plsqlParser.PATH - 320)) | (1 << (plsqlParser.PCTFREE - 320)) | (1 << (plsqlParser.PCTINCREASE - 320)) | (1 << (plsqlParser.PCTTHRESHOLD - 320)) | (1 << (plsqlParser.PCTUSED - 320)) | (1 << (plsqlParser.PCTVERSION - 320)) | (1 << (plsqlParser.PERCENT_ROWTYPE - 320)) | (1 << (plsqlParser.PERCENT_TYPE - 320)) | (1 << (plsqlParser.PIPELINED - 320)) | (1 << (plsqlParser.PIVOT - 320)) | (1 << (plsqlParser.PLAN - 320)) | (1 << (plsqlParser.PLS_INTEGER - 320)) | (1 << (plsqlParser.PARTITIONS - 320)) | (1 << (plsqlParser.POSITION - 320)) | (1 << (plsqlParser.POSITIVE - 320)) | (1 << (plsqlParser.POSITIVEN - 320)) | (1 << (plsqlParser.PRAGMA - 320)) | (1 << (plsqlParser.PRECEDING - 320)) | (1 << (plsqlParser.PRECISION - 320)) | (1 << (plsqlParser.PRESENT - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (plsqlParser.PRESERVE - 384)) | (1 << (plsqlParser.PRIMARY - 384)) | (1 << (plsqlParser.PRIOR - 384)) | (1 << (plsqlParser.PROCEDURE - 384)) | (1 << (plsqlParser.PURGE - 384)) | (1 << (plsqlParser.QUERY - 384)) | (1 << (plsqlParser.RAISE - 384)) | (1 << (plsqlParser.RANGE - 384)) | (1 << (plsqlParser.RAW - 384)) | (1 << (plsqlParser.READ - 384)) | (1 << (plsqlParser.READS - 384)) | (1 << (plsqlParser.REAL - 384)) | (1 << (plsqlParser.REBUILD - 384)) | (1 << (plsqlParser.RECORD - 384)) | (1 << (plsqlParser.RECORDS_PER_BLOCK - 384)) | (1 << (plsqlParser.RECYCLE - 384)) | (1 << (plsqlParser.REF - 384)) | (1 << (plsqlParser.REFERENCE - 384)) | (1 << (plsqlParser.REFERENCES - 384)) | (1 << (plsqlParser.REFERENCING - 384)) | (1 << (plsqlParser.REJECT - 384)) | (1 << (plsqlParser.REKEY - 384)) | (1 << (plsqlParser.RELATIONAL - 384)) | (1 << (plsqlParser.RELIES_ON - 384)) | (1 << (plsqlParser.RELY - 384)) | (1 << (plsqlParser.RENAME - 384)) | (1 << (plsqlParser.REPLACE - 384)) | (1 << (plsqlParser.RESPECT - 384)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 384)) | (1 << (plsqlParser.RESULT - 384)) | (1 << (plsqlParser.RESULT_CACHE - 384)) | (1 << (plsqlParser.RETENTION - 384)) | (1 << (plsqlParser.RETURN - 384)) | (1 << (plsqlParser.RETURNING - 384)) | (1 << (plsqlParser.REUSE - 384)) | (1 << (plsqlParser.REVERSE - 384)) | (1 << (plsqlParser.REVOKE - 384)) | (1 << (plsqlParser.RIGHT - 384)) | (1 << (plsqlParser.ROLLBACK - 384)) | (1 << (plsqlParser.ROLLUP - 384)) | (1 << (plsqlParser.ROW - 384)) | (1 << (plsqlParser.ROWDEPENDENCIES - 384)) | (1 << (plsqlParser.ROWID - 384)) | (1 << (plsqlParser.ROWS - 384)) | (1 << (plsqlParser.RULES - 384)) | (1 << (plsqlParser.SALT - 384)) | (1 << (plsqlParser.SAMPLE - 384)) | (1 << (plsqlParser.SAVE - 384)) | (1 << (plsqlParser.SAVEPOINT - 384)) | (1 << (plsqlParser.SCHEMA - 384)) | (1 << (plsqlParser.SCHEMACHECK - 384)) | (1 << (plsqlParser.SCN - 384)) | (1 << (plsqlParser.SCOPE - 384)) | (1 << (plsqlParser.SEARCH - 384)) | (1 << (plsqlParser.SECOND - 384)) | (1 << (plsqlParser.SECUREFILE - 384)) | (1 << (plsqlParser.SEED - 384)) | (1 << (plsqlParser.SEGMENT - 384)) | (1 << (plsqlParser.SELECT - 384)) | (1 << (plsqlParser.SELF - 384)) | (1 << (plsqlParser.SEQUENCE - 384)) | (1 << (plsqlParser.SEQUENTIAL - 384)) | (1 << (plsqlParser.SERIALIZABLE - 384)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (plsqlParser.SERVERERROR - 448)) | (1 << (plsqlParser.SESSIONTIMEZONE - 448)) | (1 << (plsqlParser.SET - 448)) | (1 << (plsqlParser.SETS - 448)) | (1 << (plsqlParser.SETTINGS - 448)) | (1 << (plsqlParser.SHARE - 448)) | (1 << (plsqlParser.SHOW - 448)) | (1 << (plsqlParser.SHRINK - 448)) | (1 << (plsqlParser.SHUTDOWN - 448)) | (1 << (plsqlParser.SIBLINGS - 448)) | (1 << (plsqlParser.SIGNTYPE - 448)) | (1 << (plsqlParser.SIMPLE_INTEGER - 448)) | (1 << (plsqlParser.SINGLE - 448)) | (1 << (plsqlParser.SIZE - 448)) | (1 << (plsqlParser.SKIP_ - 448)) | (1 << (plsqlParser.SMALLINT - 448)) | (1 << (plsqlParser.SNAPSHOT - 448)) | (1 << (plsqlParser.SOME - 448)) | (1 << (plsqlParser.SORT - 448)) | (1 << (plsqlParser.SPACE_KEYWORD - 448)) | (1 << (plsqlParser.SPECIFICATION - 448)) | (1 << (plsqlParser.SQLDATA - 448)) | (1 << (plsqlParser.SQLERROR - 448)) | (1 << (plsqlParser.STANDALONE - 448)) | (1 << (plsqlParser.START - 448)) | (1 << (plsqlParser.STARTUP - 448)) | (1 << (plsqlParser.STATEMENT - 448)) | (1 << (plsqlParser.STATEMENT_ID - 448)) | (1 << (plsqlParser.STATIC - 448)) | (1 << (plsqlParser.STATISTICS - 448)) | (1 << (plsqlParser.STORAGE - 448)) | (1 << (plsqlParser.STORE - 448)) | (1 << (plsqlParser.STRING - 448)) | (1 << (plsqlParser.SUBMULTISET - 448)) | (1 << (plsqlParser.SUBPARTITION - 448)) | (1 << (plsqlParser.SUBPARTITIONS - 448)) | (1 << (plsqlParser.SUBSTITUTABLE - 448)) | (1 << (plsqlParser.SUBSTRING - 448)) | (1 << (plsqlParser.SUBTYPE - 448)) | (1 << (plsqlParser.SUCCESS - 448)) | (1 << (plsqlParser.SUPPLEMENTAL - 448)) | (1 << (plsqlParser.SUSPEND - 448)) | (1 << (plsqlParser.SYSTEM - 448)) | (1 << (plsqlParser.TABLE - 448)) | (1 << (plsqlParser.TABLES - 448)) | (1 << (plsqlParser.TABLESPACE - 448)) | (1 << (plsqlParser.TEMPLATE - 448)) | (1 << (plsqlParser.TEMPORARY - 448)) | (1 << (plsqlParser.THAN - 448)) | (1 << (plsqlParser.THE - 448)) | (1 << (plsqlParser.THEN - 448)) | (1 << (plsqlParser.TIME - 448)) | (1 << (plsqlParser.TIMESTAMP - 448)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 448)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 448)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 448)) | (1 << (plsqlParser.TIMEZONE_ABBR - 448)) | (1 << (plsqlParser.TIMEZONE_HOUR - 448)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 448)) | (1 << (plsqlParser.TIMEZONE_REGION - 448)) | (1 << (plsqlParser.TO - 448)) | (1 << (plsqlParser.TO_CHAR - 448)) | (1 << (plsqlParser.TO_DATE - 448)) | (1 << (plsqlParser.TRAILING - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (plsqlParser.TRANSACTION - 512)) | (1 << (plsqlParser.TRANSLATE - 512)) | (1 << (plsqlParser.TREAT - 512)) | (1 << (plsqlParser.TRIGGER - 512)) | (1 << (plsqlParser.TRIM - 512)) | (1 << (plsqlParser.TRUE - 512)) | (1 << (plsqlParser.TRUNCATE - 512)) | (1 << (plsqlParser.TYPE - 512)) | (1 << (plsqlParser.UNBOUNDED - 512)) | (1 << (plsqlParser.UNDER - 512)) | (1 << (plsqlParser.UNION - 512)) | (1 << (plsqlParser.UNIQUE - 512)) | (1 << (plsqlParser.UNLIMITED - 512)) | (1 << (plsqlParser.UNPIVOT - 512)) | (1 << (plsqlParser.UNTIL - 512)) | (1 << (plsqlParser.UNUSABLE - 512)) | (1 << (plsqlParser.UNUSED - 512)) | (1 << (plsqlParser.UPDATE - 512)) | (1 << (plsqlParser.UPDATED - 512)) | (1 << (plsqlParser.UPGRADE - 512)) | (1 << (plsqlParser.UPSERT - 512)) | (1 << (plsqlParser.UROWID - 512)) | (1 << (plsqlParser.USE - 512)) | (1 << (plsqlParser.USING - 512)) | (1 << (plsqlParser.VALIDATE - 512)) | (1 << (plsqlParser.VALUE - 512)) | (1 << (plsqlParser.VALUES - 512)) | (1 << (plsqlParser.VARCHAR - 512)) | (1 << (plsqlParser.VARCHAR2 - 512)) | (1 << (plsqlParser.VARIABLE - 512)) | (1 << (plsqlParser.VARRAY - 512)) | (1 << (plsqlParser.VARRAYS - 512)) | (1 << (plsqlParser.VARYING - 512)) | (1 << (plsqlParser.VERBOSE - 512)) | (1 << (plsqlParser.VERSION - 512)) | (1 << (plsqlParser.VERSIONS - 512)) | (1 << (plsqlParser.VIRTUAL - 512)) | (1 << (plsqlParser.VISIBLE - 512)) | (1 << (plsqlParser.WAIT - 512)) | (1 << (plsqlParser.WARNING - 512)) | (1 << (plsqlParser.WELLFORMED - 512)) | (1 << (plsqlParser.WHEN - 512)) | (1 << (plsqlParser.WHENEVER - 512)) | (1 << (plsqlParser.WHERE - 512)) | (1 << (plsqlParser.WHILE - 512)) | (1 << (plsqlParser.WITH - 512)) | (1 << (plsqlParser.WITHIN - 512)) | (1 << (plsqlParser.WORK - 512)) | (1 << (plsqlParser.WRITE - 512)) | (1 << (plsqlParser.XDB - 512)) | (1 << (plsqlParser.XML - 512)) | (1 << (plsqlParser.XMLAGG - 512)) | (1 << (plsqlParser.XMLATTRIBUTES - 512)) | (1 << (plsqlParser.XMLCAST - 512)) | (1 << (plsqlParser.XMLCOLATTVAL - 512)) | (1 << (plsqlParser.XMLELEMENT - 512)) | (1 << (plsqlParser.XMLEXISTS - 512)) | (1 << (plsqlParser.XMLFOREST - 512)) | (1 << (plsqlParser.XMLINDEX - 512)) | (1 << (plsqlParser.XMLNAMESPACES - 512)) | (1 << (plsqlParser.XMLPARSE - 512)) | (1 << (plsqlParser.XMLPI - 512)) | (1 << (plsqlParser.XMLQUERY - 512)) | (1 << (plsqlParser.XMLROOT - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (plsqlParser.XMLSCHEMA - 576)) | (1 << (plsqlParser.XMLSERIALIZE - 576)) | (1 << (plsqlParser.XMLTABLE - 576)) | (1 << (plsqlParser.XMLTYPE - 576)) | (1 << (plsqlParser.YEAR - 576)) | (1 << (plsqlParser.YES - 576)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 576)) | (1 << (plsqlParser.ZONE - 576)) | (1 << (plsqlParser.PREDICTION - 576)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 576)) | (1 << (plsqlParser.PREDICTION_COST - 576)) | (1 << (plsqlParser.PREDICTION_DETAILS - 576)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 576)) | (1 << (plsqlParser.PREDICTION_SET - 576)) | (1 << (plsqlParser.CUME_DIST - 576)) | (1 << (plsqlParser.DENSE_RANK - 576)) | (1 << (plsqlParser.LISTAGG - 576)) | (1 << (plsqlParser.PERCENT_RANK - 576)) | (1 << (plsqlParser.PERCENTILE_CONT - 576)) | (1 << (plsqlParser.PERCENTILE_DISC - 576)) | (1 << (plsqlParser.RANK - 576)) | (1 << (plsqlParser.AVG - 576)) | (1 << (plsqlParser.CORR - 576)) | (1 << (plsqlParser.LAG - 576)) | (1 << (plsqlParser.LEAD - 576)) | (1 << (plsqlParser.MAX - 576)) | (1 << (plsqlParser.MEDIAN - 576)) | (1 << (plsqlParser.MIN - 576)) | (1 << (plsqlParser.NTILE - 576)) | (1 << (plsqlParser.RATIO_TO_REPORT - 576)) | (1 << (plsqlParser.ROW_NUMBER - 576)) | (1 << (plsqlParser.SUM - 576)) | (1 << (plsqlParser.VARIANCE - 576)) | (1 << (plsqlParser.REGR_ - 576)) | (1 << (plsqlParser.STDDEV - 576)) | (1 << (plsqlParser.VAR_ - 576)) | (1 << (plsqlParser.COVAR_ - 576)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 576)) | (1 << (plsqlParser.BIT_STRING_LIT - 576)) | (1 << (plsqlParser.HEX_STRING_LIT - 576)) | (1 << (plsqlParser.DOUBLE_PERIOD - 576)) | (1 << (plsqlParser.PERIOD - 576)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 576)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 576)) | (1 << (plsqlParser.CHAR_STRING - 576)) | (1 << (plsqlParser.DELIMITED_ID - 576)) | (1 << (plsqlParser.PERCENT - 576)) | (1 << (plsqlParser.AMPERSAND - 576)) | (1 << (plsqlParser.LEFT_PAREN - 576)) | (1 << (plsqlParser.RIGHT_PAREN - 576)) | (1 << (plsqlParser.DOUBLE_ASTERISK - 576)) | (1 << (plsqlParser.ASTERISK - 576)) | (1 << (plsqlParser.PLUS_SIGN - 576)) | (1 << (plsqlParser.MINUS_SIGN - 576)) | (1 << (plsqlParser.COMMA - 576)) | (1 << (plsqlParser.SOLIDUS - 576)) | (1 << (plsqlParser.AT_SIGN - 576)) | (1 << (plsqlParser.ASSIGN_OP - 576)) | (1 << (plsqlParser.BINDVAR - 576)) | (1 << (plsqlParser.COLON - 576)) | (1 << (plsqlParser.LESS_THAN_OR_EQUALS_OP - 576)) | (1 << (plsqlParser.LESS_THAN_OP - 576)) | (1 << (plsqlParser.GREATER_THAN_OR_EQUALS_OP - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (plsqlParser.NOT_EQUAL_OP - 640)) | (1 << (plsqlParser.CARRET_OPERATOR_PART - 640)) | (1 << (plsqlParser.TILDE_OPERATOR_PART - 640)) | (1 << (plsqlParser.EXCLAMATION_OPERATOR_PART - 640)) | (1 << (plsqlParser.GREATER_THAN_OP - 640)) | (1 << (plsqlParser.CONCATENATION_OP - 640)) | (1 << (plsqlParser.VERTICAL_BAR - 640)) | (1 << (plsqlParser.EQUALS_OP - 640)) | (1 << (plsqlParser.LEFT_BRACKET - 640)) | (1 << (plsqlParser.RIGHT_BRACKET - 640)) | (1 << (plsqlParser.INTRODUCER - 640)) | (1 << (plsqlParser.SPACES - 640)) | (1 << (plsqlParser.SINGLE_LINE_COMMENT - 640)) | (1 << (plsqlParser.MULTI_LINE_COMMENT - 640)) | (1 << (plsqlParser.PROMPT - 640)) | (1 << (plsqlParser.REGULAR_ID - 640)) | (1 << (plsqlParser.ZV - 640)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_unitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(plsqlParser.EOF, 0)

        def unit_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Unit_statementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Unit_statementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_compilation_unit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilation_unit" ):
                return visitor.visitCompilation_unit(self)
            else:
                return visitor.visitChildren(self)




    def compilation_unit(self):

        localctx = plsqlParser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.ALTER or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (plsqlParser.CREATE - 97)) | (1 << (plsqlParser.DELETE - 97)) | (1 << (plsqlParser.DROP - 97)))) != 0) or ((((_la - 165)) & ~0x3f) == 0 and ((1 << (_la - 165)) & ((1 << (plsqlParser.EXPLAIN - 165)) | (1 << (plsqlParser.FUNCTION - 165)) | (1 << (plsqlParser.INSERT - 165)))) != 0) or _la==plsqlParser.LOCK or _la==plsqlParser.MERGE or _la==plsqlParser.PROCEDURE or _la==plsqlParser.SELECT or _la==plsqlParser.UPDATE or _la==plsqlParser.WITH or _la==plsqlParser.LEFT_PAREN:
                self.state = 1067
                self.unit_statement()
                self.state = 1072
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1073
            self.match(plsqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_scriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(plsqlParser.EOF, 0)

        def unit_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Unit_statementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Unit_statementContext,i)


        def sql_plus_command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sql_plus_commandContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sql_plus_commandContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SEMICOLON)
            else:
                return self.getToken(plsqlParser.SEMICOLON, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_sql_script

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_script" ):
                return visitor.visitSql_script(self)
            else:
                return visitor.visitChildren(self)




    def sql_script(self):

        localctx = plsqlParser.Sql_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ALTER or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (plsqlParser.CREATE - 97)) | (1 << (plsqlParser.DELETE - 97)) | (1 << (plsqlParser.DROP - 97)))) != 0) or ((((_la - 164)) & ~0x3f) == 0 and ((1 << (_la - 164)) & ((1 << (plsqlParser.EXIT - 164)) | (1 << (plsqlParser.EXPLAIN - 164)) | (1 << (plsqlParser.FUNCTION - 164)) | (1 << (plsqlParser.INSERT - 164)))) != 0) or _la==plsqlParser.LOCK or _la==plsqlParser.MERGE or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (plsqlParser.PROCEDURE - 387)) | (1 << (plsqlParser.SELECT - 387)) | (1 << (plsqlParser.SET - 387)))) != 0) or _la==plsqlParser.SHOW or ((((_la - 529)) & ~0x3f) == 0 and ((1 << (_la - 529)) & ((1 << (plsqlParser.UPDATE - 529)) | (1 << (plsqlParser.WHENEVER - 529)) | (1 << (plsqlParser.WITH - 529)))) != 0) or ((((_la - 624)) & ~0x3f) == 0 and ((1 << (_la - 624)) & ((1 << (plsqlParser.LEFT_PAREN - 624)) | (1 << (plsqlParser.SOLIDUS - 624)) | (1 << (plsqlParser.PROMPT - 624)))) != 0):
                self.state = 1077
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.ALTER, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DROP, plsqlParser.EXPLAIN, plsqlParser.FUNCTION, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.PROCEDURE, plsqlParser.SELECT, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                    self.state = 1075
                    self.unit_statement()
                    pass
                elif token in [plsqlParser.EXIT, plsqlParser.SET, plsqlParser.SHOW, plsqlParser.WHENEVER, plsqlParser.SOLIDUS, plsqlParser.PROMPT]:
                    self.state = 1076
                    self.sql_plus_command()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1086
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1079
                        self.match(plsqlParser.SEMICOLON)
                        self.state = 1082
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.ALTER, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DROP, plsqlParser.EXPLAIN, plsqlParser.FUNCTION, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.PROCEDURE, plsqlParser.SELECT, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                            self.state = 1080
                            self.unit_statement()
                            pass
                        elif token in [plsqlParser.EXIT, plsqlParser.SET, plsqlParser.SHOW, plsqlParser.WHENEVER, plsqlParser.SOLIDUS, plsqlParser.PROMPT]:
                            self.state = 1081
                            self.sql_plus_command()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1088
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.SEMICOLON:
                    self.state = 1089
                    self.match(plsqlParser.SEMICOLON)




            self.state = 1094
            self.match(plsqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_explainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(plsqlParser.EXPLAIN, 0)

        def ANALYZE(self):
            return self.getToken(plsqlParser.ANALYZE, 0)

        def VERBOSE(self):
            return self.getToken(plsqlParser.VERBOSE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_sql_explain

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_explain" ):
                return visitor.visitSql_explain(self)
            else:
                return visitor.visitChildren(self)




    def sql_explain(self):

        localctx = plsqlParser.Sql_explainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_explain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(plsqlParser.EXPLAIN)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ANALYZE:
                self.state = 1097
                self.match(plsqlParser.ANALYZE)


            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.VERBOSE:
                self.state = 1100
                self.match(plsqlParser.VERBOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unit_statement_body(self):
            return self.getTypedRuleContext(plsqlParser.Unit_statement_bodyContext,0)


        def sql_explain(self):
            return self.getTypedRuleContext(plsqlParser.Sql_explainContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_unit_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_statement" ):
                return visitor.visitUnit_statement(self)
            else:
                return visitor.visitChildren(self)




    def unit_statement(self):

        localctx = plsqlParser.Unit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_unit_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 1103
                self.sql_explain()


            self.state = 1106
            self.unit_statement_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unit_statement_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_function(self):
            return self.getTypedRuleContext(plsqlParser.Alter_functionContext,0)


        def alter_package(self):
            return self.getTypedRuleContext(plsqlParser.Alter_packageContext,0)


        def alter_procedure(self):
            return self.getTypedRuleContext(plsqlParser.Alter_procedureContext,0)


        def alter_sequence(self):
            return self.getTypedRuleContext(plsqlParser.Alter_sequenceContext,0)


        def alter_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Alter_triggerContext,0)


        def alter_type(self):
            return self.getTypedRuleContext(plsqlParser.Alter_typeContext,0)


        def alter_table(self):
            return self.getTypedRuleContext(plsqlParser.Alter_tableContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_function_bodyContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_procedure_bodyContext,0)


        def create_package(self):
            return self.getTypedRuleContext(plsqlParser.Create_packageContext,0)


        def create_index(self):
            return self.getTypedRuleContext(plsqlParser.Create_indexContext,0)


        def create_table(self):
            return self.getTypedRuleContext(plsqlParser.Create_tableContext,0)


        def create_sequence(self):
            return self.getTypedRuleContext(plsqlParser.Create_sequenceContext,0)


        def create_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Create_triggerContext,0)


        def create_type(self):
            return self.getTypedRuleContext(plsqlParser.Create_typeContext,0)


        def drop_function(self):
            return self.getTypedRuleContext(plsqlParser.Drop_functionContext,0)


        def drop_package(self):
            return self.getTypedRuleContext(plsqlParser.Drop_packageContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(plsqlParser.Drop_procedureContext,0)


        def drop_sequence(self):
            return self.getTypedRuleContext(plsqlParser.Drop_sequenceContext,0)


        def drop_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Drop_triggerContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(plsqlParser.Drop_typeContext,0)


        def data_manipulation_language_statements(self):
            return self.getTypedRuleContext(plsqlParser.Data_manipulation_language_statementsContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(plsqlParser.Drop_tableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_unit_statement_body

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_statement_body" ):
                return visitor.visitUnit_statement_body(self)
            else:
                return visitor.visitChildren(self)




    def unit_statement_body(self):

        localctx = plsqlParser.Unit_statement_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_unit_statement_body)
        try:
            self.state = 1131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1108
                self.alter_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1109
                self.alter_package()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1110
                self.alter_procedure()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1111
                self.alter_sequence()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1112
                self.alter_trigger()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1113
                self.alter_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1114
                self.alter_table()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1115
                self.create_function_body()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1116
                self.create_procedure_body()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1117
                self.create_package()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1118
                self.create_index()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1119
                self.create_table()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1120
                self.create_sequence()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1121
                self.create_trigger()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1122
                self.create_type()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1123
                self.drop_function()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1124
                self.drop_package()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1125
                self.drop_procedure()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1126
                self.drop_sequence()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1127
                self.drop_trigger()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1128
                self.drop_type()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1129
                self.data_manipulation_language_statements()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1130
                self.drop_table()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(plsqlParser.INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def cluster_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Cluster_index_clauseContext,0)


        def table_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Table_index_clauseContext,0)


        def bitmap_join_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Bitmap_join_index_clauseContext,0)


        def UNUSABLE(self):
            return self.getToken(plsqlParser.UNUSABLE, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def BITMAP(self):
            return self.getToken(plsqlParser.BITMAP, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_index

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index" ):
                return visitor.visitCreate_index(self)
            else:
                return visitor.visitChildren(self)




    def create_index(self):

        localctx = plsqlParser.Create_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_create_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(plsqlParser.CREATE)
            self.state = 1135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BITMAP or _la==plsqlParser.UNIQUE:
                self.state = 1134
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BITMAP or _la==plsqlParser.UNIQUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1137
            self.match(plsqlParser.INDEX)
            self.state = 1138
            self.index_name()
            self.state = 1139
            self.match(plsqlParser.ON)
            self.state = 1143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 1140
                self.cluster_index_clause()
                pass

            elif la_ == 2:
                self.state = 1141
                self.table_index_clause()
                pass

            elif la_ == 3:
                self.state = 1142
                self.bitmap_join_index_clause()
                pass


            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.UNUSABLE:
                self.state = 1145
                self.match(plsqlParser.UNUSABLE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cluster_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTER(self):
            return self.getToken(plsqlParser.CLUSTER, 0)

        def cluster_name(self):
            return self.getTypedRuleContext(plsqlParser.Cluster_nameContext,0)


        def index_attributes(self):
            return self.getTypedRuleContext(plsqlParser.Index_attributesContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cluster_index_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCluster_index_clause" ):
                return visitor.visitCluster_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def cluster_index_clause(self):

        localctx = plsqlParser.Cluster_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_cluster_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.match(plsqlParser.CLUSTER)
            self.state = 1149
            self.cluster_name()
            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.INVISIBLE or _la==plsqlParser.LOGGING or ((((_la - 309)) & ~0x3f) == 0 and ((1 << (_la - 309)) & ((1 << (plsqlParser.NOCOMPRESS - 309)) | (1 << (plsqlParser.NOLOGGING - 309)) | (1 << (plsqlParser.NOPARALLEL - 309)) | (1 << (plsqlParser.NOSORT - 309)) | (1 << (plsqlParser.PARALLEL - 309)) | (1 << (plsqlParser.PCTFREE - 309)) | (1 << (plsqlParser.PCTUSED - 309)))) != 0) or ((((_la - 419)) & ~0x3f) == 0 and ((1 << (_la - 419)) & ((1 << (plsqlParser.REVERSE - 419)) | (1 << (plsqlParser.SORT - 419)) | (1 << (plsqlParser.STORAGE - 419)))) != 0) or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VISIBLE:
                self.state = 1150
                self.index_attributes()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cluster_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_cluster_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCluster_name" ):
                return visitor.visitCluster_name(self)
            else:
                return visitor.visitChildren(self)




    def cluster_name(self):

        localctx = plsqlParser.Cluster_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_cluster_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 1153
                self.id_expression()
                self.state = 1154
                self.match(plsqlParser.PERIOD)


            self.state = 1158
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_attributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Physical_attributes_clauseContext,i)


        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Logging_clauseContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TABLESPACE)
            else:
                return self.getToken(plsqlParser.TABLESPACE, i)

        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def sort_or_nosort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sort_or_nosortContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sort_or_nosortContext,i)


        def REVERSE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.REVERSE)
            else:
                return self.getToken(plsqlParser.REVERSE, i)

        def visible_or_invisible(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Visible_or_invisibleContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Visible_or_invisibleContext,i)


        def parallel_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Parallel_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,i)


        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DEFAULT)
            else:
                return self.getToken(plsqlParser.DEFAULT, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_index_attributes

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_attributes" ):
                return visitor.visitIndex_attributes(self)
            else:
                return visitor.visitChildren(self)




    def index_attributes(self):

        localctx = plsqlParser.Index_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_index_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1172
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.INITRANS, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE]:
                        self.state = 1160
                        self.physical_attributes_clause()
                        pass
                    elif token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.LOGGING, plsqlParser.NOLOGGING]:
                        self.state = 1161
                        self.logging_clause()
                        pass
                    elif token in [plsqlParser.TABLESPACE]:
                        self.state = 1162
                        self.match(plsqlParser.TABLESPACE)
                        self.state = 1165
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.REGULAR_ID]:
                            self.state = 1163
                            self.tablespace()
                            pass
                        elif token in [plsqlParser.DEFAULT]:
                            self.state = 1164
                            self.match(plsqlParser.DEFAULT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                        self.state = 1167
                        self.key_compression()
                        pass
                    elif token in [plsqlParser.NOSORT, plsqlParser.SORT]:
                        self.state = 1168
                        self.sort_or_nosort()
                        pass
                    elif token in [plsqlParser.REVERSE]:
                        self.state = 1169
                        self.match(plsqlParser.REVERSE)
                        pass
                    elif token in [plsqlParser.INVISIBLE, plsqlParser.VISIBLE]:
                        self.state = 1170
                        self.visible_or_invisible()
                        pass
                    elif token in [plsqlParser.NOPARALLEL, plsqlParser.PARALLEL]:
                        self.state = 1171
                        self.parallel_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1174 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_tablespace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablespace" ):
                return visitor.visitTablespace(self)
            else:
                return visitor.visitChildren(self)




    def tablespace(self):

        localctx = plsqlParser.TablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_tablespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_compressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOCOMPRESS(self):
            return self.getToken(plsqlParser.NOCOMPRESS, 0)

        def COMPRESS(self):
            return self.getToken(plsqlParser.COMPRESS, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_key_compression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_compression" ):
                return visitor.visitKey_compression(self)
            else:
                return visitor.visitChildren(self)




    def key_compression(self):

        localctx = plsqlParser.Key_compressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_key_compression)
        try:
            self.state = 1181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NOCOMPRESS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1178
                self.match(plsqlParser.NOCOMPRESS)
                pass
            elif token in [plsqlParser.COMPRESS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1179
                self.match(plsqlParser.COMPRESS)
                self.state = 1180
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_or_nosortContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SORT(self):
            return self.getToken(plsqlParser.SORT, 0)

        def NOSORT(self):
            return self.getToken(plsqlParser.NOSORT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_sort_or_nosort

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSort_or_nosort" ):
                return visitor.visitSort_or_nosort(self)
            else:
                return visitor.visitChildren(self)




    def sort_or_nosort(self):

        localctx = plsqlParser.Sort_or_nosortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_sort_or_nosort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            _la = self._input.LA(1)
            if not(_la==plsqlParser.NOSORT or _la==plsqlParser.SORT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Visible_or_invisibleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VISIBLE(self):
            return self.getToken(plsqlParser.VISIBLE, 0)

        def INVISIBLE(self):
            return self.getToken(plsqlParser.INVISIBLE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_visible_or_invisible

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisible_or_invisible" ):
                return visitor.visitVisible_or_invisible(self)
            else:
                return visitor.visitChildren(self)




    def visible_or_invisible(self):

        localctx = plsqlParser.Visible_or_invisibleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_visible_or_invisible)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            _la = self._input.LA(1)
            if not(_la==plsqlParser.INVISIBLE or _la==plsqlParser.VISIBLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parallel_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parallel_count = None # Token

        def NOPARALLEL(self):
            return self.getToken(plsqlParser.NOPARALLEL, 0)

        def PARALLEL(self):
            return self.getToken(plsqlParser.PARALLEL, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_parallel_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParallel_clause" ):
                return visitor.visitParallel_clause(self)
            else:
                return visitor.visitChildren(self)




    def parallel_clause(self):

        localctx = plsqlParser.Parallel_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_parallel_clause)
        self._la = 0 # Token type
        try:
            self.state = 1192
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NOPARALLEL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1187
                self.match(plsqlParser.NOPARALLEL)
                pass
            elif token in [plsqlParser.PARALLEL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1188
                self.match(plsqlParser.PARALLEL)
                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.UNSIGNED_INTEGER:
                    self.state = 1189
                    localctx.parallel_count = self.match(plsqlParser.UNSIGNED_INTEGER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def index_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Index_exprContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Index_exprContext,i)


        def index_properties(self):
            return self.getTypedRuleContext(plsqlParser.Index_propertiesContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ASC)
            else:
                return self.getToken(plsqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DESC)
            else:
                return self.getToken(plsqlParser.DESC, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_index_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_index_clause" ):
                return visitor.visitTable_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def table_index_clause(self):

        localctx = plsqlParser.Table_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_table_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self.tableview_name()
            self.state = 1196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 1195
                self.table_alias()


            self.state = 1198
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1206 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1199
                    self.match(plsqlParser.COMMA)


                self.state = 1202
                self.index_expr()
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ASC or _la==plsqlParser.DESC:
                    self.state = 1203
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.ASC or _la==plsqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1208 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DISTINCT - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)) | (1 << (plsqlParser.NOT - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITION - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PRIOR - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELECT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUE - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 585)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.LEFT_PAREN - 585)) | (1 << (plsqlParser.PLUS_SIGN - 585)) | (1 << (plsqlParser.MINUS_SIGN - 585)) | (1 << (plsqlParser.COMMA - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                    break

            self.state = 1210
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 1212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & ((1 << (plsqlParser.FILESYSTEM_LIKE_LOGGING - 172)) | (1 << (plsqlParser.GLOBAL - 172)) | (1 << (plsqlParser.INDEXTYPE - 172)) | (1 << (plsqlParser.INITRANS - 172)))) != 0) or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (plsqlParser.INVISIBLE - 236)) | (1 << (plsqlParser.LOCAL - 236)) | (1 << (plsqlParser.LOGGING - 236)))) != 0) or ((((_la - 309)) & ~0x3f) == 0 and ((1 << (_la - 309)) & ((1 << (plsqlParser.NOCOMPRESS - 309)) | (1 << (plsqlParser.NOLOGGING - 309)) | (1 << (plsqlParser.NOPARALLEL - 309)) | (1 << (plsqlParser.NOSORT - 309)) | (1 << (plsqlParser.PARALLEL - 309)) | (1 << (plsqlParser.PCTFREE - 309)) | (1 << (plsqlParser.PCTUSED - 309)))) != 0) or ((((_la - 419)) & ~0x3f) == 0 and ((1 << (_la - 419)) & ((1 << (plsqlParser.REVERSE - 419)) | (1 << (plsqlParser.SORT - 419)) | (1 << (plsqlParser.STORAGE - 419)))) != 0) or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VISIBLE:
                self.state = 1211
                self.index_properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_index_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_expr" ):
                return visitor.visitIndex_expr(self)
            else:
                return visitor.visitChildren(self)




    def index_expr(self):

        localctx = plsqlParser.Index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_index_expr)
        try:
            self.state = 1216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1214
                self.column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1215
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_partitioned_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Global_partitioned_indexContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Global_partitioned_indexContext,i)


        def local_partitioned_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Local_partitioned_indexContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Local_partitioned_indexContext,i)


        def index_attributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Index_attributesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Index_attributesContext,i)


        def INDEXTYPE(self):
            return self.getToken(plsqlParser.INDEXTYPE, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def domain_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Domain_index_clauseContext,0)


        def xmlindex_clause(self):
            return self.getTypedRuleContext(plsqlParser.Xmlindex_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_index_properties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_properties" ):
                return visitor.visitIndex_properties(self)
            else:
                return visitor.visitChildren(self)




    def index_properties(self):

        localctx = plsqlParser.Index_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_index_properties)
        self._la = 0 # Token type
        try:
            self.state = 1231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.COMPRESS, plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.GLOBAL, plsqlParser.INITRANS, plsqlParser.INVISIBLE, plsqlParser.LOCAL, plsqlParser.LOGGING, plsqlParser.NOCOMPRESS, plsqlParser.NOLOGGING, plsqlParser.NOPARALLEL, plsqlParser.NOSORT, plsqlParser.PARALLEL, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.REVERSE, plsqlParser.SORT, plsqlParser.STORAGE, plsqlParser.TABLESPACE, plsqlParser.VISIBLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1221 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1221
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.GLOBAL]:
                        self.state = 1218
                        self.global_partitioned_index()
                        pass
                    elif token in [plsqlParser.LOCAL]:
                        self.state = 1219
                        self.local_partitioned_index()
                        pass
                    elif token in [plsqlParser.COMPRESS, plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.INITRANS, plsqlParser.INVISIBLE, plsqlParser.LOGGING, plsqlParser.NOCOMPRESS, plsqlParser.NOLOGGING, plsqlParser.NOPARALLEL, plsqlParser.NOSORT, plsqlParser.PARALLEL, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.REVERSE, plsqlParser.SORT, plsqlParser.STORAGE, plsqlParser.TABLESPACE, plsqlParser.VISIBLE]:
                        self.state = 1220
                        self.index_attributes()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1223 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.COMPRESS or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & ((1 << (plsqlParser.FILESYSTEM_LIKE_LOGGING - 172)) | (1 << (plsqlParser.GLOBAL - 172)) | (1 << (plsqlParser.INITRANS - 172)))) != 0) or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (plsqlParser.INVISIBLE - 236)) | (1 << (plsqlParser.LOCAL - 236)) | (1 << (plsqlParser.LOGGING - 236)))) != 0) or ((((_la - 309)) & ~0x3f) == 0 and ((1 << (_la - 309)) & ((1 << (plsqlParser.NOCOMPRESS - 309)) | (1 << (plsqlParser.NOLOGGING - 309)) | (1 << (plsqlParser.NOPARALLEL - 309)) | (1 << (plsqlParser.NOSORT - 309)) | (1 << (plsqlParser.PARALLEL - 309)) | (1 << (plsqlParser.PCTFREE - 309)) | (1 << (plsqlParser.PCTUSED - 309)))) != 0) or ((((_la - 419)) & ~0x3f) == 0 and ((1 << (_la - 419)) & ((1 << (plsqlParser.REVERSE - 419)) | (1 << (plsqlParser.SORT - 419)) | (1 << (plsqlParser.STORAGE - 419)))) != 0) or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VISIBLE):
                        break

                pass
            elif token in [plsqlParser.INDEXTYPE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1225
                self.match(plsqlParser.INDEXTYPE)
                self.state = 1226
                self.match(plsqlParser.IS)
                self.state = 1229
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                    self.state = 1227
                    self.domain_index_clause()
                    pass
                elif token in [plsqlParser.XDB, plsqlParser.XMLINDEX]:
                    self.state = 1228
                    self.xmlindex_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_partitioned_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(plsqlParser.GLOBAL, 0)

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def index_partitioning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Index_partitioning_clauseContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def individual_hash_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Individual_hash_partitionsContext,0)


        def hash_partitions_by_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_partitions_by_quantityContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_global_partitioned_index

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_partitioned_index" ):
                return visitor.visitGlobal_partitioned_index(self)
            else:
                return visitor.visitChildren(self)




    def global_partitioned_index(self):

        localctx = plsqlParser.Global_partitioned_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_global_partitioned_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self.match(plsqlParser.GLOBAL)
            self.state = 1234
            self.match(plsqlParser.PARTITION)
            self.state = 1235
            self.match(plsqlParser.BY)
            self.state = 1248
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.RANGE]:
                self.state = 1236
                self.match(plsqlParser.RANGE)
                self.state = 1237
                self.paren_column_list()
                self.state = 1238
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1239
                self.index_partitioning_clause()
                self.state = 1240
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.HASH]:
                self.state = 1242
                self.match(plsqlParser.HASH)
                self.state = 1243
                self.paren_column_list()
                self.state = 1246
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.LEFT_PAREN]:
                    self.state = 1244
                    self.individual_hash_partitions()
                    pass
                elif token in [plsqlParser.PARTITIONS]:
                    self.state = 1245
                    self.hash_partitions_by_quantity()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_partitioning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def LESS(self):
            return self.getToken(plsqlParser.LESS, 0)

        def THAN(self):
            return self.getToken(plsqlParser.THAN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def partition_name(self):
            return self.getTypedRuleContext(plsqlParser.Partition_nameContext,0)


        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.LiteralContext)
            else:
                return self.getTypedRuleContext(plsqlParser.LiteralContext,i)


        def segment_attributes_clause(self):
            return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_index_partitioning_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_partitioning_clause" ):
                return visitor.visitIndex_partitioning_clause(self)
            else:
                return visitor.visitChildren(self)




    def index_partitioning_clause(self):

        localctx = plsqlParser.Index_partitioning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_index_partitioning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self.match(plsqlParser.PARTITION)
            self.state = 1252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 1251
                self.partition_name()


            self.state = 1254
            self.match(plsqlParser.VALUES)
            self.state = 1255
            self.match(plsqlParser.LESS)
            self.state = 1256
            self.match(plsqlParser.THAN)
            self.state = 1257
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1262 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1258
                    self.match(plsqlParser.COMMA)


                self.state = 1261
                self.literal()
                self.state = 1264 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.DECODE - 64)))) != 0) or _la==plsqlParser.MAXVALUE or _la==plsqlParser.NVL or ((((_la - 485)) & ~0x3f) == 0 and ((1 << (_la - 485)) & ((1 << (plsqlParser.SUBSTRING - 485)) | (1 << (plsqlParser.TO_CHAR - 485)) | (1 << (plsqlParser.TO_DATE - 485)) | (1 << (plsqlParser.TRIM - 485)))) != 0) or ((((_la - 618)) & ~0x3f) == 0 and ((1 << (_la - 618)) & ((1 << (plsqlParser.UNSIGNED_INTEGER - 618)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 618)) | (1 << (plsqlParser.CHAR_STRING - 618)) | (1 << (plsqlParser.COMMA - 618)))) != 0)):
                    break

            self.state = 1266
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 1268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                self.state = 1267
                self.segment_attributes_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_partition_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_name" ):
                return visitor.visitPartition_name(self)
            else:
                return visitor.visitChildren(self)




    def partition_name(self):

        localctx = plsqlParser.Partition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_partition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def string_function(self):
            return self.getTypedRuleContext(plsqlParser.String_functionContext,0)


        def numeric(self):
            return self.getTypedRuleContext(plsqlParser.NumericContext,0)


        def MAXVALUE(self):
            return self.getToken(plsqlParser.MAXVALUE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = plsqlParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_literal)
        try:
            self.state = 1276
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1272
                self.match(plsqlParser.CHAR_STRING)
                pass
            elif token in [plsqlParser.CHR, plsqlParser.CONCAT, plsqlParser.DECODE, plsqlParser.NVL, plsqlParser.SUBSTRING, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRIM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1273
                self.string_function()
                pass
            elif token in [plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1274
                self.numeric()
                pass
            elif token in [plsqlParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1275
                self.match(plsqlParser.MAXVALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def SUBSTRING(self):
            return self.getToken(plsqlParser.SUBSTRING, 0)

        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.AtomContext)
            else:
                return self.getTypedRuleContext(plsqlParser.AtomContext,i)


        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def TO_CHAR(self):
            return self.getToken(plsqlParser.TO_CHAR, 0)

        def table_element(self):
            return self.getTypedRuleContext(plsqlParser.Table_elementContext,0)


        def standard_function(self):
            return self.getTypedRuleContext(plsqlParser.Standard_functionContext,0)


        def quoted_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Quoted_stringContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,i)


        def expressions(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionsContext,0)


        def DECODE(self):
            return self.getToken(plsqlParser.DECODE, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def NCHAR_CS(self):
            return self.getToken(plsqlParser.NCHAR_CS, 0)

        def CHR(self):
            return self.getToken(plsqlParser.CHR, 0)

        def NVL(self):
            return self.getToken(plsqlParser.NVL, 0)

        def TRIM(self):
            return self.getToken(plsqlParser.TRIM, 0)

        def LEADING(self):
            return self.getToken(plsqlParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(plsqlParser.TRAILING, 0)

        def BOTH(self):
            return self.getToken(plsqlParser.BOTH, 0)

        def TO_DATE(self):
            return self.getToken(plsqlParser.TO_DATE, 0)

        def CONCAT(self):
            return self.getToken(plsqlParser.CONCAT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_string_function

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_function" ):
                return visitor.visitString_function(self)
            else:
                return visitor.visitChildren(self)




    def string_function(self):

        localctx = plsqlParser.String_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_string_function)
        self._la = 0 # Token type
        try:
            self.state = 1379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1278
                localctx.name = self.match(plsqlParser.SUBSTRING)
                self.state = 1279
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1280
                self.expression(0)
                self.state = 1281
                self.match(plsqlParser.COMMA)
                self.state = 1282
                self.expression(0)
                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1283
                    self.match(plsqlParser.COMMA)
                    self.state = 1284
                    self.expression(0)


                self.state = 1287
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1289
                localctx.name = self.match(plsqlParser.SUBSTRING)
                self.state = 1290
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1291
                self.expression(0)
                self.state = 1294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.FROM:
                    self.state = 1292
                    self.match(plsqlParser.FROM)
                    self.state = 1293
                    self.atom()


                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.FOR:
                    self.state = 1296
                    self.match(plsqlParser.FOR)
                    self.state = 1297
                    self.atom()


                self.state = 1300
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1302
                localctx.name = self.match(plsqlParser.TO_CHAR)
                self.state = 1303
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1307
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 1304
                    self.table_element()
                    pass

                elif la_ == 2:
                    self.state = 1305
                    self.standard_function(0)
                    pass

                elif la_ == 3:
                    self.state = 1306
                    self.expression(0)
                    pass


                self.state = 1311
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 1309
                    self.match(plsqlParser.COMMA)
                    self.state = 1310
                    self.quoted_string()


                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1313
                    self.match(plsqlParser.COMMA)
                    self.state = 1314
                    self.quoted_string()


                self.state = 1317
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1319
                localctx.name = self.match(plsqlParser.DECODE)
                self.state = 1320
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1321
                self.expressions()
                self.state = 1322
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1324
                localctx.name = self.match(plsqlParser.CHR)
                self.state = 1325
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1326
                self.concatenation()
                self.state = 1327
                self.match(plsqlParser.USING)
                self.state = 1328
                self.match(plsqlParser.NCHAR_CS)
                self.state = 1329
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1331
                localctx.name = self.match(plsqlParser.NVL)
                self.state = 1332
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1333
                self.expression(0)
                self.state = 1334
                self.match(plsqlParser.COMMA)
                self.state = 1335
                self.expression(0)
                self.state = 1336
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1338
                localctx.name = self.match(plsqlParser.TRIM)
                self.state = 1339
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 1341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.BOTH or _la==plsqlParser.LEADING or _la==plsqlParser.TRAILING:
                        self.state = 1340
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.BOTH or _la==plsqlParser.LEADING or _la==plsqlParser.TRAILING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.NATIONAL_CHAR_STRING_LIT or _la==plsqlParser.CHAR_STRING:
                        self.state = 1343
                        self.quoted_string()


                    self.state = 1346
                    self.match(plsqlParser.FROM)


                self.state = 1349
                self.concatenation()
                self.state = 1350
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1352
                localctx.name = self.match(plsqlParser.TO_DATE)
                self.state = 1353
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1354
                self.expression(0)
                self.state = 1357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1355
                    self.match(plsqlParser.COMMA)
                    self.state = 1356
                    self.quoted_string()


                self.state = 1359
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1361
                localctx.name = self.match(plsqlParser.CONCAT)
                self.state = 1362
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1369 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1365
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                        if la_ == 1:
                            self.state = 1363
                            self.quoted_string()
                            pass

                        elif la_ == 2:
                            self.state = 1364
                            self.expression(0)
                            pass


                        self.state = 1367
                        self.match(plsqlParser.COMMA)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1371 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

                self.state = 1375
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 1373
                    self.quoted_string()
                    pass

                elif la_ == 2:
                    self.state = 1374
                    self.expression(0)
                    pass


                self.state = 1377
                self.match(plsqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressions" ):
                return visitor.visitExpressions(self)
            else:
                return visitor.visitChildren(self)




    def expressions(self):

        localctx = plsqlParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1381
            self.expression(0)
            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 1382
                self.match(plsqlParser.COMMA)
                self.state = 1383
                self.expression(0)
                self.state = 1388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Individual_hash_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def partitioning_storage_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partitioning_storage_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partitioning_storage_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_individual_hash_partitions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndividual_hash_partitions" ):
                return visitor.visitIndividual_hash_partitions(self)
            else:
                return visitor.visitChildren(self)




    def individual_hash_partitions(self):

        localctx = plsqlParser.Individual_hash_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_individual_hash_partitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1400 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1390
                    self.match(plsqlParser.COMMA)


                self.state = 1393
                self.match(plsqlParser.PARTITION)
                self.state = 1395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 1394
                    self.partition_name()


                self.state = 1398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMPRESS or _la==plsqlParser.LOB or _la==plsqlParser.NOCOMPRESS or _la==plsqlParser.OVERFLOW or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VARRAY:
                    self.state = 1397
                    self.partitioning_storage_clause()


                self.state = 1402 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 1404
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partitioning_storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TABLESPACE)
            else:
                return self.getToken(plsqlParser.TABLESPACE, i)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def OVERFLOW(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OVERFLOW)
            else:
                return self.getToken(plsqlParser.OVERFLOW, i)

        def table_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_compressionContext,i)


        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def lob_partitioning_storage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_partitioning_storageContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_partitioning_storageContext,i)


        def VARRAY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.VARRAY)
            else:
                return self.getToken(plsqlParser.VARRAY, i)

        def varray_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Varray_itemContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Varray_itemContext,i)


        def STORE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.STORE)
            else:
                return self.getToken(plsqlParser.STORE, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def LOB(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LOB)
            else:
                return self.getToken(plsqlParser.LOB, i)

        def lob_segname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_segnameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_segnameContext,i)


        def BASICFILE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.BASICFILE)
            else:
                return self.getToken(plsqlParser.BASICFILE, i)

        def SECUREFILE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SECUREFILE)
            else:
                return self.getToken(plsqlParser.SECUREFILE, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_partitioning_storage_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitioning_storage_clause" ):
                return visitor.visitPartitioning_storage_clause(self)
            else:
                return visitor.visitChildren(self)




    def partitioning_storage_clause(self):

        localctx = plsqlParser.Partitioning_storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_partitioning_storage_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 1406
                    self.match(plsqlParser.TABLESPACE)
                    self.state = 1407
                    self.tablespace()
                    pass

                elif la_ == 2:
                    self.state = 1408
                    self.match(plsqlParser.OVERFLOW)
                    self.state = 1411
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                    if la_ == 1:
                        self.state = 1409
                        self.match(plsqlParser.TABLESPACE)
                        self.state = 1410
                        self.tablespace()


                    pass

                elif la_ == 3:
                    self.state = 1413
                    self.table_compression()
                    pass

                elif la_ == 4:
                    self.state = 1414
                    self.key_compression()
                    pass

                elif la_ == 5:
                    self.state = 1415
                    self.lob_partitioning_storage()
                    pass

                elif la_ == 6:
                    self.state = 1416
                    self.match(plsqlParser.VARRAY)
                    self.state = 1417
                    self.varray_item()
                    self.state = 1418
                    self.match(plsqlParser.STORE)
                    self.state = 1419
                    self.match(plsqlParser.AS)
                    self.state = 1421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE:
                        self.state = 1420
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1423
                    self.match(plsqlParser.LOB)
                    self.state = 1424
                    self.lob_segname()
                    pass


                self.state = 1428 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.COMPRESS or _la==plsqlParser.LOB or _la==plsqlParser.NOCOMPRESS or _la==plsqlParser.OVERFLOW or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VARRAY):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_compressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPRESS(self):
            return self.getToken(plsqlParser.COMPRESS, 0)

        def BASIC(self):
            return self.getToken(plsqlParser.BASIC, 0)

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def OLTP(self):
            return self.getToken(plsqlParser.OLTP, 0)

        def QUERY(self):
            return self.getToken(plsqlParser.QUERY, 0)

        def ARCHIVE(self):
            return self.getToken(plsqlParser.ARCHIVE, 0)

        def LOW(self):
            return self.getToken(plsqlParser.LOW, 0)

        def HIGH(self):
            return self.getToken(plsqlParser.HIGH, 0)

        def NOCOMPRESS(self):
            return self.getToken(plsqlParser.NOCOMPRESS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_compression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_compression" ):
                return visitor.visitTable_compression(self)
            else:
                return visitor.visitChildren(self)




    def table_compression(self):

        localctx = plsqlParser.Table_compressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_table_compression)
        self._la = 0 # Token type
        try:
            self.state = 1443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.COMPRESS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1430
                self.match(plsqlParser.COMPRESS)
                self.state = 1440
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.BASIC]:
                    self.state = 1431
                    self.match(plsqlParser.BASIC)
                    pass
                elif token in [plsqlParser.FOR]:
                    self.state = 1432
                    self.match(plsqlParser.FOR)
                    self.state = 1438
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.OLTP]:
                        self.state = 1433
                        self.match(plsqlParser.OLTP)
                        pass
                    elif token in [plsqlParser.ARCHIVE, plsqlParser.QUERY]:
                        self.state = 1434
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.ARCHIVE or _la==plsqlParser.QUERY):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1436
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.HIGH or _la==plsqlParser.LOW:
                            self.state = 1435
                            _la = self._input.LA(1)
                            if not(_la==plsqlParser.HIGH or _la==plsqlParser.LOW):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [plsqlParser.EOF, plsqlParser.ADD, plsqlParser.ALLOCATE, plsqlParser.ALTER, plsqlParser.AS, plsqlParser.CACHE, plsqlParser.COALESCE, plsqlParser.COLUMN, plsqlParser.COMPRESS, plsqlParser.CREATE, plsqlParser.DEALLOCATE, plsqlParser.DELETE, plsqlParser.DISABLE, plsqlParser.DROP, plsqlParser.ENABLE, plsqlParser.EXPLAIN, plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.FLASHBACK, plsqlParser.FUNCTION, plsqlParser.GLOBAL, plsqlParser.INITRANS, plsqlParser.INSERT, plsqlParser.INVISIBLE, plsqlParser.LOCAL, plsqlParser.LOB, plsqlParser.LOCK, plsqlParser.LOGGING, plsqlParser.MAPPING, plsqlParser.MERGE, plsqlParser.MINIMIZE, plsqlParser.NESTED, plsqlParser.NO, plsqlParser.NOCACHE, plsqlParser.NOCOMPRESS, plsqlParser.NOLOGGING, plsqlParser.NOMAPPING, plsqlParser.NOMINIMIZE, plsqlParser.NOPARALLEL, plsqlParser.NOROWDEPENDENCIES, plsqlParser.NOSORT, plsqlParser.OVERFLOW, plsqlParser.PARALLEL, plsqlParser.PARTITION, plsqlParser.PCTFREE, plsqlParser.PCTTHRESHOLD, plsqlParser.PCTUSED, plsqlParser.PROCEDURE, plsqlParser.RECORDS_PER_BLOCK, plsqlParser.RESULT_CACHE, plsqlParser.REVERSE, plsqlParser.ROW, plsqlParser.ROWDEPENDENCIES, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SORT, plsqlParser.STORAGE, plsqlParser.SUBPARTITION, plsqlParser.SUBPARTITIONS, plsqlParser.TABLESPACE, plsqlParser.UNUSABLE, plsqlParser.UPDATE, plsqlParser.UPGRADE, plsqlParser.VARRAY, plsqlParser.VISIBLE, plsqlParser.WITH, plsqlParser.XMLTYPE, plsqlParser.LEFT_PAREN, plsqlParser.RIGHT_PAREN, plsqlParser.COMMA, plsqlParser.SEMICOLON]:
                    pass
                else:
                    pass
                pass
            elif token in [plsqlParser.NOCOMPRESS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1442
                self.match(plsqlParser.NOCOMPRESS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_partitioning_storageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOB(self):
            return self.getToken(plsqlParser.LOB, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def lob_item(self):
            return self.getTypedRuleContext(plsqlParser.Lob_itemContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def lob_segname(self):
            return self.getTypedRuleContext(plsqlParser.Lob_segnameContext,0)


        def TABLESPACE(self):
            return self.getToken(plsqlParser.TABLESPACE, 0)

        def tablespace(self):
            return self.getTypedRuleContext(plsqlParser.TablespaceContext,0)


        def BASICFILE(self):
            return self.getToken(plsqlParser.BASICFILE, 0)

        def SECUREFILE(self):
            return self.getToken(plsqlParser.SECUREFILE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_lob_partitioning_storage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_partitioning_storage" ):
                return visitor.visitLob_partitioning_storage(self)
            else:
                return visitor.visitChildren(self)




    def lob_partitioning_storage(self):

        localctx = plsqlParser.Lob_partitioning_storageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_lob_partitioning_storage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.match(plsqlParser.LOB)
            self.state = 1446
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1447
            self.lob_item()
            self.state = 1448
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 1449
            self.match(plsqlParser.STORE)
            self.state = 1450
            self.match(plsqlParser.AS)
            self.state = 1452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE:
                self.state = 1451
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.REGULAR_ID]:
                self.state = 1454
                self.lob_segname()
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LEFT_PAREN:
                    self.state = 1455
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 1456
                    self.match(plsqlParser.TABLESPACE)
                    self.state = 1457
                    self.tablespace()
                    self.state = 1458
                    self.match(plsqlParser.RIGHT_PAREN)


                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 1462
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1463
                self.match(plsqlParser.TABLESPACE)
                self.state = 1464
                self.tablespace()
                self.state = 1465
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lob_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_item" ):
                return visitor.visitLob_item(self)
            else:
                return visitor.visitChildren(self)




    def lob_item(self):

        localctx = plsqlParser.Lob_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_lob_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1469
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_segnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lob_segname

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_segname" ):
                return visitor.visitLob_segname(self)
            else:
                return visitor.visitChildren(self)




    def lob_segname(self):

        localctx = plsqlParser.Lob_segnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_lob_segname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Varray_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_varray_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarray_item" ):
                return visitor.visitVarray_item(self)
            else:
                return visitor.visitChildren(self)




    def varray_item(self):

        localctx = plsqlParser.Varray_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_varray_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 1473
                self.id_expression()
                self.state = 1474
                self.match(plsqlParser.PERIOD)


            self.state = 1481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 1478
                self.id_expression()
                self.state = 1479
                self.match(plsqlParser.PERIOD)


            self.state = 1483
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_partitions_by_quantityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITIONS(self):
            return self.getToken(plsqlParser.PARTITIONS, 0)

        def hash_partition_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_partition_quantityContext,0)


        def STORE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.STORE)
            else:
                return self.getToken(plsqlParser.STORE, i)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.IN)
            else:
                return self.getToken(plsqlParser.IN, i)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def table_compression(self):
            return self.getTypedRuleContext(plsqlParser.Table_compressionContext,0)


        def key_compression(self):
            return self.getTypedRuleContext(plsqlParser.Key_compressionContext,0)


        def OVERFLOW(self):
            return self.getToken(plsqlParser.OVERFLOW, 0)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_hash_partitions_by_quantity

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHash_partitions_by_quantity" ):
                return visitor.visitHash_partitions_by_quantity(self)
            else:
                return visitor.visitChildren(self)




    def hash_partitions_by_quantity(self):

        localctx = plsqlParser.Hash_partitions_by_quantityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_hash_partitions_by_quantity)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.match(plsqlParser.PARTITIONS)
            self.state = 1486
            self.hash_partition_quantity()
            self.state = 1500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.STORE:
                self.state = 1487
                self.match(plsqlParser.STORE)
                self.state = 1488
                self.match(plsqlParser.IN)
                self.state = 1489
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1494 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1490
                        self.match(plsqlParser.COMMA)


                    self.state = 1493
                    self.tablespace()
                    self.state = 1496 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 1498
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 1502
                self.table_compression()

            elif la_ == 2:
                self.state = 1503
                self.key_compression()


            self.state = 1520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OVERFLOW:
                self.state = 1506
                self.match(plsqlParser.OVERFLOW)
                self.state = 1507
                self.match(plsqlParser.STORE)
                self.state = 1508
                self.match(plsqlParser.IN)
                self.state = 1509
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1514 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1510
                        self.match(plsqlParser.COMMA)


                    self.state = 1513
                    self.tablespace()
                    self.state = 1516 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 1518
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_partition_quantityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_hash_partition_quantity

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHash_partition_quantity" ):
                return visitor.visitHash_partition_quantity(self)
            else:
                return visitor.visitChildren(self)




    def hash_partition_quantity(self):

        localctx = plsqlParser.Hash_partition_quantityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_hash_partition_quantity)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.match(plsqlParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_partitioned_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def on_range_partitioned_table(self):
            return self.getTypedRuleContext(plsqlParser.On_range_partitioned_tableContext,0)


        def on_list_partitioned_table(self):
            return self.getTypedRuleContext(plsqlParser.On_list_partitioned_tableContext,0)


        def on_hash_partitioned_table(self):
            return self.getTypedRuleContext(plsqlParser.On_hash_partitioned_tableContext,0)


        def on_comp_partitioned_table(self):
            return self.getTypedRuleContext(plsqlParser.On_comp_partitioned_tableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_local_partitioned_index

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocal_partitioned_index" ):
                return visitor.visitLocal_partitioned_index(self)
            else:
                return visitor.visitChildren(self)




    def local_partitioned_index(self):

        localctx = plsqlParser.Local_partitioned_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_local_partitioned_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.match(plsqlParser.LOCAL)
            self.state = 1529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 1525
                self.on_range_partitioned_table()

            elif la_ == 2:
                self.state = 1526
                self.on_list_partitioned_table()

            elif la_ == 3:
                self.state = 1527
                self.on_hash_partitioned_table()

            elif la_ == 4:
                self.state = 1528
                self.on_comp_partitioned_table()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_range_partitioned_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def UNUSABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNUSABLE)
            else:
                return self.getToken(plsqlParser.UNUSABLE, i)

        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,i)


        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_on_range_partitioned_table

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_range_partitioned_table" ):
                return visitor.visitOn_range_partitioned_table(self)
            else:
                return visitor.visitChildren(self)




    def on_range_partitioned_table(self):

        localctx = plsqlParser.On_range_partitioned_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_on_range_partitioned_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1550 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1532
                    self.match(plsqlParser.COMMA)


                self.state = 1535
                self.match(plsqlParser.PARTITION)
                self.state = 1537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 1536
                    self.partition_name()


                self.state = 1545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 267)) & ~0x3f) == 0 and ((1 << (_la - 267)) & ((1 << (plsqlParser.LOGGING - 267)) | (1 << (plsqlParser.NOCOMPRESS - 267)) | (1 << (plsqlParser.NOLOGGING - 267)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                    self.state = 1541 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1541
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.INITRANS, plsqlParser.LOGGING, plsqlParser.NOLOGGING, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE, plsqlParser.TABLESPACE]:
                            self.state = 1539
                            self.segment_attributes_clause()
                            pass
                        elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                            self.state = 1540
                            self.key_compression()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1543 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 267)) & ~0x3f) == 0 and ((1 << (_la - 267)) & ((1 << (plsqlParser.LOGGING - 267)) | (1 << (plsqlParser.NOCOMPRESS - 267)) | (1 << (plsqlParser.NOLOGGING - 267)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE):
                            break



                self.state = 1548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.UNUSABLE:
                    self.state = 1547
                    self.match(plsqlParser.UNUSABLE)


                self.state = 1552 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 1554
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_list_partitioned_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def UNUSABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNUSABLE)
            else:
                return self.getToken(plsqlParser.UNUSABLE, i)

        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,i)


        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_on_list_partitioned_table

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_list_partitioned_table" ):
                return visitor.visitOn_list_partitioned_table(self)
            else:
                return visitor.visitChildren(self)




    def on_list_partitioned_table(self):

        localctx = plsqlParser.On_list_partitioned_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_on_list_partitioned_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1556
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1575 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1557
                    self.match(plsqlParser.COMMA)


                self.state = 1560
                self.match(plsqlParser.PARTITION)
                self.state = 1562
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 1561
                    self.partition_name()


                self.state = 1570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 267)) & ~0x3f) == 0 and ((1 << (_la - 267)) & ((1 << (plsqlParser.LOGGING - 267)) | (1 << (plsqlParser.NOCOMPRESS - 267)) | (1 << (plsqlParser.NOLOGGING - 267)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                    self.state = 1566 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1566
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.INITRANS, plsqlParser.LOGGING, plsqlParser.NOLOGGING, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE, plsqlParser.TABLESPACE]:
                            self.state = 1564
                            self.segment_attributes_clause()
                            pass
                        elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                            self.state = 1565
                            self.key_compression()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1568 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 267)) & ~0x3f) == 0 and ((1 << (_la - 267)) & ((1 << (plsqlParser.LOGGING - 267)) | (1 << (plsqlParser.NOCOMPRESS - 267)) | (1 << (plsqlParser.NOLOGGING - 267)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE):
                            break



                self.state = 1573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.UNUSABLE:
                    self.state = 1572
                    self.match(plsqlParser.UNUSABLE)


                self.state = 1577 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 1579
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_hash_partitioned_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TABLESPACE)
            else:
                return self.getToken(plsqlParser.TABLESPACE, i)

        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def UNUSABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNUSABLE)
            else:
                return self.getToken(plsqlParser.UNUSABLE, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_on_hash_partitioned_table

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_hash_partitioned_table" ):
                return visitor.visitOn_hash_partitioned_table(self)
            else:
                return visitor.visitChildren(self)




    def on_hash_partitioned_table(self):

        localctx = plsqlParser.On_hash_partitioned_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_on_hash_partitioned_table)
        self._la = 0 # Token type
        try:
            self.state = 1617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.STORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1581
                self.match(plsqlParser.STORE)
                self.state = 1582
                self.match(plsqlParser.IN)
                self.state = 1583
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1588 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1584
                        self.match(plsqlParser.COMMA)


                    self.state = 1587
                    self.tablespace()
                    self.state = 1590 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 1592
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1594
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1612 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1595
                        self.match(plsqlParser.COMMA)


                    self.state = 1598
                    self.match(plsqlParser.PARTITION)
                    self.state = 1600
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        self.state = 1599
                        self.partition_name()


                    self.state = 1604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.TABLESPACE:
                        self.state = 1602
                        self.match(plsqlParser.TABLESPACE)
                        self.state = 1603
                        self.tablespace()


                    self.state = 1607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMPRESS or _la==plsqlParser.NOCOMPRESS:
                        self.state = 1606
                        self.key_compression()


                    self.state = 1610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.UNUSABLE:
                        self.state = 1609
                        self.match(plsqlParser.UNUSABLE)


                    self.state = 1614 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                        break

                self.state = 1616
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_comp_partitioned_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def UNUSABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNUSABLE)
            else:
                return self.getToken(plsqlParser.UNUSABLE, i)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def index_subpartition_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Index_subpartition_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Index_subpartition_clauseContext,i)


        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,i)


        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_on_comp_partitioned_table

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_comp_partitioned_table" ):
                return visitor.visitOn_comp_partitioned_table(self)
            else:
                return visitor.visitChildren(self)




    def on_comp_partitioned_table(self):

        localctx = plsqlParser.On_comp_partitioned_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_on_comp_partitioned_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.STORE:
                self.state = 1619
                self.match(plsqlParser.STORE)
                self.state = 1620
                self.match(plsqlParser.IN)
                self.state = 1621
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1626 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1622
                        self.match(plsqlParser.COMMA)


                    self.state = 1625
                    self.tablespace()
                    self.state = 1628 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 1630
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1634
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1654 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1635
                    self.match(plsqlParser.COMMA)


                self.state = 1638
                self.match(plsqlParser.PARTITION)
                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 1639
                    self.partition_name()


                self.state = 1648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 267)) & ~0x3f) == 0 and ((1 << (_la - 267)) & ((1 << (plsqlParser.LOGGING - 267)) | (1 << (plsqlParser.NOCOMPRESS - 267)) | (1 << (plsqlParser.NOLOGGING - 267)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                    self.state = 1644 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1644
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.INITRANS, plsqlParser.LOGGING, plsqlParser.NOLOGGING, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE, plsqlParser.TABLESPACE]:
                            self.state = 1642
                            self.segment_attributes_clause()
                            pass
                        elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                            self.state = 1643
                            self.key_compression()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1646 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 267)) & ~0x3f) == 0 and ((1 << (_la - 267)) & ((1 << (plsqlParser.LOGGING - 267)) | (1 << (plsqlParser.NOCOMPRESS - 267)) | (1 << (plsqlParser.NOLOGGING - 267)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE):
                            break



                self.state = 1650
                self.match(plsqlParser.UNUSABLE)
                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.STORE or _la==plsqlParser.LEFT_PAREN:
                    self.state = 1651
                    self.index_subpartition_clause()


                self.state = 1656 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 1658
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_subpartition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def SUBPARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SUBPARTITION)
            else:
                return self.getToken(plsqlParser.SUBPARTITION, i)

        def subpartition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Subpartition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Subpartition_nameContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TABLESPACE)
            else:
                return self.getToken(plsqlParser.TABLESPACE, i)

        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def UNUSABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNUSABLE)
            else:
                return self.getToken(plsqlParser.UNUSABLE, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_index_subpartition_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_subpartition_clause" ):
                return visitor.visitIndex_subpartition_clause(self)
            else:
                return visitor.visitChildren(self)




    def index_subpartition_clause(self):

        localctx = plsqlParser.Index_subpartition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_index_subpartition_clause)
        self._la = 0 # Token type
        try:
            self.state = 1696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.STORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1660
                self.match(plsqlParser.STORE)
                self.state = 1661
                self.match(plsqlParser.IN)
                self.state = 1662
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1667 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1663
                        self.match(plsqlParser.COMMA)


                    self.state = 1666
                    self.tablespace()
                    self.state = 1669 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 1671
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1673
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1691 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1674
                        self.match(plsqlParser.COMMA)


                    self.state = 1677
                    self.match(plsqlParser.SUBPARTITION)
                    self.state = 1679
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                    if la_ == 1:
                        self.state = 1678
                        self.subpartition_name()


                    self.state = 1683
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.TABLESPACE:
                        self.state = 1681
                        self.match(plsqlParser.TABLESPACE)
                        self.state = 1682
                        self.tablespace()


                    self.state = 1686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMPRESS or _la==plsqlParser.NOCOMPRESS:
                        self.state = 1685
                        self.key_compression()


                    self.state = 1689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.UNUSABLE:
                        self.state = 1688
                        self.match(plsqlParser.UNUSABLE)


                    self.state = 1693 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                        break

                self.state = 1695
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subpartition_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partition_name(self):
            return self.getTypedRuleContext(plsqlParser.Partition_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subpartition_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubpartition_name" ):
                return visitor.visitSubpartition_name(self)
            else:
                return visitor.visitChildren(self)




    def subpartition_name(self):

        localctx = plsqlParser.Subpartition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_subpartition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1698
            self.partition_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Domain_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indextype(self):
            return self.getTypedRuleContext(plsqlParser.IndextypeContext,0)


        def local_domain_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Local_domain_index_clauseContext,0)


        def parallel_clause(self):
            return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,0)


        def PARAMETERS(self):
            return self.getToken(plsqlParser.PARAMETERS, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def odci_parameters(self):
            return self.getTypedRuleContext(plsqlParser.Odci_parametersContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_domain_index_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDomain_index_clause" ):
                return visitor.visitDomain_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def domain_index_clause(self):

        localctx = plsqlParser.Domain_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_domain_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1700
            self.indextype()
            self.state = 1702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOCAL:
                self.state = 1701
                self.local_domain_index_clause()


            self.state = 1705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOPARALLEL or _la==plsqlParser.PARALLEL:
                self.state = 1704
                self.parallel_clause()


            self.state = 1712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARAMETERS:
                self.state = 1707
                self.match(plsqlParser.PARAMETERS)
                self.state = 1708
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1709
                self.odci_parameters()
                self.state = 1710
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndextypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_indextype

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndextype" ):
                return visitor.visitIndextype(self)
            else:
                return visitor.visitChildren(self)




    def indextype(self):

        localctx = plsqlParser.IndextypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_indextype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1714
                self.id_expression()
                self.state = 1715
                self.match(plsqlParser.PERIOD)


            self.state = 1719
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Odci_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_odci_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOdci_parameters" ):
                return visitor.visitOdci_parameters(self)
            else:
                return visitor.visitChildren(self)




    def odci_parameters(self):

        localctx = plsqlParser.Odci_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_odci_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1721
            self.match(plsqlParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_domain_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def PARAMETERS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARAMETERS)
            else:
                return self.getToken(plsqlParser.PARAMETERS, i)

        def odci_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Odci_parametersContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Odci_parametersContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_local_domain_index_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocal_domain_index_clause" ):
                return visitor.visitLocal_domain_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def local_domain_index_clause(self):

        localctx = plsqlParser.Local_domain_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_local_domain_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            self.match(plsqlParser.LOCAL)
            self.state = 1743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1724
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1737 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1725
                        self.match(plsqlParser.COMMA)


                    self.state = 1728
                    self.match(plsqlParser.PARTITION)
                    self.state = 1729
                    self.partition_name()
                    self.state = 1735
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.PARAMETERS:
                        self.state = 1730
                        self.match(plsqlParser.PARAMETERS)
                        self.state = 1731
                        self.match(plsqlParser.LEFT_PAREN)
                        self.state = 1732
                        self.odci_parameters()
                        self.state = 1733
                        self.match(plsqlParser.RIGHT_PAREN)


                    self.state = 1739 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                        break

                self.state = 1741
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlindex_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLINDEX(self):
            return self.getToken(plsqlParser.XMLINDEX, 0)

        def XDB(self):
            return self.getToken(plsqlParser.XDB, 0)

        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def local_xmlindex_clause(self):
            return self.getTypedRuleContext(plsqlParser.Local_xmlindex_clauseContext,0)


        def parallel_clause(self):
            return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlindex_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlindex_clause" ):
                return visitor.visitXmlindex_clause(self)
            else:
                return visitor.visitChildren(self)




    def xmlindex_clause(self):

        localctx = plsqlParser.Xmlindex_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_xmlindex_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.XDB:
                self.state = 1745
                self.match(plsqlParser.XDB)
                self.state = 1746
                self.match(plsqlParser.PERIOD)


            self.state = 1749
            self.match(plsqlParser.XMLINDEX)
            self.state = 1751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOCAL:
                self.state = 1750
                self.local_xmlindex_clause()


            self.state = 1754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOPARALLEL or _la==plsqlParser.PARALLEL:
                self.state = 1753
                self.parallel_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_xmlindex_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_local_xmlindex_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocal_xmlindex_clause" ):
                return visitor.visitLocal_xmlindex_clause(self)
            else:
                return visitor.visitChildren(self)




    def local_xmlindex_clause(self):

        localctx = plsqlParser.Local_xmlindex_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_local_xmlindex_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.match(plsqlParser.LOCAL)
            self.state = 1769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 1757
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1763 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1758
                        self.match(plsqlParser.COMMA)


                    self.state = 1761
                    self.match(plsqlParser.PARTITION)
                    self.state = 1762
                    self.partition_name()
                    self.state = 1765 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                        break

                self.state = 1767
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitmap_join_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Tableview_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,i)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def table_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_aliasContext,i)


        def local_partitioned_index(self):
            return self.getTypedRuleContext(plsqlParser.Local_partitioned_indexContext,0)


        def index_attributes(self):
            return self.getTypedRuleContext(plsqlParser.Index_attributesContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ASC)
            else:
                return self.getToken(plsqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DESC)
            else:
                return self.getToken(plsqlParser.DESC, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_bitmap_join_index_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitmap_join_index_clause" ):
                return visitor.visitBitmap_join_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def bitmap_join_index_clause(self):

        localctx = plsqlParser.Bitmap_join_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_bitmap_join_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1771
            self.tableview_name()
            self.state = 1772
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1784 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1773
                    self.match(plsqlParser.COMMA)


                self.state = 1778
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1776
                    self.tableview_name()

                elif la_ == 2:
                    self.state = 1777
                    self.table_alias()


                self.state = 1780
                self.column_name()
                self.state = 1782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ASC or _la==plsqlParser.DESC:
                    self.state = 1781
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.ASC or _la==plsqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1786 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                    break

            self.state = 1788
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 1789
            self.match(plsqlParser.FROM)
            self.state = 1796 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1790
                    self.match(plsqlParser.COMMA)


                self.state = 1793
                self.tableview_name()
                self.state = 1794
                self.table_alias()
                self.state = 1798 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                    break

            self.state = 1800
            self.where_clause()
            self.state = 1802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOCAL:
                self.state = 1801
                self.local_partitioned_index()


            self.state = 1805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.INVISIBLE or _la==plsqlParser.LOGGING or ((((_la - 309)) & ~0x3f) == 0 and ((1 << (_la - 309)) & ((1 << (plsqlParser.NOCOMPRESS - 309)) | (1 << (plsqlParser.NOLOGGING - 309)) | (1 << (plsqlParser.NOPARALLEL - 309)) | (1 << (plsqlParser.NOSORT - 309)) | (1 << (plsqlParser.PARALLEL - 309)) | (1 << (plsqlParser.PCTFREE - 309)) | (1 << (plsqlParser.PCTUSED - 309)))) != 0) or ((((_la - 419)) & ~0x3f) == 0 and ((1 << (_la - 419)) & ((1 << (plsqlParser.REVERSE - 419)) | (1 << (plsqlParser.SORT - 419)) | (1 << (plsqlParser.STORAGE - 419)))) != 0) or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VISIBLE:
                self.state = 1804
                self.index_attributes()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def relational_table(self):
            return self.getTypedRuleContext(plsqlParser.Relational_tableContext,0)


        def object_table(self):
            return self.getTypedRuleContext(plsqlParser.Object_tableContext,0)


        def xmltype_table(self):
            return self.getTypedRuleContext(plsqlParser.Xmltype_tableContext,0)


        def TEMPORARY(self):
            return self.getToken(plsqlParser.TEMPORARY, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def GLOBAL(self):
            return self.getToken(plsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_table

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table" ):
                return visitor.visitCreate_table(self)
            else:
                return visitor.visitChildren(self)




    def create_table(self):

        localctx = plsqlParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1807
            self.match(plsqlParser.CREATE)
            self.state = 1812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.GLOBAL or _la==plsqlParser.TEMPORARY:
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.GLOBAL:
                    self.state = 1808
                    self.match(plsqlParser.GLOBAL)


                self.state = 1811
                self.match(plsqlParser.TEMPORARY)


            self.state = 1814
            self.match(plsqlParser.TABLE)
            self.state = 1815
            self.tableview_name()
            self.state = 1819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1816
                self.relational_table()
                pass

            elif la_ == 2:
                self.state = 1817
                self.object_table()
                pass

            elif la_ == 3:
                self.state = 1818
                self.xmltype_table()
                pass


            self.state = 1823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS:
                self.state = 1821
                self.match(plsqlParser.AS)
                self.state = 1822
                self.select_statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def relational_properties(self):
            return self.getTypedRuleContext(plsqlParser.Relational_propertiesContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def physical_properties(self):
            return self.getTypedRuleContext(plsqlParser.Physical_propertiesContext,0)


        def column_properties(self):
            return self.getTypedRuleContext(plsqlParser.Column_propertiesContext,0)


        def table_partitioning_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Table_partitioning_clausesContext,0)


        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def MODE(self):
            return self.getToken(plsqlParser.MODE, 0)

        def parallel_clause(self):
            return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,0)


        def row_movement_clause(self):
            return self.getTypedRuleContext(plsqlParser.Row_movement_clauseContext,0)


        def flashback_archive_clause(self):
            return self.getTypedRuleContext(plsqlParser.Flashback_archive_clauseContext,0)


        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def PRESERVE(self):
            return self.getToken(plsqlParser.PRESERVE, 0)

        def CACHE(self):
            return self.getToken(plsqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(plsqlParser.NOCACHE, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def ROWDEPENDENCIES(self):
            return self.getToken(plsqlParser.ROWDEPENDENCIES, 0)

        def NOROWDEPENDENCIES(self):
            return self.getToken(plsqlParser.NOROWDEPENDENCIES, 0)

        def enable_disable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Enable_disable_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Enable_disable_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_relational_table

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_table" ):
                return visitor.visitRelational_table(self)
            else:
                return visitor.visitChildren(self)




    def relational_table(self):

        localctx = plsqlParser.Relational_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_relational_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1825
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1826
                self.relational_properties()
                self.state = 1827
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ON:
                self.state = 1831
                self.match(plsqlParser.ON)
                self.state = 1832
                self.match(plsqlParser.COMMIT)
                self.state = 1833
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DELETE or _la==plsqlParser.PRESERVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1834
                self.match(plsqlParser.ROWS)


            self.state = 1838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or ((((_la - 441)) & ~0x3f) == 0 and ((1 << (_la - 441)) & ((1 << (plsqlParser.SEGMENT - 441)) | (1 << (plsqlParser.STORAGE - 441)) | (1 << (plsqlParser.TABLESPACE - 441)))) != 0):
                self.state = 1837
                self.physical_properties()


            self.state = 1841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN or _la==plsqlParser.LOB or _la==plsqlParser.NESTED or _la==plsqlParser.VARRAY or _la==plsqlParser.XMLTYPE:
                self.state = 1840
                self.column_properties()


            self.state = 1844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION:
                self.state = 1843
                self.table_partitioning_clauses()


            self.state = 1847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE:
                self.state = 1846
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RESULT_CACHE:
                self.state = 1849
                self.match(plsqlParser.RESULT_CACHE)
                self.state = 1850
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1851
                self.match(plsqlParser.MODE)
                self.state = 1852
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.FORCE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1853
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOPARALLEL or _la==plsqlParser.PARALLEL:
                self.state = 1856
                self.parallel_clause()


            self.state = 1860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOROWDEPENDENCIES or _la==plsqlParser.ROWDEPENDENCIES:
                self.state = 1859
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOROWDEPENDENCIES or _la==plsqlParser.ROWDEPENDENCIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1863 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1862
                        self.enable_disable_clause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1865 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,156,self._ctx)



            self.state = 1870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE or _la==plsqlParser.ROW:
                self.state = 1869
                self.row_movement_clause()


            self.state = 1873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FLASHBACK or _la==plsqlParser.NO:
                self.state = 1872
                self.flashback_archive_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_definitionContext,i)


        def virtual_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Virtual_column_definitionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Virtual_column_definitionContext,i)


        def out_of_line_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Out_of_line_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Out_of_line_constraintContext,i)


        def out_of_line_ref_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Out_of_line_ref_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Out_of_line_ref_constraintContext,i)


        def supplemental_logging_props(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Supplemental_logging_propsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Supplemental_logging_propsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_relational_properties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_properties" ):
                return visitor.visitRelational_properties(self)
            else:
                return visitor.visitChildren(self)




    def relational_properties(self):

        localctx = plsqlParser.Relational_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_relational_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1885 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1875
                    self.match(plsqlParser.COMMA)


                self.state = 1883
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 1878
                    self.column_definition()
                    pass

                elif la_ == 2:
                    self.state = 1879
                    self.virtual_column_definition()
                    pass

                elif la_ == 3:
                    self.state = 1880
                    self.out_of_line_constraint()
                    pass

                elif la_ == 4:
                    self.state = 1881
                    self.out_of_line_ref_constraint()
                    pass

                elif la_ == 5:
                    self.state = 1882
                    self.supplemental_logging_props()
                    pass


                self.state = 1887 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHECK))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FOREIGN - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PRIMARY - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SCOPE - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUPPLEMENTAL - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNIQUE - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def datatype(self):
            return self.getTypedRuleContext(plsqlParser.DatatypeContext,0)


        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def inline_ref_constraint(self):
            return self.getTypedRuleContext(plsqlParser.Inline_ref_constraintContext,0)


        def SORT(self):
            return self.getToken(plsqlParser.SORT, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def ENCRYPT(self):
            return self.getToken(plsqlParser.ENCRYPT, 0)

        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Inline_constraintContext,i)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CHAR_STRING)
            else:
                return self.getToken(plsqlParser.CHAR_STRING, i)

        def IDENTIFIED(self):
            return self.getToken(plsqlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def SALT(self):
            return self.getToken(plsqlParser.SALT, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_column_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_definition" ):
                return visitor.visitColumn_definition(self)
            else:
                return visitor.visitChildren(self)




    def column_definition(self):

        localctx = plsqlParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1889
            self.column_name()
            self.state = 1892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1890
                self.datatype()
                pass

            elif la_ == 2:
                self.state = 1891
                self.type_name()
                pass


            self.state = 1895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SORT:
                self.state = 1894
                self.match(plsqlParser.SORT)


            self.state = 1899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT:
                self.state = 1897
                self.match(plsqlParser.DEFAULT)
                self.state = 1898
                self.expression(0)


            self.state = 1920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ENCRYPT:
                self.state = 1901
                self.match(plsqlParser.ENCRYPT)
                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.USING:
                    self.state = 1902
                    self.match(plsqlParser.USING)
                    self.state = 1903
                    self.match(plsqlParser.CHAR_STRING)


                self.state = 1909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IDENTIFIED:
                    self.state = 1906
                    self.match(plsqlParser.IDENTIFIED)
                    self.state = 1907
                    self.match(plsqlParser.BY)
                    self.state = 1908
                    self.regular_id()


                self.state = 1912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CHAR_STRING:
                    self.state = 1911
                    self.match(plsqlParser.CHAR_STRING)


                self.state = 1918
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1915
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.NO:
                        self.state = 1914
                        self.match(plsqlParser.NO)


                    self.state = 1917
                    self.match(plsqlParser.SALT)




            self.state = 1929
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1925
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1922
                        self.inline_constraint() 
                    self.state = 1927
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1928
                self.inline_ref_constraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_ref_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(plsqlParser.SCOPE, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def ROWID(self):
            return self.getToken(plsqlParser.ROWID, 0)

        def references_clause(self):
            return self.getTypedRuleContext(plsqlParser.References_clauseContext,0)


        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def constraint_state(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_stateContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_inline_ref_constraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInline_ref_constraint" ):
                return visitor.visitInline_ref_constraint(self)
            else:
                return visitor.visitChildren(self)




    def inline_ref_constraint(self):

        localctx = plsqlParser.Inline_ref_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_inline_ref_constraint)
        self._la = 0 # Token type
        try:
            self.state = 1944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SCOPE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1931
                self.match(plsqlParser.SCOPE)
                self.state = 1932
                self.match(plsqlParser.IS)
                self.state = 1933
                self.tableview_name()
                pass
            elif token in [plsqlParser.WITH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1934
                self.match(plsqlParser.WITH)
                self.state = 1935
                self.match(plsqlParser.ROWID)
                pass
            elif token in [plsqlParser.CONSTRAINT, plsqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CONSTRAINT:
                    self.state = 1936
                    self.match(plsqlParser.CONSTRAINT)
                    self.state = 1937
                    self.constraint_name()


                self.state = 1940
                self.references_clause()
                self.state = 1942
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1941
                    self.constraint_state()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Virtual_column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def datatype(self):
            return self.getTypedRuleContext(plsqlParser.DatatypeContext,0)


        def GENERATED(self):
            return self.getToken(plsqlParser.GENERATED, 0)

        def ALWAYS(self):
            return self.getToken(plsqlParser.ALWAYS, 0)

        def VIRTUAL(self):
            return self.getToken(plsqlParser.VIRTUAL, 0)

        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Inline_constraintContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_virtual_column_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtual_column_definition" ):
                return visitor.visitVirtual_column_definition(self)
            else:
                return visitor.visitChildren(self)




    def virtual_column_definition(self):

        localctx = plsqlParser.Virtual_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_virtual_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            self.column_name()
            self.state = 1948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (plsqlParser.CLOB - 66)) | (1 << (plsqlParser.DATE - 66)) | (1 << (plsqlParser.DAY - 66)) | (1 << (plsqlParser.DEC - 66)) | (1 << (plsqlParser.DECIMAL - 66)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (plsqlParser.DOUBLE - 139)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 139)) | (1 << (plsqlParser.FLOAT - 139)) | (1 << (plsqlParser.HOUR - 139)))) != 0) or ((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (plsqlParser.INT - 230)) | (1 << (plsqlParser.INTEGER - 230)) | (1 << (plsqlParser.INTERVAL - 230)) | (1 << (plsqlParser.LONG - 230)) | (1 << (plsqlParser.MINUTE - 230)) | (1 << (plsqlParser.MLSLABEL - 230)) | (1 << (plsqlParser.MONTH - 230)))) != 0) or ((((_la - 297)) & ~0x3f) == 0 and ((1 << (_la - 297)) & ((1 << (plsqlParser.NATURAL - 297)) | (1 << (plsqlParser.NATURALN - 297)) | (1 << (plsqlParser.NCHAR - 297)) | (1 << (plsqlParser.NCLOB - 297)) | (1 << (plsqlParser.NUMBER - 297)) | (1 << (plsqlParser.NUMERIC - 297)) | (1 << (plsqlParser.NVARCHAR2 - 297)))) != 0) or ((((_la - 375)) & ~0x3f) == 0 and ((1 << (_la - 375)) & ((1 << (plsqlParser.PLS_INTEGER - 375)) | (1 << (plsqlParser.POSITIVE - 375)) | (1 << (plsqlParser.POSITIVEN - 375)) | (1 << (plsqlParser.RAW - 375)) | (1 << (plsqlParser.REAL - 375)) | (1 << (plsqlParser.ROWID - 375)) | (1 << (plsqlParser.SECOND - 375)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMEZONE_ABBR - 458)) | (1 << (plsqlParser.TIMEZONE_HOUR - 458)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 458)) | (1 << (plsqlParser.TIMEZONE_REGION - 458)))) != 0) or ((((_la - 533)) & ~0x3f) == 0 and ((1 << (_la - 533)) & ((1 << (plsqlParser.UROWID - 533)) | (1 << (plsqlParser.VARCHAR - 533)) | (1 << (plsqlParser.VARCHAR2 - 533)) | (1 << (plsqlParser.YEAR - 533)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 533)))) != 0):
                self.state = 1947
                self.datatype()


            self.state = 1952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.GENERATED:
                self.state = 1950
                self.match(plsqlParser.GENERATED)
                self.state = 1951
                self.match(plsqlParser.ALWAYS)


            self.state = 1954
            self.match(plsqlParser.AS)
            self.state = 1955
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1956
            self.expression(0)
            self.state = 1957
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 1959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.VIRTUAL:
                self.state = 1958
                self.match(plsqlParser.VIRTUAL)


            self.state = 1964
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1961
                    self.inline_constraint() 
                self.state = 1966
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Out_of_line_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_state(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_stateContext,0)


        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def PRIMARY(self):
            return self.getToken(plsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def foreign_key_clause(self):
            return self.getTypedRuleContext(plsqlParser.Foreign_key_clauseContext,0)


        def CHECK(self):
            return self.getToken(plsqlParser.CHECK, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_out_of_line_constraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOut_of_line_constraint" ):
                return visitor.visitOut_of_line_constraint(self)
            else:
                return visitor.visitChildren(self)




    def out_of_line_constraint(self):

        localctx = plsqlParser.Out_of_line_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_out_of_line_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CONSTRAINT:
                self.state = 1967
                self.match(plsqlParser.CONSTRAINT)
                self.state = 1968
                self.constraint_name()


            self.state = 1982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.UNIQUE]:
                self.state = 1971
                self.match(plsqlParser.UNIQUE)
                self.state = 1972
                self.paren_column_list()
                pass
            elif token in [plsqlParser.PRIMARY]:
                self.state = 1973
                self.match(plsqlParser.PRIMARY)
                self.state = 1974
                self.match(plsqlParser.KEY)
                self.state = 1975
                self.paren_column_list()
                pass
            elif token in [plsqlParser.FOREIGN]:
                self.state = 1976
                self.foreign_key_clause()
                pass
            elif token in [plsqlParser.CHECK]:
                self.state = 1977
                self.match(plsqlParser.CHECK)
                self.state = 1978
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1979
                self.expression(0)
                self.state = 1980
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 1984
                self.constraint_state()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREIGN(self):
            return self.getToken(plsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def references_clause(self):
            return self.getTypedRuleContext(plsqlParser.References_clauseContext,0)


        def on_delete_clause(self):
            return self.getTypedRuleContext(plsqlParser.On_delete_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_foreign_key_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeign_key_clause" ):
                return visitor.visitForeign_key_clause(self)
            else:
                return visitor.visitChildren(self)




    def foreign_key_clause(self):

        localctx = plsqlParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1987
            self.match(plsqlParser.FOREIGN)
            self.state = 1988
            self.match(plsqlParser.KEY)
            self.state = 1989
            self.paren_column_list()
            self.state = 1990
            self.references_clause()
            self.state = 1992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ON:
                self.state = 1991
                self.on_delete_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_delete_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_on_delete_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_delete_clause" ):
                return visitor.visitOn_delete_clause(self)
            else:
                return visitor.visitChildren(self)




    def on_delete_clause(self):

        localctx = plsqlParser.On_delete_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_on_delete_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1994
            self.match(plsqlParser.ON)
            self.state = 1995
            self.match(plsqlParser.DELETE)
            self.state = 1999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CASCADE]:
                self.state = 1996
                self.match(plsqlParser.CASCADE)
                pass
            elif token in [plsqlParser.SET]:
                self.state = 1997
                self.match(plsqlParser.SET)
                self.state = 1998
                self.match(plsqlParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Out_of_line_ref_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ref_col_or_attr = None # Regular_idContext

        def SCOPE(self):
            return self.getToken(plsqlParser.SCOPE, 0)

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Regular_idContext,i)


        def REF(self):
            return self.getToken(plsqlParser.REF, 0)

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def ROWID(self):
            return self.getToken(plsqlParser.ROWID, 0)

        def FOREIGN(self):
            return self.getToken(plsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def references_clause(self):
            return self.getTypedRuleContext(plsqlParser.References_clauseContext,0)


        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def constraint_state(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_stateContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_out_of_line_ref_constraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOut_of_line_ref_constraint" ):
                return visitor.visitOut_of_line_ref_constraint(self)
            else:
                return visitor.visitChildren(self)




    def out_of_line_ref_constraint(self):

        localctx = plsqlParser.Out_of_line_ref_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_out_of_line_ref_constraint)
        self._la = 0 # Token type
        try:
            self.state = 2036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SCOPE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2001
                self.match(plsqlParser.SCOPE)
                self.state = 2002
                self.match(plsqlParser.FOR)
                self.state = 2003
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2004
                localctx.ref_col_or_attr = self.regular_id()
                self.state = 2005
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2006
                self.match(plsqlParser.IS)
                self.state = 2007
                self.tableview_name()
                pass
            elif token in [plsqlParser.REF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2009
                self.match(plsqlParser.REF)
                self.state = 2010
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2011
                localctx.ref_col_or_attr = self.regular_id()
                self.state = 2012
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2013
                self.match(plsqlParser.WITH)
                self.state = 2014
                self.match(plsqlParser.ROWID)
                pass
            elif token in [plsqlParser.CONSTRAINT, plsqlParser.FOREIGN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CONSTRAINT:
                    self.state = 2016
                    self.match(plsqlParser.CONSTRAINT)
                    self.state = 2017
                    self.constraint_name()


                self.state = 2020
                self.match(plsqlParser.FOREIGN)
                self.state = 2021
                self.match(plsqlParser.KEY)
                self.state = 2022
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2027 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2024
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 2023
                        self.match(plsqlParser.COMMA)


                    self.state = 2026
                    localctx.ref_col_or_attr = self.regular_id()
                    self.state = 2029 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 2031
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2032
                self.references_clause()
                self.state = 2034
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 2033
                    self.constraint_state()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supplemental_logging_propsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPPLEMENTAL(self):
            return self.getToken(plsqlParser.SUPPLEMENTAL, 0)

        def LOG(self):
            return self.getToken(plsqlParser.LOG, 0)

        def supplemental_log_grp_clause(self):
            return self.getTypedRuleContext(plsqlParser.Supplemental_log_grp_clauseContext,0)


        def supplemental_id_key_clause(self):
            return self.getTypedRuleContext(plsqlParser.Supplemental_id_key_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_supplemental_logging_props

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSupplemental_logging_props" ):
                return visitor.visitSupplemental_logging_props(self)
            else:
                return visitor.visitChildren(self)




    def supplemental_logging_props(self):

        localctx = plsqlParser.Supplemental_logging_propsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_supplemental_logging_props)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.match(plsqlParser.SUPPLEMENTAL)
            self.state = 2039
            self.match(plsqlParser.LOG)
            self.state = 2042
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.GROUP]:
                self.state = 2040
                self.supplemental_log_grp_clause()
                pass
            elif token in [plsqlParser.DATA]:
                self.state = 2041
                self.supplemental_id_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supplemental_log_grp_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(plsqlParser.GROUP, 0)

        def log_grp(self):
            return self.getTypedRuleContext(plsqlParser.Log_grpContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Regular_idContext,i)


        def ALWAYS(self):
            return self.getToken(plsqlParser.ALWAYS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NO)
            else:
                return self.getToken(plsqlParser.NO, i)

        def LOG(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LOG)
            else:
                return self.getToken(plsqlParser.LOG, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_supplemental_log_grp_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSupplemental_log_grp_clause" ):
                return visitor.visitSupplemental_log_grp_clause(self)
            else:
                return visitor.visitChildren(self)




    def supplemental_log_grp_clause(self):

        localctx = plsqlParser.Supplemental_log_grp_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_supplemental_log_grp_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2044
            self.match(plsqlParser.GROUP)
            self.state = 2045
            self.log_grp()
            self.state = 2046
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2055 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2047
                    self.match(plsqlParser.COMMA)


                self.state = 2050
                self.regular_id()
                self.state = 2053
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 2051
                    self.match(plsqlParser.NO)
                    self.state = 2052
                    self.match(plsqlParser.LOG)


                self.state = 2057 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                    break

            self.state = 2059
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ALWAYS:
                self.state = 2060
                self.match(plsqlParser.ALWAYS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Log_grpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_log_grp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLog_grp" ):
                return visitor.visitLog_grp(self)
            else:
                return visitor.visitChildren(self)




    def log_grp(self):

        localctx = plsqlParser.Log_grpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_log_grp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.match(plsqlParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supplemental_id_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(plsqlParser.DATA, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COLUMNS(self):
            return self.getToken(plsqlParser.COLUMNS, 0)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ALL)
            else:
                return self.getToken(plsqlParser.ALL, i)

        def PRIMARY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PRIMARY)
            else:
                return self.getToken(plsqlParser.PRIMARY, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.KEY)
            else:
                return self.getToken(plsqlParser.KEY, i)

        def UNIQUE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNIQUE)
            else:
                return self.getToken(plsqlParser.UNIQUE, i)

        def FOREIGN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FOREIGN)
            else:
                return self.getToken(plsqlParser.FOREIGN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_supplemental_id_key_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSupplemental_id_key_clause" ):
                return visitor.visitSupplemental_id_key_clause(self)
            else:
                return visitor.visitChildren(self)




    def supplemental_id_key_clause(self):

        localctx = plsqlParser.Supplemental_id_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_supplemental_id_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.match(plsqlParser.DATA)
            self.state = 2066
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2078 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2067
                    self.match(plsqlParser.COMMA)


                self.state = 2076
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.ALL]:
                    self.state = 2070
                    self.match(plsqlParser.ALL)
                    pass
                elif token in [plsqlParser.PRIMARY]:
                    self.state = 2071
                    self.match(plsqlParser.PRIMARY)
                    self.state = 2072
                    self.match(plsqlParser.KEY)
                    pass
                elif token in [plsqlParser.UNIQUE]:
                    self.state = 2073
                    self.match(plsqlParser.UNIQUE)
                    pass
                elif token in [plsqlParser.FOREIGN]:
                    self.state = 2074
                    self.match(plsqlParser.FOREIGN)
                    self.state = 2075
                    self.match(plsqlParser.KEY)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2080 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.ALL or _la==plsqlParser.FOREIGN or _la==plsqlParser.PRIMARY or _la==plsqlParser.UNIQUE or _la==plsqlParser.COMMA):
                    break

            self.state = 2082
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2083
            self.match(plsqlParser.COLUMNS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Physical_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def segment_attributes_clause(self):
            return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,0)


        def deferred_segment_creation(self):
            return self.getTypedRuleContext(plsqlParser.Deferred_segment_creationContext,0)


        def table_compression(self):
            return self.getTypedRuleContext(plsqlParser.Table_compressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_physical_properties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhysical_properties" ):
                return visitor.visitPhysical_properties(self)
            else:
                return visitor.visitChildren(self)




    def physical_properties(self):

        localctx = plsqlParser.Physical_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_physical_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SEGMENT:
                self.state = 2085
                self.deferred_segment_creation()


            self.state = 2088
            self.segment_attributes_clause()
            self.state = 2090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or _la==plsqlParser.NOCOMPRESS:
                self.state = 2089
                self.table_compression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deferred_segment_creationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEGMENT(self):
            return self.getToken(plsqlParser.SEGMENT, 0)

        def CREATION(self):
            return self.getToken(plsqlParser.CREATION, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(plsqlParser.DEFERRED, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_deferred_segment_creation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeferred_segment_creation" ):
                return visitor.visitDeferred_segment_creation(self)
            else:
                return visitor.visitChildren(self)




    def deferred_segment_creation(self):

        localctx = plsqlParser.Deferred_segment_creationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_deferred_segment_creation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2092
            self.match(plsqlParser.SEGMENT)
            self.state = 2093
            self.match(plsqlParser.CREATION)
            self.state = 2094
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DEFERRED or _la==plsqlParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Segment_attributes_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tablespace_name = None # Id_expressionContext

        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Physical_attributes_clauseContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TABLESPACE)
            else:
                return self.getToken(plsqlParser.TABLESPACE, i)

        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Logging_clauseContext,i)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_segment_attributes_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegment_attributes_clause" ):
                return visitor.visitSegment_attributes_clause(self)
            else:
                return visitor.visitChildren(self)




    def segment_attributes_clause(self):

        localctx = plsqlParser.Segment_attributes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_segment_attributes_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2100 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2100
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.INITRANS, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE]:
                        self.state = 2096
                        self.physical_attributes_clause()
                        pass
                    elif token in [plsqlParser.TABLESPACE]:
                        self.state = 2097
                        self.match(plsqlParser.TABLESPACE)
                        self.state = 2098
                        localctx.tablespace_name = self.id_expression()
                        pass
                    elif token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.LOGGING, plsqlParser.NOLOGGING]:
                        self.state = 2099
                        self.logging_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2102 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Physical_attributes_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pctfree = None # Token
            self.pctused = None # Token
            self.inittrans = None # Token

        def PCTFREE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PCTFREE)
            else:
                return self.getToken(plsqlParser.PCTFREE, i)

        def PCTUSED(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PCTUSED)
            else:
                return self.getToken(plsqlParser.PCTUSED, i)

        def INITRANS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INITRANS)
            else:
                return self.getToken(plsqlParser.INITRANS, i)

        def storage_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Storage_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Storage_clauseContext,i)


        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_physical_attributes_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhysical_attributes_clause" ):
                return visitor.visitPhysical_attributes_clause(self)
            else:
                return visitor.visitChildren(self)




    def physical_attributes_clause(self):

        localctx = plsqlParser.Physical_attributes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_physical_attributes_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2111 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2111
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.PCTFREE]:
                        self.state = 2104
                        self.match(plsqlParser.PCTFREE)
                        self.state = 2105
                        localctx.pctfree = self.match(plsqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [plsqlParser.PCTUSED]:
                        self.state = 2106
                        self.match(plsqlParser.PCTUSED)
                        self.state = 2107
                        localctx.pctused = self.match(plsqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [plsqlParser.INITRANS]:
                        self.state = 2108
                        self.match(plsqlParser.INITRANS)
                        self.state = 2109
                        localctx.inittrans = self.match(plsqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [plsqlParser.STORAGE]:
                        self.state = 2110
                        self.storage_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2113 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initial_size = None # Size_clauseContext
            self.next_size = None # Size_clauseContext
            self.minextents = None # Token
            self.pctincrease = None # Token
            self.freelists = None # Token
            self.freelist_groups = None # Token

        def STORAGE(self):
            return self.getToken(plsqlParser.STORAGE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def INITIAL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INITIAL)
            else:
                return self.getToken(plsqlParser.INITIAL, i)

        def NEXT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NEXT)
            else:
                return self.getToken(plsqlParser.NEXT, i)

        def MINEXTENTS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.MINEXTENTS)
            else:
                return self.getToken(plsqlParser.MINEXTENTS, i)

        def MAXEXTENTS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.MAXEXTENTS)
            else:
                return self.getToken(plsqlParser.MAXEXTENTS, i)

        def PCTINCREASE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PCTINCREASE)
            else:
                return self.getToken(plsqlParser.PCTINCREASE, i)

        def FREELISTS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FREELISTS)
            else:
                return self.getToken(plsqlParser.FREELISTS, i)

        def FREELIST(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FREELIST)
            else:
                return self.getToken(plsqlParser.FREELIST, i)

        def GROUPS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.GROUPS)
            else:
                return self.getToken(plsqlParser.GROUPS, i)

        def OPTIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OPTIMAL)
            else:
                return self.getToken(plsqlParser.OPTIMAL, i)

        def BUFFER_POOL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.BUFFER_POOL)
            else:
                return self.getToken(plsqlParser.BUFFER_POOL, i)

        def FLASH_CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FLASH_CACHE)
            else:
                return self.getToken(plsqlParser.FLASH_CACHE, i)

        def ENCRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ENCRYPT)
            else:
                return self.getToken(plsqlParser.ENCRYPT, i)

        def size_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Size_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Size_clauseContext,i)


        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def KEEP(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.KEEP)
            else:
                return self.getToken(plsqlParser.KEEP, i)

        def RECYCLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RECYCLE)
            else:
                return self.getToken(plsqlParser.RECYCLE, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DEFAULT)
            else:
                return self.getToken(plsqlParser.DEFAULT, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NONE)
            else:
                return self.getToken(plsqlParser.NONE, i)

        def UNLIMITED(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNLIMITED)
            else:
                return self.getToken(plsqlParser.UNLIMITED, i)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NULL)
            else:
                return self.getToken(plsqlParser.NULL, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_storage_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorage_clause" ):
                return visitor.visitStorage_clause(self)
            else:
                return visitor.visitChildren(self)




    def storage_clause(self):

        localctx = plsqlParser.Storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_storage_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2115
            self.match(plsqlParser.STORAGE)
            self.state = 2116
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2142 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2142
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.INITIAL]:
                    self.state = 2117
                    self.match(plsqlParser.INITIAL)
                    self.state = 2118
                    localctx.initial_size = self.size_clause()
                    pass
                elif token in [plsqlParser.NEXT]:
                    self.state = 2119
                    self.match(plsqlParser.NEXT)
                    self.state = 2120
                    localctx.next_size = self.size_clause()
                    pass
                elif token in [plsqlParser.MINEXTENTS]:
                    self.state = 2121
                    self.match(plsqlParser.MINEXTENTS)
                    self.state = 2122
                    localctx.minextents = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.UNLIMITED or _la==plsqlParser.UNSIGNED_INTEGER):
                        localctx.minextents = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [plsqlParser.MAXEXTENTS]:
                    self.state = 2123
                    self.match(plsqlParser.MAXEXTENTS)
                    self.state = 2124
                    localctx.minextents = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.UNLIMITED or _la==plsqlParser.UNSIGNED_INTEGER):
                        localctx.minextents = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [plsqlParser.PCTINCREASE]:
                    self.state = 2125
                    self.match(plsqlParser.PCTINCREASE)
                    self.state = 2126
                    localctx.pctincrease = self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [plsqlParser.FREELISTS]:
                    self.state = 2127
                    self.match(plsqlParser.FREELISTS)
                    self.state = 2128
                    localctx.freelists = self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [plsqlParser.FREELIST]:
                    self.state = 2129
                    self.match(plsqlParser.FREELIST)
                    self.state = 2130
                    self.match(plsqlParser.GROUPS)
                    self.state = 2131
                    localctx.freelist_groups = self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [plsqlParser.OPTIMAL]:
                    self.state = 2132
                    self.match(plsqlParser.OPTIMAL)
                    self.state = 2135
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.UNSIGNED_INTEGER]:
                        self.state = 2133
                        self.size_clause()
                        pass
                    elif token in [plsqlParser.NULL]:
                        self.state = 2134
                        self.match(plsqlParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [plsqlParser.BUFFER_POOL]:
                    self.state = 2137
                    self.match(plsqlParser.BUFFER_POOL)
                    self.state = 2138
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.KEEP or _la==plsqlParser.RECYCLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [plsqlParser.FLASH_CACHE]:
                    self.state = 2139
                    self.match(plsqlParser.FLASH_CACHE)
                    self.state = 2140
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.KEEP or _la==plsqlParser.NONE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [plsqlParser.ENCRYPT]:
                    self.state = 2141
                    self.match(plsqlParser.ENCRYPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2144 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.BUFFER_POOL or ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & ((1 << (plsqlParser.ENCRYPT - 149)) | (1 << (plsqlParser.FLASH_CACHE - 149)) | (1 << (plsqlParser.FREELIST - 149)) | (1 << (plsqlParser.FREELISTS - 149)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (plsqlParser.INITIAL - 220)) | (1 << (plsqlParser.MAXEXTENTS - 220)) | (1 << (plsqlParser.MINEXTENTS - 220)))) != 0) or ((((_la - 305)) & ~0x3f) == 0 and ((1 << (_la - 305)) & ((1 << (plsqlParser.NEXT - 305)) | (1 << (plsqlParser.OPTIMAL - 305)) | (1 << (plsqlParser.PCTINCREASE - 305)))) != 0)):
                    break

            self.state = 2146
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Size_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def REGULAR_ID(self):
            return self.getToken(plsqlParser.REGULAR_ID, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_size_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSize_clause" ):
                return visitor.visitSize_clause(self)
            else:
                return visitor.visitChildren(self)




    def size_clause(self):

        localctx = plsqlParser.Size_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_size_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2148
            self.match(plsqlParser.UNSIGNED_INTEGER)
            self.state = 2150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REGULAR_ID:
                self.state = 2149
                self.match(plsqlParser.REGULAR_ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logging_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGGING(self):
            return self.getToken(plsqlParser.LOGGING, 0)

        def NOLOGGING(self):
            return self.getToken(plsqlParser.NOLOGGING, 0)

        def FILESYSTEM_LIKE_LOGGING(self):
            return self.getToken(plsqlParser.FILESYSTEM_LIKE_LOGGING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_logging_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogging_clause" ):
                return visitor.visitLogging_clause(self)
            else:
                return visitor.visitChildren(self)




    def logging_clause(self):

        localctx = plsqlParser.Logging_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_logging_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2152
            _la = self._input.LA(1)
            if not(_la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_type_col_properties(self):
            return self.getTypedRuleContext(plsqlParser.Object_type_col_propertiesContext,0)


        def nested_table_col_properties(self):
            return self.getTypedRuleContext(plsqlParser.Nested_table_col_propertiesContext,0)


        def varray_col_properties(self):
            return self.getTypedRuleContext(plsqlParser.Varray_col_propertiesContext,0)


        def lob_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Lob_storage_clauseContext,0)


        def xmltype_column_properties(self):
            return self.getTypedRuleContext(plsqlParser.Xmltype_column_propertiesContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_column_properties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_properties" ):
                return visitor.visitColumn_properties(self)
            else:
                return visitor.visitChildren(self)




    def column_properties(self):

        localctx = plsqlParser.Column_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_column_properties)
        try:
            self.state = 2161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.COLUMN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2154
                self.object_type_col_properties()
                pass
            elif token in [plsqlParser.NESTED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2155
                self.nested_table_col_properties()
                pass
            elif token in [plsqlParser.LOB, plsqlParser.VARRAY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2158
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.VARRAY]:
                    self.state = 2156
                    self.varray_col_properties()
                    pass
                elif token in [plsqlParser.LOB]:
                    self.state = 2157
                    self.lob_storage_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [plsqlParser.XMLTYPE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2160
                self.xmltype_column_properties()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_col_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.column = None # Regular_idContext

        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def substitutable_column_clause(self):
            return self.getTypedRuleContext(plsqlParser.Substitutable_column_clauseContext,0)


        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_type_col_properties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_type_col_properties" ):
                return visitor.visitObject_type_col_properties(self)
            else:
                return visitor.visitChildren(self)




    def object_type_col_properties(self):

        localctx = plsqlParser.Object_type_col_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_object_type_col_properties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2163
            self.match(plsqlParser.COLUMN)
            self.state = 2164
            localctx.column = self.regular_id()
            self.state = 2165
            self.substitutable_column_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Substitutable_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def ELEMENT(self):
            return self.getToken(plsqlParser.ELEMENT, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(plsqlParser.SUBSTITUTABLE, 0)

        def AT(self):
            return self.getToken(plsqlParser.AT, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def LEVELS(self):
            return self.getToken(plsqlParser.LEVELS, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_substitutable_column_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstitutable_column_clause" ):
                return visitor.visitSubstitutable_column_clause(self)
            else:
                return visitor.visitChildren(self)




    def substitutable_column_clause(self):

        localctx = plsqlParser.Substitutable_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_substitutable_column_clause)
        self._la = 0 # Token type
        try:
            self.state = 2186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ELEMENT, plsqlParser.IS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ELEMENT:
                    self.state = 2167
                    self.match(plsqlParser.ELEMENT)


                self.state = 2170
                self.match(plsqlParser.IS)
                self.state = 2171
                self.match(plsqlParser.OF)
                self.state = 2173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.TYPE:
                    self.state = 2172
                    self.match(plsqlParser.TYPE)


                self.state = 2175
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2176
                self.type_name()
                self.state = 2177
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.NOT, plsqlParser.SUBSTITUTABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NOT:
                    self.state = 2179
                    self.match(plsqlParser.NOT)


                self.state = 2182
                self.match(plsqlParser.SUBSTITUTABLE)
                self.state = 2183
                self.match(plsqlParser.AT)
                self.state = 2184
                self.match(plsqlParser.ALL)
                self.state = 2185
                self.match(plsqlParser.LEVELS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nested_table_col_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NESTED(self):
            return self.getToken(plsqlParser.NESTED, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def nested_item(self):
            return self.getTypedRuleContext(plsqlParser.Nested_itemContext,0)


        def COLUMN_VALUE(self):
            return self.getToken(plsqlParser.COLUMN_VALUE, 0)

        def substitutable_column_clause(self):
            return self.getTypedRuleContext(plsqlParser.Substitutable_column_clauseContext,0)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(plsqlParser.GLOBAL, 0)

        def LOCATOR(self):
            return self.getToken(plsqlParser.LOCATOR, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def object_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Object_propertiesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Object_propertiesContext,i)


        def physical_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Physical_propertiesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Physical_propertiesContext,i)


        def column_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_propertiesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_propertiesContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_nested_table_col_properties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNested_table_col_properties" ):
                return visitor.visitNested_table_col_properties(self)
            else:
                return visitor.visitChildren(self)




    def nested_table_col_properties(self):

        localctx = plsqlParser.Nested_table_col_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_nested_table_col_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            self.match(plsqlParser.NESTED)
            self.state = 2189
            self.match(plsqlParser.TABLE)
            self.state = 2192
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.REGULAR_ID]:
                self.state = 2190
                self.nested_item()
                pass
            elif token in [plsqlParser.COLUMN_VALUE]:
                self.state = 2191
                self.match(plsqlParser.COLUMN_VALUE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELEMENT or _la==plsqlParser.IS or _la==plsqlParser.NOT or _la==plsqlParser.SUBSTITUTABLE:
                self.state = 2194
                self.substitutable_column_clause()


            self.state = 2198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.GLOBAL or _la==plsqlParser.LOCAL:
                self.state = 2197
                _la = self._input.LA(1)
                if not(_la==plsqlParser.GLOBAL or _la==plsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2200
            self.match(plsqlParser.STORE)
            self.state = 2201
            self.match(plsqlParser.AS)
            self.state = 2202
            self.tableview_name()
            self.state = 2216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 2203
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2210 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2210
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.LEFT_PAREN]:
                        self.state = 2204
                        self.match(plsqlParser.LEFT_PAREN)
                        self.state = 2205
                        self.object_properties()
                        self.state = 2206
                        self.match(plsqlParser.RIGHT_PAREN)
                        pass
                    elif token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.INITRANS, plsqlParser.LOGGING, plsqlParser.NOLOGGING, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.SEGMENT, plsqlParser.STORAGE, plsqlParser.TABLESPACE]:
                        self.state = 2208
                        self.physical_properties()
                        pass
                    elif token in [plsqlParser.COLUMN, plsqlParser.LOB, plsqlParser.NESTED, plsqlParser.VARRAY, plsqlParser.XMLTYPE]:
                        self.state = 2209
                        self.column_properties()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2212 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.COLUMN or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LOB - 261)) | (1 << (plsqlParser.LOGGING - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NOLOGGING - 261)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or ((((_la - 441)) & ~0x3f) == 0 and ((1 << (_la - 441)) & ((1 << (plsqlParser.SEGMENT - 441)) | (1 << (plsqlParser.STORAGE - 441)) | (1 << (plsqlParser.TABLESPACE - 441)))) != 0) or _la==plsqlParser.VARRAY or _la==plsqlParser.XMLTYPE or _la==plsqlParser.LEFT_PAREN):
                        break

                self.state = 2214
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 2223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN:
                self.state = 2218
                self.match(plsqlParser.RETURN)
                self.state = 2220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.AS:
                    self.state = 2219
                    self.match(plsqlParser.AS)


                self.state = 2222
                _la = self._input.LA(1)
                if not(_la==plsqlParser.LOCATOR or _la==plsqlParser.VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nested_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_nested_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNested_item" ):
                return visitor.visitNested_item(self)
            else:
                return visitor.visitChildren(self)




    def nested_item(self):

        localctx = plsqlParser.Nested_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_nested_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2225
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def attribute_name(self):
            return self.getTypedRuleContext(plsqlParser.Attribute_nameContext,0)


        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def inline_ref_constraint(self):
            return self.getTypedRuleContext(plsqlParser.Inline_ref_constraintContext,0)


        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Inline_constraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def out_of_line_constraint(self):
            return self.getTypedRuleContext(plsqlParser.Out_of_line_constraintContext,0)


        def out_of_line_ref_constraint(self):
            return self.getTypedRuleContext(plsqlParser.Out_of_line_ref_constraintContext,0)


        def supplemental_logging_props(self):
            return self.getTypedRuleContext(plsqlParser.Supplemental_logging_propsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_properties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_properties" ):
                return visitor.visitObject_properties(self)
            else:
                return visitor.visitChildren(self)




    def object_properties(self):

        localctx = plsqlParser.Object_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_object_properties)
        self._la = 0 # Token type
        try:
            self.state = 2249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2229
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 2227
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 2228
                    self.attribute_name()
                    pass


                self.state = 2233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DEFAULT:
                    self.state = 2231
                    self.match(plsqlParser.DEFAULT)
                    self.state = 2232
                    self.expression(0)


                self.state = 2244
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 2239 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2236
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 2235
                                self.match(plsqlParser.COMMA)


                            self.state = 2238
                            self.inline_constraint()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2241 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,226,self._ctx)


                elif la_ == 2:
                    self.state = 2243
                    self.inline_ref_constraint()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2246
                self.out_of_line_constraint()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2247
                self.out_of_line_ref_constraint()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2248
                self.supplemental_logging_props()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(plsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def references_clause(self):
            return self.getTypedRuleContext(plsqlParser.References_clauseContext,0)


        def check_constraint(self):
            return self.getTypedRuleContext(plsqlParser.Check_constraintContext,0)


        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def constraint_state(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_stateContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_inline_constraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInline_constraint" ):
                return visitor.visitInline_constraint(self)
            else:
                return visitor.visitChildren(self)




    def inline_constraint(self):

        localctx = plsqlParser.Inline_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_inline_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CONSTRAINT:
                self.state = 2251
                self.match(plsqlParser.CONSTRAINT)
                self.state = 2252
                self.constraint_name()


            self.state = 2264
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NOT, plsqlParser.NULL]:
                self.state = 2256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NOT:
                    self.state = 2255
                    self.match(plsqlParser.NOT)


                self.state = 2258
                self.match(plsqlParser.NULL)
                pass
            elif token in [plsqlParser.UNIQUE]:
                self.state = 2259
                self.match(plsqlParser.UNIQUE)
                pass
            elif token in [plsqlParser.PRIMARY]:
                self.state = 2260
                self.match(plsqlParser.PRIMARY)
                self.state = 2261
                self.match(plsqlParser.KEY)
                pass
            elif token in [plsqlParser.REFERENCES]:
                self.state = 2262
                self.references_clause()
                pass
            elif token in [plsqlParser.CHECK]:
                self.state = 2263
                self.check_constraint()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.state = 2266
                self.constraint_state()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class References_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCES(self):
            return self.getToken(plsqlParser.REFERENCES, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_references_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferences_clause" ):
                return visitor.visitReferences_clause(self)
            else:
                return visitor.visitChildren(self)




    def references_clause(self):

        localctx = plsqlParser.References_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_references_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2269
            self.match(plsqlParser.REFERENCES)
            self.state = 2270
            self.tableview_name()
            self.state = 2271
            self.paren_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Paren_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(plsqlParser.Column_listContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_paren_column_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParen_column_list" ):
                return visitor.visitParen_column_list(self)
            else:
                return visitor.visitChildren(self)




    def paren_column_list(self):

        localctx = plsqlParser.Paren_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_paren_column_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2273
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2274
            self.column_list()
            self.state = 2275
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_column_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_list" ):
                return visitor.visitColumn_list(self)
            else:
                return visitor.visitChildren(self)




    def column_list(self):

        localctx = plsqlParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2281 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2277
                    self.match(plsqlParser.COMMA)


                self.state = 2280
                self.column_name()
                self.state = 2283 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Check_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(plsqlParser.CHECK, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_check_constraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck_constraint" ):
                return visitor.visitCheck_constraint(self)
            else:
                return visitor.visitChildren(self)




    def check_constraint(self):

        localctx = plsqlParser.Check_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_check_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2285
            self.match(plsqlParser.CHECK)
            self.state = 2286
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2287
            self.condition()
            self.state = 2288
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.state = 2289
                self.match(plsqlParser.DISABLE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraint_stateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFERRABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DEFERRABLE)
            else:
                return self.getToken(plsqlParser.DEFERRABLE, i)

        def INITIALLY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INITIALLY)
            else:
                return self.getToken(plsqlParser.INITIALLY, i)

        def using_index_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Using_index_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Using_index_clauseContext,i)


        def IMMEDIATE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.IMMEDIATE)
            else:
                return self.getToken(plsqlParser.IMMEDIATE, i)

        def DEFERRED(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DEFERRED)
            else:
                return self.getToken(plsqlParser.DEFERRED, i)

        def RELY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RELY)
            else:
                return self.getToken(plsqlParser.RELY, i)

        def NORELY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NORELY)
            else:
                return self.getToken(plsqlParser.NORELY, i)

        def ENABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ENABLE)
            else:
                return self.getToken(plsqlParser.ENABLE, i)

        def DISABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DISABLE)
            else:
                return self.getToken(plsqlParser.DISABLE, i)

        def VALIDATE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.VALIDATE)
            else:
                return self.getToken(plsqlParser.VALIDATE, i)

        def NOVALIDATE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NOVALIDATE)
            else:
                return self.getToken(plsqlParser.NOVALIDATE, i)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NOT)
            else:
                return self.getToken(plsqlParser.NOT, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_constraint_state

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_state" ):
                return visitor.visitConstraint_state(self)
            else:
                return visitor.visitChildren(self)




    def constraint_state(self):

        localctx = plsqlParser.Constraint_stateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_constraint_state)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2302 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2302
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.DEFERRABLE, plsqlParser.NOT]:
                        self.state = 2293
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.NOT:
                            self.state = 2292
                            self.match(plsqlParser.NOT)


                        self.state = 2295
                        self.match(plsqlParser.DEFERRABLE)
                        pass
                    elif token in [plsqlParser.INITIALLY]:
                        self.state = 2296
                        self.match(plsqlParser.INITIALLY)
                        self.state = 2297
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.DEFERRED or _la==plsqlParser.IMMEDIATE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [plsqlParser.NORELY, plsqlParser.RELY]:
                        self.state = 2298
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.NORELY or _la==plsqlParser.RELY):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [plsqlParser.DISABLE, plsqlParser.ENABLE]:
                        self.state = 2299
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [plsqlParser.NOVALIDATE, plsqlParser.VALIDATE]:
                        self.state = 2300
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.NOVALIDATE or _la==plsqlParser.VALIDATE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [plsqlParser.USING]:
                        self.state = 2301
                        self.using_index_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2304 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def INDEX(self):
            return self.getToken(plsqlParser.INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def create_index(self):
            return self.getTypedRuleContext(plsqlParser.Create_indexContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def index_attributes(self):
            return self.getTypedRuleContext(plsqlParser.Index_attributesContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_using_index_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing_index_clause" ):
                return visitor.visitUsing_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def using_index_clause(self):

        localctx = plsqlParser.Using_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_using_index_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2306
            self.match(plsqlParser.USING)
            self.state = 2307
            self.match(plsqlParser.INDEX)
            self.state = 2314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.state = 2308
                self.index_name()

            elif la_ == 2:
                self.state = 2309
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2310
                self.create_index()
                self.state = 2311
                self.match(plsqlParser.RIGHT_PAREN)

            elif la_ == 3:
                self.state = 2313
                self.index_attributes()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Varray_col_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARRAY(self):
            return self.getToken(plsqlParser.VARRAY, 0)

        def varray_item(self):
            return self.getTypedRuleContext(plsqlParser.Varray_itemContext,0)


        def varray_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Varray_storage_clauseContext,0)


        def substitutable_column_clause(self):
            return self.getTypedRuleContext(plsqlParser.Substitutable_column_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_varray_col_properties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarray_col_properties" ):
                return visitor.visitVarray_col_properties(self)
            else:
                return visitor.visitChildren(self)




    def varray_col_properties(self):

        localctx = plsqlParser.Varray_col_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_varray_col_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2316
            self.match(plsqlParser.VARRAY)
            self.state = 2317
            self.varray_item()
            self.state = 2323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 2319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ELEMENT or _la==plsqlParser.IS or _la==plsqlParser.NOT or _la==plsqlParser.SUBSTITUTABLE:
                    self.state = 2318
                    self.substitutable_column_clause()


                self.state = 2321
                self.varray_storage_clause()
                pass

            elif la_ == 2:
                self.state = 2322
                self.substitutable_column_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Varray_storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def LOB(self):
            return self.getToken(plsqlParser.LOB, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def lob_storage_parameters(self):
            return self.getTypedRuleContext(plsqlParser.Lob_storage_parametersContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def lob_segname(self):
            return self.getTypedRuleContext(plsqlParser.Lob_segnameContext,0)


        def SECUREFILE(self):
            return self.getToken(plsqlParser.SECUREFILE, 0)

        def BASICFILE(self):
            return self.getToken(plsqlParser.BASICFILE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_varray_storage_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarray_storage_clause" ):
                return visitor.visitVarray_storage_clause(self)
            else:
                return visitor.visitChildren(self)




    def varray_storage_clause(self):

        localctx = plsqlParser.Varray_storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_varray_storage_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2325
            self.match(plsqlParser.STORE)
            self.state = 2326
            self.match(plsqlParser.AS)
            self.state = 2328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE:
                self.state = 2327
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2330
            self.match(plsqlParser.LOB)
            self.state = 2339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 2332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 2331
                    self.lob_segname()


                self.state = 2334
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2335
                self.lob_storage_parameters()
                self.state = 2336
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 2338
                self.lob_segname()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_storage_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(plsqlParser.TABLESPACE, 0)

        def tablespace(self):
            return self.getTypedRuleContext(plsqlParser.TablespaceContext,0)


        def lob_parameters(self):
            return self.getTypedRuleContext(plsqlParser.Lob_parametersContext,0)


        def storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Storage_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lob_storage_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_storage_parameters" ):
                return visitor.visitLob_storage_parameters(self)
            else:
                return visitor.visitChildren(self)




    def lob_storage_parameters(self):

        localctx = plsqlParser.Lob_storage_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_lob_storage_parameters)
        self._la = 0 # Token type
        try:
            self.state = 2348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TABLESPACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2341
                self.match(plsqlParser.TABLESPACE)
                self.state = 2342
                self.tablespace()
                pass
            elif token in [plsqlParser.CACHE, plsqlParser.CHUNK, plsqlParser.COMPRESS, plsqlParser.DECRYPT, plsqlParser.DEDUPLICATE, plsqlParser.DISABLE, plsqlParser.ENABLE, plsqlParser.ENCRYPT, plsqlParser.FREEPOOLS, plsqlParser.KEEP_DUPLICATES, plsqlParser.NOCACHE, plsqlParser.NOCOMPRESS, plsqlParser.PCTVERSION, plsqlParser.RETENTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2343
                self.lob_parameters()
                self.state = 2345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.STORAGE:
                    self.state = 2344
                    self.storage_clause()


                pass
            elif token in [plsqlParser.STORAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2347
                self.storage_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.STORAGE)
            else:
                return self.getToken(plsqlParser.STORAGE, i)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.IN)
            else:
                return self.getToken(plsqlParser.IN, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ROW)
            else:
                return self.getToken(plsqlParser.ROW, i)

        def CHUNK(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CHUNK)
            else:
                return self.getToken(plsqlParser.CHUNK, i)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def PCTVERSION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PCTVERSION)
            else:
                return self.getToken(plsqlParser.PCTVERSION, i)

        def FREEPOOLS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FREEPOOLS)
            else:
                return self.getToken(plsqlParser.FREEPOOLS, i)

        def lob_retention_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_retention_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_retention_clauseContext,i)


        def lob_deduplicate_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_deduplicate_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_deduplicate_clauseContext,i)


        def lob_compression_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_compression_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_compression_clauseContext,i)


        def ENCRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ENCRYPT)
            else:
                return self.getToken(plsqlParser.ENCRYPT, i)

        def encryption_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Encryption_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Encryption_specContext,i)


        def DECRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DECRYPT)
            else:
                return self.getToken(plsqlParser.DECRYPT, i)

        def ENABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ENABLE)
            else:
                return self.getToken(plsqlParser.ENABLE, i)

        def DISABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DISABLE)
            else:
                return self.getToken(plsqlParser.DISABLE, i)

        def CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CACHE)
            else:
                return self.getToken(plsqlParser.CACHE, i)

        def NOCACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NOCACHE)
            else:
                return self.getToken(plsqlParser.NOCACHE, i)

        def READS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.READS)
            else:
                return self.getToken(plsqlParser.READS, i)

        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Logging_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_lob_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_parameters" ):
                return visitor.visitLob_parameters(self)
            else:
                return visitor.visitChildren(self)




    def lob_parameters(self):

        localctx = plsqlParser.Lob_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_lob_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2375 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2375
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.DISABLE, plsqlParser.ENABLE]:
                    self.state = 2350
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2351
                    self.match(plsqlParser.STORAGE)
                    self.state = 2352
                    self.match(plsqlParser.IN)
                    self.state = 2353
                    self.match(plsqlParser.ROW)
                    pass
                elif token in [plsqlParser.CHUNK]:
                    self.state = 2354
                    self.match(plsqlParser.CHUNK)
                    self.state = 2355
                    self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [plsqlParser.PCTVERSION]:
                    self.state = 2356
                    self.match(plsqlParser.PCTVERSION)
                    self.state = 2357
                    self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [plsqlParser.FREEPOOLS]:
                    self.state = 2358
                    self.match(plsqlParser.FREEPOOLS)
                    self.state = 2359
                    self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [plsqlParser.RETENTION]:
                    self.state = 2360
                    self.lob_retention_clause()
                    pass
                elif token in [plsqlParser.DEDUPLICATE, plsqlParser.KEEP_DUPLICATES]:
                    self.state = 2361
                    self.lob_deduplicate_clause()
                    pass
                elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                    self.state = 2362
                    self.lob_compression_clause()
                    pass
                elif token in [plsqlParser.ENCRYPT]:
                    self.state = 2363
                    self.match(plsqlParser.ENCRYPT)
                    self.state = 2364
                    self.encryption_spec()
                    pass
                elif token in [plsqlParser.DECRYPT]:
                    self.state = 2365
                    self.match(plsqlParser.DECRYPT)
                    pass
                elif token in [plsqlParser.CACHE, plsqlParser.NOCACHE]:
                    self.state = 2370
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                    if la_ == 1:
                        self.state = 2366
                        self.match(plsqlParser.CACHE)
                        pass

                    elif la_ == 2:
                        self.state = 2367
                        self.match(plsqlParser.NOCACHE)
                        pass

                    elif la_ == 3:
                        self.state = 2368
                        self.match(plsqlParser.CACHE)
                        self.state = 2369
                        self.match(plsqlParser.READS)
                        pass


                    self.state = 2373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING:
                        self.state = 2372
                        self.logging_clause()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2377 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (plsqlParser.CACHE - 53)) | (1 << (plsqlParser.CHUNK - 53)) | (1 << (plsqlParser.COMPRESS - 53)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (plsqlParser.DECRYPT - 122)) | (1 << (plsqlParser.DEDUPLICATE - 122)) | (1 << (plsqlParser.DISABLE - 122)) | (1 << (plsqlParser.ENABLE - 122)) | (1 << (plsqlParser.ENCRYPT - 122)))) != 0) or _la==plsqlParser.FREEPOOLS or _la==plsqlParser.KEEP_DUPLICATES or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (plsqlParser.NOCACHE - 308)) | (1 << (plsqlParser.NOCOMPRESS - 308)) | (1 << (plsqlParser.PCTVERSION - 308)))) != 0) or _la==plsqlParser.RETENTION):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_retention_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETENTION(self):
            return self.getToken(plsqlParser.RETENTION, 0)

        def MAX(self):
            return self.getToken(plsqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(plsqlParser.MIN, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def AUTO(self):
            return self.getToken(plsqlParser.AUTO, 0)

        def NONE(self):
            return self.getToken(plsqlParser.NONE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_lob_retention_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_retention_clause" ):
                return visitor.visitLob_retention_clause(self)
            else:
                return visitor.visitChildren(self)




    def lob_retention_clause(self):

        localctx = plsqlParser.Lob_retention_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_lob_retention_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2379
            self.match(plsqlParser.RETENTION)
            self.state = 2385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MAX]:
                self.state = 2380
                self.match(plsqlParser.MAX)
                pass
            elif token in [plsqlParser.MIN]:
                self.state = 2381
                self.match(plsqlParser.MIN)
                self.state = 2382
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.AUTO]:
                self.state = 2383
                self.match(plsqlParser.AUTO)
                pass
            elif token in [plsqlParser.NONE]:
                self.state = 2384
                self.match(plsqlParser.NONE)
                pass
            elif token in [plsqlParser.ALLOCATE, plsqlParser.CACHE, plsqlParser.CHUNK, plsqlParser.COMPRESS, plsqlParser.DEALLOCATE, plsqlParser.DECRYPT, plsqlParser.DEDUPLICATE, plsqlParser.DISABLE, plsqlParser.ENABLE, plsqlParser.ENCRYPT, plsqlParser.FREEPOOLS, plsqlParser.KEEP_DUPLICATES, plsqlParser.NOCACHE, plsqlParser.NOCOMPRESS, plsqlParser.PCTVERSION, plsqlParser.REBUILD, plsqlParser.RETENTION, plsqlParser.SHRINK, plsqlParser.STORAGE, plsqlParser.RIGHT_PAREN]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_deduplicate_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEDUPLICATE(self):
            return self.getToken(plsqlParser.DEDUPLICATE, 0)

        def KEEP_DUPLICATES(self):
            return self.getToken(plsqlParser.KEEP_DUPLICATES, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_lob_deduplicate_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_deduplicate_clause" ):
                return visitor.visitLob_deduplicate_clause(self)
            else:
                return visitor.visitChildren(self)




    def lob_deduplicate_clause(self):

        localctx = plsqlParser.Lob_deduplicate_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_lob_deduplicate_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2387
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DEDUPLICATE or _la==plsqlParser.KEEP_DUPLICATES):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_compression_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOCOMPRESS(self):
            return self.getToken(plsqlParser.NOCOMPRESS, 0)

        def COMPRESS(self):
            return self.getToken(plsqlParser.COMPRESS, 0)

        def HIGH(self):
            return self.getToken(plsqlParser.HIGH, 0)

        def MEDIUM(self):
            return self.getToken(plsqlParser.MEDIUM, 0)

        def LOW(self):
            return self.getToken(plsqlParser.LOW, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_lob_compression_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_compression_clause" ):
                return visitor.visitLob_compression_clause(self)
            else:
                return visitor.visitChildren(self)




    def lob_compression_clause(self):

        localctx = plsqlParser.Lob_compression_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_lob_compression_clause)
        self._la = 0 # Token type
        try:
            self.state = 2394
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NOCOMPRESS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2389
                self.match(plsqlParser.NOCOMPRESS)
                pass
            elif token in [plsqlParser.COMPRESS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2390
                self.match(plsqlParser.COMPRESS)
                self.state = 2392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.HIGH or _la==plsqlParser.LOW or _la==plsqlParser.MEDIUM:
                    self.state = 2391
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.HIGH or _la==plsqlParser.LOW or _la==plsqlParser.MEDIUM):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encryption_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CHAR_STRING)
            else:
                return self.getToken(plsqlParser.CHAR_STRING, i)

        def IDENTIFIED(self):
            return self.getToken(plsqlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def REGULAR_ID(self):
            return self.getToken(plsqlParser.REGULAR_ID, 0)

        def SALT(self):
            return self.getToken(plsqlParser.SALT, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_encryption_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncryption_spec" ):
                return visitor.visitEncryption_spec(self)
            else:
                return visitor.visitChildren(self)




    def encryption_spec(self):

        localctx = plsqlParser.Encryption_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_encryption_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.USING:
                self.state = 2396
                self.match(plsqlParser.USING)
                self.state = 2397
                self.match(plsqlParser.CHAR_STRING)


            self.state = 2403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.IDENTIFIED:
                self.state = 2400
                self.match(plsqlParser.IDENTIFIED)
                self.state = 2401
                self.match(plsqlParser.BY)
                self.state = 2402
                self.match(plsqlParser.REGULAR_ID)


            self.state = 2406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CHAR_STRING:
                self.state = 2405
                self.match(plsqlParser.CHAR_STRING)


            self.state = 2412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.state = 2409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NO:
                    self.state = 2408
                    self.match(plsqlParser.NO)


                self.state = 2411
                self.match(plsqlParser.SALT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOB(self):
            return self.getToken(plsqlParser.LOB, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def lob_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_itemContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_itemContext,i)


        def lob_storage_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_storage_parametersContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_storage_parametersContext,i)


        def lob_segname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_segnameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_segnameContext,i)


        def SECUREFILE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SECUREFILE)
            else:
                return self.getToken(plsqlParser.SECUREFILE, i)

        def BASICFILE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.BASICFILE)
            else:
                return self.getToken(plsqlParser.BASICFILE, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_lob_storage_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_storage_clause" ):
                return visitor.visitLob_storage_clause(self)
            else:
                return visitor.visitChildren(self)




    def lob_storage_clause(self):

        localctx = plsqlParser.Lob_storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_lob_storage_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2414
            self.match(plsqlParser.LOB)
            self.state = 2451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.state = 2415
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2420 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 2416
                        self.match(plsqlParser.COMMA)


                    self.state = 2419
                    self.lob_item()
                    self.state = 2422 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 2424
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2425
                self.match(plsqlParser.STORE)
                self.state = 2426
                self.match(plsqlParser.AS)
                self.state = 2432 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2432
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.BASICFILE, plsqlParser.SECUREFILE]:
                            self.state = 2427
                            _la = self._input.LA(1)
                            if not(_la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass
                        elif token in [plsqlParser.LEFT_PAREN]:
                            self.state = 2428
                            self.match(plsqlParser.LEFT_PAREN)
                            self.state = 2429
                            self.lob_storage_parameters()
                            self.state = 2430
                            self.match(plsqlParser.RIGHT_PAREN)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 2434 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

                pass

            elif la_ == 2:
                self.state = 2436
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2437
                self.lob_item()
                self.state = 2438
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2439
                self.match(plsqlParser.STORE)
                self.state = 2440
                self.match(plsqlParser.AS)
                self.state = 2447 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2447
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.BASICFILE, plsqlParser.SECUREFILE]:
                            self.state = 2441
                            _la = self._input.LA(1)
                            if not(_la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass
                        elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.REGULAR_ID]:
                            self.state = 2442
                            self.lob_segname()
                            pass
                        elif token in [plsqlParser.LEFT_PAREN]:
                            self.state = 2443
                            self.match(plsqlParser.LEFT_PAREN)
                            self.state = 2444
                            self.lob_storage_parameters()
                            self.state = 2445
                            self.match(plsqlParser.RIGHT_PAREN)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 2449 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltype_column_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLTYPE(self):
            return self.getToken(plsqlParser.XMLTYPE, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def xmltype_storage(self):
            return self.getTypedRuleContext(plsqlParser.Xmltype_storageContext,0)


        def xmlschema_spec(self):
            return self.getTypedRuleContext(plsqlParser.Xmlschema_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmltype_column_properties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmltype_column_properties" ):
                return visitor.visitXmltype_column_properties(self)
            else:
                return visitor.visitChildren(self)




    def xmltype_column_properties(self):

        localctx = plsqlParser.Xmltype_column_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_xmltype_column_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2453
            self.match(plsqlParser.XMLTYPE)
            self.state = 2455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN:
                self.state = 2454
                self.match(plsqlParser.COLUMN)


            self.state = 2457
            self.column_name()
            self.state = 2459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.STORE:
                self.state = 2458
                self.xmltype_storage()


            self.state = 2462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELEMENT or _la==plsqlParser.XMLSCHEMA:
                self.state = 2461
                self.xmlschema_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltype_storageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OBJECT(self):
            return self.getToken(plsqlParser.OBJECT, 0)

        def RELATIONAL(self):
            return self.getToken(plsqlParser.RELATIONAL, 0)

        def CLOB(self):
            return self.getToken(plsqlParser.CLOB, 0)

        def BINARY(self):
            return self.getToken(plsqlParser.BINARY, 0)

        def XML(self):
            return self.getToken(plsqlParser.XML, 0)

        def lob_segname(self):
            return self.getTypedRuleContext(plsqlParser.Lob_segnameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def lob_parameters(self):
            return self.getTypedRuleContext(plsqlParser.Lob_parametersContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def SECUREFILE(self):
            return self.getToken(plsqlParser.SECUREFILE, 0)

        def BASICFILE(self):
            return self.getToken(plsqlParser.BASICFILE, 0)

        def VARRAYS(self):
            return self.getToken(plsqlParser.VARRAYS, 0)

        def LOBS(self):
            return self.getToken(plsqlParser.LOBS, 0)

        def TABLES(self):
            return self.getToken(plsqlParser.TABLES, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_xmltype_storage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmltype_storage" ):
                return visitor.visitXmltype_storage(self)
            else:
                return visitor.visitChildren(self)




    def xmltype_storage(self):

        localctx = plsqlParser.Xmltype_storageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_xmltype_storage)
        self._la = 0 # Token type
        try:
            self.state = 2495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2464
                self.match(plsqlParser.STORE)
                self.state = 2465
                self.match(plsqlParser.AS)
                self.state = 2489
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.OBJECT]:
                    self.state = 2466
                    self.match(plsqlParser.OBJECT)
                    self.state = 2467
                    self.match(plsqlParser.RELATIONAL)
                    pass
                elif token in [plsqlParser.BASICFILE, plsqlParser.BINARY, plsqlParser.CLOB, plsqlParser.SECUREFILE]:
                    self.state = 2469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE:
                        self.state = 2468
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 2474
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.CLOB]:
                        self.state = 2471
                        self.match(plsqlParser.CLOB)
                        pass
                    elif token in [plsqlParser.BINARY]:
                        self.state = 2472
                        self.match(plsqlParser.BINARY)
                        self.state = 2473
                        self.match(plsqlParser.XML)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2487
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                    if la_ == 1:
                        self.state = 2476
                        self.lob_segname()
                        self.state = 2481
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
                        if la_ == 1:
                            self.state = 2477
                            self.match(plsqlParser.LEFT_PAREN)
                            self.state = 2478
                            self.lob_parameters()
                            self.state = 2479
                            self.match(plsqlParser.RIGHT_PAREN)



                    elif la_ == 2:
                        self.state = 2483
                        self.match(plsqlParser.LEFT_PAREN)
                        self.state = 2484
                        self.lob_parameters()
                        self.state = 2485
                        self.match(plsqlParser.RIGHT_PAREN)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2491
                self.match(plsqlParser.STORE)
                self.state = 2492
                self.match(plsqlParser.VARRAYS)
                self.state = 2493
                self.match(plsqlParser.AS)
                self.state = 2494
                _la = self._input.LA(1)
                if not(_la==plsqlParser.LOBS or _la==plsqlParser.TABLES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlschema_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELEMENT(self):
            return self.getToken(plsqlParser.ELEMENT, 0)

        def DELIMITED_ID(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DELIMITED_ID)
            else:
                return self.getToken(plsqlParser.DELIMITED_ID, i)

        def XMLSCHEMA(self):
            return self.getToken(plsqlParser.XMLSCHEMA, 0)

        def allow_or_disallow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Allow_or_disallowContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Allow_or_disallowContext,i)


        def NONSCHEMA(self):
            return self.getToken(plsqlParser.NONSCHEMA, 0)

        def ANYSCHEMA(self):
            return self.getToken(plsqlParser.ANYSCHEMA, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_xmlschema_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlschema_spec" ):
                return visitor.visitXmlschema_spec(self)
            else:
                return visitor.visitChildren(self)




    def xmlschema_spec(self):

        localctx = plsqlParser.Xmlschema_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_xmlschema_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.XMLSCHEMA:
                self.state = 2497
                self.match(plsqlParser.XMLSCHEMA)
                self.state = 2498
                self.match(plsqlParser.DELIMITED_ID)


            self.state = 2501
            self.match(plsqlParser.ELEMENT)
            self.state = 2502
            self.match(plsqlParser.DELIMITED_ID)
            self.state = 2506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.state = 2503
                self.allow_or_disallow()
                self.state = 2504
                self.match(plsqlParser.NONSCHEMA)


            self.state = 2511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ALLOW or _la==plsqlParser.DISALLOW:
                self.state = 2508
                self.allow_or_disallow()
                self.state = 2509
                self.match(plsqlParser.ANYSCHEMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allow_or_disallowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW(self):
            return self.getToken(plsqlParser.ALLOW, 0)

        def DISALLOW(self):
            return self.getToken(plsqlParser.DISALLOW, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_allow_or_disallow

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow_or_disallow" ):
                return visitor.visitAllow_or_disallow(self)
            else:
                return visitor.visitChildren(self)




    def allow_or_disallow(self):

        localctx = plsqlParser.Allow_or_disallowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_allow_or_disallow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2513
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ALLOW or _la==plsqlParser.DISALLOW):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_partitioning_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Range_partitionsContext,0)


        def list_partitions(self):
            return self.getTypedRuleContext(plsqlParser.List_partitionsContext,0)


        def hash_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Hash_partitionsContext,0)


        def composite_range_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Composite_range_partitionsContext,0)


        def composite_list_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Composite_list_partitionsContext,0)


        def composite_hash_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Composite_hash_partitionsContext,0)


        def reference_partitioning(self):
            return self.getTypedRuleContext(plsqlParser.Reference_partitioningContext,0)


        def system_partitioning(self):
            return self.getTypedRuleContext(plsqlParser.System_partitioningContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_partitioning_clauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_partitioning_clauses" ):
                return visitor.visitTable_partitioning_clauses(self)
            else:
                return visitor.visitChildren(self)




    def table_partitioning_clauses(self):

        localctx = plsqlParser.Table_partitioning_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_table_partitioning_clauses)
        try:
            self.state = 2523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2515
                self.range_partitions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2516
                self.list_partitions()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2517
                self.hash_partitions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2518
                self.composite_range_partitions()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2519
                self.composite_list_partitions()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2520
                self.composite_hash_partitions()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2521
                self.reference_partitioning()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2522
                self.system_partitioning()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def INTERVAL(self):
            return self.getToken(plsqlParser.INTERVAL, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def range_values_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Range_values_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Range_values_clauseContext,i)


        def table_partition_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_partition_descriptionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_partition_descriptionContext,i)


        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_range_partitions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRange_partitions" ):
                return visitor.visitRange_partitions(self)
            else:
                return visitor.visitChildren(self)




    def range_partitions(self):

        localctx = plsqlParser.Range_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_range_partitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2525
            self.match(plsqlParser.PARTITION)
            self.state = 2526
            self.match(plsqlParser.BY)
            self.state = 2527
            self.match(plsqlParser.RANGE)
            self.state = 2528
            self.paren_column_list()
            self.state = 2548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INTERVAL:
                self.state = 2529
                self.match(plsqlParser.INTERVAL)
                self.state = 2530
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2531
                self.expression(0)
                self.state = 2532
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.STORE:
                    self.state = 2533
                    self.match(plsqlParser.STORE)
                    self.state = 2534
                    self.match(plsqlParser.IN)
                    self.state = 2535
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 2540 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 2537
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 2536
                            self.match(plsqlParser.COMMA)


                        self.state = 2539
                        self.tablespace()
                        self.state = 2542 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                            break

                    self.state = 2544
                    self.match(plsqlParser.RIGHT_PAREN)




            self.state = 2550
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2561 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2551
                    self.match(plsqlParser.COMMA)


                self.state = 2554
                self.match(plsqlParser.PARTITION)
                self.state = 2556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 2555
                    self.partition_name()


                self.state = 2558
                self.range_values_clause()
                self.state = 2559
                self.table_partition_description()
                self.state = 2563 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 2565
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def LESS(self):
            return self.getToken(plsqlParser.LESS, 0)

        def THAN(self):
            return self.getToken(plsqlParser.THAN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.LiteralContext)
            else:
                return self.getTypedRuleContext(plsqlParser.LiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_range_values_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRange_values_clause" ):
                return visitor.visitRange_values_clause(self)
            else:
                return visitor.visitChildren(self)




    def range_values_clause(self):

        localctx = plsqlParser.Range_values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_range_values_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2567
            self.match(plsqlParser.VALUES)
            self.state = 2568
            self.match(plsqlParser.LESS)
            self.state = 2569
            self.match(plsqlParser.THAN)
            self.state = 2570
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2575 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2571
                    self.match(plsqlParser.COMMA)


                self.state = 2574
                self.literal()
                self.state = 2577 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.DECODE - 64)))) != 0) or _la==plsqlParser.MAXVALUE or _la==plsqlParser.NVL or ((((_la - 485)) & ~0x3f) == 0 and ((1 << (_la - 485)) & ((1 << (plsqlParser.SUBSTRING - 485)) | (1 << (plsqlParser.TO_CHAR - 485)) | (1 << (plsqlParser.TO_DATE - 485)) | (1 << (plsqlParser.TRIM - 485)))) != 0) or ((((_la - 618)) & ~0x3f) == 0 and ((1 << (_la - 618)) & ((1 << (plsqlParser.UNSIGNED_INTEGER - 618)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 618)) | (1 << (plsqlParser.CHAR_STRING - 618)) | (1 << (plsqlParser.COMMA - 618)))) != 0)):
                    break

            self.state = 2579
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_partition_descriptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deferred_segment_creation(self):
            return self.getTypedRuleContext(plsqlParser.Deferred_segment_creationContext,0)


        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,i)


        def table_compression(self):
            return self.getTypedRuleContext(plsqlParser.Table_compressionContext,0)


        def key_compression(self):
            return self.getTypedRuleContext(plsqlParser.Key_compressionContext,0)


        def OVERFLOW(self):
            return self.getToken(plsqlParser.OVERFLOW, 0)

        def lob_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Lob_storage_clauseContext,0)


        def varray_col_properties(self):
            return self.getTypedRuleContext(plsqlParser.Varray_col_propertiesContext,0)


        def nested_table_col_properties(self):
            return self.getTypedRuleContext(plsqlParser.Nested_table_col_propertiesContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_partition_description

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_partition_description" ):
                return visitor.visitTable_partition_description(self)
            else:
                return visitor.visitChildren(self)




    def table_partition_description(self):

        localctx = plsqlParser.Table_partition_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_table_partition_description)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SEGMENT:
                self.state = 2581
                self.deferred_segment_creation()


            self.state = 2585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                self.state = 2584
                self.segment_attributes_clause()


            self.state = 2589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.state = 2587
                self.table_compression()

            elif la_ == 2:
                self.state = 2588
                self.key_compression()


            self.state = 2595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OVERFLOW:
                self.state = 2591
                self.match(plsqlParser.OVERFLOW)
                self.state = 2593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                    self.state = 2592
                    self.segment_attributes_clause()




            self.state = 2600
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LOB]:
                self.state = 2597
                self.lob_storage_clause()
                pass
            elif token in [plsqlParser.VARRAY]:
                self.state = 2598
                self.varray_col_properties()
                pass
            elif token in [plsqlParser.NESTED]:
                self.state = 2599
                self.nested_table_col_properties()
                pass
            elif token in [plsqlParser.EOF, plsqlParser.ALTER, plsqlParser.AS, plsqlParser.CACHE, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DISABLE, plsqlParser.DROP, plsqlParser.ENABLE, plsqlParser.EXPLAIN, plsqlParser.FLASHBACK, plsqlParser.FUNCTION, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.NO, plsqlParser.NOCACHE, plsqlParser.NOPARALLEL, plsqlParser.NOROWDEPENDENCIES, plsqlParser.PARALLEL, plsqlParser.PARTITION, plsqlParser.PROCEDURE, plsqlParser.RESULT_CACHE, plsqlParser.ROW, plsqlParser.ROWDEPENDENCIES, plsqlParser.SELECT, plsqlParser.SUBPARTITIONS, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN, plsqlParser.RIGHT_PAREN, plsqlParser.COMMA, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def LIST(self):
            return self.getToken(plsqlParser.LIST, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def list_values_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.List_values_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.List_values_clauseContext,i)


        def table_partition_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_partition_descriptionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_partition_descriptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_list_partitions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_partitions" ):
                return visitor.visitList_partitions(self)
            else:
                return visitor.visitChildren(self)




    def list_partitions(self):

        localctx = plsqlParser.List_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_list_partitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2602
            self.match(plsqlParser.PARTITION)
            self.state = 2603
            self.match(plsqlParser.BY)
            self.state = 2604
            self.match(plsqlParser.LIST)
            self.state = 2605
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2606
            self.column_name()
            self.state = 2607
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2608
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2619 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2609
                    self.match(plsqlParser.COMMA)


                self.state = 2612
                self.match(plsqlParser.PARTITION)
                self.state = 2614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 2613
                    self.partition_name()


                self.state = 2616
                self.list_values_clause()
                self.state = 2617
                self.table_partition_description()
                self.state = 2621 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 2623
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.LiteralContext)
            else:
                return self.getTypedRuleContext(plsqlParser.LiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_list_values_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_values_clause" ):
                return visitor.visitList_values_clause(self)
            else:
                return visitor.visitChildren(self)




    def list_values_clause(self):

        localctx = plsqlParser.List_values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_list_values_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2625
            self.match(plsqlParser.VALUES)
            self.state = 2626
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CHR, plsqlParser.CONCAT, plsqlParser.DECODE, plsqlParser.MAXVALUE, plsqlParser.NVL, plsqlParser.SUBSTRING, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRIM, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.COMMA]:
                self.state = 2631 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 2627
                        self.match(plsqlParser.COMMA)


                    self.state = 2630
                    self.literal()
                    self.state = 2633 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.DECODE - 64)))) != 0) or _la==plsqlParser.MAXVALUE or _la==plsqlParser.NVL or ((((_la - 485)) & ~0x3f) == 0 and ((1 << (_la - 485)) & ((1 << (plsqlParser.SUBSTRING - 485)) | (1 << (plsqlParser.TO_CHAR - 485)) | (1 << (plsqlParser.TO_DATE - 485)) | (1 << (plsqlParser.TRIM - 485)))) != 0) or ((((_la - 618)) & ~0x3f) == 0 and ((1 << (_la - 618)) & ((1 << (plsqlParser.UNSIGNED_INTEGER - 618)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 618)) | (1 << (plsqlParser.CHAR_STRING - 618)) | (1 << (plsqlParser.COMMA - 618)))) != 0)):
                        break

                pass
            elif token in [plsqlParser.DEFAULT]:
                self.state = 2635
                self.match(plsqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2638
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def individual_hash_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Individual_hash_partitionsContext,0)


        def hash_partitions_by_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_partitions_by_quantityContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_hash_partitions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHash_partitions" ):
                return visitor.visitHash_partitions(self)
            else:
                return visitor.visitChildren(self)




    def hash_partitions(self):

        localctx = plsqlParser.Hash_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_hash_partitions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2640
            self.match(plsqlParser.PARTITION)
            self.state = 2641
            self.match(plsqlParser.BY)
            self.state = 2642
            self.match(plsqlParser.HASH)
            self.state = 2643
            self.paren_column_list()
            self.state = 2646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LEFT_PAREN]:
                self.state = 2644
                self.individual_hash_partitions()
                pass
            elif token in [plsqlParser.PARTITIONS]:
                self.state = 2645
                self.hash_partitions_by_quantity()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Composite_range_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def subpartition_by_range(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_rangeContext,0)


        def subpartition_by_list(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_listContext,0)


        def subpartition_by_hash(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_hashContext,0)


        def INTERVAL(self):
            return self.getToken(plsqlParser.INTERVAL, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def range_partition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Range_partition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Range_partition_descContext,i)


        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_composite_range_partitions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComposite_range_partitions" ):
                return visitor.visitComposite_range_partitions(self)
            else:
                return visitor.visitChildren(self)




    def composite_range_partitions(self):

        localctx = plsqlParser.Composite_range_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_composite_range_partitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2648
            self.match(plsqlParser.PARTITION)
            self.state = 2649
            self.match(plsqlParser.BY)
            self.state = 2650
            self.match(plsqlParser.RANGE)
            self.state = 2651
            self.paren_column_list()
            self.state = 2671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INTERVAL:
                self.state = 2652
                self.match(plsqlParser.INTERVAL)
                self.state = 2653
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2654
                self.expression(0)
                self.state = 2655
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.STORE:
                    self.state = 2656
                    self.match(plsqlParser.STORE)
                    self.state = 2657
                    self.match(plsqlParser.IN)
                    self.state = 2658
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 2663 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 2660
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 2659
                            self.match(plsqlParser.COMMA)


                        self.state = 2662
                        self.tablespace()
                        self.state = 2665 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                            break

                    self.state = 2667
                    self.match(plsqlParser.RIGHT_PAREN)




            self.state = 2676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.state = 2673
                self.subpartition_by_range()
                pass

            elif la_ == 2:
                self.state = 2674
                self.subpartition_by_list()
                pass

            elif la_ == 3:
                self.state = 2675
                self.subpartition_by_hash()
                pass


            self.state = 2678
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2683 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2679
                    self.match(plsqlParser.COMMA)


                self.state = 2682
                self.range_partition_desc()
                self.state = 2685 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 2687
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subpartition_by_rangeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def subpartition_template(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_templateContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subpartition_by_range

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubpartition_by_range" ):
                return visitor.visitSubpartition_by_range(self)
            else:
                return visitor.visitChildren(self)




    def subpartition_by_range(self):

        localctx = plsqlParser.Subpartition_by_rangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_subpartition_by_range)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2689
            self.match(plsqlParser.SUBPARTITION)
            self.state = 2690
            self.match(plsqlParser.BY)
            self.state = 2691
            self.match(plsqlParser.RANGE)
            self.state = 2692
            self.paren_column_list()
            self.state = 2694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SUBPARTITION:
                self.state = 2693
                self.subpartition_template()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subpartition_by_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def LIST(self):
            return self.getToken(plsqlParser.LIST, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def subpartition_template(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_templateContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subpartition_by_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubpartition_by_list" ):
                return visitor.visitSubpartition_by_list(self)
            else:
                return visitor.visitChildren(self)




    def subpartition_by_list(self):

        localctx = plsqlParser.Subpartition_by_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_subpartition_by_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            self.match(plsqlParser.SUBPARTITION)
            self.state = 2697
            self.match(plsqlParser.BY)
            self.state = 2698
            self.match(plsqlParser.LIST)
            self.state = 2699
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2700
            self.column_name()
            self.state = 2701
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SUBPARTITION:
                self.state = 2702
                self.subpartition_template()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subpartition_templateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def TEMPLATE(self):
            return self.getToken(plsqlParser.TEMPLATE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def hash_subpartition_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_subpartition_quantityContext,0)


        def range_subpartition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Range_subpartition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Range_subpartition_descContext,i)


        def list_subpartition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.List_subpartition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.List_subpartition_descContext,i)


        def individual_hash_subparts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Individual_hash_subpartsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Individual_hash_subpartsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_subpartition_template

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubpartition_template" ):
                return visitor.visitSubpartition_template(self)
            else:
                return visitor.visitChildren(self)




    def subpartition_template(self):

        localctx = plsqlParser.Subpartition_templateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_subpartition_template)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2705
            self.match(plsqlParser.SUBPARTITION)
            self.state = 2706
            self.match(plsqlParser.TEMPLATE)

            self.state = 2737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LEFT_PAREN]:
                self.state = 2707
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2732
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
                if la_ == 1:
                    self.state = 2712 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 2709
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 2708
                            self.match(plsqlParser.COMMA)


                        self.state = 2711
                        self.range_subpartition_desc()
                        self.state = 2714 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                            break

                    pass

                elif la_ == 2:
                    self.state = 2720 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 2717
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 2716
                            self.match(plsqlParser.COMMA)


                        self.state = 2719
                        self.list_subpartition_desc()
                        self.state = 2722 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                            break

                    pass

                elif la_ == 3:
                    self.state = 2728 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 2725
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 2724
                            self.match(plsqlParser.COMMA)


                        self.state = 2727
                        self.individual_hash_subparts()
                        self.state = 2730 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                            break

                    pass


                self.state = 2734
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.UNSIGNED_INTEGER]:
                self.state = 2736
                self.hash_subpartition_quantity()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_subpartition_descContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def range_values_clause(self):
            return self.getTypedRuleContext(plsqlParser.Range_values_clauseContext,0)


        def subpartition_name(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_nameContext,0)


        def partitioning_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partitioning_storage_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_range_subpartition_desc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRange_subpartition_desc" ):
                return visitor.visitRange_subpartition_desc(self)
            else:
                return visitor.visitChildren(self)




    def range_subpartition_desc(self):

        localctx = plsqlParser.Range_subpartition_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_range_subpartition_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2739
            self.match(plsqlParser.SUBPARTITION)
            self.state = 2741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2740
                self.subpartition_name()


            self.state = 2743
            self.range_values_clause()
            self.state = 2745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or _la==plsqlParser.LOB or _la==plsqlParser.NOCOMPRESS or _la==plsqlParser.OVERFLOW or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VARRAY:
                self.state = 2744
                self.partitioning_storage_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_subpartition_descContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def list_values_clause(self):
            return self.getTypedRuleContext(plsqlParser.List_values_clauseContext,0)


        def subpartition_name(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_nameContext,0)


        def partitioning_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partitioning_storage_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_list_subpartition_desc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_subpartition_desc" ):
                return visitor.visitList_subpartition_desc(self)
            else:
                return visitor.visitChildren(self)




    def list_subpartition_desc(self):

        localctx = plsqlParser.List_subpartition_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_list_subpartition_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2747
            self.match(plsqlParser.SUBPARTITION)
            self.state = 2749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2748
                self.subpartition_name()


            self.state = 2751
            self.list_values_clause()
            self.state = 2753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or _la==plsqlParser.LOB or _la==plsqlParser.NOCOMPRESS or _la==plsqlParser.OVERFLOW or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VARRAY:
                self.state = 2752
                self.partitioning_storage_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Individual_hash_subpartsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def subpartition_name(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_nameContext,0)


        def partitioning_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partitioning_storage_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_individual_hash_subparts

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndividual_hash_subparts" ):
                return visitor.visitIndividual_hash_subparts(self)
            else:
                return visitor.visitChildren(self)




    def individual_hash_subparts(self):

        localctx = plsqlParser.Individual_hash_subpartsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_individual_hash_subparts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2755
            self.match(plsqlParser.SUBPARTITION)
            self.state = 2757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
            if la_ == 1:
                self.state = 2756
                self.subpartition_name()


            self.state = 2760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or _la==plsqlParser.LOB or _la==plsqlParser.NOCOMPRESS or _la==plsqlParser.OVERFLOW or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VARRAY:
                self.state = 2759
                self.partitioning_storage_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_subpartition_quantityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_hash_subpartition_quantity

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHash_subpartition_quantity" ):
                return visitor.visitHash_subpartition_quantity(self)
            else:
                return visitor.visitChildren(self)




    def hash_subpartition_quantity(self):

        localctx = plsqlParser.Hash_subpartition_quantityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_hash_subpartition_quantity)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2762
            self.match(plsqlParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subpartition_by_hashContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def SUBPARTITIONS(self):
            return self.getToken(plsqlParser.SUBPARTITIONS, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def subpartition_template(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_templateContext,0)


        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_subpartition_by_hash

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubpartition_by_hash" ):
                return visitor.visitSubpartition_by_hash(self)
            else:
                return visitor.visitChildren(self)




    def subpartition_by_hash(self):

        localctx = plsqlParser.Subpartition_by_hashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_subpartition_by_hash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2764
            self.match(plsqlParser.SUBPARTITION)
            self.state = 2765
            self.match(plsqlParser.BY)
            self.state = 2766
            self.match(plsqlParser.HASH)
            self.state = 2767
            self.paren_column_list()
            self.state = 2786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SUBPARTITIONS]:
                self.state = 2768
                self.match(plsqlParser.SUBPARTITIONS)
                self.state = 2769
                self.match(plsqlParser.UNSIGNED_INTEGER)
                self.state = 2783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.STORE:
                    self.state = 2770
                    self.match(plsqlParser.STORE)
                    self.state = 2771
                    self.match(plsqlParser.IN)
                    self.state = 2772
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 2777 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 2774
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 2773
                            self.match(plsqlParser.COMMA)


                        self.state = 2776
                        self.tablespace()
                        self.state = 2779 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                            break

                    self.state = 2781
                    self.match(plsqlParser.RIGHT_PAREN)


                pass
            elif token in [plsqlParser.SUBPARTITION]:
                self.state = 2785
                self.subpartition_template()
                pass
            elif token in [plsqlParser.PARTITIONS, plsqlParser.LEFT_PAREN]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_partition_descContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def range_values_clause(self):
            return self.getTypedRuleContext(plsqlParser.Range_values_clauseContext,0)


        def table_partition_description(self):
            return self.getTypedRuleContext(plsqlParser.Table_partition_descriptionContext,0)


        def partition_name(self):
            return self.getTypedRuleContext(plsqlParser.Partition_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def hash_subparts_by_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_subparts_by_quantityContext,0)


        def range_subpartition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Range_subpartition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Range_subpartition_descContext,i)


        def list_subpartition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.List_subpartition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.List_subpartition_descContext,i)


        def individual_hash_subparts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Individual_hash_subpartsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Individual_hash_subpartsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_range_partition_desc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRange_partition_desc" ):
                return visitor.visitRange_partition_desc(self)
            else:
                return visitor.visitChildren(self)




    def range_partition_desc(self):

        localctx = plsqlParser.Range_partition_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_range_partition_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2788
            self.match(plsqlParser.PARTITION)
            self.state = 2790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2789
                self.partition_name()


            self.state = 2792
            self.range_values_clause()
            self.state = 2793
            self.table_partition_description()
            self.state = 2826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SUBPARTITIONS or _la==plsqlParser.LEFT_PAREN:
                self.state = 2824
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.LEFT_PAREN]:
                    self.state = 2794
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 2819
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                    if la_ == 1:
                        self.state = 2799 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 2796
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 2795
                                self.match(plsqlParser.COMMA)


                            self.state = 2798
                            self.range_subpartition_desc()
                            self.state = 2801 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                                break

                        pass

                    elif la_ == 2:
                        self.state = 2807 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 2804
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 2803
                                self.match(plsqlParser.COMMA)


                            self.state = 2806
                            self.list_subpartition_desc()
                            self.state = 2809 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                                break

                        pass

                    elif la_ == 3:
                        self.state = 2815 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 2812
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 2811
                                self.match(plsqlParser.COMMA)


                            self.state = 2814
                            self.individual_hash_subparts()
                            self.state = 2817 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                                break

                        pass


                    self.state = 2821
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                elif token in [plsqlParser.SUBPARTITIONS]:
                    self.state = 2823
                    self.hash_subparts_by_quantity()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_subparts_by_quantityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITIONS(self):
            return self.getToken(plsqlParser.SUBPARTITIONS, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_hash_subparts_by_quantity

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHash_subparts_by_quantity" ):
                return visitor.visitHash_subparts_by_quantity(self)
            else:
                return visitor.visitChildren(self)




    def hash_subparts_by_quantity(self):

        localctx = plsqlParser.Hash_subparts_by_quantityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_hash_subparts_by_quantity)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2828
            self.match(plsqlParser.SUBPARTITIONS)
            self.state = 2829
            self.match(plsqlParser.UNSIGNED_INTEGER)
            self.state = 2843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.STORE:
                self.state = 2830
                self.match(plsqlParser.STORE)
                self.state = 2831
                self.match(plsqlParser.IN)
                self.state = 2832
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2837 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 2833
                        self.match(plsqlParser.COMMA)


                    self.state = 2836
                    self.tablespace()
                    self.state = 2839 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 2841
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Composite_list_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def LIST(self):
            return self.getToken(plsqlParser.LIST, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def subpartition_by_range(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_rangeContext,0)


        def subpartition_by_list(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_listContext,0)


        def subpartition_by_hash(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_hashContext,0)


        def list_partition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.List_partition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.List_partition_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_composite_list_partitions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComposite_list_partitions" ):
                return visitor.visitComposite_list_partitions(self)
            else:
                return visitor.visitChildren(self)




    def composite_list_partitions(self):

        localctx = plsqlParser.Composite_list_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_composite_list_partitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2845
            self.match(plsqlParser.PARTITION)
            self.state = 2846
            self.match(plsqlParser.BY)
            self.state = 2847
            self.match(plsqlParser.LIST)
            self.state = 2848
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2849
            self.column_name()
            self.state = 2850
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
            if la_ == 1:
                self.state = 2851
                self.subpartition_by_range()
                pass

            elif la_ == 2:
                self.state = 2852
                self.subpartition_by_list()
                pass

            elif la_ == 3:
                self.state = 2853
                self.subpartition_by_hash()
                pass


            self.state = 2856
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2861 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2857
                    self.match(plsqlParser.COMMA)


                self.state = 2860
                self.list_partition_desc()
                self.state = 2863 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 2865
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_partition_descContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def list_values_clause(self):
            return self.getTypedRuleContext(plsqlParser.List_values_clauseContext,0)


        def table_partition_description(self):
            return self.getTypedRuleContext(plsqlParser.Table_partition_descriptionContext,0)


        def partition_name(self):
            return self.getTypedRuleContext(plsqlParser.Partition_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def hash_subparts_by_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_subparts_by_quantityContext,0)


        def range_subpartition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Range_subpartition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Range_subpartition_descContext,i)


        def list_subpartition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.List_subpartition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.List_subpartition_descContext,i)


        def individual_hash_subparts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Individual_hash_subpartsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Individual_hash_subpartsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_list_partition_desc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_partition_desc" ):
                return visitor.visitList_partition_desc(self)
            else:
                return visitor.visitChildren(self)




    def list_partition_desc(self):

        localctx = plsqlParser.List_partition_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_list_partition_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2867
            self.match(plsqlParser.PARTITION)
            self.state = 2869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2868
                self.partition_name()


            self.state = 2871
            self.list_values_clause()
            self.state = 2872
            self.table_partition_description()
            self.state = 2905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SUBPARTITIONS or _la==plsqlParser.LEFT_PAREN:
                self.state = 2903
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.LEFT_PAREN]:
                    self.state = 2873
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 2898
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
                    if la_ == 1:
                        self.state = 2878 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 2875
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 2874
                                self.match(plsqlParser.COMMA)


                            self.state = 2877
                            self.range_subpartition_desc()
                            self.state = 2880 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                                break

                        pass

                    elif la_ == 2:
                        self.state = 2886 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 2883
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 2882
                                self.match(plsqlParser.COMMA)


                            self.state = 2885
                            self.list_subpartition_desc()
                            self.state = 2888 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                                break

                        pass

                    elif la_ == 3:
                        self.state = 2894 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 2891
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 2890
                                self.match(plsqlParser.COMMA)


                            self.state = 2893
                            self.individual_hash_subparts()
                            self.state = 2896 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                                break

                        pass


                    self.state = 2900
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                elif token in [plsqlParser.SUBPARTITIONS]:
                    self.state = 2902
                    self.hash_subparts_by_quantity()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Composite_hash_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def subpartition_by_range(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_rangeContext,0)


        def subpartition_by_list(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_listContext,0)


        def subpartition_by_hash(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_hashContext,0)


        def individual_hash_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Individual_hash_partitionsContext,0)


        def hash_partitions_by_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_partitions_by_quantityContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_composite_hash_partitions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComposite_hash_partitions" ):
                return visitor.visitComposite_hash_partitions(self)
            else:
                return visitor.visitChildren(self)




    def composite_hash_partitions(self):

        localctx = plsqlParser.Composite_hash_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_composite_hash_partitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2907
            self.match(plsqlParser.PARTITION)
            self.state = 2908
            self.match(plsqlParser.BY)
            self.state = 2909
            self.match(plsqlParser.HASH)
            self.state = 2910
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2913 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2911
                self.match(plsqlParser.COMMA)
                self.state = 2912
                self.column_name()
                self.state = 2915 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.COMMA):
                    break

            self.state = 2917
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2918
                self.subpartition_by_range()
                pass

            elif la_ == 2:
                self.state = 2919
                self.subpartition_by_list()
                pass

            elif la_ == 3:
                self.state = 2920
                self.subpartition_by_hash()
                pass


            self.state = 2925
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LEFT_PAREN]:
                self.state = 2923
                self.individual_hash_partitions()
                pass
            elif token in [plsqlParser.PARTITIONS]:
                self.state = 2924
                self.hash_partitions_by_quantity()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_partitioningContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def REFERENCE(self):
            return self.getToken(plsqlParser.REFERENCE, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def reference_partition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Reference_partition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Reference_partition_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_reference_partitioning

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_partitioning" ):
                return visitor.visitReference_partitioning(self)
            else:
                return visitor.visitChildren(self)




    def reference_partitioning(self):

        localctx = plsqlParser.Reference_partitioningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_reference_partitioning)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2927
            self.match(plsqlParser.PARTITION)
            self.state = 2928
            self.match(plsqlParser.BY)
            self.state = 2929
            self.match(plsqlParser.REFERENCE)
            self.state = 2930
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2931
            self.regular_id()
            self.state = 2932
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.state = 2933
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2938 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2935
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 2934
                        self.match(plsqlParser.COMMA)


                    self.state = 2937
                    self.reference_partition_desc()
                    self.state = 2940 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                        break

                self.state = 2942
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_partition_descContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def table_partition_description(self):
            return self.getTypedRuleContext(plsqlParser.Table_partition_descriptionContext,0)


        def partition_name(self):
            return self.getTypedRuleContext(plsqlParser.Partition_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_reference_partition_desc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_partition_desc" ):
                return visitor.visitReference_partition_desc(self)
            else:
                return visitor.visitChildren(self)




    def reference_partition_desc(self):

        localctx = plsqlParser.Reference_partition_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_reference_partition_desc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2946
            self.match(plsqlParser.PARTITION)
            self.state = 2948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.state = 2947
                self.partition_name()


            self.state = 2950
            self.table_partition_description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class System_partitioningContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def SYSTEM(self):
            return self.getToken(plsqlParser.SYSTEM, 0)

        def PARTITIONS(self):
            return self.getToken(plsqlParser.PARTITIONS, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def reference_partition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Reference_partition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Reference_partition_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_system_partitioning

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSystem_partitioning" ):
                return visitor.visitSystem_partitioning(self)
            else:
                return visitor.visitChildren(self)




    def system_partitioning(self):

        localctx = plsqlParser.System_partitioningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_system_partitioning)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2952
            self.match(plsqlParser.PARTITION)
            self.state = 2953
            self.match(plsqlParser.BY)
            self.state = 2954
            self.match(plsqlParser.SYSTEM)
            self.state = 2965
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.PARTITIONS]:
                self.state = 2955
                self.match(plsqlParser.PARTITIONS)
                self.state = 2956
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.PARTITION, plsqlParser.COMMA]:
                self.state = 2961 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2958
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 2957
                        self.match(plsqlParser.COMMA)


                    self.state = 2960
                    self.reference_partition_desc()
                    self.state = 2963 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                        break

                pass
            elif token in [plsqlParser.EOF, plsqlParser.ALTER, plsqlParser.AS, plsqlParser.CACHE, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DISABLE, plsqlParser.DROP, plsqlParser.ENABLE, plsqlParser.EXPLAIN, plsqlParser.FLASHBACK, plsqlParser.FUNCTION, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.NO, plsqlParser.NOCACHE, plsqlParser.NOPARALLEL, plsqlParser.NOROWDEPENDENCIES, plsqlParser.PARALLEL, plsqlParser.PROCEDURE, plsqlParser.RESULT_CACHE, plsqlParser.ROW, plsqlParser.ROWDEPENDENCIES, plsqlParser.SELECT, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enable_disable_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def PRIMARY(self):
            return self.getToken(plsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def using_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Using_index_clauseContext,0)


        def exceptions_clause(self):
            return self.getTypedRuleContext(plsqlParser.Exceptions_clauseContext,0)


        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def INDEX(self):
            return self.getToken(plsqlParser.INDEX, 0)

        def VALIDATE(self):
            return self.getToken(plsqlParser.VALIDATE, 0)

        def NOVALIDATE(self):
            return self.getToken(plsqlParser.NOVALIDATE, 0)

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_enable_disable_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnable_disable_clause" ):
                return visitor.visitEnable_disable_clause(self)
            else:
                return visitor.visitChildren(self)




    def enable_disable_clause(self):

        localctx = plsqlParser.Enable_disable_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_enable_disable_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2967
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOVALIDATE or _la==plsqlParser.VALIDATE:
                self.state = 2968
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOVALIDATE or _la==plsqlParser.VALIDATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2977
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.UNIQUE]:
                self.state = 2971
                self.match(plsqlParser.UNIQUE)
                self.state = 2972
                self.paren_column_list()
                pass
            elif token in [plsqlParser.PRIMARY]:
                self.state = 2973
                self.match(plsqlParser.PRIMARY)
                self.state = 2974
                self.match(plsqlParser.KEY)
                pass
            elif token in [plsqlParser.CONSTRAINT]:
                self.state = 2975
                self.match(plsqlParser.CONSTRAINT)
                self.state = 2976
                self.constraint_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.USING:
                self.state = 2979
                self.using_index_clause()


            self.state = 2983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.EXCEPTIONS:
                self.state = 2982
                self.exceptions_clause()


            self.state = 2986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CASCADE:
                self.state = 2985
                self.match(plsqlParser.CASCADE)


            self.state = 2990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                self.state = 2988
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DROP or _la==plsqlParser.KEEP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2989
                self.match(plsqlParser.INDEX)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exceptions_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTIONS(self):
            return self.getToken(plsqlParser.EXCEPTIONS, 0)

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_exceptions_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptions_clause" ):
                return visitor.visitExceptions_clause(self)
            else:
                return visitor.visitChildren(self)




    def exceptions_clause(self):

        localctx = plsqlParser.Exceptions_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_exceptions_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2992
            self.match(plsqlParser.EXCEPTIONS)
            self.state = 2993
            self.match(plsqlParser.INTO)
            self.state = 2994
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_movement_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def MOVEMENT(self):
            return self.getToken(plsqlParser.MOVEMENT, 0)

        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_row_movement_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRow_movement_clause" ):
                return visitor.visitRow_movement_clause(self)
            else:
                return visitor.visitChildren(self)




    def row_movement_clause(self):

        localctx = plsqlParser.Row_movement_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_row_movement_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE:
                self.state = 2996
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2999
            self.match(plsqlParser.ROW)
            self.state = 3000
            self.match(plsqlParser.MOVEMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flashback_archive_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.flashback_archive = None # Token

        def FLASHBACK(self):
            return self.getToken(plsqlParser.FLASHBACK, 0)

        def ARCHIVE(self):
            return self.getToken(plsqlParser.ARCHIVE, 0)

        def REGULAR_ID(self):
            return self.getToken(plsqlParser.REGULAR_ID, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_flashback_archive_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlashback_archive_clause" ):
                return visitor.visitFlashback_archive_clause(self)
            else:
                return visitor.visitChildren(self)




    def flashback_archive_clause(self):

        localctx = plsqlParser.Flashback_archive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_flashback_archive_clause)
        try:
            self.state = 3008
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.FLASHBACK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3002
                self.match(plsqlParser.FLASHBACK)
                self.state = 3003
                self.match(plsqlParser.ARCHIVE)
                self.state = 3004
                localctx.flashback_archive = self.match(plsqlParser.REGULAR_ID)
                pass
            elif token in [plsqlParser.NO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3005
                self.match(plsqlParser.NO)
                self.state = 3006
                self.match(plsqlParser.FLASHBACK)
                self.state = 3007
                self.match(plsqlParser.ARCHIVE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def object_table_substitution(self):
            return self.getTypedRuleContext(plsqlParser.Object_table_substitutionContext,0)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def oid_clause(self):
            return self.getTypedRuleContext(plsqlParser.Oid_clauseContext,0)


        def oid_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Oid_index_clauseContext,0)


        def physical_properties(self):
            return self.getTypedRuleContext(plsqlParser.Physical_propertiesContext,0)


        def column_properties(self):
            return self.getTypedRuleContext(plsqlParser.Column_propertiesContext,0)


        def table_partitioning_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Table_partitioning_clausesContext,0)


        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def MODE(self):
            return self.getToken(plsqlParser.MODE, 0)

        def parallel_clause(self):
            return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,0)


        def row_movement_clause(self):
            return self.getTypedRuleContext(plsqlParser.Row_movement_clauseContext,0)


        def flashback_archive_clause(self):
            return self.getTypedRuleContext(plsqlParser.Flashback_archive_clauseContext,0)


        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def PRESERVE(self):
            return self.getToken(plsqlParser.PRESERVE, 0)

        def CACHE(self):
            return self.getToken(plsqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(plsqlParser.NOCACHE, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def ROWDEPENDENCIES(self):
            return self.getToken(plsqlParser.ROWDEPENDENCIES, 0)

        def NOROWDEPENDENCIES(self):
            return self.getToken(plsqlParser.NOROWDEPENDENCIES, 0)

        def object_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Object_propertiesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Object_propertiesContext,i)


        def enable_disable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Enable_disable_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Enable_disable_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_object_table

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_table" ):
                return visitor.visitObject_table(self)
            else:
                return visitor.visitChildren(self)




    def object_table(self):

        localctx = plsqlParser.Object_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_object_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3010
            self.match(plsqlParser.OF)
            self.state = 3011
            self.type_name()
            self.state = 3013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT or _la==plsqlParser.SUBSTITUTABLE:
                self.state = 3012
                self.object_table_substitution()


            self.state = 3026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.state = 3015
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3020 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 3016
                        self.match(plsqlParser.COMMA)


                    self.state = 3019
                    self.object_properties()
                    self.state = 3022 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHECK))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FOREIGN - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PRIMARY - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SCOPE - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUPPLEMENTAL - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNIQUE - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 3024
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 3032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ON:
                self.state = 3028
                self.match(plsqlParser.ON)
                self.state = 3029
                self.match(plsqlParser.COMMIT)
                self.state = 3030
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DELETE or _la==plsqlParser.PRESERVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3031
                self.match(plsqlParser.ROWS)


            self.state = 3035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OBJECT:
                self.state = 3034
                self.oid_clause()


            self.state = 3038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OIDINDEX:
                self.state = 3037
                self.oid_index_clause()


            self.state = 3041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or ((((_la - 441)) & ~0x3f) == 0 and ((1 << (_la - 441)) & ((1 << (plsqlParser.SEGMENT - 441)) | (1 << (plsqlParser.STORAGE - 441)) | (1 << (plsqlParser.TABLESPACE - 441)))) != 0):
                self.state = 3040
                self.physical_properties()


            self.state = 3044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN or _la==plsqlParser.LOB or _la==plsqlParser.NESTED or _la==plsqlParser.VARRAY or _la==plsqlParser.XMLTYPE:
                self.state = 3043
                self.column_properties()


            self.state = 3047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION:
                self.state = 3046
                self.table_partitioning_clauses()


            self.state = 3050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE:
                self.state = 3049
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RESULT_CACHE:
                self.state = 3052
                self.match(plsqlParser.RESULT_CACHE)
                self.state = 3053
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3054
                self.match(plsqlParser.MODE)
                self.state = 3055
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.FORCE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3056
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 3060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOPARALLEL or _la==plsqlParser.PARALLEL:
                self.state = 3059
                self.parallel_clause()


            self.state = 3063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOROWDEPENDENCIES or _la==plsqlParser.ROWDEPENDENCIES:
                self.state = 3062
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOROWDEPENDENCIES or _la==plsqlParser.ROWDEPENDENCIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.state = 3066 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3065
                        self.enable_disable_clause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3068 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,386,self._ctx)



            self.state = 3073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE or _la==plsqlParser.ROW:
                self.state = 3072
                self.row_movement_clause()


            self.state = 3076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FLASHBACK or _la==plsqlParser.NO:
                self.state = 3075
                self.flashback_archive_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_table_substitutionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSTITUTABLE(self):
            return self.getToken(plsqlParser.SUBSTITUTABLE, 0)

        def AT(self):
            return self.getToken(plsqlParser.AT, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def LEVELS(self):
            return self.getToken(plsqlParser.LEVELS, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_object_table_substitution

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_table_substitution" ):
                return visitor.visitObject_table_substitution(self)
            else:
                return visitor.visitChildren(self)




    def object_table_substitution(self):

        localctx = plsqlParser.Object_table_substitutionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_object_table_substitution)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 3078
                self.match(plsqlParser.NOT)


            self.state = 3081
            self.match(plsqlParser.SUBSTITUTABLE)
            self.state = 3082
            self.match(plsqlParser.AT)
            self.state = 3083
            self.match(plsqlParser.ALL)
            self.state = 3084
            self.match(plsqlParser.LEVELS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Oid_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(plsqlParser.OBJECT, 0)

        def IDENTIFIER(self):
            return self.getToken(plsqlParser.IDENTIFIER, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def SYSTEM(self):
            return self.getToken(plsqlParser.SYSTEM, 0)

        def GENERATED(self):
            return self.getToken(plsqlParser.GENERATED, 0)

        def PRIMARY(self):
            return self.getToken(plsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_oid_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOid_clause" ):
                return visitor.visitOid_clause(self)
            else:
                return visitor.visitChildren(self)




    def oid_clause(self):

        localctx = plsqlParser.Oid_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oid_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3086
            self.match(plsqlParser.OBJECT)
            self.state = 3087
            self.match(plsqlParser.IDENTIFIER)
            self.state = 3088
            self.match(plsqlParser.IS)
            self.state = 3093
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SYSTEM]:
                self.state = 3089
                self.match(plsqlParser.SYSTEM)
                self.state = 3090
                self.match(plsqlParser.GENERATED)
                pass
            elif token in [plsqlParser.PRIMARY]:
                self.state = 3091
                self.match(plsqlParser.PRIMARY)
                self.state = 3092
                self.match(plsqlParser.KEY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Oid_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OIDINDEX(self):
            return self.getToken(plsqlParser.OIDINDEX, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Physical_attributes_clauseContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TABLESPACE)
            else:
                return self.getToken(plsqlParser.TABLESPACE, i)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_oid_index_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOid_index_clause" ):
                return visitor.visitOid_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def oid_index_clause(self):

        localctx = plsqlParser.Oid_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oid_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3095
            self.match(plsqlParser.OIDINDEX)
            self.state = 3097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3096
                self.index_name()


            self.state = 3099
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3103 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3103
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.INITRANS, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE]:
                    self.state = 3100
                    self.physical_attributes_clause()
                    pass
                elif token in [plsqlParser.TABLESPACE]:
                    self.state = 3101
                    self.match(plsqlParser.TABLESPACE)
                    self.state = 3102
                    self.tablespace()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3105 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.INITRANS or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE):
                    break

            self.state = 3107
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltype_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def XMLTYPE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.XMLTYPE)
            else:
                return self.getToken(plsqlParser.XMLTYPE, i)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def object_properties(self):
            return self.getTypedRuleContext(plsqlParser.Object_propertiesContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def xmltype_storage(self):
            return self.getTypedRuleContext(plsqlParser.Xmltype_storageContext,0)


        def xmlschema_spec(self):
            return self.getTypedRuleContext(plsqlParser.Xmlschema_specContext,0)


        def xmltype_virtual_columns(self):
            return self.getTypedRuleContext(plsqlParser.Xmltype_virtual_columnsContext,0)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def oid_clause(self):
            return self.getTypedRuleContext(plsqlParser.Oid_clauseContext,0)


        def oid_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Oid_index_clauseContext,0)


        def physical_properties(self):
            return self.getTypedRuleContext(plsqlParser.Physical_propertiesContext,0)


        def column_properties(self):
            return self.getTypedRuleContext(plsqlParser.Column_propertiesContext,0)


        def table_partitioning_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Table_partitioning_clausesContext,0)


        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def MODE(self):
            return self.getToken(plsqlParser.MODE, 0)

        def parallel_clause(self):
            return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,0)


        def row_movement_clause(self):
            return self.getTypedRuleContext(plsqlParser.Row_movement_clauseContext,0)


        def flashback_archive_clause(self):
            return self.getTypedRuleContext(plsqlParser.Flashback_archive_clauseContext,0)


        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def PRESERVE(self):
            return self.getToken(plsqlParser.PRESERVE, 0)

        def CACHE(self):
            return self.getToken(plsqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(plsqlParser.NOCACHE, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def ROWDEPENDENCIES(self):
            return self.getToken(plsqlParser.ROWDEPENDENCIES, 0)

        def NOROWDEPENDENCIES(self):
            return self.getToken(plsqlParser.NOROWDEPENDENCIES, 0)

        def enable_disable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Enable_disable_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Enable_disable_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmltype_table

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmltype_table" ):
                return visitor.visitXmltype_table(self)
            else:
                return visitor.visitChildren(self)




    def xmltype_table(self):

        localctx = plsqlParser.Xmltype_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_xmltype_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3109
            self.match(plsqlParser.OF)
            self.state = 3110
            self.match(plsqlParser.XMLTYPE)
            self.state = 3115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.state = 3111
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3112
                self.object_properties()
                self.state = 3113
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 3119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
            if la_ == 1:
                self.state = 3117
                self.match(plsqlParser.XMLTYPE)
                self.state = 3118
                self.xmltype_storage()


            self.state = 3122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELEMENT or _la==plsqlParser.XMLSCHEMA:
                self.state = 3121
                self.xmlschema_spec()


            self.state = 3125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.VIRTUAL:
                self.state = 3124
                self.xmltype_virtual_columns()


            self.state = 3131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ON:
                self.state = 3127
                self.match(plsqlParser.ON)
                self.state = 3128
                self.match(plsqlParser.COMMIT)
                self.state = 3129
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DELETE or _la==plsqlParser.PRESERVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3130
                self.match(plsqlParser.ROWS)


            self.state = 3134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OBJECT:
                self.state = 3133
                self.oid_clause()


            self.state = 3137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OIDINDEX:
                self.state = 3136
                self.oid_index_clause()


            self.state = 3140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or ((((_la - 441)) & ~0x3f) == 0 and ((1 << (_la - 441)) & ((1 << (plsqlParser.SEGMENT - 441)) | (1 << (plsqlParser.STORAGE - 441)) | (1 << (plsqlParser.TABLESPACE - 441)))) != 0):
                self.state = 3139
                self.physical_properties()


            self.state = 3143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN or _la==plsqlParser.LOB or _la==plsqlParser.NESTED or _la==plsqlParser.VARRAY or _la==plsqlParser.XMLTYPE:
                self.state = 3142
                self.column_properties()


            self.state = 3146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION:
                self.state = 3145
                self.table_partitioning_clauses()


            self.state = 3149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE:
                self.state = 3148
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RESULT_CACHE:
                self.state = 3151
                self.match(plsqlParser.RESULT_CACHE)
                self.state = 3152
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3153
                self.match(plsqlParser.MODE)
                self.state = 3154
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.FORCE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3155
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 3159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOPARALLEL or _la==plsqlParser.PARALLEL:
                self.state = 3158
                self.parallel_clause()


            self.state = 3162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOROWDEPENDENCIES or _la==plsqlParser.ROWDEPENDENCIES:
                self.state = 3161
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOROWDEPENDENCIES or _la==plsqlParser.ROWDEPENDENCIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
            if la_ == 1:
                self.state = 3165 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3164
                        self.enable_disable_clause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3167 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,409,self._ctx)



            self.state = 3172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE or _la==plsqlParser.ROW:
                self.state = 3171
                self.row_movement_clause()


            self.state = 3175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FLASHBACK or _la==plsqlParser.NO:
                self.state = 3174
                self.flashback_archive_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltype_virtual_columnsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIRTUAL(self):
            return self.getToken(plsqlParser.VIRTUAL, 0)

        def COLUMNS(self):
            return self.getToken(plsqlParser.COLUMNS, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_xmltype_virtual_columns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmltype_virtual_columns" ):
                return visitor.visitXmltype_virtual_columns(self)
            else:
                return visitor.visitChildren(self)




    def xmltype_virtual_columns(self):

        localctx = plsqlParser.Xmltype_virtual_columnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_xmltype_virtual_columns)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3177
            self.match(plsqlParser.VIRTUAL)
            self.state = 3178
            self.match(plsqlParser.COLUMNS)
            self.state = 3179
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3189 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 3180
                    self.match(plsqlParser.COMMA)


                self.state = 3183
                self.column_name()
                self.state = 3184
                self.match(plsqlParser.AS)
                self.state = 3185
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3186
                self.expression(0)
                self.state = 3187
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 3191 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                    break

            self.state = 3193
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def IF(self):
            return self.getToken(plsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(plsqlParser.EXISTS, 0)

        def PURGE(self):
            return self.getToken(plsqlParser.PURGE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_drop_table

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_table" ):
                return visitor.visitDrop_table(self)
            else:
                return visitor.visitChildren(self)




    def drop_table(self):

        localctx = plsqlParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3195
            self.match(plsqlParser.DROP)
            self.state = 3196
            self.match(plsqlParser.TABLE)
            self.state = 3199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.IF:
                self.state = 3197
                self.match(plsqlParser.IF)
                self.state = 3198
                self.match(plsqlParser.EXISTS)


            self.state = 3201
            self.tableview_name()
            self.state = 3203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PURGE:
                self.state = 3202
                self.match(plsqlParser.PURGE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def alter_table_properties(self):
            return self.getTypedRuleContext(plsqlParser.Alter_table_propertiesContext,0)


        def constraint_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_clausesContext,0)


        def column_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Column_clausesContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_table

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table" ):
                return visitor.visitAlter_table(self)
            else:
                return visitor.visitChildren(self)




    def alter_table(self):

        localctx = plsqlParser.Alter_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_alter_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3205
            self.match(plsqlParser.ALTER)
            self.state = 3206
            self.match(plsqlParser.TABLE)
            self.state = 3207
            self.tableview_name()
            self.state = 3212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                pass

            elif la_ == 2:
                self.state = 3209
                self.alter_table_properties()
                pass

            elif la_ == 3:
                self.state = 3210
                self.constraint_clauses()
                pass

            elif la_ == 4:
                self.state = 3211
                self.column_clauses()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_properties_1(self):
            return self.getTypedRuleContext(plsqlParser.Alter_table_properties_1Context,0)


        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def shrink_clause(self):
            return self.getTypedRuleContext(plsqlParser.Shrink_clauseContext,0)


        def READ(self):
            return self.getToken(plsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(plsqlParser.WRITE, 0)

        def REKEY(self):
            return self.getToken(plsqlParser.REKEY, 0)

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_table_properties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table_properties" ):
                return visitor.visitAlter_table_properties(self)
            else:
                return visitor.visitChildren(self)




    def alter_table_properties(self):

        localctx = plsqlParser.Alter_table_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_alter_table_properties)
        try:
            self.state = 3225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3214
                self.alter_table_properties_1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3215
                self.match(plsqlParser.RENAME)
                self.state = 3216
                self.match(plsqlParser.TO)
                self.state = 3217
                self.tableview_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3218
                self.shrink_clause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3219
                self.match(plsqlParser.READ)
                self.state = 3220
                self.match(plsqlParser.ONLY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3221
                self.match(plsqlParser.READ)
                self.state = 3222
                self.match(plsqlParser.WRITE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3223
                self.match(plsqlParser.REKEY)
                self.state = 3224
                self.match(plsqlParser.CHAR_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_properties_1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Physical_attributes_clauseContext,i)


        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Logging_clauseContext,i)


        def table_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_compressionContext,i)


        def supplemental_table_logging(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Supplemental_table_loggingContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Supplemental_table_loggingContext,i)


        def allocate_extent_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Allocate_extent_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Allocate_extent_clauseContext,i)


        def deallocate_unused_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Deallocate_unused_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Deallocate_unused_clauseContext,i)


        def RESULT_CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RESULT_CACHE)
            else:
                return self.getToken(plsqlParser.RESULT_CACHE, i)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def MODE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.MODE)
            else:
                return self.getToken(plsqlParser.MODE, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def upgrade_table_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Upgrade_table_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Upgrade_table_clauseContext,i)


        def records_per_block_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Records_per_block_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Records_per_block_clauseContext,i)


        def parallel_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Parallel_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,i)


        def row_movement_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Row_movement_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Row_movement_clauseContext,i)


        def flashback_archive_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Flashback_archive_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Flashback_archive_clauseContext,i)


        def alter_iot_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Alter_iot_clausesContext,0)


        def CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CACHE)
            else:
                return self.getToken(plsqlParser.CACHE, i)

        def NOCACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NOCACHE)
            else:
                return self.getToken(plsqlParser.NOCACHE, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DEFAULT)
            else:
                return self.getToken(plsqlParser.DEFAULT, i)

        def FORCE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FORCE)
            else:
                return self.getToken(plsqlParser.FORCE, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_table_properties_1

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table_properties_1" ):
                return visitor.visitAlter_table_properties_1(self)
            else:
                return visitor.visitChildren(self)




    def alter_table_properties_1(self):

        localctx = plsqlParser.Alter_table_properties_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_alter_table_properties_1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3244 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3244
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.INITRANS, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE]:
                        self.state = 3227
                        self.physical_attributes_clause()
                        pass
                    elif token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.LOGGING, plsqlParser.NOLOGGING]:
                        self.state = 3228
                        self.logging_clause()
                        pass
                    elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                        self.state = 3229
                        self.table_compression()
                        pass
                    elif token in [plsqlParser.ADD, plsqlParser.DROP]:
                        self.state = 3230
                        self.supplemental_table_logging()
                        pass
                    elif token in [plsqlParser.ALLOCATE]:
                        self.state = 3231
                        self.allocate_extent_clause()
                        pass
                    elif token in [plsqlParser.DEALLOCATE]:
                        self.state = 3232
                        self.deallocate_unused_clause()
                        pass
                    elif token in [plsqlParser.CACHE, plsqlParser.NOCACHE]:
                        self.state = 3233
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [plsqlParser.RESULT_CACHE]:
                        self.state = 3234
                        self.match(plsqlParser.RESULT_CACHE)
                        self.state = 3235
                        self.match(plsqlParser.LEFT_PAREN)
                        self.state = 3236
                        self.match(plsqlParser.MODE)
                        self.state = 3237
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.FORCE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3238
                        self.match(plsqlParser.RIGHT_PAREN)
                        pass
                    elif token in [plsqlParser.UPGRADE]:
                        self.state = 3239
                        self.upgrade_table_clause()
                        pass
                    elif token in [plsqlParser.MINIMIZE, plsqlParser.NOMINIMIZE, plsqlParser.RECORDS_PER_BLOCK]:
                        self.state = 3240
                        self.records_per_block_clause()
                        pass
                    elif token in [plsqlParser.NOPARALLEL, plsqlParser.PARALLEL]:
                        self.state = 3241
                        self.parallel_clause()
                        pass
                    elif token in [plsqlParser.DISABLE, plsqlParser.ENABLE, plsqlParser.ROW]:
                        self.state = 3242
                        self.row_movement_clause()
                        pass
                    elif token in [plsqlParser.FLASHBACK, plsqlParser.NO]:
                        self.state = 3243
                        self.flashback_archive_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 3246 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,420,self._ctx)

            self.state = 3249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ADD or _la==plsqlParser.COALESCE or _la==plsqlParser.COMPRESS or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (plsqlParser.MAPPING - 275)) | (1 << (plsqlParser.NOCOMPRESS - 275)) | (1 << (plsqlParser.NOMAPPING - 275)))) != 0) or _la==plsqlParser.OVERFLOW or _la==plsqlParser.PCTTHRESHOLD:
                self.state = 3248
                self.alter_iot_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supplemental_table_loggingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def SUPPLEMENTAL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SUPPLEMENTAL)
            else:
                return self.getToken(plsqlParser.SUPPLEMENTAL, i)

        def LOG(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LOG)
            else:
                return self.getToken(plsqlParser.LOG, i)

        def supplemental_log_grp_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Supplemental_log_grp_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Supplemental_log_grp_clauseContext,i)


        def supplemental_id_key_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Supplemental_id_key_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Supplemental_id_key_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def GROUP(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.GROUP)
            else:
                return self.getToken(plsqlParser.GROUP, i)

        def log_grp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Log_grpContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Log_grpContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_supplemental_table_logging

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSupplemental_table_logging" ):
                return visitor.visitSupplemental_table_logging(self)
            else:
                return visitor.visitChildren(self)




    def supplemental_table_logging(self):

        localctx = plsqlParser.Supplemental_table_loggingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_supplemental_table_logging)
        self._la = 0 # Token type
        try:
            self.state = 3282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3251
                self.match(plsqlParser.ADD)
                self.state = 3263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.SUPPLEMENTAL or _la==plsqlParser.COMMA:
                    self.state = 3253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 3252
                        self.match(plsqlParser.COMMA)


                    self.state = 3255
                    self.match(plsqlParser.SUPPLEMENTAL)
                    self.state = 3256
                    self.match(plsqlParser.LOG)
                    self.state = 3259
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.GROUP]:
                        self.state = 3257
                        self.supplemental_log_grp_clause()
                        pass
                    elif token in [plsqlParser.DATA]:
                        self.state = 3258
                        self.supplemental_id_key_clause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3265
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [plsqlParser.DROP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3266
                self.match(plsqlParser.DROP)
                self.state = 3279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.SUPPLEMENTAL or _la==plsqlParser.COMMA:
                    self.state = 3268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 3267
                        self.match(plsqlParser.COMMA)


                    self.state = 3270
                    self.match(plsqlParser.SUPPLEMENTAL)
                    self.state = 3271
                    self.match(plsqlParser.LOG)
                    self.state = 3275
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.DATA]:
                        self.state = 3272
                        self.supplemental_id_key_clause()
                        pass
                    elif token in [plsqlParser.GROUP]:
                        self.state = 3273
                        self.match(plsqlParser.GROUP)
                        self.state = 3274
                        self.log_grp()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3281
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allocate_extent_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.inst_num = None # Token

        def ALLOCATE(self):
            return self.getToken(plsqlParser.ALLOCATE, 0)

        def EXTENT(self):
            return self.getToken(plsqlParser.EXTENT, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def SIZE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SIZE)
            else:
                return self.getToken(plsqlParser.SIZE, i)

        def size_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Size_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Size_clauseContext,i)


        def DATAFILE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DATAFILE)
            else:
                return self.getToken(plsqlParser.DATAFILE, i)

        def INSTANCE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INSTANCE)
            else:
                return self.getToken(plsqlParser.INSTANCE, i)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CHAR_STRING)
            else:
                return self.getToken(plsqlParser.CHAR_STRING, i)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_allocate_extent_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllocate_extent_clause" ):
                return visitor.visitAllocate_extent_clause(self)
            else:
                return visitor.visitChildren(self)




    def allocate_extent_clause(self):

        localctx = plsqlParser.Allocate_extent_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_allocate_extent_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3284
            self.match(plsqlParser.ALLOCATE)
            self.state = 3285
            self.match(plsqlParser.EXTENT)
            self.state = 3298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,431,self._ctx)
            if la_ == 1:
                self.state = 3286
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3293 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3293
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.SIZE]:
                        self.state = 3287
                        self.match(plsqlParser.SIZE)
                        self.state = 3288
                        self.size_clause()
                        pass
                    elif token in [plsqlParser.DATAFILE]:
                        self.state = 3289
                        self.match(plsqlParser.DATAFILE)
                        self.state = 3290
                        localctx.datafile = self.match(plsqlParser.CHAR_STRING)
                        pass
                    elif token in [plsqlParser.INSTANCE]:
                        self.state = 3291
                        self.match(plsqlParser.INSTANCE)
                        self.state = 3292
                        localctx.inst_num = self.match(plsqlParser.UNSIGNED_INTEGER)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3295 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.DATAFILE or _la==plsqlParser.INSTANCE or _la==plsqlParser.SIZE):
                        break

                self.state = 3297
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deallocate_unused_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEALLOCATE(self):
            return self.getToken(plsqlParser.DEALLOCATE, 0)

        def UNUSED(self):
            return self.getToken(plsqlParser.UNUSED, 0)

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def size_clause(self):
            return self.getTypedRuleContext(plsqlParser.Size_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_deallocate_unused_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeallocate_unused_clause" ):
                return visitor.visitDeallocate_unused_clause(self)
            else:
                return visitor.visitChildren(self)




    def deallocate_unused_clause(self):

        localctx = plsqlParser.Deallocate_unused_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_deallocate_unused_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3300
            self.match(plsqlParser.DEALLOCATE)
            self.state = 3301
            self.match(plsqlParser.UNUSED)
            self.state = 3304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.KEEP:
                self.state = 3302
                self.match(plsqlParser.KEEP)
                self.state = 3303
                self.size_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upgrade_table_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPGRADE(self):
            return self.getToken(plsqlParser.UPGRADE, 0)

        def column_properties(self):
            return self.getTypedRuleContext(plsqlParser.Column_propertiesContext,0)


        def INCLUDING(self):
            return self.getToken(plsqlParser.INCLUDING, 0)

        def DATA(self):
            return self.getToken(plsqlParser.DATA, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_upgrade_table_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpgrade_table_clause" ):
                return visitor.visitUpgrade_table_clause(self)
            else:
                return visitor.visitChildren(self)




    def upgrade_table_clause(self):

        localctx = plsqlParser.Upgrade_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_upgrade_table_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3306
            self.match(plsqlParser.UPGRADE)

            self.state = 3308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 3307
                self.match(plsqlParser.NOT)


            self.state = 3310
            self.match(plsqlParser.INCLUDING)
            self.state = 3311
            self.match(plsqlParser.DATA)
            self.state = 3313
            self.column_properties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Records_per_block_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORDS_PER_BLOCK(self):
            return self.getToken(plsqlParser.RECORDS_PER_BLOCK, 0)

        def MINIMIZE(self):
            return self.getToken(plsqlParser.MINIMIZE, 0)

        def NOMINIMIZE(self):
            return self.getToken(plsqlParser.NOMINIMIZE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_records_per_block_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecords_per_block_clause" ):
                return visitor.visitRecords_per_block_clause(self)
            else:
                return visitor.visitChildren(self)




    def records_per_block_clause(self):

        localctx = plsqlParser.Records_per_block_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_records_per_block_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.MINIMIZE or _la==plsqlParser.NOMINIMIZE:
                self.state = 3315
                _la = self._input.LA(1)
                if not(_la==plsqlParser.MINIMIZE or _la==plsqlParser.NOMINIMIZE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3318
            self.match(plsqlParser.RECORDS_PER_BLOCK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_iot_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_org_table_clause(self):
            return self.getTypedRuleContext(plsqlParser.Index_org_table_clauseContext,0)


        def alter_overflow_clause(self):
            return self.getTypedRuleContext(plsqlParser.Alter_overflow_clauseContext,0)


        def alter_mapping_table_clause(self):
            return self.getTypedRuleContext(plsqlParser.Alter_mapping_table_clauseContext,0)


        def COALESCE(self):
            return self.getToken(plsqlParser.COALESCE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_iot_clauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_iot_clauses" ):
                return visitor.visitAlter_iot_clauses(self)
            else:
                return visitor.visitChildren(self)




    def alter_iot_clauses(self):

        localctx = plsqlParser.Alter_iot_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_alter_iot_clauses)
        try:
            self.state = 3324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3320
                self.index_org_table_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3321
                self.alter_overflow_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3322
                self.alter_mapping_table_clause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3323
                self.match(plsqlParser.COALESCE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_org_table_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapping_table_clause(self):
            return self.getTypedRuleContext(plsqlParser.Mapping_table_clauseContext,0)


        def PCTTHRESHOLD(self):
            return self.getToken(plsqlParser.PCTTHRESHOLD, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def key_compression(self):
            return self.getTypedRuleContext(plsqlParser.Key_compressionContext,0)


        def index_org_overflow_clause(self):
            return self.getTypedRuleContext(plsqlParser.Index_org_overflow_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_index_org_table_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_org_table_clause" ):
                return visitor.visitIndex_org_table_clause(self)
            else:
                return visitor.visitChildren(self)




    def index_org_table_clause(self):

        localctx = plsqlParser.Index_org_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_index_org_table_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MAPPING, plsqlParser.NOMAPPING]:
                self.state = 3326
                self.mapping_table_clause()
                pass
            elif token in [plsqlParser.PCTTHRESHOLD]:
                self.state = 3327
                self.match(plsqlParser.PCTTHRESHOLD)
                self.state = 3328
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                self.state = 3329
                self.key_compression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INCLUDING or _la==plsqlParser.OVERFLOW:
                self.state = 3332
                self.index_org_overflow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_table_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAPPING(self):
            return self.getToken(plsqlParser.MAPPING, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def NOMAPPING(self):
            return self.getToken(plsqlParser.NOMAPPING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_mapping_table_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping_table_clause" ):
                return visitor.visitMapping_table_clause(self)
            else:
                return visitor.visitChildren(self)




    def mapping_table_clause(self):

        localctx = plsqlParser.Mapping_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_mapping_table_clause)
        try:
            self.state = 3338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MAPPING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3335
                self.match(plsqlParser.MAPPING)
                self.state = 3336
                self.match(plsqlParser.TABLE)
                pass
            elif token in [plsqlParser.NOMAPPING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3337
                self.match(plsqlParser.NOMAPPING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_org_overflow_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERFLOW(self):
            return self.getToken(plsqlParser.OVERFLOW, 0)

        def INCLUDING(self):
            return self.getToken(plsqlParser.INCLUDING, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def segment_attributes_clause(self):
            return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_index_org_overflow_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_org_overflow_clause" ):
                return visitor.visitIndex_org_overflow_clause(self)
            else:
                return visitor.visitChildren(self)




    def index_org_overflow_clause(self):

        localctx = plsqlParser.Index_org_overflow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_index_org_overflow_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INCLUDING:
                self.state = 3340
                self.match(plsqlParser.INCLUDING)
                self.state = 3341
                self.column_name()


            self.state = 3344
            self.match(plsqlParser.OVERFLOW)
            self.state = 3346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                self.state = 3345
                self.segment_attributes_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_overflow_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_overflow_clause(self):
            return self.getTypedRuleContext(plsqlParser.Add_overflow_clauseContext,0)


        def OVERFLOW(self):
            return self.getToken(plsqlParser.OVERFLOW, 0)

        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,i)


        def allocate_extent_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Allocate_extent_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Allocate_extent_clauseContext,i)


        def shrink_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Shrink_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Shrink_clauseContext,i)


        def deallocate_unused_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Deallocate_unused_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Deallocate_unused_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_overflow_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_overflow_clause" ):
                return visitor.visitAlter_overflow_clause(self)
            else:
                return visitor.visitChildren(self)




    def alter_overflow_clause(self):

        localctx = plsqlParser.Alter_overflow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_alter_overflow_clause)
        self._la = 0 # Token type
        try:
            self.state = 3358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3348
                self.add_overflow_clause()
                pass
            elif token in [plsqlParser.OVERFLOW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3349
                self.match(plsqlParser.OVERFLOW)
                self.state = 3354 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3354
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.INITRANS, plsqlParser.LOGGING, plsqlParser.NOLOGGING, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE, plsqlParser.TABLESPACE]:
                        self.state = 3350
                        self.segment_attributes_clause()
                        pass
                    elif token in [plsqlParser.ALLOCATE]:
                        self.state = 3351
                        self.allocate_extent_clause()
                        pass
                    elif token in [plsqlParser.SHRINK]:
                        self.state = 3352
                        self.shrink_clause()
                        pass
                    elif token in [plsqlParser.DEALLOCATE]:
                        self.state = 3353
                        self.deallocate_unused_clause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3356 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.ALLOCATE or _la==plsqlParser.DEALLOCATE or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or ((((_la - 313)) & ~0x3f) == 0 and ((1 << (_la - 313)) & ((1 << (plsqlParser.NOLOGGING - 313)) | (1 << (plsqlParser.PCTFREE - 313)) | (1 << (plsqlParser.PCTUSED - 313)))) != 0) or ((((_la - 455)) & ~0x3f) == 0 and ((1 << (_la - 455)) & ((1 << (plsqlParser.SHRINK - 455)) | (1 << (plsqlParser.STORAGE - 455)) | (1 << (plsqlParser.TABLESPACE - 455)))) != 0)):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_overflow_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def OVERFLOW(self):
            return self.getToken(plsqlParser.OVERFLOW, 0)

        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,i)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_add_overflow_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_overflow_clause" ):
                return visitor.visitAdd_overflow_clause(self)
            else:
                return visitor.visitChildren(self)




    def add_overflow_clause(self):

        localctx = plsqlParser.Add_overflow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_add_overflow_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3360
            self.match(plsqlParser.ADD)
            self.state = 3361
            self.match(plsqlParser.OVERFLOW)
            self.state = 3363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                self.state = 3362
                self.segment_attributes_clause()


            self.state = 3378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.state = 3365
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3373 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 3366
                        self.match(plsqlParser.COMMA)


                    self.state = 3369
                    self.match(plsqlParser.PARTITION)
                    self.state = 3371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                        self.state = 3370
                        self.segment_attributes_clause()


                    self.state = 3375 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                        break

                self.state = 3377
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shrink_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHRINK(self):
            return self.getToken(plsqlParser.SHRINK, 0)

        def SPACE_KEYWORD(self):
            return self.getToken(plsqlParser.SPACE_KEYWORD, 0)

        def COMPACT(self):
            return self.getToken(plsqlParser.COMPACT, 0)

        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_shrink_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShrink_clause" ):
                return visitor.visitShrink_clause(self)
            else:
                return visitor.visitChildren(self)




    def shrink_clause(self):

        localctx = plsqlParser.Shrink_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_shrink_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3380
            self.match(plsqlParser.SHRINK)
            self.state = 3381
            self.match(plsqlParser.SPACE_KEYWORD)
            self.state = 3383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPACT:
                self.state = 3382
                self.match(plsqlParser.COMPACT)


            self.state = 3386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CASCADE:
                self.state = 3385
                self.match(plsqlParser.CASCADE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_mapping_table_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAPPING(self):
            return self.getToken(plsqlParser.MAPPING, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def allocate_extent_clause(self):
            return self.getTypedRuleContext(plsqlParser.Allocate_extent_clauseContext,0)


        def deallocate_unused_clause(self):
            return self.getTypedRuleContext(plsqlParser.Deallocate_unused_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_mapping_table_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_mapping_table_clause" ):
                return visitor.visitAlter_mapping_table_clause(self)
            else:
                return visitor.visitChildren(self)




    def alter_mapping_table_clause(self):

        localctx = plsqlParser.Alter_mapping_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_alter_mapping_table_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3388
            self.match(plsqlParser.MAPPING)
            self.state = 3389
            self.match(plsqlParser.TABLE)
            self.state = 3392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ALLOCATE]:
                self.state = 3390
                self.allocate_extent_clause()
                pass
            elif token in [plsqlParser.DEALLOCATE]:
                self.state = 3391
                self.deallocate_unused_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraint_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def out_of_line_ref_constraint(self):
            return self.getTypedRuleContext(plsqlParser.Out_of_line_ref_constraintContext,0)


        def out_of_line_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Out_of_line_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Out_of_line_constraintContext,i)


        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def constraint_state(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_stateContext,0)


        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def PRIMARY(self):
            return self.getToken(plsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def old_constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Old_constraint_nameContext,0)


        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def new_constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.New_constraint_nameContext,0)


        def drop_constraint_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Drop_constraint_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Drop_constraint_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_constraint_clauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_clauses" ):
                return visitor.visitConstraint_clauses(self)
            else:
                return visitor.visitChildren(self)




    def constraint_clauses(self):

        localctx = plsqlParser.Constraint_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_constraint_clauses)
        self._la = 0 # Token type
        try:
            self.state = 3440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3394
                self.match(plsqlParser.ADD)
                self.state = 3395
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3403
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
                if la_ == 1:
                    self.state = 3399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==plsqlParser.CHECK or _la==plsqlParser.CONSTRAINT or _la==plsqlParser.FOREIGN or _la==plsqlParser.PRIMARY or _la==plsqlParser.UNIQUE:
                        self.state = 3396
                        self.out_of_line_constraint()
                        self.state = 3401
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 3402
                    self.out_of_line_ref_constraint()
                    pass


                self.state = 3405
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3406
                self.match(plsqlParser.ADD)
                self.state = 3414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
                if la_ == 1:
                    self.state = 3410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==plsqlParser.CHECK or _la==plsqlParser.CONSTRAINT or _la==plsqlParser.FOREIGN or _la==plsqlParser.PRIMARY or _la==plsqlParser.UNIQUE:
                        self.state = 3407
                        self.out_of_line_constraint()
                        self.state = 3412
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 3413
                    self.out_of_line_ref_constraint()
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3416
                self.match(plsqlParser.MODIFY)
                self.state = 3423
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.CONSTRAINT]:
                    self.state = 3417
                    self.match(plsqlParser.CONSTRAINT)
                    self.state = 3418
                    self.constraint_name()
                    pass
                elif token in [plsqlParser.PRIMARY]:
                    self.state = 3419
                    self.match(plsqlParser.PRIMARY)
                    self.state = 3420
                    self.match(plsqlParser.KEY)
                    pass
                elif token in [plsqlParser.UNIQUE]:
                    self.state = 3421
                    self.match(plsqlParser.UNIQUE)
                    self.state = 3422
                    self.paren_column_list()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3425
                self.constraint_state()
                self.state = 3427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CASCADE:
                    self.state = 3426
                    self.match(plsqlParser.CASCADE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3429
                self.match(plsqlParser.RENAME)
                self.state = 3430
                self.match(plsqlParser.CONSTRAINT)
                self.state = 3431
                self.old_constraint_name()
                self.state = 3432
                self.match(plsqlParser.TO)
                self.state = 3433
                self.new_constraint_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3436 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3435
                        self.drop_constraint_clause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3438 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,458,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_old_constraint_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOld_constraint_name" ):
                return visitor.visitOld_constraint_name(self)
            else:
                return visitor.visitChildren(self)




    def old_constraint_name(self):

        localctx = plsqlParser.Old_constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_old_constraint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3442
            self.constraint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_new_constraint_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNew_constraint_name" ):
                return visitor.visitNew_constraint_name(self)
            else:
                return visitor.visitChildren(self)




    def new_constraint_name(self):

        localctx = plsqlParser.New_constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_new_constraint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3444
            self.constraint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_constraint_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def drop_primary_key_or_unique_or_generic_clause(self):
            return self.getTypedRuleContext(plsqlParser.Drop_primary_key_or_unique_or_generic_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_constraint_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_constraint_clause" ):
                return visitor.visitDrop_constraint_clause(self)
            else:
                return visitor.visitChildren(self)




    def drop_constraint_clause(self):

        localctx = plsqlParser.Drop_constraint_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_drop_constraint_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3446
            self.match(plsqlParser.DROP)
            self.state = 3447
            self.drop_primary_key_or_unique_or_generic_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_primary_key_or_unique_or_generic_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(plsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_primary_key_or_unique_or_generic_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_primary_key_or_unique_or_generic_clause" ):
                return visitor.visitDrop_primary_key_or_unique_or_generic_clause(self)
            else:
                return visitor.visitChildren(self)




    def drop_primary_key_or_unique_or_generic_clause(self):

        localctx = plsqlParser.Drop_primary_key_or_unique_or_generic_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_drop_primary_key_or_unique_or_generic_clause)
        self._la = 0 # Token type
        try:
            self.state = 3466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.PRIMARY, plsqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3453
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.PRIMARY]:
                    self.state = 3449
                    self.match(plsqlParser.PRIMARY)
                    self.state = 3450
                    self.match(plsqlParser.KEY)
                    pass
                elif token in [plsqlParser.UNIQUE]:
                    self.state = 3451
                    self.match(plsqlParser.UNIQUE)
                    self.state = 3452
                    self.paren_column_list()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CASCADE:
                    self.state = 3455
                    self.match(plsqlParser.CASCADE)


                self.state = 3459
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
                if la_ == 1:
                    self.state = 3458
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.DROP or _la==plsqlParser.KEEP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [plsqlParser.CONSTRAINT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3461
                self.match(plsqlParser.CONSTRAINT)
                self.state = 3462
                self.constraint_name()
                self.state = 3464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CASCADE:
                    self.state = 3463
                    self.match(plsqlParser.CASCADE)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_modify_drop_column_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Add_modify_drop_column_clausesContext,0)


        def rename_column_clause(self):
            return self.getTypedRuleContext(plsqlParser.Rename_column_clauseContext,0)


        def modify_collection_retrieval(self):
            return self.getTypedRuleContext(plsqlParser.Modify_collection_retrievalContext,0)


        def modify_lob_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Modify_lob_storage_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_column_clauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_clauses" ):
                return visitor.visitColumn_clauses(self)
            else:
                return visitor.visitChildren(self)




    def column_clauses(self):

        localctx = plsqlParser.Column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_column_clauses)
        try:
            self.state = 3472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3468
                self.add_modify_drop_column_clauses()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3469
                self.rename_column_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3470
                self.modify_collection_retrieval()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3471
                self.modify_lob_storage_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_modify_drop_column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_column_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Add_column_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Add_column_clauseContext,i)


        def modify_column_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Modify_column_clausesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Modify_column_clausesContext,i)


        def alter_column_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Alter_column_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Alter_column_clauseContext,i)


        def drop_column_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Drop_column_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Drop_column_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_add_modify_drop_column_clauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_modify_drop_column_clauses" ):
                return visitor.visitAdd_modify_drop_column_clauses(self)
            else:
                return visitor.visitChildren(self)




    def add_modify_drop_column_clauses(self):

        localctx = plsqlParser.Add_modify_drop_column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_add_modify_drop_column_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3478 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3478
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.ADD]:
                        self.state = 3474
                        self.add_column_clause()
                        pass
                    elif token in [plsqlParser.MODIFY]:
                        self.state = 3475
                        self.modify_column_clauses()
                        pass
                    elif token in [plsqlParser.ALTER]:
                        self.state = 3476
                        self.alter_column_clause()
                        pass
                    elif token in [plsqlParser.DROP, plsqlParser.SET]:
                        self.state = 3477
                        self.drop_column_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 3480 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,467,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def column_properties(self):
            return self.getTypedRuleContext(plsqlParser.Column_propertiesContext,0)


        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_definitionContext,i)


        def virtual_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Virtual_column_definitionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Virtual_column_definitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_add_column_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_column_clause" ):
                return visitor.visitAdd_column_clause(self)
            else:
                return visitor.visitChildren(self)




    def add_column_clause(self):

        localctx = plsqlParser.Add_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_add_column_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3482
            self.match(plsqlParser.ADD)
            self.state = 3484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN:
                self.state = 3483
                self.match(plsqlParser.COLUMN)


            self.state = 3505
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LEFT_PAREN]:
                self.state = 3486
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3495 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3495
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
                    if la_ == 1:
                        self.state = 3488
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 3487
                            self.match(plsqlParser.COMMA)


                        self.state = 3490
                        self.column_definition()
                        pass

                    elif la_ == 2:
                        self.state = 3492
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 3491
                            self.match(plsqlParser.COMMA)


                        self.state = 3494
                        self.virtual_column_definition()
                        pass


                    self.state = 3497 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 3499
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 3503
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
                if la_ == 1:
                    self.state = 3501
                    self.column_definition()
                    pass

                elif la_ == 2:
                    self.state = 3502
                    self.virtual_column_definition()
                    pass


                pass
            else:
                raise NoViableAltException(self)

            self.state = 3508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN or _la==plsqlParser.LOB or _la==plsqlParser.NESTED or _la==plsqlParser.VARRAY or _la==plsqlParser.XMLTYPE:
                self.state = 3507
                self.column_properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def modify_col_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Modify_col_propertiesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Modify_col_propertiesContext,i)


        def modify_col_substitutable(self):
            return self.getTypedRuleContext(plsqlParser.Modify_col_substitutableContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_modify_column_clauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModify_column_clauses" ):
                return visitor.visitModify_column_clauses(self)
            else:
                return visitor.visitChildren(self)




    def modify_column_clauses(self):

        localctx = plsqlParser.Modify_column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_modify_column_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3510
            self.match(plsqlParser.MODIFY)
            self.state = 3524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LEFT_PAREN]:
                self.state = 3511
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3516 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 3512
                        self.match(plsqlParser.COMMA)


                    self.state = 3515
                    self.modify_col_properties()
                    self.state = 3518 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 3520
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 3522
                self.modify_col_properties()
                pass
            elif token in [plsqlParser.COLUMN]:
                self.state = 3523
                self.modify_col_substitutable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def datatype(self):
            return self.getTypedRuleContext(plsqlParser.DatatypeContext,0)


        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_column_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_column_clause" ):
                return visitor.visitAlter_column_clause(self)
            else:
                return visitor.visitChildren(self)




    def alter_column_clause(self):

        localctx = plsqlParser.Alter_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_alter_column_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3526
            self.match(plsqlParser.ALTER)
            self.state = 3528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN:
                self.state = 3527
                self.match(plsqlParser.COLUMN)


            self.state = 3530
            self.column_name()
            self.state = 3540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.DROP, plsqlParser.SET]:
                self.state = 3531
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DROP or _la==plsqlParser.SET):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3532
                self.match(plsqlParser.NOT)
                self.state = 3533
                self.match(plsqlParser.NULL)
                pass
            elif token in [plsqlParser.TYPE]:
                self.state = 3534
                self.match(plsqlParser.TYPE)
                self.state = 3535
                self.datatype()
                self.state = 3538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.USING:
                    self.state = 3536
                    self.match(plsqlParser.USING)

                    self.state = 3537
                    self.expression(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_col_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def datatype(self):
            return self.getTypedRuleContext(plsqlParser.DatatypeContext,0)


        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def ENCRYPT(self):
            return self.getToken(plsqlParser.ENCRYPT, 0)

        def encryption_spec(self):
            return self.getTypedRuleContext(plsqlParser.Encryption_specContext,0)


        def DECRYPT(self):
            return self.getToken(plsqlParser.DECRYPT, 0)

        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Inline_constraintContext,i)


        def lob_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Lob_storage_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_modify_col_properties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModify_col_properties" ):
                return visitor.visitModify_col_properties(self)
            else:
                return visitor.visitChildren(self)




    def modify_col_properties(self):

        localctx = plsqlParser.Modify_col_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_modify_col_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3542
            self.column_name()
            self.state = 3544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,482,self._ctx)
            if la_ == 1:
                self.state = 3543
                self.datatype()


            self.state = 3548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT:
                self.state = 3546
                self.match(plsqlParser.DEFAULT)
                self.state = 3547
                self.expression(0)


            self.state = 3553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ENCRYPT]:
                self.state = 3550
                self.match(plsqlParser.ENCRYPT)
                self.state = 3551
                self.encryption_spec()
                pass
            elif token in [plsqlParser.DECRYPT]:
                self.state = 3552
                self.match(plsqlParser.DECRYPT)
                pass
            elif token in [plsqlParser.EOF, plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALTER, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHECK, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CREATE, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DELETE, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DROP, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSERT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOB, plsqlParser.LOCK, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NOT, plsqlParser.NVL, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIMARY, plsqlParser.PROCEDURE, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCES, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNIQUE, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATE, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITH, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.RIGHT_PAREN, plsqlParser.COMMA, plsqlParser.SEMICOLON, plsqlParser.REGULAR_ID]:
                pass
            else:
                pass
            self.state = 3558
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,485,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3555
                    self.inline_constraint() 
                self.state = 3560
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,485,self._ctx)

            self.state = 3562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOB:
                self.state = 3561
                self.lob_storage_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_col_substitutableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def SUBSTITUTABLE(self):
            return self.getToken(plsqlParser.SUBSTITUTABLE, 0)

        def AT(self):
            return self.getToken(plsqlParser.AT, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def LEVELS(self):
            return self.getToken(plsqlParser.LEVELS, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_modify_col_substitutable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModify_col_substitutable" ):
                return visitor.visitModify_col_substitutable(self)
            else:
                return visitor.visitChildren(self)




    def modify_col_substitutable(self):

        localctx = plsqlParser.Modify_col_substitutableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_modify_col_substitutable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3564
            self.match(plsqlParser.COLUMN)
            self.state = 3565
            self.column_name()
            self.state = 3567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 3566
                self.match(plsqlParser.NOT)


            self.state = 3569
            self.match(plsqlParser.SUBSTITUTABLE)
            self.state = 3570
            self.match(plsqlParser.AT)
            self.state = 3571
            self.match(plsqlParser.ALL)
            self.state = 3572
            self.match(plsqlParser.LEVELS)
            self.state = 3574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FORCE:
                self.state = 3573
                self.match(plsqlParser.FORCE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._column_name = None # Column_nameContext
            self.names = list() # of Column_nameContexts

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def UNUSED(self):
            return self.getToken(plsqlParser.UNUSED, 0)

        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def CASCADE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CASCADE)
            else:
                return self.getToken(plsqlParser.CASCADE, i)

        def CONSTRAINTS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CONSTRAINTS)
            else:
                return self.getToken(plsqlParser.CONSTRAINTS, i)

        def INVALIDATE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INVALIDATE)
            else:
                return self.getToken(plsqlParser.INVALIDATE, i)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def CHECKPOINT(self):
            return self.getToken(plsqlParser.CHECKPOINT, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def COLUMNS(self):
            return self.getToken(plsqlParser.COLUMNS, 0)

        def CONTINUE(self):
            return self.getToken(plsqlParser.CONTINUE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_drop_column_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_column_clause" ):
                return visitor.visitDrop_column_clause(self)
            else:
                return visitor.visitChildren(self)




    def drop_column_clause(self):

        localctx = plsqlParser.Drop_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_drop_column_clause)
        self._la = 0 # Token type
        try:
            self.state = 3638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3576
                self.match(plsqlParser.SET)
                self.state = 3577
                self.match(plsqlParser.UNUSED)
                self.state = 3591
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.COLUMN]:
                    self.state = 3578
                    self.match(plsqlParser.COLUMN)
                    self.state = 3579
                    localctx._column_name = self.column_name()
                    localctx.names.append(localctx._column_name)
                    pass
                elif token in [plsqlParser.LEFT_PAREN]:
                    self.state = 3580
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 3585 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3582
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 3581
                            self.match(plsqlParser.COMMA)


                        self.state = 3584
                        localctx._column_name = self.column_name()
                        localctx.names.append(localctx._column_name)
                        self.state = 3587 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                            break

                    self.state = 3589
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.CASCADE or _la==plsqlParser.INVALIDATE:
                    self.state = 3596
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.CASCADE]:
                        self.state = 3593
                        self.match(plsqlParser.CASCADE)
                        self.state = 3594
                        self.match(plsqlParser.CONSTRAINTS)
                        pass
                    elif token in [plsqlParser.INVALIDATE]:
                        self.state = 3595
                        self.match(plsqlParser.INVALIDATE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3601
                self.match(plsqlParser.DROP)
                self.state = 3615
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.COLUMN]:
                    self.state = 3602
                    self.match(plsqlParser.COLUMN)
                    self.state = 3603
                    localctx._column_name = self.column_name()
                    localctx.names.append(localctx._column_name)
                    pass
                elif token in [plsqlParser.LEFT_PAREN]:
                    self.state = 3604
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 3609 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3606
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 3605
                            self.match(plsqlParser.COMMA)


                        self.state = 3608
                        localctx._column_name = self.column_name()
                        localctx.names.append(localctx._column_name)
                        self.state = 3611 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.COMMA - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                            break

                    self.state = 3613
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.CASCADE or _la==plsqlParser.INVALIDATE:
                    self.state = 3620
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.CASCADE]:
                        self.state = 3617
                        self.match(plsqlParser.CASCADE)
                        self.state = 3618
                        self.match(plsqlParser.CONSTRAINTS)
                        pass
                    elif token in [plsqlParser.INVALIDATE]:
                        self.state = 3619
                        self.match(plsqlParser.INVALIDATE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3624
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CHECKPOINT:
                    self.state = 3625
                    self.match(plsqlParser.CHECKPOINT)
                    self.state = 3626
                    self.match(plsqlParser.UNSIGNED_INTEGER)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3629
                self.match(plsqlParser.DROP)
                self.state = 3634
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.UNUSED]:
                    self.state = 3630
                    self.match(plsqlParser.UNUSED)
                    self.state = 3631
                    self.match(plsqlParser.COLUMNS)
                    pass
                elif token in [plsqlParser.COLUMNS]:
                    self.state = 3632
                    self.match(plsqlParser.COLUMNS)
                    self.state = 3633
                    self.match(plsqlParser.CONTINUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3636
                self.match(plsqlParser.CHECKPOINT)
                self.state = 3637
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def old_column_name(self):
            return self.getTypedRuleContext(plsqlParser.Old_column_nameContext,0)


        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def new_column_name(self):
            return self.getTypedRuleContext(plsqlParser.New_column_nameContext,0)


        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_rename_column_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRename_column_clause" ):
                return visitor.visitRename_column_clause(self)
            else:
                return visitor.visitChildren(self)




    def rename_column_clause(self):

        localctx = plsqlParser.Rename_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_rename_column_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3640
            self.match(plsqlParser.RENAME)
            self.state = 3642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN:
                self.state = 3641
                self.match(plsqlParser.COLUMN)


            self.state = 3644
            self.old_column_name()
            self.state = 3645
            self.match(plsqlParser.TO)
            self.state = 3646
            self.new_column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_old_column_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOld_column_name" ):
                return visitor.visitOld_column_name(self)
            else:
                return visitor.visitChildren(self)




    def old_column_name(self):

        localctx = plsqlParser.Old_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_old_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3648
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_new_column_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNew_column_name" ):
                return visitor.visitNew_column_name(self)
            else:
                return visitor.visitChildren(self)




    def new_column_name(self):

        localctx = plsqlParser.New_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_new_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3650
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_collection_retrievalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def NESTED(self):
            return self.getToken(plsqlParser.NESTED, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def collection_item(self):
            return self.getTypedRuleContext(plsqlParser.Collection_itemContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def LOCATOR(self):
            return self.getToken(plsqlParser.LOCATOR, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_modify_collection_retrieval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModify_collection_retrieval" ):
                return visitor.visitModify_collection_retrieval(self)
            else:
                return visitor.visitChildren(self)




    def modify_collection_retrieval(self):

        localctx = plsqlParser.Modify_collection_retrievalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_modify_collection_retrieval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3652
            self.match(plsqlParser.MODIFY)
            self.state = 3653
            self.match(plsqlParser.NESTED)
            self.state = 3654
            self.match(plsqlParser.TABLE)
            self.state = 3655
            self.collection_item()
            self.state = 3656
            self.match(plsqlParser.RETURN)
            self.state = 3657
            self.match(plsqlParser.AS)
            self.state = 3658
            _la = self._input.LA(1)
            if not(_la==plsqlParser.LOCATOR or _la==plsqlParser.VALUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_collection_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollection_item" ):
                return visitor.visitCollection_item(self)
            else:
                return visitor.visitChildren(self)




    def collection_item(self):

        localctx = plsqlParser.Collection_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_collection_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3660
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_lob_storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def LOB(self):
            return self.getToken(plsqlParser.LOB, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def lob_item(self):
            return self.getTypedRuleContext(plsqlParser.Lob_itemContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def modify_lob_parameters(self):
            return self.getTypedRuleContext(plsqlParser.Modify_lob_parametersContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_modify_lob_storage_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModify_lob_storage_clause" ):
                return visitor.visitModify_lob_storage_clause(self)
            else:
                return visitor.visitChildren(self)




    def modify_lob_storage_clause(self):

        localctx = plsqlParser.Modify_lob_storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_modify_lob_storage_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3662
            self.match(plsqlParser.MODIFY)
            self.state = 3663
            self.match(plsqlParser.LOB)
            self.state = 3664
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3665
            self.lob_item()
            self.state = 3666
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 3667
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3668
            self.modify_lob_parameters()
            self.state = 3669
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_lob_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storage_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Storage_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Storage_clauseContext,i)


        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def REBUILD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.REBUILD)
            else:
                return self.getToken(plsqlParser.REBUILD, i)

        def FREEPOOLS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FREEPOOLS)
            else:
                return self.getToken(plsqlParser.FREEPOOLS, i)

        def lob_retention_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_retention_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_retention_clauseContext,i)


        def lob_deduplicate_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_deduplicate_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_deduplicate_clauseContext,i)


        def lob_compression_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_compression_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_compression_clauseContext,i)


        def ENCRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ENCRYPT)
            else:
                return self.getToken(plsqlParser.ENCRYPT, i)

        def encryption_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Encryption_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Encryption_specContext,i)


        def DECRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DECRYPT)
            else:
                return self.getToken(plsqlParser.DECRYPT, i)

        def CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CACHE)
            else:
                return self.getToken(plsqlParser.CACHE, i)

        def allocate_extent_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Allocate_extent_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Allocate_extent_clauseContext,i)


        def shrink_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Shrink_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Shrink_clauseContext,i)


        def deallocate_unused_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Deallocate_unused_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Deallocate_unused_clauseContext,i)


        def PCTVERSION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PCTVERSION)
            else:
                return self.getToken(plsqlParser.PCTVERSION, i)

        def NOCACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NOCACHE)
            else:
                return self.getToken(plsqlParser.NOCACHE, i)

        def READS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.READS)
            else:
                return self.getToken(plsqlParser.READS, i)

        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Logging_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_modify_lob_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModify_lob_parameters" ):
                return visitor.visitModify_lob_parameters(self)
            else:
                return visitor.visitChildren(self)




    def modify_lob_parameters(self):

        localctx = plsqlParser.Modify_lob_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_modify_lob_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3695 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3695
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
                if la_ == 1:
                    self.state = 3671
                    self.storage_clause()
                    pass

                elif la_ == 2:
                    self.state = 3672
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.FREEPOOLS or _la==plsqlParser.PCTVERSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3673
                    self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass

                elif la_ == 3:
                    self.state = 3674
                    self.match(plsqlParser.REBUILD)
                    self.state = 3675
                    self.match(plsqlParser.FREEPOOLS)
                    pass

                elif la_ == 4:
                    self.state = 3676
                    self.lob_retention_clause()
                    pass

                elif la_ == 5:
                    self.state = 3677
                    self.lob_deduplicate_clause()
                    pass

                elif la_ == 6:
                    self.state = 3678
                    self.lob_compression_clause()
                    pass

                elif la_ == 7:
                    self.state = 3679
                    self.match(plsqlParser.ENCRYPT)
                    self.state = 3680
                    self.encryption_spec()
                    pass

                elif la_ == 8:
                    self.state = 3681
                    self.match(plsqlParser.DECRYPT)
                    pass

                elif la_ == 9:
                    self.state = 3682
                    self.match(plsqlParser.CACHE)
                    pass

                elif la_ == 10:
                    self.state = 3687
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,503,self._ctx)
                    if la_ == 1:
                        self.state = 3683
                        self.match(plsqlParser.CACHE)
                        pass

                    elif la_ == 2:
                        self.state = 3684
                        self.match(plsqlParser.NOCACHE)
                        pass

                    elif la_ == 3:
                        self.state = 3685
                        self.match(plsqlParser.CACHE)
                        self.state = 3686
                        self.match(plsqlParser.READS)
                        pass


                    self.state = 3690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING:
                        self.state = 3689
                        self.logging_clause()


                    pass

                elif la_ == 11:
                    self.state = 3692
                    self.allocate_extent_clause()
                    pass

                elif la_ == 12:
                    self.state = 3693
                    self.shrink_clause()
                    pass

                elif la_ == 13:
                    self.state = 3694
                    self.deallocate_unused_clause()
                    pass


                self.state = 3697 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.ALLOCATE or _la==plsqlParser.CACHE or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (plsqlParser.COMPRESS - 81)) | (1 << (plsqlParser.DEALLOCATE - 81)) | (1 << (plsqlParser.DECRYPT - 81)) | (1 << (plsqlParser.DEDUPLICATE - 81)))) != 0) or _la==plsqlParser.ENCRYPT or _la==plsqlParser.FREEPOOLS or _la==plsqlParser.KEEP_DUPLICATES or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (plsqlParser.NOCACHE - 308)) | (1 << (plsqlParser.NOCOMPRESS - 308)) | (1 << (plsqlParser.PCTVERSION - 308)))) != 0) or ((((_la - 396)) & ~0x3f) == 0 and ((1 << (_la - 396)) & ((1 << (plsqlParser.REBUILD - 396)) | (1 << (plsqlParser.RETENTION - 396)) | (1 << (plsqlParser.SHRINK - 396)))) != 0) or _la==plsqlParser.STORAGE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_function

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_function" ):
                return visitor.visitDrop_function(self)
            else:
                return visitor.visitChildren(self)




    def drop_function(self):

        localctx = plsqlParser.Drop_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_drop_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3699
            self.match(plsqlParser.DROP)
            self.state = 3700
            self.match(plsqlParser.FUNCTION)
            self.state = 3701
            self.function_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_function

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_function" ):
                return visitor.visitAlter_function(self)
            else:
                return visitor.visitChildren(self)




    def alter_function(self):

        localctx = plsqlParser.Alter_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_alter_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3703
            self.match(plsqlParser.ALTER)
            self.state = 3704
            self.match(plsqlParser.FUNCTION)
            self.state = 3705
            self.function_name()
            self.state = 3706
            self.match(plsqlParser.COMPILE)
            self.state = 3708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.state = 3707
                self.match(plsqlParser.DEBUG)


            self.state = 3713
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,508,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3710
                    self.compiler_parameters_clause() 
                self.state = 3715
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,508,self._ctx)

            self.state = 3718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REUSE:
                self.state = 3716
                self.match(plsqlParser.REUSE)
                self.state = 3717
                self.match(plsqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_function_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def implementation_type_name(self):
            return self.getTypedRuleContext(plsqlParser.Implementation_type_nameContext,0)


        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ParameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def invoker_rights_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Invoker_rights_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,i)


        def parallel_enable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Parallel_enable_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Parallel_enable_clauseContext,i)


        def result_cache_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Result_cache_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Result_cache_clauseContext,i)


        def DETERMINISTIC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DETERMINISTIC)
            else:
                return self.getToken(plsqlParser.DETERMINISTIC, i)

        def PIPELINED(self):
            return self.getToken(plsqlParser.PIPELINED, 0)

        def AGGREGATE(self):
            return self.getToken(plsqlParser.AGGREGATE, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_create_function_body

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_function_body" ):
                return visitor.visitCreate_function_body(self)
            else:
                return visitor.visitChildren(self)




    def create_function_body(self):

        localctx = plsqlParser.Create_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_create_function_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CREATE:
                self.state = 3720
                self.match(plsqlParser.CREATE)
                self.state = 3723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.OR:
                    self.state = 3721
                    self.match(plsqlParser.OR)
                    self.state = 3722
                    self.match(plsqlParser.REPLACE)




            self.state = 3727
            self.match(plsqlParser.FUNCTION)
            self.state = 3728
            self.function_name()
            self.state = 3740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 3729
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3730
                self.parameter()
                self.state = 3735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 3731
                    self.match(plsqlParser.COMMA)
                    self.state = 3732
                    self.parameter()
                    self.state = 3737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3738
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 3742
            self.match(plsqlParser.RETURN)
            self.state = 3743
            self.type_spec()
            self.state = 3750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.AUTHID or _la==plsqlParser.DETERMINISTIC or _la==plsqlParser.PARALLEL_ENABLE or _la==plsqlParser.RESULT_CACHE:
                self.state = 3748
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.AUTHID]:
                    self.state = 3744
                    self.invoker_rights_clause()
                    pass
                elif token in [plsqlParser.PARALLEL_ENABLE]:
                    self.state = 3745
                    self.parallel_enable_clause()
                    pass
                elif token in [plsqlParser.RESULT_CACHE]:
                    self.state = 3746
                    self.result_cache_clause()
                    pass
                elif token in [plsqlParser.DETERMINISTIC]:
                    self.state = 3747
                    self.match(plsqlParser.DETERMINISTIC)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,520,self._ctx)
            if la_ == 1:
                self.state = 3754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PIPELINED:
                    self.state = 3753
                    self.match(plsqlParser.PIPELINED)


                self.state = 3756
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
                if la_ == 1:
                    self.state = 3758
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.DECLARE:
                        self.state = 3757
                        self.match(plsqlParser.DECLARE)


                    self.state = 3763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CREATE - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PROCEDURE - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                        self.state = 3760
                        self.declare_spec()
                        self.state = 3765
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3766
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 3767
                    self.call_spec()
                    pass


                pass

            elif la_ == 2:
                self.state = 3770
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AGGREGATE or _la==plsqlParser.PIPELINED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3771
                self.match(plsqlParser.USING)
                self.state = 3772
                self.implementation_type_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parallel_enable_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARALLEL_ENABLE(self):
            return self.getToken(plsqlParser.PARALLEL_ENABLE, 0)

        def partition_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partition_by_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_parallel_enable_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParallel_enable_clause" ):
                return visitor.visitParallel_enable_clause(self)
            else:
                return visitor.visitChildren(self)




    def parallel_enable_clause(self):

        localctx = plsqlParser.Parallel_enable_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_parallel_enable_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3775
            self.match(plsqlParser.PARALLEL_ENABLE)
            self.state = 3777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 3776
                self.partition_by_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def ANY(self):
            return self.getToken(plsqlParser.ANY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def streaming_clause(self):
            return self.getTypedRuleContext(plsqlParser.Streaming_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_partition_by_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_by_clause" ):
                return visitor.visitPartition_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def partition_by_clause(self):

        localctx = plsqlParser.Partition_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_partition_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3779
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3780
            self.match(plsqlParser.PARTITION)
            self.state = 3781
            self.expression(0)
            self.state = 3782
            self.match(plsqlParser.BY)
            self.state = 3796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ANY]:
                self.state = 3783
                self.match(plsqlParser.ANY)
                pass
            elif token in [plsqlParser.HASH, plsqlParser.RANGE]:
                self.state = 3784
                _la = self._input.LA(1)
                if not(_la==plsqlParser.HASH or _la==plsqlParser.RANGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3785
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3786
                self.column_name()
                self.state = 3791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 3787
                    self.match(plsqlParser.COMMA)
                    self.state = 3788
                    self.column_name()
                    self.state = 3793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3794
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CLUSTER or _la==plsqlParser.ORDER:
                self.state = 3798
                self.streaming_clause()


            self.state = 3801
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_cache_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def relies_on_part(self):
            return self.getTypedRuleContext(plsqlParser.Relies_on_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_result_cache_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_cache_clause" ):
                return visitor.visitResult_cache_clause(self)
            else:
                return visitor.visitChildren(self)




    def result_cache_clause(self):

        localctx = plsqlParser.Result_cache_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_result_cache_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3803
            self.match(plsqlParser.RESULT_CACHE)
            self.state = 3805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RELIES_ON:
                self.state = 3804
                self.relies_on_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relies_on_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELIES_ON(self):
            return self.getToken(plsqlParser.RELIES_ON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def tableview_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Tableview_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_relies_on_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelies_on_part" ):
                return visitor.visitRelies_on_part(self)
            else:
                return visitor.visitChildren(self)




    def relies_on_part(self):

        localctx = plsqlParser.Relies_on_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_relies_on_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3807
            self.match(plsqlParser.RELIES_ON)
            self.state = 3808
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3809
            self.tableview_name()
            self.state = 3814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 3810
                self.match(plsqlParser.COMMA)
                self.state = 3811
                self.tableview_name()
                self.state = 3816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3817
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Streaming_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def CLUSTER(self):
            return self.getToken(plsqlParser.CLUSTER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_streaming_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStreaming_clause" ):
                return visitor.visitStreaming_clause(self)
            else:
                return visitor.visitChildren(self)




    def streaming_clause(self):

        localctx = plsqlParser.Streaming_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_streaming_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3819
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CLUSTER or _la==plsqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3820
            self.expression(0)
            self.state = 3821
            self.match(plsqlParser.BY)
            self.state = 3822
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3823
            self.column_name()
            self.state = 3828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 3824
                self.match(plsqlParser.COMMA)
                self.state = 3825
                self.column_name()
                self.state = 3830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3831
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def PACKAGE(self):
            return self.getToken(plsqlParser.PACKAGE, 0)

        def package_name(self):
            return self.getTypedRuleContext(plsqlParser.Package_nameContext,0)


        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_drop_package

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_package" ):
                return visitor.visitDrop_package(self)
            else:
                return visitor.visitChildren(self)




    def drop_package(self):

        localctx = plsqlParser.Drop_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_drop_package)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3833
            self.match(plsqlParser.DROP)
            self.state = 3834
            self.match(plsqlParser.PACKAGE)
            self.state = 3836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,528,self._ctx)
            if la_ == 1:
                self.state = 3835
                self.match(plsqlParser.BODY)


            self.state = 3838
            self.package_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def PACKAGE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PACKAGE)
            else:
                return self.getToken(plsqlParser.PACKAGE, i)

        def package_name(self):
            return self.getTypedRuleContext(plsqlParser.Package_nameContext,0)


        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def SPECIFICATION(self):
            return self.getToken(plsqlParser.SPECIFICATION, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_package

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_package" ):
                return visitor.visitAlter_package(self)
            else:
                return visitor.visitChildren(self)




    def alter_package(self):

        localctx = plsqlParser.Alter_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_alter_package)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3840
            self.match(plsqlParser.ALTER)
            self.state = 3841
            self.match(plsqlParser.PACKAGE)
            self.state = 3842
            self.package_name()
            self.state = 3843
            self.match(plsqlParser.COMPILE)
            self.state = 3845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
            if la_ == 1:
                self.state = 3844
                self.match(plsqlParser.DEBUG)


            self.state = 3848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,530,self._ctx)
            if la_ == 1:
                self.state = 3847
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BODY or _la==plsqlParser.PACKAGE or _la==plsqlParser.SPECIFICATION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3853
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,531,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3850
                    self.compiler_parameters_clause() 
                self.state = 3855
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,531,self._ctx)

            self.state = 3858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REUSE:
                self.state = 3856
                self.match(plsqlParser.REUSE)
                self.state = 3857
                self.match(plsqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def PACKAGE(self):
            return self.getToken(plsqlParser.PACKAGE, 0)

        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def package_spec(self):
            return self.getTypedRuleContext(plsqlParser.Package_specContext,0)


        def package_body(self):
            return self.getTypedRuleContext(plsqlParser.Package_bodyContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_create_package

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_package" ):
                return visitor.visitCreate_package(self)
            else:
                return visitor.visitChildren(self)




    def create_package(self):

        localctx = plsqlParser.Create_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_create_package)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3860
            self.match(plsqlParser.CREATE)
            self.state = 3863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OR:
                self.state = 3861
                self.match(plsqlParser.OR)
                self.state = 3862
                self.match(plsqlParser.REPLACE)


            self.state = 3865
            self.match(plsqlParser.PACKAGE)
            self.state = 3868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,534,self._ctx)
            if la_ == 1:
                self.state = 3866
                self.package_spec()

            elif la_ == 2:
                self.state = 3867
                self.package_body()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def package_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Package_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Package_nameContext,i)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def BEGIN(self):
            return self.getToken(plsqlParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def package_obj_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Package_obj_bodyContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Package_obj_bodyContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_body

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_body" ):
                return visitor.visitPackage_body(self)
            else:
                return visitor.visitChildren(self)




    def package_body(self):

        localctx = plsqlParser.Package_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_package_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3870
            self.match(plsqlParser.BODY)
            self.state = 3871
            self.package_name()
            self.state = 3872
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CREATE - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PROCEDURE - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3873
                self.package_obj_body()
                self.state = 3878
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BEGIN]:
                self.state = 3879
                self.match(plsqlParser.BEGIN)
                self.state = 3880
                self.seq_of_statements()
                pass
            elif token in [plsqlParser.END]:
                self.state = 3881
                self.match(plsqlParser.END)
                self.state = 3883
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
                if la_ == 1:
                    self.state = 3882
                    self.package_name()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def package_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Package_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Package_nameContext,i)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def invoker_rights_clause(self):
            return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,0)


        def package_obj_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Package_obj_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Package_obj_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_spec" ):
                return visitor.visitPackage_spec(self)
            else:
                return visitor.visitChildren(self)




    def package_spec(self):

        localctx = plsqlParser.Package_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_package_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3887
            self.package_name()
            self.state = 3889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTHID:
                self.state = 3888
                self.invoker_rights_clause()


            self.state = 3891
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PROCEDURE - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3892
                self.package_obj_spec()
                self.state = 3897
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3898
            self.match(plsqlParser.END)
            self.state = 3900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,540,self._ctx)
            if la_ == 1:
                self.state = 3899
                self.package_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_obj_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Exception_declarationContext,0)


        def pragma_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Pragma_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Record_declarationContext,0)


        def table_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Table_declarationContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Function_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_obj_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_obj_spec" ):
                return visitor.visitPackage_obj_spec(self)
            else:
                return visitor.visitChildren(self)




    def package_obj_spec(self):

        localctx = plsqlParser.Package_obj_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_package_obj_spec)
        try:
            self.state = 3911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,541,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3902
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3903
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3904
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3905
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3906
                self.pragma_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3907
                self.record_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3908
                self.table_declaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3909
                self.procedure_spec()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3910
                self.function_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ParameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_procedure_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_spec" ):
                return visitor.visitProcedure_spec(self)
            else:
                return visitor.visitChildren(self)




    def procedure_spec(self):

        localctx = plsqlParser.Procedure_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_procedure_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3913
            self.match(plsqlParser.PROCEDURE)
            self.state = 3914
            self.procedure_name()
            self.state = 3926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 3915
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3916
                self.parameter()
                self.state = 3921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 3917
                    self.match(plsqlParser.COMMA)
                    self.state = 3918
                    self.parameter()
                    self.state = 3923
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3924
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 3928
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ParameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def DETERMINISTIC(self):
            return self.getToken(plsqlParser.DETERMINISTIC, 0)

        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_function_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_spec" ):
                return visitor.visitFunction_spec(self)
            else:
                return visitor.visitChildren(self)




    def function_spec(self):

        localctx = plsqlParser.Function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3930
            self.match(plsqlParser.FUNCTION)
            self.state = 3931
            self.function_name()
            self.state = 3943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 3932
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3933
                self.parameter()
                self.state = 3938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 3934
                    self.match(plsqlParser.COMMA)
                    self.state = 3935
                    self.parameter()
                    self.state = 3940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3941
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 3945
            self.match(plsqlParser.RETURN)
            self.state = 3946
            self.type_spec()
            self.state = 3948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DETERMINISTIC:
                self.state = 3947
                self.match(plsqlParser.DETERMINISTIC)


            self.state = 3951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RESULT_CACHE:
                self.state = 3950
                self.match(plsqlParser.RESULT_CACHE)


            self.state = 3953
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_obj_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Exception_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Record_declarationContext,0)


        def table_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Table_declarationContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_procedure_bodyContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_function_bodyContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Function_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_obj_body

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_obj_body" ):
                return visitor.visitPackage_obj_body(self)
            else:
                return visitor.visitChildren(self)




    def package_obj_body(self):

        localctx = plsqlParser.Package_obj_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_package_obj_body)
        try:
            self.state = 3965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3955
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3956
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3957
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3958
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3959
                self.record_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3960
                self.table_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3961
                self.create_procedure_body()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3962
                self.create_function_body()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3963
                self.procedure_spec()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3964
                self.function_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_procedure

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_procedure" ):
                return visitor.visitDrop_procedure(self)
            else:
                return visitor.visitChildren(self)




    def drop_procedure(self):

        localctx = plsqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_drop_procedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3967
            self.match(plsqlParser.DROP)
            self.state = 3968
            self.match(plsqlParser.PROCEDURE)
            self.state = 3969
            self.procedure_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_procedure

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_procedure" ):
                return visitor.visitAlter_procedure(self)
            else:
                return visitor.visitChildren(self)




    def alter_procedure(self):

        localctx = plsqlParser.Alter_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_alter_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3971
            self.match(plsqlParser.ALTER)
            self.state = 3972
            self.match(plsqlParser.PROCEDURE)
            self.state = 3973
            self.procedure_name()
            self.state = 3974
            self.match(plsqlParser.COMPILE)
            self.state = 3976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,549,self._ctx)
            if la_ == 1:
                self.state = 3975
                self.match(plsqlParser.DEBUG)


            self.state = 3981
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,550,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3978
                    self.compiler_parameters_clause() 
                self.state = 3983
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,550,self._ctx)

            self.state = 3986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REUSE:
                self.state = 3984
                self.match(plsqlParser.REUSE)
                self.state = 3985
                self.match(plsqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_procedure_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ParameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def invoker_rights_clause(self):
            return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,0)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_procedure_body

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_procedure_body" ):
                return visitor.visitCreate_procedure_body(self)
            else:
                return visitor.visitChildren(self)




    def create_procedure_body(self):

        localctx = plsqlParser.Create_procedure_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_create_procedure_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CREATE:
                self.state = 3988
                self.match(plsqlParser.CREATE)
                self.state = 3991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.OR:
                    self.state = 3989
                    self.match(plsqlParser.OR)
                    self.state = 3990
                    self.match(plsqlParser.REPLACE)




            self.state = 3995
            self.match(plsqlParser.PROCEDURE)
            self.state = 3996
            self.procedure_name()
            self.state = 4008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 3997
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3998
                self.parameter()
                self.state = 4003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 3999
                    self.match(plsqlParser.COMMA)
                    self.state = 4000
                    self.parameter()
                    self.state = 4005
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4006
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTHID:
                self.state = 4010
                self.invoker_rights_clause()


            self.state = 4013
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
            if la_ == 1:
                self.state = 4015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 4014
                    self.match(plsqlParser.DECLARE)


                self.state = 4020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CREATE - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PROCEDURE - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 4017
                    self.declare_spec()
                    self.state = 4022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4023
                self.body()
                pass

            elif la_ == 2:
                self.state = 4024
                self.call_spec()
                pass

            elif la_ == 3:
                self.state = 4025
                self.match(plsqlParser.EXTERNAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_trigger

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_trigger" ):
                return visitor.visitDrop_trigger(self)
            else:
                return visitor.visitChildren(self)




    def drop_trigger(self):

        localctx = plsqlParser.Drop_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_drop_trigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4028
            self.match(plsqlParser.DROP)
            self.state = 4029
            self.match(plsqlParser.TRIGGER)
            self.state = 4030
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tn1 = None # Trigger_nameContext
            self.tn2 = None # Trigger_nameContext

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def trigger_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Trigger_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,i)


        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_trigger

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_trigger" ):
                return visitor.visitAlter_trigger(self)
            else:
                return visitor.visitChildren(self)




    def alter_trigger(self):

        localctx = plsqlParser.Alter_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_alter_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4032
            self.match(plsqlParser.ALTER)
            self.state = 4033
            self.match(plsqlParser.TRIGGER)
            self.state = 4034
            localctx.tn1 = self.trigger_name()
            self.state = 4053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.DISABLE, plsqlParser.ENABLE]:
                self.state = 4035
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [plsqlParser.RENAME]:
                self.state = 4036
                self.match(plsqlParser.RENAME)
                self.state = 4037
                self.match(plsqlParser.TO)
                self.state = 4038
                localctx.tn2 = self.trigger_name()
                pass
            elif token in [plsqlParser.COMPILE]:
                self.state = 4039
                self.match(plsqlParser.COMPILE)
                self.state = 4041
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,560,self._ctx)
                if la_ == 1:
                    self.state = 4040
                    self.match(plsqlParser.DEBUG)


                self.state = 4046
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,561,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4043
                        self.compiler_parameters_clause() 
                    self.state = 4048
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,561,self._ctx)

                self.state = 4051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.REUSE:
                    self.state = 4049
                    self.match(plsqlParser.REUSE)
                    self.state = 4050
                    self.match(plsqlParser.SETTINGS)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,0)


        def trigger_body(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_bodyContext,0)


        def simple_dml_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Simple_dml_triggerContext,0)


        def compound_dml_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Compound_dml_triggerContext,0)


        def non_dml_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Non_dml_triggerContext,0)


        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def trigger_follows_clause(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_follows_clauseContext,0)


        def trigger_when_clause(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_when_clauseContext,0)


        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_trigger

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_trigger" ):
                return visitor.visitCreate_trigger(self)
            else:
                return visitor.visitChildren(self)




    def create_trigger(self):

        localctx = plsqlParser.Create_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_create_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4055
            self.match(plsqlParser.CREATE)
            self.state = 4058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OR:
                self.state = 4056
                self.match(plsqlParser.OR)
                self.state = 4057
                self.match(plsqlParser.REPLACE)


            self.state = 4060
            self.match(plsqlParser.TRIGGER)
            self.state = 4061
            self.trigger_name()
            self.state = 4065
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,565,self._ctx)
            if la_ == 1:
                self.state = 4062
                self.simple_dml_trigger()
                pass

            elif la_ == 2:
                self.state = 4063
                self.compound_dml_trigger()
                pass

            elif la_ == 3:
                self.state = 4064
                self.non_dml_trigger()
                pass


            self.state = 4068
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,566,self._ctx)
            if la_ == 1:
                self.state = 4067
                self.trigger_follows_clause()


            self.state = 4071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,567,self._ctx)
            if la_ == 1:
                self.state = 4070
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHEN:
                self.state = 4073
                self.trigger_when_clause()


            self.state = 4076
            self.trigger_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_follows_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOLLOWS(self):
            return self.getToken(plsqlParser.FOLLOWS, 0)

        def trigger_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Trigger_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_follows_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_follows_clause" ):
                return visitor.visitTrigger_follows_clause(self)
            else:
                return visitor.visitChildren(self)




    def trigger_follows_clause(self):

        localctx = plsqlParser.Trigger_follows_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_trigger_follows_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4078
            self.match(plsqlParser.FOLLOWS)
            self.state = 4079
            self.trigger_name()
            self.state = 4084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4080
                self.match(plsqlParser.COMMA)
                self.state = 4081
                self.trigger_name()
                self.state = 4086
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_when_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_when_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_when_clause" ):
                return visitor.visitTrigger_when_clause(self)
            else:
                return visitor.visitChildren(self)




    def trigger_when_clause(self):

        localctx = plsqlParser.Trigger_when_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_trigger_when_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4087
            self.match(plsqlParser.WHEN)
            self.state = 4088
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4089
            self.condition()
            self.state = 4090
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_event_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_event_clauseContext,0)


        def BEFORE(self):
            return self.getToken(plsqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(plsqlParser.AFTER, 0)

        def INSTEAD(self):
            return self.getToken(plsqlParser.INSTEAD, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def referencing_clause(self):
            return self.getTypedRuleContext(plsqlParser.Referencing_clauseContext,0)


        def for_each_row(self):
            return self.getTypedRuleContext(plsqlParser.For_each_rowContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_simple_dml_trigger

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_dml_trigger" ):
                return visitor.visitSimple_dml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def simple_dml_trigger(self):

        localctx = plsqlParser.Simple_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_simple_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BEFORE]:
                self.state = 4092
                self.match(plsqlParser.BEFORE)
                pass
            elif token in [plsqlParser.AFTER]:
                self.state = 4093
                self.match(plsqlParser.AFTER)
                pass
            elif token in [plsqlParser.INSTEAD]:
                self.state = 4094
                self.match(plsqlParser.INSTEAD)
                self.state = 4095
                self.match(plsqlParser.OF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4098
            self.dml_event_clause()
            self.state = 4100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,571,self._ctx)
            if la_ == 1:
                self.state = 4099
                self.referencing_clause()


            self.state = 4103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FOR:
                self.state = 4102
                self.for_each_row()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_each_rowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def EACH(self):
            return self.getToken(plsqlParser.EACH, 0)

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_for_each_row

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_each_row" ):
                return visitor.visitFor_each_row(self)
            else:
                return visitor.visitChildren(self)




    def for_each_row(self):

        localctx = plsqlParser.For_each_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_for_each_row)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4105
            self.match(plsqlParser.FOR)
            self.state = 4106
            self.match(plsqlParser.EACH)
            self.state = 4107
            self.match(plsqlParser.ROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def dml_event_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_event_clauseContext,0)


        def referencing_clause(self):
            return self.getTypedRuleContext(plsqlParser.Referencing_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_compound_dml_trigger

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_dml_trigger" ):
                return visitor.visitCompound_dml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def compound_dml_trigger(self):

        localctx = plsqlParser.Compound_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_compound_dml_trigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4109
            self.match(plsqlParser.FOR)
            self.state = 4110
            self.dml_event_clause()
            self.state = 4112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,573,self._ctx)
            if la_ == 1:
                self.state = 4111
                self.referencing_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_dml_event(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Non_dml_eventContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Non_dml_eventContext,i)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def BEFORE(self):
            return self.getToken(plsqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(plsqlParser.AFTER, 0)

        def DATABASE(self):
            return self.getToken(plsqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(plsqlParser.SCHEMA, 0)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OR)
            else:
                return self.getToken(plsqlParser.OR, i)

        def schema_name(self):
            return self.getTypedRuleContext(plsqlParser.Schema_nameContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_non_dml_trigger

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_dml_trigger" ):
                return visitor.visitNon_dml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def non_dml_trigger(self):

        localctx = plsqlParser.Non_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_non_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4114
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AFTER or _la==plsqlParser.BEFORE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4115
            self.non_dml_event()
            self.state = 4120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.OR:
                self.state = 4116
                self.match(plsqlParser.OR)
                self.state = 4117
                self.non_dml_event()
                self.state = 4122
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4123
            self.match(plsqlParser.ON)
            self.state = 4131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,576,self._ctx)
            if la_ == 1:
                self.state = 4124
                self.match(plsqlParser.DATABASE)
                pass

            elif la_ == 2:
                self.state = 4128
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,575,self._ctx)
                if la_ == 1:
                    self.state = 4125
                    self.schema_name()
                    self.state = 4126
                    self.match(plsqlParser.PERIOD)


                self.state = 4130
                self.match(plsqlParser.SCHEMA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOUND(self):
            return self.getToken(plsqlParser.COMPOUND, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def CALL(self):
            return self.getToken(plsqlParser.CALL, 0)

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def trigger_block(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_blockContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_body

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_body" ):
                return visitor.visitTrigger_body(self)
            else:
                return visitor.visitChildren(self)




    def trigger_body(self):

        localctx = plsqlParser.Trigger_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_trigger_body)
        try:
            self.state = 4138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,577,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4133
                self.match(plsqlParser.COMPOUND)
                self.state = 4134
                self.match(plsqlParser.TRIGGER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4135
                self.match(plsqlParser.CALL)
                self.state = 4136
                self.r_id()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4137
                self.trigger_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Routine_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routine_name(self):
            return self.getTypedRuleContext(plsqlParser.Routine_nameContext,0)


        def function_argument(self):
            return self.getTypedRuleContext(plsqlParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_routine_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutine_clause" ):
                return visitor.visitRoutine_clause(self)
            else:
                return visitor.visitChildren(self)




    def routine_clause(self):

        localctx = plsqlParser.Routine_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_routine_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4140
            self.routine_name()
            self.state = 4142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4141
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_trigger_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOUND(self):
            return self.getToken(plsqlParser.COMPOUND, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,0)


        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def timing_point_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Timing_point_sectionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Timing_point_sectionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_compound_trigger_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_trigger_block" ):
                return visitor.visitCompound_trigger_block(self)
            else:
                return visitor.visitChildren(self)




    def compound_trigger_block(self):

        localctx = plsqlParser.Compound_trigger_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_compound_trigger_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4144
            self.match(plsqlParser.COMPOUND)
            self.state = 4145
            self.match(plsqlParser.TRIGGER)
            self.state = 4149
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,579,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4146
                    self.declare_spec() 
                self.state = 4151
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,579,self._ctx)

            self.state = 4153 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4152
                self.timing_point_section()
                self.state = 4155 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.AFTER or _la==plsqlParser.BEFORE):
                    break

            self.state = 4157
            self.match(plsqlParser.END)
            self.state = 4158
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Timing_point_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bk = None # Token
            self.ak = None # Token

        def STATEMENT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.STATEMENT)
            else:
                return self.getToken(plsqlParser.STATEMENT, i)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def trigger_block(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_blockContext,0)


        def BEFORE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.BEFORE)
            else:
                return self.getToken(plsqlParser.BEFORE, i)

        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def EACH(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.EACH)
            else:
                return self.getToken(plsqlParser.EACH, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ROW)
            else:
                return self.getToken(plsqlParser.ROW, i)

        def AFTER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AFTER)
            else:
                return self.getToken(plsqlParser.AFTER, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_timing_point_section

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTiming_point_section" ):
                return visitor.visitTiming_point_section(self)
            else:
                return visitor.visitChildren(self)




    def timing_point_section(self):

        localctx = plsqlParser.Timing_point_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_timing_point_section)
        try:
            self.state = 4196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,581,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4160
                localctx.bk = self.match(plsqlParser.BEFORE)
                self.state = 4161
                self.match(plsqlParser.STATEMENT)
                self.state = 4162
                self.match(plsqlParser.IS)
                self.state = 4163
                self.trigger_block()
                self.state = 4164
                self.match(plsqlParser.BEFORE)
                self.state = 4165
                self.match(plsqlParser.STATEMENT)
                self.state = 4166
                self.match(plsqlParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4168
                localctx.bk = self.match(plsqlParser.BEFORE)
                self.state = 4169
                self.match(plsqlParser.EACH)
                self.state = 4170
                self.match(plsqlParser.ROW)
                self.state = 4171
                self.match(plsqlParser.IS)
                self.state = 4172
                self.trigger_block()
                self.state = 4173
                self.match(plsqlParser.BEFORE)
                self.state = 4174
                self.match(plsqlParser.EACH)
                self.state = 4175
                self.match(plsqlParser.ROW)
                self.state = 4176
                self.match(plsqlParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4178
                localctx.ak = self.match(plsqlParser.AFTER)
                self.state = 4179
                self.match(plsqlParser.STATEMENT)
                self.state = 4180
                self.match(plsqlParser.IS)
                self.state = 4181
                self.trigger_block()
                self.state = 4182
                self.match(plsqlParser.AFTER)
                self.state = 4183
                self.match(plsqlParser.STATEMENT)
                self.state = 4184
                self.match(plsqlParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4186
                localctx.ak = self.match(plsqlParser.AFTER)
                self.state = 4187
                self.match(plsqlParser.EACH)
                self.state = 4188
                self.match(plsqlParser.ROW)
                self.state = 4189
                self.match(plsqlParser.IS)
                self.state = 4190
                self.trigger_block()
                self.state = 4191
                self.match(plsqlParser.AFTER)
                self.state = 4192
                self.match(plsqlParser.EACH)
                self.state = 4193
                self.match(plsqlParser.ROW)
                self.state = 4194
                self.match(plsqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_dml_eventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(plsqlParser.ANALYZE, 0)

        def ASSOCIATE(self):
            return self.getToken(plsqlParser.ASSOCIATE, 0)

        def STATISTICS(self):
            return self.getToken(plsqlParser.STATISTICS, 0)

        def AUDIT(self):
            return self.getToken(plsqlParser.AUDIT, 0)

        def COMMENT(self):
            return self.getToken(plsqlParser.COMMENT, 0)

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def DISASSOCIATE(self):
            return self.getToken(plsqlParser.DISASSOCIATE, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def GRANT(self):
            return self.getToken(plsqlParser.GRANT, 0)

        def NOAUDIT(self):
            return self.getToken(plsqlParser.NOAUDIT, 0)

        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def REVOKE(self):
            return self.getToken(plsqlParser.REVOKE, 0)

        def TRUNCATE(self):
            return self.getToken(plsqlParser.TRUNCATE, 0)

        def DDL(self):
            return self.getToken(plsqlParser.DDL, 0)

        def STARTUP(self):
            return self.getToken(plsqlParser.STARTUP, 0)

        def SHUTDOWN(self):
            return self.getToken(plsqlParser.SHUTDOWN, 0)

        def DB_ROLE_CHANGE(self):
            return self.getToken(plsqlParser.DB_ROLE_CHANGE, 0)

        def LOGON(self):
            return self.getToken(plsqlParser.LOGON, 0)

        def LOGOFF(self):
            return self.getToken(plsqlParser.LOGOFF, 0)

        def SERVERERROR(self):
            return self.getToken(plsqlParser.SERVERERROR, 0)

        def SUSPEND(self):
            return self.getToken(plsqlParser.SUSPEND, 0)

        def DATABASE(self):
            return self.getToken(plsqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(plsqlParser.SCHEMA, 0)

        def FOLLOWS(self):
            return self.getToken(plsqlParser.FOLLOWS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_non_dml_event

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_dml_event" ):
                return visitor.visitNon_dml_event(self)
            else:
                return visitor.visitChildren(self)




    def non_dml_event(self):

        localctx = plsqlParser.Non_dml_eventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_non_dml_event)
        try:
            self.state = 4224
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ALTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4198
                self.match(plsqlParser.ALTER)
                pass
            elif token in [plsqlParser.ANALYZE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4199
                self.match(plsqlParser.ANALYZE)
                pass
            elif token in [plsqlParser.ASSOCIATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4200
                self.match(plsqlParser.ASSOCIATE)
                self.state = 4201
                self.match(plsqlParser.STATISTICS)
                pass
            elif token in [plsqlParser.AUDIT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4202
                self.match(plsqlParser.AUDIT)
                pass
            elif token in [plsqlParser.COMMENT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4203
                self.match(plsqlParser.COMMENT)
                pass
            elif token in [plsqlParser.CREATE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4204
                self.match(plsqlParser.CREATE)
                pass
            elif token in [plsqlParser.DISASSOCIATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4205
                self.match(plsqlParser.DISASSOCIATE)
                self.state = 4206
                self.match(plsqlParser.STATISTICS)
                pass
            elif token in [plsqlParser.DROP]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4207
                self.match(plsqlParser.DROP)
                pass
            elif token in [plsqlParser.GRANT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4208
                self.match(plsqlParser.GRANT)
                pass
            elif token in [plsqlParser.NOAUDIT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4209
                self.match(plsqlParser.NOAUDIT)
                pass
            elif token in [plsqlParser.RENAME]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4210
                self.match(plsqlParser.RENAME)
                pass
            elif token in [plsqlParser.REVOKE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4211
                self.match(plsqlParser.REVOKE)
                pass
            elif token in [plsqlParser.TRUNCATE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4212
                self.match(plsqlParser.TRUNCATE)
                pass
            elif token in [plsqlParser.DDL]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4213
                self.match(plsqlParser.DDL)
                pass
            elif token in [plsqlParser.STARTUP]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4214
                self.match(plsqlParser.STARTUP)
                pass
            elif token in [plsqlParser.SHUTDOWN]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4215
                self.match(plsqlParser.SHUTDOWN)
                pass
            elif token in [plsqlParser.DB_ROLE_CHANGE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 4216
                self.match(plsqlParser.DB_ROLE_CHANGE)
                pass
            elif token in [plsqlParser.LOGON]:
                self.enterOuterAlt(localctx, 18)
                self.state = 4217
                self.match(plsqlParser.LOGON)
                pass
            elif token in [plsqlParser.LOGOFF]:
                self.enterOuterAlt(localctx, 19)
                self.state = 4218
                self.match(plsqlParser.LOGOFF)
                pass
            elif token in [plsqlParser.SERVERERROR]:
                self.enterOuterAlt(localctx, 20)
                self.state = 4219
                self.match(plsqlParser.SERVERERROR)
                pass
            elif token in [plsqlParser.SUSPEND]:
                self.enterOuterAlt(localctx, 21)
                self.state = 4220
                self.match(plsqlParser.SUSPEND)
                pass
            elif token in [plsqlParser.DATABASE]:
                self.enterOuterAlt(localctx, 22)
                self.state = 4221
                self.match(plsqlParser.DATABASE)
                pass
            elif token in [plsqlParser.SCHEMA]:
                self.enterOuterAlt(localctx, 23)
                self.state = 4222
                self.match(plsqlParser.SCHEMA)
                pass
            elif token in [plsqlParser.FOLLOWS]:
                self.enterOuterAlt(localctx, 24)
                self.state = 4223
                self.match(plsqlParser.FOLLOWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_event_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_event_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Dml_event_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Dml_event_elementContext,i)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OR)
            else:
                return self.getToken(plsqlParser.OR, i)

        def dml_event_nested_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_event_nested_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_dml_event_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_event_clause" ):
                return visitor.visitDml_event_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_event_clause(self):

        localctx = plsqlParser.Dml_event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_dml_event_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4226
            self.dml_event_element()
            self.state = 4231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.OR:
                self.state = 4227
                self.match(plsqlParser.OR)
                self.state = 4228
                self.dml_event_element()
                self.state = 4233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4234
            self.match(plsqlParser.ON)
            self.state = 4236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,584,self._ctx)
            if la_ == 1:
                self.state = 4235
                self.dml_event_nested_clause()


            self.state = 4238
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_event_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(plsqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_dml_event_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_event_element" ):
                return visitor.visitDml_event_element(self)
            else:
                return visitor.visitChildren(self)




    def dml_event_element(self):

        localctx = plsqlParser.Dml_event_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_dml_event_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4240
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DELETE or _la==plsqlParser.INSERT or _la==plsqlParser.UPDATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OF:
                self.state = 4241
                self.match(plsqlParser.OF)
                self.state = 4242
                self.column_name()
                self.state = 4247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4243
                    self.match(plsqlParser.COMMA)
                    self.state = 4244
                    self.column_name()
                    self.state = 4249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_event_nested_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NESTED(self):
            return self.getToken(plsqlParser.NESTED, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_dml_event_nested_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_event_nested_clause" ):
                return visitor.visitDml_event_nested_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_event_nested_clause(self):

        localctx = plsqlParser.Dml_event_nested_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_dml_event_nested_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4252
            self.match(plsqlParser.NESTED)
            self.state = 4253
            self.match(plsqlParser.TABLE)
            self.state = 4254
            self.tableview_name()
            self.state = 4255
            self.match(plsqlParser.OF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Referencing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCING(self):
            return self.getToken(plsqlParser.REFERENCING, 0)

        def referencing_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Referencing_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Referencing_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_referencing_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferencing_clause" ):
                return visitor.visitReferencing_clause(self)
            else:
                return visitor.visitChildren(self)




    def referencing_clause(self):

        localctx = plsqlParser.Referencing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_referencing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4257
            self.match(plsqlParser.REFERENCING)
            self.state = 4259 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4258
                    self.referencing_element()

                else:
                    raise NoViableAltException(self)
                self.state = 4261 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,587,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Referencing_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def NEW(self):
            return self.getToken(plsqlParser.NEW, 0)

        def OLD(self):
            return self.getToken(plsqlParser.OLD, 0)

        def PARENT(self):
            return self.getToken(plsqlParser.PARENT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_referencing_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferencing_element" ):
                return visitor.visitReferencing_element(self)
            else:
                return visitor.visitChildren(self)




    def referencing_element(self):

        localctx = plsqlParser.Referencing_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_referencing_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4263
            _la = self._input.LA(1)
            if not(((((_la - 304)) & ~0x3f) == 0 and ((1 << (_la - 304)) & ((1 << (plsqlParser.NEW - 304)) | (1 << (plsqlParser.OLD - 304)) | (1 << (plsqlParser.PARENT - 304)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4264
            self.column_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def VALIDATE(self):
            return self.getToken(plsqlParser.VALIDATE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_drop_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_type" ):
                return visitor.visitDrop_type(self)
            else:
                return visitor.visitChildren(self)




    def drop_type(self):

        localctx = plsqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4266
            self.match(plsqlParser.DROP)
            self.state = 4267
            self.match(plsqlParser.TYPE)
            self.state = 4269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,588,self._ctx)
            if la_ == 1:
                self.state = 4268
                self.match(plsqlParser.BODY)


            self.state = 4271
            self.type_name()
            self.state = 4273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FORCE or _la==plsqlParser.VALIDATE:
                self.state = 4272
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FORCE or _la==plsqlParser.VALIDATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def compile_type_clause(self):
            return self.getTypedRuleContext(plsqlParser.Compile_type_clauseContext,0)


        def replace_type_clause(self):
            return self.getTypedRuleContext(plsqlParser.Replace_type_clauseContext,0)


        def alter_method_spec(self):
            return self.getTypedRuleContext(plsqlParser.Alter_method_specContext,0)


        def alter_collection_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Alter_collection_clausesContext,0)


        def modifier_clause(self):
            return self.getTypedRuleContext(plsqlParser.Modifier_clauseContext,0)


        def dependent_handling_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dependent_handling_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_type" ):
                return visitor.visitAlter_type(self)
            else:
                return visitor.visitChildren(self)




    def alter_type(self):

        localctx = plsqlParser.Alter_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_alter_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4275
            self.match(plsqlParser.ALTER)
            self.state = 4276
            self.match(plsqlParser.TYPE)
            self.state = 4277
            self.type_name()
            self.state = 4283
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.COMPILE]:
                self.state = 4278
                self.compile_type_clause()
                pass
            elif token in [plsqlParser.REPLACE]:
                self.state = 4279
                self.replace_type_clause()
                pass
            elif token in [plsqlParser.ADD, plsqlParser.DROP]:
                self.state = 4280
                self.alter_method_spec()
                pass
            elif token in [plsqlParser.MODIFY]:
                self.state = 4281
                self.alter_collection_clauses()
                pass
            elif token in [plsqlParser.FINAL, plsqlParser.INSTANTIABLE, plsqlParser.NOT, plsqlParser.OVERRIDING]:
                self.state = 4282
                self.modifier_clause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CASCADE or _la==plsqlParser.INVALIDATE:
                self.state = 4285
                self.dependent_handling_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compile_type_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def SPECIFICATION(self):
            return self.getToken(plsqlParser.SPECIFICATION, 0)

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_compile_type_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompile_type_clause" ):
                return visitor.visitCompile_type_clause(self)
            else:
                return visitor.visitChildren(self)




    def compile_type_clause(self):

        localctx = plsqlParser.Compile_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_compile_type_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4288
            self.match(plsqlParser.COMPILE)
            self.state = 4290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,592,self._ctx)
            if la_ == 1:
                self.state = 4289
                self.match(plsqlParser.DEBUG)


            self.state = 4293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,593,self._ctx)
            if la_ == 1:
                self.state = 4292
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BODY or _la==plsqlParser.SPECIFICATION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4298
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,594,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4295
                    self.compiler_parameters_clause() 
                self.state = 4300
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,594,self._ctx)

            self.state = 4303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REUSE:
                self.state = 4301
                self.match(plsqlParser.REUSE)
                self.state = 4302
                self.match(plsqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Replace_type_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OBJECT(self):
            return self.getToken(plsqlParser.OBJECT, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def object_member_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Object_member_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Object_member_specContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def invoker_rights_clause(self):
            return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_replace_type_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplace_type_clause" ):
                return visitor.visitReplace_type_clause(self)
            else:
                return visitor.visitChildren(self)




    def replace_type_clause(self):

        localctx = plsqlParser.Replace_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_replace_type_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4305
            self.match(plsqlParser.REPLACE)
            self.state = 4307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTHID:
                self.state = 4306
                self.invoker_rights_clause()


            self.state = 4309
            self.match(plsqlParser.AS)
            self.state = 4310
            self.match(plsqlParser.OBJECT)
            self.state = 4311
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4312
            self.object_member_spec()
            self.state = 4317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4313
                self.match(plsqlParser.COMMA)
                self.state = 4314
                self.object_member_spec()
                self.state = 4319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4320
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_method_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_method_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Alter_method_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Alter_method_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_method_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_method_spec" ):
                return visitor.visitAlter_method_spec(self)
            else:
                return visitor.visitChildren(self)




    def alter_method_spec(self):

        localctx = plsqlParser.Alter_method_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_alter_method_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4322
            self.alter_method_element()
            self.state = 4327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4323
                self.match(plsqlParser.COMMA)
                self.state = 4324
                self.alter_method_element()
                self.state = 4329
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_method_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def map_order_function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Map_order_function_specContext,0)


        def subprogram_spec(self):
            return self.getTypedRuleContext(plsqlParser.Subprogram_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_method_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_method_element" ):
                return visitor.visitAlter_method_element(self)
            else:
                return visitor.visitChildren(self)




    def alter_method_element(self):

        localctx = plsqlParser.Alter_method_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_alter_method_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4330
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ADD or _la==plsqlParser.DROP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MAP, plsqlParser.ORDER]:
                self.state = 4331
                self.map_order_function_spec()
                pass
            elif token in [plsqlParser.MEMBER, plsqlParser.STATIC]:
                self.state = 4332
                self.subprogram_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_attribute_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(plsqlParser.ATTRIBUTE, 0)

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def attribute_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Attribute_definitionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Attribute_definitionContext,i)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_attribute_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_attribute_definition" ):
                return visitor.visitAlter_attribute_definition(self)
            else:
                return visitor.visitChildren(self)




    def alter_attribute_definition(self):

        localctx = plsqlParser.Alter_attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_alter_attribute_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4335
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ADD or _la==plsqlParser.DROP or _la==plsqlParser.MODIFY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4336
            self.match(plsqlParser.ATTRIBUTE)
            self.state = 4349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 4337
                self.attribute_definition()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 4338
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4339
                self.attribute_definition()
                self.state = 4344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4340
                    self.match(plsqlParser.COMMA)
                    self.state = 4341
                    self.attribute_definition()
                    self.state = 4346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4347
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_name(self):
            return self.getTypedRuleContext(plsqlParser.Attribute_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_attribute_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_definition" ):
                return visitor.visitAttribute_definition(self)
            else:
                return visitor.visitChildren(self)




    def attribute_definition(self):

        localctx = plsqlParser.Attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_attribute_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4351
            self.attribute_name()
            self.state = 4353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 4352
                self.type_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_collection_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def LIMIT(self):
            return self.getToken(plsqlParser.LIMIT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def ELEMENT(self):
            return self.getToken(plsqlParser.ELEMENT, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_collection_clauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_collection_clauses" ):
                return visitor.visitAlter_collection_clauses(self)
            else:
                return visitor.visitChildren(self)




    def alter_collection_clauses(self):

        localctx = plsqlParser.Alter_collection_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_alter_collection_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4355
            self.match(plsqlParser.MODIFY)
            self.state = 4361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LIMIT]:
                self.state = 4356
                self.match(plsqlParser.LIMIT)
                self.state = 4357
                self.expression(0)
                pass
            elif token in [plsqlParser.ELEMENT]:
                self.state = 4358
                self.match(plsqlParser.ELEMENT)
                self.state = 4359
                self.match(plsqlParser.TYPE)
                self.state = 4360
                self.type_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dependent_handling_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVALIDATE(self):
            return self.getToken(plsqlParser.INVALIDATE, 0)

        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def CONVERT(self):
            return self.getToken(plsqlParser.CONVERT, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(plsqlParser.SUBSTITUTABLE, 0)

        def INCLUDING(self):
            return self.getToken(plsqlParser.INCLUDING, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def DATA(self):
            return self.getToken(plsqlParser.DATA, 0)

        def dependent_exceptions_part(self):
            return self.getTypedRuleContext(plsqlParser.Dependent_exceptions_partContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_dependent_handling_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDependent_handling_clause" ):
                return visitor.visitDependent_handling_clause(self)
            else:
                return visitor.visitChildren(self)




    def dependent_handling_clause(self):

        localctx = plsqlParser.Dependent_handling_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_dependent_handling_clause)
        self._la = 0 # Token type
        try:
            self.state = 4379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INVALIDATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4363
                self.match(plsqlParser.INVALIDATE)
                pass
            elif token in [plsqlParser.CASCADE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4364
                self.match(plsqlParser.CASCADE)
                self.state = 4374
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.CONVERT]:
                    self.state = 4365
                    self.match(plsqlParser.CONVERT)
                    self.state = 4366
                    self.match(plsqlParser.TO)
                    self.state = 4367
                    self.match(plsqlParser.SUBSTITUTABLE)
                    pass
                elif token in [plsqlParser.INCLUDING, plsqlParser.NOT]:
                    self.state = 4369
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.NOT:
                        self.state = 4368
                        self.match(plsqlParser.NOT)


                    self.state = 4371
                    self.match(plsqlParser.INCLUDING)
                    self.state = 4372
                    self.match(plsqlParser.TABLE)
                    self.state = 4373
                    self.match(plsqlParser.DATA)
                    pass
                elif token in [plsqlParser.EOF, plsqlParser.ALTER, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DROP, plsqlParser.EXCEPTIONS, plsqlParser.EXPLAIN, plsqlParser.FORCE, plsqlParser.FUNCTION, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.PROCEDURE, plsqlParser.SELECT, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN, plsqlParser.SEMICOLON]:
                    pass
                else:
                    pass
                self.state = 4377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.EXCEPTIONS or _la==plsqlParser.FORCE:
                    self.state = 4376
                    self.dependent_exceptions_part()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dependent_exceptions_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTIONS(self):
            return self.getToken(plsqlParser.EXCEPTIONS, 0)

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_dependent_exceptions_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDependent_exceptions_part" ):
                return visitor.visitDependent_exceptions_part(self)
            else:
                return visitor.visitChildren(self)




    def dependent_exceptions_part(self):

        localctx = plsqlParser.Dependent_exceptions_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_dependent_exceptions_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FORCE:
                self.state = 4381
                self.match(plsqlParser.FORCE)


            self.state = 4384
            self.match(plsqlParser.EXCEPTIONS)
            self.state = 4385
            self.match(plsqlParser.INTO)
            self.state = 4386
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_definition(self):
            return self.getTypedRuleContext(plsqlParser.Type_definitionContext,0)


        def type_body(self):
            return self.getTypedRuleContext(plsqlParser.Type_bodyContext,0)


        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_type" ):
                return visitor.visitCreate_type(self)
            else:
                return visitor.visitChildren(self)




    def create_type(self):

        localctx = plsqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_create_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4388
            self.match(plsqlParser.CREATE)
            self.state = 4391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OR:
                self.state = 4389
                self.match(plsqlParser.OR)
                self.state = 4390
                self.match(plsqlParser.REPLACE)


            self.state = 4393
            self.match(plsqlParser.TYPE)
            self.state = 4396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,610,self._ctx)
            if la_ == 1:
                self.state = 4394
                self.type_definition()
                pass

            elif la_ == 2:
                self.state = 4395
                self.type_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def OID(self):
            return self.getToken(plsqlParser.OID, 0)

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def object_type_def(self):
            return self.getTypedRuleContext(plsqlParser.Object_type_defContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_type_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_definition" ):
                return visitor.visitType_definition(self)
            else:
                return visitor.visitChildren(self)




    def type_definition(self):

        localctx = plsqlParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_type_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4398
            self.type_name()
            self.state = 4401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OID:
                self.state = 4399
                self.match(plsqlParser.OID)
                self.state = 4400
                self.match(plsqlParser.CHAR_STRING)


            self.state = 4404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS or _la==plsqlParser.AUTHID or _la==plsqlParser.IS or _la==plsqlParser.UNDER:
                self.state = 4403
                self.object_type_def()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_as_part(self):
            return self.getTypedRuleContext(plsqlParser.Object_as_partContext,0)


        def object_under_part(self):
            return self.getTypedRuleContext(plsqlParser.Object_under_partContext,0)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,0)


        def sqlj_object_type(self):
            return self.getTypedRuleContext(plsqlParser.Sqlj_object_typeContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def object_member_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Object_member_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Object_member_specContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def modifier_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Modifier_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Modifier_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_object_type_def

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_type_def" ):
                return visitor.visitObject_type_def(self)
            else:
                return visitor.visitChildren(self)




    def object_type_def(self):

        localctx = plsqlParser.Object_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_object_type_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTHID:
                self.state = 4406
                self.invoker_rights_clause()


            self.state = 4411
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.AS, plsqlParser.IS]:
                self.state = 4409
                self.object_as_part()
                pass
            elif token in [plsqlParser.UNDER]:
                self.state = 4410
                self.object_under_part()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.EXTERNAL:
                self.state = 4413
                self.sqlj_object_type()


            self.state = 4427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,617,self._ctx)
            if la_ == 1:
                self.state = 4416
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4417
                self.object_member_spec()
                self.state = 4422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4418
                    self.match(plsqlParser.COMMA)
                    self.state = 4419
                    self.object_member_spec()
                    self.state = 4424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4425
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.FINAL or _la==plsqlParser.INSTANTIABLE or _la==plsqlParser.NOT or _la==plsqlParser.OVERRIDING:
                self.state = 4429
                self.modifier_clause()
                self.state = 4434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_as_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OBJECT(self):
            return self.getToken(plsqlParser.OBJECT, 0)

        def varray_type_def(self):
            return self.getTypedRuleContext(plsqlParser.Varray_type_defContext,0)


        def nested_table_type_def(self):
            return self.getTypedRuleContext(plsqlParser.Nested_table_type_defContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_as_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_as_part" ):
                return visitor.visitObject_as_part(self)
            else:
                return visitor.visitChildren(self)




    def object_as_part(self):

        localctx = plsqlParser.Object_as_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_object_as_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4435
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.OBJECT]:
                self.state = 4436
                self.match(plsqlParser.OBJECT)
                pass
            elif token in [plsqlParser.VARRAY, plsqlParser.VARYING]:
                self.state = 4437
                self.varray_type_def()
                pass
            elif token in [plsqlParser.TABLE]:
                self.state = 4438
                self.nested_table_type_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_under_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(plsqlParser.UNDER, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_under_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_under_part" ):
                return visitor.visitObject_under_part(self)
            else:
                return visitor.visitChildren(self)




    def object_under_part(self):

        localctx = plsqlParser.Object_under_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_object_under_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4441
            self.match(plsqlParser.UNDER)
            self.state = 4442
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nested_table_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_nested_table_type_def

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNested_table_type_def" ):
                return visitor.visitNested_table_type_def(self)
            else:
                return visitor.visitChildren(self)




    def nested_table_type_def(self):

        localctx = plsqlParser.Nested_table_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_nested_table_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4444
            self.match(plsqlParser.TABLE)
            self.state = 4445
            self.match(plsqlParser.OF)
            self.state = 4446
            self.type_spec()
            self.state = 4449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,620,self._ctx)
            if la_ == 1:
                self.state = 4447
                self.match(plsqlParser.NOT)
                self.state = 4448
                self.match(plsqlParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sqlj_object_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def LANGUAGE(self):
            return self.getToken(plsqlParser.LANGUAGE, 0)

        def JAVA(self):
            return self.getToken(plsqlParser.JAVA, 0)

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def SQLDATA(self):
            return self.getToken(plsqlParser.SQLDATA, 0)

        def CUSTOMDATUM(self):
            return self.getToken(plsqlParser.CUSTOMDATUM, 0)

        def ORADATA(self):
            return self.getToken(plsqlParser.ORADATA, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_sqlj_object_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlj_object_type" ):
                return visitor.visitSqlj_object_type(self)
            else:
                return visitor.visitChildren(self)




    def sqlj_object_type(self):

        localctx = plsqlParser.Sqlj_object_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_sqlj_object_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4451
            self.match(plsqlParser.EXTERNAL)
            self.state = 4452
            self.match(plsqlParser.NAME)
            self.state = 4453
            self.expression(0)
            self.state = 4454
            self.match(plsqlParser.LANGUAGE)
            self.state = 4455
            self.match(plsqlParser.JAVA)
            self.state = 4456
            self.match(plsqlParser.USING)
            self.state = 4457
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CUSTOMDATUM or _la==plsqlParser.ORADATA or _la==plsqlParser.SQLDATA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def type_body_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_body_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_body_elementsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_type_body

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_body" ):
                return visitor.visitType_body(self)
            else:
                return visitor.visitChildren(self)




    def type_body(self):

        localctx = plsqlParser.Type_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_type_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4459
            self.match(plsqlParser.BODY)
            self.state = 4460
            self.type_name()
            self.state = 4461
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4463 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4462
                self.type_body_elements()
                self.state = 4465 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.MAP or _la==plsqlParser.MEMBER or _la==plsqlParser.ORDER or _la==plsqlParser.STATIC):
                    break

            self.state = 4467
            self.match(plsqlParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_body_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def map_order_func_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Map_order_func_declarationContext,0)


        def subprog_decl_in_type(self):
            return self.getTypedRuleContext(plsqlParser.Subprog_decl_in_typeContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_type_body_elements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_body_elements" ):
                return visitor.visitType_body_elements(self)
            else:
                return visitor.visitChildren(self)




    def type_body_elements(self):

        localctx = plsqlParser.Type_body_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_type_body_elements)
        try:
            self.state = 4471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MAP, plsqlParser.ORDER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4469
                self.map_order_func_declaration()
                pass
            elif token in [plsqlParser.MEMBER, plsqlParser.STATIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4470
                self.subprog_decl_in_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_order_func_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def func_decl_in_type(self):
            return self.getTypedRuleContext(plsqlParser.Func_decl_in_typeContext,0)


        def MAP(self):
            return self.getToken(plsqlParser.MAP, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_map_order_func_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMap_order_func_declaration" ):
                return visitor.visitMap_order_func_declaration(self)
            else:
                return visitor.visitChildren(self)




    def map_order_func_declaration(self):

        localctx = plsqlParser.Map_order_func_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_map_order_func_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4473
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MAP or _la==plsqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4474
            self.match(plsqlParser.MEMBER)
            self.state = 4475
            self.func_decl_in_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subprog_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(plsqlParser.STATIC, 0)

        def proc_decl_in_type(self):
            return self.getTypedRuleContext(plsqlParser.Proc_decl_in_typeContext,0)


        def func_decl_in_type(self):
            return self.getTypedRuleContext(plsqlParser.Func_decl_in_typeContext,0)


        def constructor_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Constructor_declarationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subprog_decl_in_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubprog_decl_in_type" ):
                return visitor.visitSubprog_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def subprog_decl_in_type(self):

        localctx = plsqlParser.Subprog_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_subprog_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4477
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MEMBER or _la==plsqlParser.STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.PROCEDURE]:
                self.state = 4478
                self.proc_decl_in_type()
                pass
            elif token in [plsqlParser.FUNCTION]:
                self.state = 4479
                self.func_decl_in_type()
                pass
            elif token in [plsqlParser.CONSTRUCTOR, plsqlParser.FINAL, plsqlParser.INSTANTIABLE]:
                self.state = 4480
                self.constructor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_proc_decl_in_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_decl_in_type" ):
                return visitor.visitProc_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def proc_decl_in_type(self):

        localctx = plsqlParser.Proc_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_proc_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4483
            self.match(plsqlParser.PROCEDURE)
            self.state = 4484
            self.procedure_name()
            self.state = 4485
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4486
            self.type_elements_parameter()
            self.state = 4491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4487
                self.match(plsqlParser.COMMA)
                self.state = 4488
                self.type_elements_parameter()
                self.state = 4493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4494
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 4495
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,627,self._ctx)
            if la_ == 1:
                self.state = 4496
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 4498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 4497
                    self.match(plsqlParser.DECLARE)


                self.state = 4503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CREATE - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PROCEDURE - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 4500
                    self.declare_spec()
                    self.state = 4505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4506
                self.body()
                self.state = 4507
                self.match(plsqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_func_decl_in_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_decl_in_type" ):
                return visitor.visitFunc_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def func_decl_in_type(self):

        localctx = plsqlParser.Func_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_func_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4511
            self.match(plsqlParser.FUNCTION)
            self.state = 4512
            self.function_name()
            self.state = 4524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4513
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4514
                self.type_elements_parameter()
                self.state = 4519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4515
                    self.match(plsqlParser.COMMA)
                    self.state = 4516
                    self.type_elements_parameter()
                    self.state = 4521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4522
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4526
            self.match(plsqlParser.RETURN)
            self.state = 4527
            self.type_spec()
            self.state = 4528
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,632,self._ctx)
            if la_ == 1:
                self.state = 4529
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 4531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 4530
                    self.match(plsqlParser.DECLARE)


                self.state = 4536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CREATE - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PROCEDURE - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 4533
                    self.declare_spec()
                    self.state = 4538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4539
                self.body()
                self.state = 4540
                self.match(plsqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(plsqlParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SELF)
            else:
                return self.getToken(plsqlParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def RESULT(self):
            return self.getToken(plsqlParser.RESULT, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def FINAL(self):
            return self.getToken(plsqlParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(plsqlParser.INSTANTIABLE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def OUT(self):
            return self.getToken(plsqlParser.OUT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_constructor_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor_declaration" ):
                return visitor.visitConstructor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def constructor_declaration(self):

        localctx = plsqlParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FINAL:
                self.state = 4544
                self.match(plsqlParser.FINAL)


            self.state = 4548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INSTANTIABLE:
                self.state = 4547
                self.match(plsqlParser.INSTANTIABLE)


            self.state = 4550
            self.match(plsqlParser.CONSTRUCTOR)
            self.state = 4551
            self.match(plsqlParser.FUNCTION)
            self.state = 4552
            self.type_spec()
            self.state = 4570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4553
                self.match(plsqlParser.LEFT_PAREN)

                self.state = 4554
                self.match(plsqlParser.SELF)
                self.state = 4555
                self.match(plsqlParser.IN)
                self.state = 4556
                self.match(plsqlParser.OUT)
                self.state = 4557
                self.type_spec()
                self.state = 4558
                self.match(plsqlParser.COMMA)
                self.state = 4560
                self.type_elements_parameter()
                self.state = 4565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4561
                    self.match(plsqlParser.COMMA)
                    self.state = 4562
                    self.type_elements_parameter()
                    self.state = 4567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4568
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4572
            self.match(plsqlParser.RETURN)
            self.state = 4573
            self.match(plsqlParser.SELF)
            self.state = 4574
            self.match(plsqlParser.AS)
            self.state = 4575
            self.match(plsqlParser.RESULT)
            self.state = 4576
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,639,self._ctx)
            if la_ == 1:
                self.state = 4577
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 4579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 4578
                    self.match(plsqlParser.DECLARE)


                self.state = 4584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CREATE - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PROCEDURE - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 4581
                    self.declare_spec()
                    self.state = 4586
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4587
                self.body()
                self.state = 4588
                self.match(plsqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modifier_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTANTIABLE(self):
            return self.getToken(plsqlParser.INSTANTIABLE, 0)

        def FINAL(self):
            return self.getToken(plsqlParser.FINAL, 0)

        def OVERRIDING(self):
            return self.getToken(plsqlParser.OVERRIDING, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_modifier_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier_clause" ):
                return visitor.visitModifier_clause(self)
            else:
                return visitor.visitChildren(self)




    def modifier_clause(self):

        localctx = plsqlParser.Modifier_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_modifier_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 4592
                self.match(plsqlParser.NOT)


            self.state = 4595
            _la = self._input.LA(1)
            if not(_la==plsqlParser.FINAL or _la==plsqlParser.INSTANTIABLE or _la==plsqlParser.OVERRIDING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_member_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def sqlj_object_type_attr(self):
            return self.getTypedRuleContext(plsqlParser.Sqlj_object_type_attrContext,0)


        def element_spec(self):
            return self.getTypedRuleContext(plsqlParser.Element_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_member_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_member_spec" ):
                return visitor.visitObject_member_spec(self)
            else:
                return visitor.visitChildren(self)




    def object_member_spec(self):

        localctx = plsqlParser.Object_member_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_object_member_spec)
        self._la = 0 # Token type
        try:
            self.state = 4603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,642,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4597
                self.r_id()
                self.state = 4598
                self.type_spec()
                self.state = 4600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.EXTERNAL:
                    self.state = 4599
                    self.sqlj_object_type_attr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4602
                self.element_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sqlj_object_type_attrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_sqlj_object_type_attr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlj_object_type_attr" ):
                return visitor.visitSqlj_object_type_attr(self)
            else:
                return visitor.visitChildren(self)




    def sqlj_object_type_attr(self):

        localctx = plsqlParser.Sqlj_object_type_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_sqlj_object_type_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4605
            self.match(plsqlParser.EXTERNAL)
            self.state = 4606
            self.match(plsqlParser.NAME)
            self.state = 4607
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier_clause(self):
            return self.getTypedRuleContext(plsqlParser.Modifier_clauseContext,0)


        def element_spec_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Element_spec_optionsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Element_spec_optionsContext,i)


        def COMMA(self):
            return self.getToken(plsqlParser.COMMA, 0)

        def pragma_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pragma_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_element_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_spec" ):
                return visitor.visitElement_spec(self)
            else:
                return visitor.visitChildren(self)




    def element_spec(self):

        localctx = plsqlParser.Element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_element_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,643,self._ctx)
            if la_ == 1:
                self.state = 4609
                self.modifier_clause()


            self.state = 4613 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4612
                self.element_spec_options()
                self.state = 4615 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.CONSTRUCTOR or _la==plsqlParser.FINAL or _la==plsqlParser.INSTANTIABLE or _la==plsqlParser.MAP or _la==plsqlParser.MEMBER or _la==plsqlParser.ORDER or _la==plsqlParser.STATIC):
                    break

            self.state = 4619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,645,self._ctx)
            if la_ == 1:
                self.state = 4617
                self.match(plsqlParser.COMMA)
                self.state = 4618
                self.pragma_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_spec_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subprogram_spec(self):
            return self.getTypedRuleContext(plsqlParser.Subprogram_specContext,0)


        def constructor_spec(self):
            return self.getTypedRuleContext(plsqlParser.Constructor_specContext,0)


        def map_order_function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Map_order_function_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_element_spec_options

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_spec_options" ):
                return visitor.visitElement_spec_options(self)
            else:
                return visitor.visitChildren(self)




    def element_spec_options(self):

        localctx = plsqlParser.Element_spec_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_element_spec_options)
        try:
            self.state = 4624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MEMBER, plsqlParser.STATIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4621
                self.subprogram_spec()
                pass
            elif token in [plsqlParser.CONSTRUCTOR, plsqlParser.FINAL, plsqlParser.INSTANTIABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4622
                self.constructor_spec()
                pass
            elif token in [plsqlParser.MAP, plsqlParser.ORDER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4623
                self.map_order_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subprogram_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(plsqlParser.STATIC, 0)

        def type_procedure_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_procedure_specContext,0)


        def type_function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_function_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subprogram_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubprogram_spec" ):
                return visitor.visitSubprogram_spec(self)
            else:
                return visitor.visitChildren(self)




    def subprogram_spec(self):

        localctx = plsqlParser.Subprogram_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_subprogram_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4626
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MEMBER or _la==plsqlParser.STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.PROCEDURE]:
                self.state = 4627
                self.type_procedure_spec()
                pass
            elif token in [plsqlParser.FUNCTION]:
                self.state = 4628
                self.type_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_procedure_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_type_procedure_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_procedure_spec" ):
                return visitor.visitType_procedure_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_procedure_spec(self):

        localctx = plsqlParser.Type_procedure_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_type_procedure_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4631
            self.match(plsqlParser.PROCEDURE)
            self.state = 4632
            self.procedure_name()
            self.state = 4633
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4634
            self.type_elements_parameter()
            self.state = 4639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4635
                self.match(plsqlParser.COMMA)
                self.state = 4636
                self.type_elements_parameter()
                self.state = 4641
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4642
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 4645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS or _la==plsqlParser.IS:
                self.state = 4643
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4644
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def SELF(self):
            return self.getToken(plsqlParser.SELF, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def RESULT(self):
            return self.getToken(plsqlParser.RESULT, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def VARIABLE(self):
            return self.getToken(plsqlParser.VARIABLE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_type_function_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_function_spec" ):
                return visitor.visitType_function_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_function_spec(self):

        localctx = plsqlParser.Type_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_type_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4647
            self.match(plsqlParser.FUNCTION)
            self.state = 4648
            self.function_name()
            self.state = 4660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4649
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4650
                self.type_elements_parameter()
                self.state = 4655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4651
                    self.match(plsqlParser.COMMA)
                    self.state = 4652
                    self.type_elements_parameter()
                    self.state = 4657
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4658
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4662
            self.match(plsqlParser.RETURN)
            self.state = 4667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,652,self._ctx)
            if la_ == 1:
                self.state = 4663
                self.type_spec()
                pass

            elif la_ == 2:
                self.state = 4664
                self.match(plsqlParser.SELF)
                self.state = 4665
                self.match(plsqlParser.AS)
                self.state = 4666
                self.match(plsqlParser.RESULT)
                pass


            self.state = 4677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.AS, plsqlParser.IS]:
                self.state = 4669
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4670
                self.call_spec()
                pass
            elif token in [plsqlParser.EXTERNAL]:
                self.state = 4671
                self.match(plsqlParser.EXTERNAL)
                self.state = 4673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.VARIABLE:
                    self.state = 4672
                    self.match(plsqlParser.VARIABLE)


                self.state = 4675
                self.match(plsqlParser.NAME)
                self.state = 4676
                self.expression(0)
                pass
            elif token in [plsqlParser.EOF, plsqlParser.ALTER, plsqlParser.CASCADE, plsqlParser.CONSTRUCTOR, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DROP, plsqlParser.EXPLAIN, plsqlParser.FINAL, plsqlParser.FUNCTION, plsqlParser.INSERT, plsqlParser.INSTANTIABLE, plsqlParser.INVALIDATE, plsqlParser.LOCK, plsqlParser.MAP, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.ORDER, plsqlParser.PROCEDURE, plsqlParser.SELECT, plsqlParser.STATIC, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN, plsqlParser.RIGHT_PAREN, plsqlParser.COMMA, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(plsqlParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SELF)
            else:
                return self.getToken(plsqlParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def RESULT(self):
            return self.getToken(plsqlParser.RESULT, 0)

        def FINAL(self):
            return self.getToken(plsqlParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(plsqlParser.INSTANTIABLE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def OUT(self):
            return self.getToken(plsqlParser.OUT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_constructor_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor_spec" ):
                return visitor.visitConstructor_spec(self)
            else:
                return visitor.visitChildren(self)




    def constructor_spec(self):

        localctx = plsqlParser.Constructor_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_constructor_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FINAL:
                self.state = 4679
                self.match(plsqlParser.FINAL)


            self.state = 4683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INSTANTIABLE:
                self.state = 4682
                self.match(plsqlParser.INSTANTIABLE)


            self.state = 4685
            self.match(plsqlParser.CONSTRUCTOR)
            self.state = 4686
            self.match(plsqlParser.FUNCTION)
            self.state = 4687
            self.type_spec()
            self.state = 4705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4688
                self.match(plsqlParser.LEFT_PAREN)

                self.state = 4689
                self.match(plsqlParser.SELF)
                self.state = 4690
                self.match(plsqlParser.IN)
                self.state = 4691
                self.match(plsqlParser.OUT)
                self.state = 4692
                self.type_spec()
                self.state = 4693
                self.match(plsqlParser.COMMA)
                self.state = 4695
                self.type_elements_parameter()
                self.state = 4700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4696
                    self.match(plsqlParser.COMMA)
                    self.state = 4697
                    self.type_elements_parameter()
                    self.state = 4702
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4703
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4707
            self.match(plsqlParser.RETURN)
            self.state = 4708
            self.match(plsqlParser.SELF)
            self.state = 4709
            self.match(plsqlParser.AS)
            self.state = 4710
            self.match(plsqlParser.RESULT)
            self.state = 4713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS or _la==plsqlParser.IS:
                self.state = 4711
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4712
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_order_function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def type_function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_function_specContext,0)


        def MAP(self):
            return self.getToken(plsqlParser.MAP, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_map_order_function_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMap_order_function_spec" ):
                return visitor.visitMap_order_function_spec(self)
            else:
                return visitor.visitChildren(self)




    def map_order_function_spec(self):

        localctx = plsqlParser.Map_order_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_map_order_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4715
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MAP or _la==plsqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4716
            self.match(plsqlParser.MEMBER)
            self.state = 4717
            self.type_function_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(plsqlParser.PRAGMA, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(plsqlParser.RESTRICT_REFERENCES, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def pragma_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Pragma_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Pragma_elementsContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_pragma_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_clause" ):
                return visitor.visitPragma_clause(self)
            else:
                return visitor.visitChildren(self)




    def pragma_clause(self):

        localctx = plsqlParser.Pragma_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_pragma_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4719
            self.match(plsqlParser.PRAGMA)
            self.state = 4720
            self.match(plsqlParser.RESTRICT_REFERENCES)
            self.state = 4721
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4722
            self.pragma_elements()
            self.state = 4727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4723
                self.match(plsqlParser.COMMA)
                self.state = 4724
                self.pragma_elements()
                self.state = 4729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4730
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_pragma_elements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_elements" ):
                return visitor.visitPragma_elements(self)
            else:
                return visitor.visitChildren(self)




    def pragma_elements(self):

        localctx = plsqlParser.Pragma_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_pragma_elements)
        try:
            self.state = 4734
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4732
                self.r_id()
                pass
            elif token in [plsqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4733
                self.match(plsqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_elements_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(plsqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_type_elements_parameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_elements_parameter" ):
                return visitor.visitType_elements_parameter(self)
            else:
                return visitor.visitChildren(self)




    def type_elements_parameter(self):

        localctx = plsqlParser.Type_elements_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_type_elements_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4736
            self.parameter_name()
            self.state = 4737
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def SEQUENCE(self):
            return self.getToken(plsqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(plsqlParser.Sequence_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_sequence

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_sequence" ):
                return visitor.visitDrop_sequence(self)
            else:
                return visitor.visitChildren(self)




    def drop_sequence(self):

        localctx = plsqlParser.Drop_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_drop_sequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4739
            self.match(plsqlParser.DROP)
            self.state = 4740
            self.match(plsqlParser.SEQUENCE)
            self.state = 4741
            self.sequence_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def SEQUENCE(self):
            return self.getToken(plsqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(plsqlParser.Sequence_nameContext,0)


        def sequence_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sequence_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sequence_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_sequence

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_sequence" ):
                return visitor.visitAlter_sequence(self)
            else:
                return visitor.visitChildren(self)




    def alter_sequence(self):

        localctx = plsqlParser.Alter_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_alter_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4743
            self.match(plsqlParser.ALTER)
            self.state = 4744
            self.match(plsqlParser.SEQUENCE)
            self.state = 4745
            self.sequence_name()
            self.state = 4747 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4746
                self.sequence_spec()
                self.state = 4749 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.CACHE or _la==plsqlParser.CYCLE or _la==plsqlParser.INCREMENT or ((((_la - 278)) & ~0x3f) == 0 and ((1 << (_la - 278)) & ((1 << (plsqlParser.MAXVALUE - 278)) | (1 << (plsqlParser.MINVALUE - 278)) | (1 << (plsqlParser.NOCACHE - 278)) | (1 << (plsqlParser.NOCYCLE - 278)) | (1 << (plsqlParser.NOMAXVALUE - 278)) | (1 << (plsqlParser.NOMINVALUE - 278)) | (1 << (plsqlParser.NOORDER - 278)))) != 0) or _la==plsqlParser.ORDER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def SEQUENCE(self):
            return self.getToken(plsqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(plsqlParser.Sequence_nameContext,0)


        def sequence_start_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sequence_start_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sequence_start_clauseContext,i)


        def sequence_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sequence_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sequence_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_create_sequence

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_sequence" ):
                return visitor.visitCreate_sequence(self)
            else:
                return visitor.visitChildren(self)




    def create_sequence(self):

        localctx = plsqlParser.Create_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_create_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4751
            self.match(plsqlParser.CREATE)
            self.state = 4752
            self.match(plsqlParser.SEQUENCE)
            self.state = 4753
            self.sequence_name()
            self.state = 4758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.CACHE or _la==plsqlParser.CYCLE or _la==plsqlParser.INCREMENT or ((((_la - 278)) & ~0x3f) == 0 and ((1 << (_la - 278)) & ((1 << (plsqlParser.MAXVALUE - 278)) | (1 << (plsqlParser.MINVALUE - 278)) | (1 << (plsqlParser.NOCACHE - 278)) | (1 << (plsqlParser.NOCYCLE - 278)) | (1 << (plsqlParser.NOMAXVALUE - 278)) | (1 << (plsqlParser.NOMINVALUE - 278)) | (1 << (plsqlParser.NOORDER - 278)))) != 0) or _la==plsqlParser.ORDER or _la==plsqlParser.START:
                self.state = 4756
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.START]:
                    self.state = 4754
                    self.sequence_start_clause()
                    pass
                elif token in [plsqlParser.CACHE, plsqlParser.CYCLE, plsqlParser.INCREMENT, plsqlParser.MAXVALUE, plsqlParser.MINVALUE, plsqlParser.NOCACHE, plsqlParser.NOCYCLE, plsqlParser.NOMAXVALUE, plsqlParser.NOMINVALUE, plsqlParser.NOORDER, plsqlParser.ORDER]:
                    self.state = 4755
                    self.sequence_spec()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4760
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(plsqlParser.INCREMENT, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def MAXVALUE(self):
            return self.getToken(plsqlParser.MAXVALUE, 0)

        def NOMAXVALUE(self):
            return self.getToken(plsqlParser.NOMAXVALUE, 0)

        def MINVALUE(self):
            return self.getToken(plsqlParser.MINVALUE, 0)

        def NOMINVALUE(self):
            return self.getToken(plsqlParser.NOMINVALUE, 0)

        def CYCLE(self):
            return self.getToken(plsqlParser.CYCLE, 0)

        def NOCYCLE(self):
            return self.getToken(plsqlParser.NOCYCLE, 0)

        def CACHE(self):
            return self.getToken(plsqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(plsqlParser.NOCACHE, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def NOORDER(self):
            return self.getToken(plsqlParser.NOORDER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_sequence_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_spec" ):
                return visitor.visitSequence_spec(self)
            else:
                return visitor.visitChildren(self)




    def sequence_spec(self):

        localctx = plsqlParser.Sequence_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_sequence_spec)
        try:
            self.state = 4777
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INCREMENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4761
                self.match(plsqlParser.INCREMENT)
                self.state = 4762
                self.match(plsqlParser.BY)
                self.state = 4763
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4764
                self.match(plsqlParser.MAXVALUE)
                self.state = 4765
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.NOMAXVALUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4766
                self.match(plsqlParser.NOMAXVALUE)
                pass
            elif token in [plsqlParser.MINVALUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4767
                self.match(plsqlParser.MINVALUE)
                self.state = 4768
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.NOMINVALUE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4769
                self.match(plsqlParser.NOMINVALUE)
                pass
            elif token in [plsqlParser.CYCLE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4770
                self.match(plsqlParser.CYCLE)
                pass
            elif token in [plsqlParser.NOCYCLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4771
                self.match(plsqlParser.NOCYCLE)
                pass
            elif token in [plsqlParser.CACHE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4772
                self.match(plsqlParser.CACHE)
                self.state = 4773
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.NOCACHE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4774
                self.match(plsqlParser.NOCACHE)
                pass
            elif token in [plsqlParser.ORDER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4775
                self.match(plsqlParser.ORDER)
                pass
            elif token in [plsqlParser.NOORDER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4776
                self.match(plsqlParser.NOORDER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_start_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(plsqlParser.START, 0)

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_sequence_start_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_start_clause" ):
                return visitor.visitSequence_start_clause(self)
            else:
                return visitor.visitChildren(self)




    def sequence_start_clause(self):

        localctx = plsqlParser.Sequence_start_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_sequence_start_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4779
            self.match(plsqlParser.START)
            self.state = 4780
            self.match(plsqlParser.WITH)
            self.state = 4781
            self.match(plsqlParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invoker_rights_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHID(self):
            return self.getToken(plsqlParser.AUTHID, 0)

        def CURRENT_USER(self):
            return self.getToken(plsqlParser.CURRENT_USER, 0)

        def DEFINER(self):
            return self.getToken(plsqlParser.DEFINER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_invoker_rights_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvoker_rights_clause" ):
                return visitor.visitInvoker_rights_clause(self)
            else:
                return visitor.visitChildren(self)




    def invoker_rights_clause(self):

        localctx = plsqlParser.Invoker_rights_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_invoker_rights_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4783
            self.match(plsqlParser.AUTHID)
            self.state = 4784
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CURRENT_USER or _la==plsqlParser.DEFINER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compiler_parameters_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_compiler_parameters_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompiler_parameters_clause" ):
                return visitor.visitCompiler_parameters_clause(self)
            else:
                return visitor.visitChildren(self)




    def compiler_parameters_clause(self):

        localctx = plsqlParser.Compiler_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_compiler_parameters_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4786
            self.r_id()
            self.state = 4787
            self.match(plsqlParser.EQUALS_OP)
            self.state = 4788
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(plsqlParser.LANGUAGE, 0)

        def java_spec(self):
            return self.getTypedRuleContext(plsqlParser.Java_specContext,0)


        def c_spec(self):
            return self.getTypedRuleContext(plsqlParser.C_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_call_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall_spec" ):
                return visitor.visitCall_spec(self)
            else:
                return visitor.visitChildren(self)




    def call_spec(self):

        localctx = plsqlParser.Call_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_call_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4790
            self.match(plsqlParser.LANGUAGE)
            self.state = 4793
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.JAVA]:
                self.state = 4791
                self.java_spec()
                pass
            elif token in [plsqlParser.C_LETTER]:
                self.state = 4792
                self.c_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Java_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JAVA(self):
            return self.getToken(plsqlParser.JAVA, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_java_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJava_spec" ):
                return visitor.visitJava_spec(self)
            else:
                return visitor.visitChildren(self)




    def java_spec(self):

        localctx = plsqlParser.Java_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_java_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4795
            self.match(plsqlParser.JAVA)
            self.state = 4796
            self.match(plsqlParser.NAME)
            self.state = 4797
            self.match(plsqlParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class C_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C_LETTER(self):
            return self.getToken(plsqlParser.C_LETTER, 0)

        def LIBRARY(self):
            return self.getToken(plsqlParser.LIBRARY, 0)

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def c_agent_in_clause(self):
            return self.getTypedRuleContext(plsqlParser.C_agent_in_clauseContext,0)


        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def CONTEXT(self):
            return self.getToken(plsqlParser.CONTEXT, 0)

        def c_parameters_clause(self):
            return self.getTypedRuleContext(plsqlParser.C_parameters_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_c_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_spec" ):
                return visitor.visitC_spec(self)
            else:
                return visitor.visitChildren(self)




    def c_spec(self):

        localctx = plsqlParser.C_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_c_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4799
            self.match(plsqlParser.C_LETTER)
            self.state = 4802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NAME:
                self.state = 4800
                self.match(plsqlParser.NAME)
                self.state = 4801
                self.match(plsqlParser.CHAR_STRING)


            self.state = 4804
            self.match(plsqlParser.LIBRARY)
            self.state = 4805
            self.r_id()
            self.state = 4807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,668,self._ctx)
            if la_ == 1:
                self.state = 4806
                self.c_agent_in_clause()


            self.state = 4811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,669,self._ctx)
            if la_ == 1:
                self.state = 4809
                self.match(plsqlParser.WITH)
                self.state = 4810
                self.match(plsqlParser.CONTEXT)


            self.state = 4814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,670,self._ctx)
            if la_ == 1:
                self.state = 4813
                self.c_parameters_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class C_agent_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AGENT(self):
            return self.getToken(plsqlParser.AGENT, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_c_agent_in_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_agent_in_clause" ):
                return visitor.visitC_agent_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def c_agent_in_clause(self):

        localctx = plsqlParser.C_agent_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_c_agent_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4816
            self.match(plsqlParser.AGENT)
            self.state = 4817
            self.match(plsqlParser.IN)
            self.state = 4818
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4819
            self.expression(0)
            self.state = 4824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4820
                self.match(plsqlParser.COMMA)
                self.state = 4821
                self.expression(0)
                self.state = 4826
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4827
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class C_parameters_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERS(self):
            return self.getToken(plsqlParser.PARAMETERS, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_c_parameters_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_parameters_clause" ):
                return visitor.visitC_parameters_clause(self)
            else:
                return visitor.visitChildren(self)




    def c_parameters_clause(self):

        localctx = plsqlParser.C_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_c_parameters_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4829
            self.match(plsqlParser.PARAMETERS)
            self.state = 4830
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALL, plsqlParser.ANALYZE, plsqlParser.ANY, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONNECT_BY_ROOT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DISTINCT, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXISTS, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FALSE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NOT, plsqlParser.NVL, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITION, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIOR, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUE, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.PLUS_SIGN, plsqlParser.MINUS_SIGN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                self.state = 4831
                self.expression(0)
                self.state = 4836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4832
                    self.match(plsqlParser.COMMA)
                    self.state = 4833
                    self.expression(0)
                    self.state = 4838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [plsqlParser.PERIOD]:
                self.state = 4839
                self.match(plsqlParser.PERIOD)
                self.state = 4840
                self.match(plsqlParser.PERIOD)
                self.state = 4841
                self.match(plsqlParser.PERIOD)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4844
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(plsqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(plsqlParser.Default_value_partContext,0)


        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.IN)
            else:
                return self.getToken(plsqlParser.IN, i)

        def OUT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OUT)
            else:
                return self.getToken(plsqlParser.OUT, i)

        def INOUT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INOUT)
            else:
                return self.getToken(plsqlParser.INOUT, i)

        def NOCOPY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NOCOPY)
            else:
                return self.getToken(plsqlParser.NOCOPY, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_parameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = plsqlParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4846
            self.parameter_name()
            self.state = 4850
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,674,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4847
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.IN or _la==plsqlParser.INOUT or _la==plsqlParser.NOCOPY or _la==plsqlParser.OUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 4852
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,674,self._ctx)

            self.state = 4854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 4853
                self.type_spec()


            self.state = 4857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP:
                self.state = 4856
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def ASSIGN_OP(self):
            return self.getToken(plsqlParser.ASSIGN_OP, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_default_value_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_value_part" ):
                return visitor.visitDefault_value_part(self)
            else:
                return visitor.visitChildren(self)




    def default_value_part(self):

        localctx = plsqlParser.Default_value_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_default_value_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4859
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4860
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Exception_declarationContext,0)


        def pragma_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Pragma_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Record_declarationContext,0)


        def table_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Table_declarationContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_procedure_bodyContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_function_bodyContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_declare_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_spec" ):
                return visitor.visitDeclare_spec(self)
            else:
                return visitor.visitChildren(self)




    def declare_spec(self):

        localctx = plsqlParser.Declare_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_declare_spec)
        try:
            self.state = 4871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,677,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4862
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4863
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4864
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4865
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4866
                self.pragma_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4867
                self.record_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4868
                self.table_declaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4869
                self.create_procedure_body()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4870
                self.create_function_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(plsqlParser.Variable_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def CONSTANT(self):
            return self.getToken(plsqlParser.CONSTANT, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(plsqlParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_variable_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_declaration" ):
                return visitor.visitVariable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def variable_declaration(self):

        localctx = plsqlParser.Variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_variable_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4873
            self.variable_name()
            self.state = 4875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,678,self._ctx)
            if la_ == 1:
                self.state = 4874
                self.match(plsqlParser.CONSTANT)


            self.state = 4877
            self.type_spec()
            self.state = 4880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 4878
                self.match(plsqlParser.NOT)
                self.state = 4879
                self.match(plsqlParser.NULL)


            self.state = 4883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP:
                self.state = 4882
                self.default_value_part()


            self.state = 4885
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subtype_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBTYPE(self):
            return self.getToken(plsqlParser.SUBTYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_subtype_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtype_declaration" ):
                return visitor.visitSubtype_declaration(self)
            else:
                return visitor.visitChildren(self)




    def subtype_declaration(self):

        localctx = plsqlParser.Subtype_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_subtype_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4887
            self.match(plsqlParser.SUBTYPE)
            self.state = 4888
            self.type_name()
            self.state = 4889
            self.match(plsqlParser.IS)
            self.state = 4890
            self.type_spec()
            self.state = 4896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RANGE:
                self.state = 4891
                self.match(plsqlParser.RANGE)
                self.state = 4892
                self.expression(0)
                self.state = 4893
                self.match(plsqlParser.T__0)
                self.state = 4894
                self.expression(0)


            self.state = 4900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 4898
                self.match(plsqlParser.NOT)
                self.state = 4899
                self.match(plsqlParser.NULL)


            self.state = 4902
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Parameter_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Parameter_specContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_declaration" ):
                return visitor.visitCursor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def cursor_declaration(self):

        localctx = plsqlParser.Cursor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_cursor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4904
            self.match(plsqlParser.CURSOR)
            self.state = 4905
            self.cursor_name()
            self.state = 4917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4906
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4907
                self.parameter_spec()
                self.state = 4912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4908
                    self.match(plsqlParser.COMMA)
                    self.state = 4909
                    self.parameter_spec()
                    self.state = 4914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4915
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN:
                self.state = 4919
                self.match(plsqlParser.RETURN)
                self.state = 4920
                self.type_spec()


            self.state = 4925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.IS:
                self.state = 4923
                self.match(plsqlParser.IS)
                self.state = 4924
                self.select_statement()


            self.state = 4927
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(plsqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(plsqlParser.Default_value_partContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_parameter_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_spec" ):
                return visitor.visitParameter_spec(self)
            else:
                return visitor.visitChildren(self)




    def parameter_spec(self):

        localctx = plsqlParser.Parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_parameter_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4929
            self.parameter_name()
            self.state = 4934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.IN - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 4931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IN:
                    self.state = 4930
                    self.match(plsqlParser.IN)


                self.state = 4933
                self.type_spec()


            self.state = 4937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP:
                self.state = 4936
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exception_name(self):
            return self.getTypedRuleContext(plsqlParser.Exception_nameContext,0)


        def EXCEPTION(self):
            return self.getToken(plsqlParser.EXCEPTION, 0)

        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_exception_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_declaration" ):
                return visitor.visitException_declaration(self)
            else:
                return visitor.visitChildren(self)




    def exception_declaration(self):

        localctx = plsqlParser.Exception_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_exception_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4939
            self.exception_name()
            self.state = 4940
            self.match(plsqlParser.EXCEPTION)
            self.state = 4941
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.id1 = None # R_idContext

        def PRAGMA(self):
            return self.getToken(plsqlParser.PRAGMA, 0)

        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(plsqlParser.SERIALLY_REUSABLE, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(plsqlParser.EXCEPTION_INIT, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def exception_name(self):
            return self.getTypedRuleContext(plsqlParser.Exception_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def numeric_negative(self):
            return self.getTypedRuleContext(plsqlParser.Numeric_negativeContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def INLINE(self):
            return self.getToken(plsqlParser.INLINE, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RESTRICT_REFERENCES(self):
            return self.getToken(plsqlParser.RESTRICT_REFERENCES, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(plsqlParser.R_idContext,i)


        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_pragma_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_declaration" ):
                return visitor.visitPragma_declaration(self)
            else:
                return visitor.visitChildren(self)




    def pragma_declaration(self):

        localctx = plsqlParser.Pragma_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_pragma_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4943
            self.match(plsqlParser.PRAGMA)
            self.state = 4974
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SERIALLY_REUSABLE]:
                self.state = 4944
                self.match(plsqlParser.SERIALLY_REUSABLE)
                pass
            elif token in [plsqlParser.AUTONOMOUS_TRANSACTION]:
                self.state = 4945
                self.match(plsqlParser.AUTONOMOUS_TRANSACTION)
                pass
            elif token in [plsqlParser.EXCEPTION_INIT]:
                self.state = 4946
                self.match(plsqlParser.EXCEPTION_INIT)
                self.state = 4947
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4948
                self.exception_name()
                self.state = 4949
                self.match(plsqlParser.COMMA)
                self.state = 4950
                self.numeric_negative()
                self.state = 4951
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.INLINE]:
                self.state = 4953
                self.match(plsqlParser.INLINE)
                self.state = 4954
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4955
                localctx.id1 = self.r_id()
                self.state = 4956
                self.match(plsqlParser.COMMA)
                self.state = 4957
                self.expression(0)
                self.state = 4958
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.RESTRICT_REFERENCES]:
                self.state = 4960
                self.match(plsqlParser.RESTRICT_REFERENCES)
                self.state = 4961
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4964
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                    self.state = 4962
                    self.r_id()
                    pass
                elif token in [plsqlParser.DEFAULT]:
                    self.state = 4963
                    self.match(plsqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4968 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4966
                    self.match(plsqlParser.COMMA)
                    self.state = 4967
                    self.r_id()
                    self.state = 4970 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.COMMA):
                        break

                self.state = 4972
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4976
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_type_dec(self):
            return self.getTypedRuleContext(plsqlParser.Record_type_decContext,0)


        def record_var_dec(self):
            return self.getTypedRuleContext(plsqlParser.Record_var_decContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_record_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_declaration" ):
                return visitor.visitRecord_declaration(self)
            else:
                return visitor.visitChildren(self)




    def record_declaration(self):

        localctx = plsqlParser.Record_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_record_declaration)
        try:
            self.state = 4980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,693,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4978
                self.record_type_dec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4979
                self.record_var_dec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_type_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def RECORD(self):
            return self.getToken(plsqlParser.RECORD, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def field_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Field_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Field_specContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def REF(self):
            return self.getToken(plsqlParser.REF, 0)

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_record_type_dec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_type_dec" ):
                return visitor.visitRecord_type_dec(self)
            else:
                return visitor.visitChildren(self)




    def record_type_dec(self):

        localctx = plsqlParser.Record_type_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_record_type_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4982
            self.match(plsqlParser.TYPE)
            self.state = 4983
            self.type_name()
            self.state = 4984
            self.match(plsqlParser.IS)
            self.state = 5003
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.RECORD]:
                self.state = 4985
                self.match(plsqlParser.RECORD)
                self.state = 4986
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4987
                self.field_spec()
                self.state = 4992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4988
                    self.match(plsqlParser.COMMA)
                    self.state = 4989
                    self.field_spec()
                    self.state = 4994
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4995
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.REF]:
                self.state = 4997
                self.match(plsqlParser.REF)
                self.state = 4998
                self.match(plsqlParser.CURSOR)
                self.state = 5001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.RETURN:
                    self.state = 4999
                    self.match(plsqlParser.RETURN)
                    self.state = 5000
                    self.type_spec()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 5005
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(plsqlParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_field_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_spec" ):
                return visitor.visitField_spec(self)
            else:
                return visitor.visitChildren(self)




    def field_spec(self):

        localctx = plsqlParser.Field_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_field_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5007
            self.column_name()
            self.state = 5009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5008
                self.type_spec()


            self.state = 5013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 5011
                self.match(plsqlParser.NOT)
                self.state = 5012
                self.match(plsqlParser.NULL)


            self.state = 5016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP:
                self.state = 5015
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_var_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_name(self):
            return self.getTypedRuleContext(plsqlParser.Record_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def PERCENT_ROWTYPE(self):
            return self.getToken(plsqlParser.PERCENT_ROWTYPE, 0)

        def PERCENT_TYPE(self):
            return self.getToken(plsqlParser.PERCENT_TYPE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_record_var_dec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_var_dec" ):
                return visitor.visitRecord_var_dec(self)
            else:
                return visitor.visitChildren(self)




    def record_var_dec(self):

        localctx = plsqlParser.Record_var_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_record_var_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5018
            self.record_name()
            self.state = 5019
            self.type_name()
            self.state = 5020
            _la = self._input.LA(1)
            if not(_la==plsqlParser.PERCENT_ROWTYPE or _la==plsqlParser.PERCENT_TYPE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5021
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def table_type_dec(self):
            return self.getTypedRuleContext(plsqlParser.Table_type_decContext,0)


        def table_var_dec(self):
            return self.getTypedRuleContext(plsqlParser.Table_var_decContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_declaration" ):
                return visitor.visitTable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def table_declaration(self):

        localctx = plsqlParser.Table_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_table_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,700,self._ctx)
            if la_ == 1:
                self.state = 5023
                self.table_type_dec()
                pass

            elif la_ == 2:
                self.state = 5024
                self.table_var_dec()
                pass


            self.state = 5027
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_type_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def varray_type_def(self):
            return self.getTypedRuleContext(plsqlParser.Varray_type_defContext,0)


        def table_indexed_by_part(self):
            return self.getTypedRuleContext(plsqlParser.Table_indexed_by_partContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_type_dec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_type_dec" ):
                return visitor.visitTable_type_dec(self)
            else:
                return visitor.visitChildren(self)




    def table_type_dec(self):

        localctx = plsqlParser.Table_type_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_table_type_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5029
            self.match(plsqlParser.TYPE)
            self.state = 5030
            self.type_name()
            self.state = 5031
            self.match(plsqlParser.IS)
            self.state = 5043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TABLE]:
                self.state = 5032
                self.match(plsqlParser.TABLE)
                self.state = 5033
                self.match(plsqlParser.OF)
                self.state = 5034
                self.type_spec()
                self.state = 5036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.INDEX or _la==plsqlParser.INDEXED:
                    self.state = 5035
                    self.table_indexed_by_part()


                self.state = 5040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NOT:
                    self.state = 5038
                    self.match(plsqlParser.NOT)
                    self.state = 5039
                    self.match(plsqlParser.NULL)


                pass
            elif token in [plsqlParser.VARRAY, plsqlParser.VARYING]:
                self.state = 5042
                self.varray_type_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_indexed_by_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.idx1 = None # Token
            self.idx2 = None # Token

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def INDEXED(self):
            return self.getToken(plsqlParser.INDEXED, 0)

        def INDEX(self):
            return self.getToken(plsqlParser.INDEX, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_indexed_by_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_indexed_by_part" ):
                return visitor.visitTable_indexed_by_part(self)
            else:
                return visitor.visitChildren(self)




    def table_indexed_by_part(self):

        localctx = plsqlParser.Table_indexed_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_table_indexed_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INDEXED]:
                self.state = 5045
                localctx.idx1 = self.match(plsqlParser.INDEXED)
                pass
            elif token in [plsqlParser.INDEX]:
                self.state = 5046
                localctx.idx2 = self.match(plsqlParser.INDEX)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5049
            self.match(plsqlParser.BY)
            self.state = 5050
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Varray_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def VARRAY(self):
            return self.getToken(plsqlParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(plsqlParser.VARYING, 0)

        def ARRAY(self):
            return self.getToken(plsqlParser.ARRAY, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_varray_type_def

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarray_type_def" ):
                return visitor.visitVarray_type_def(self)
            else:
                return visitor.visitChildren(self)




    def varray_type_def(self):

        localctx = plsqlParser.Varray_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_varray_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5055
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.VARRAY]:
                self.state = 5052
                self.match(plsqlParser.VARRAY)
                pass
            elif token in [plsqlParser.VARYING]:
                self.state = 5053
                self.match(plsqlParser.VARYING)
                self.state = 5054
                self.match(plsqlParser.ARRAY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5057
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5058
            self.expression(0)
            self.state = 5059
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 5060
            self.match(plsqlParser.OF)
            self.state = 5061
            self.type_spec()
            self.state = 5064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,706,self._ctx)
            if la_ == 1:
                self.state = 5062
                self.match(plsqlParser.NOT)
                self.state = 5063
                self.match(plsqlParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_var_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_var_name(self):
            return self.getTypedRuleContext(plsqlParser.Table_var_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_var_dec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_var_dec" ):
                return visitor.visitTable_var_dec(self)
            else:
                return visitor.visitChildren(self)




    def table_var_dec(self):

        localctx = plsqlParser.Table_var_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_table_var_dec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5066
            self.table_var_name()
            self.state = 5067
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Seq_of_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.StatementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.StatementContext,i)


        def label_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Label_declarationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Label_declarationContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SEMICOLON)
            else:
                return self.getToken(plsqlParser.SEMICOLON, i)

        def EOF(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.EOF)
            else:
                return self.getToken(plsqlParser.EOF, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_seq_of_statements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeq_of_statements" ):
                return visitor.visitSeq_of_statements(self)
            else:
                return visitor.visitChildren(self)




    def seq_of_statements(self):

        localctx = plsqlParser.Seq_of_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_seq_of_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5073 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5073
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALTER, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BEGIN, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CREATE, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECLARE, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DELETE, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FETCH, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FOR, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GOTO, plsqlParser.GRANT, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IF, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSERT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCK, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PROCEDURE, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATE, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITH, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                        self.state = 5069
                        self.statement()
                        self.state = 5070
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.EOF or _la==plsqlParser.SEMICOLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [plsqlParser.LESS_THAN_OP]:
                        self.state = 5072
                        self.label_declaration()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 5075 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,708,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ltp1 = None # Token

        def LESS_THAN_OP(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LESS_THAN_OP)
            else:
                return self.getToken(plsqlParser.LESS_THAN_OP, i)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def GREATER_THAN_OP(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.GREATER_THAN_OP)
            else:
                return self.getToken(plsqlParser.GREATER_THAN_OP, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_label_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_declaration" ):
                return visitor.visitLabel_declaration(self)
            else:
                return visitor.visitChildren(self)




    def label_declaration(self):

        localctx = plsqlParser.Label_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_label_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5077
            localctx.ltp1 = self.match(plsqlParser.LESS_THAN_OP)
            self.state = 5078
            self.match(plsqlParser.LESS_THAN_OP)
            self.state = 5079
            self.label_name()
            self.state = 5080
            self.match(plsqlParser.GREATER_THAN_OP)
            self.state = 5081
            self.match(plsqlParser.GREATER_THAN_OP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def swallow_to_semi(self):
            return self.getTypedRuleContext(plsqlParser.Swallow_to_semiContext,0)


        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def GRANT(self):
            return self.getToken(plsqlParser.GRANT, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def TRUNCATE(self):
            return self.getToken(plsqlParser.TRUNCATE, 0)

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def block(self):
            return self.getTypedRuleContext(plsqlParser.BlockContext,0)


        def assignment_statement(self):
            return self.getTypedRuleContext(plsqlParser.Assignment_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(plsqlParser.Continue_statementContext,0)


        def exit_statement(self):
            return self.getTypedRuleContext(plsqlParser.Exit_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(plsqlParser.Goto_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(plsqlParser.If_statementContext,0)


        def loop_statement(self):
            return self.getTypedRuleContext(plsqlParser.Loop_statementContext,0)


        def forall_statement(self):
            return self.getTypedRuleContext(plsqlParser.Forall_statementContext,0)


        def null_statement(self):
            return self.getTypedRuleContext(plsqlParser.Null_statementContext,0)


        def raise_statement(self):
            return self.getTypedRuleContext(plsqlParser.Raise_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(plsqlParser.Return_statementContext,0)


        def case_statement(self):
            return self.getTypedRuleContext(plsqlParser.Case_statementContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(plsqlParser.Sql_statementContext,0)


        def function_call(self):
            return self.getTypedRuleContext(plsqlParser.Function_callContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = plsqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_statement)
        try:
            self.state = 5109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,710,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5083
                self.match(plsqlParser.CREATE)
                self.state = 5084
                self.swallow_to_semi()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5085
                self.match(plsqlParser.ALTER)
                self.state = 5086
                self.swallow_to_semi()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5087
                self.match(plsqlParser.GRANT)
                self.state = 5089
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,709,self._ctx)
                if la_ == 1:
                    self.state = 5088
                    self.match(plsqlParser.ALL)


                self.state = 5091
                self.swallow_to_semi()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5092
                self.match(plsqlParser.TRUNCATE)
                self.state = 5093
                self.swallow_to_semi()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5094
                self.body()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5095
                self.block()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5096
                self.assignment_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5097
                self.continue_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5098
                self.exit_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5099
                self.goto_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5100
                self.if_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5101
                self.loop_statement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5102
                self.forall_statement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5103
                self.null_statement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5104
                self.raise_statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5105
                self.return_statement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5106
                self.case_statement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5107
                self.sql_statement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 5108
                self.function_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN_OP(self):
            return self.getToken(plsqlParser.ASSIGN_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def general_element(self):
            return self.getTypedRuleContext(plsqlParser.General_elementContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_assignment_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_statement" ):
                return visitor.visitAssignment_statement(self)
            else:
                return visitor.visitChildren(self)




    def assignment_statement(self):

        localctx = plsqlParser.Assignment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_assignment_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5113
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 5111
                self.general_element()
                pass
            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                self.state = 5112
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5115
            self.match(plsqlParser.ASSIGN_OP)
            self.state = 5116
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(plsqlParser.CONTINUE, 0)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_continue_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)




    def continue_statement(self):

        localctx = plsqlParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_continue_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5118
            self.match(plsqlParser.CONTINUE)
            self.state = 5120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5119
                self.label_name()


            self.state = 5124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHEN:
                self.state = 5122
                self.match(plsqlParser.WHEN)
                self.state = 5123
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(plsqlParser.EXIT, 0)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_exit_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_statement" ):
                return visitor.visitExit_statement(self)
            else:
                return visitor.visitChildren(self)




    def exit_statement(self):

        localctx = plsqlParser.Exit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_exit_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5126
            self.match(plsqlParser.EXIT)
            self.state = 5128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5127
                self.label_name()


            self.state = 5132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHEN:
                self.state = 5130
                self.match(plsqlParser.WHEN)
                self.state = 5131
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Goto_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(plsqlParser.GOTO, 0)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_goto_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoto_statement" ):
                return visitor.visitGoto_statement(self)
            else:
                return visitor.visitChildren(self)




    def goto_statement(self):

        localctx = plsqlParser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_goto_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5134
            self.match(plsqlParser.GOTO)
            self.state = 5135
            self.label_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.IF)
            else:
                return self.getToken(plsqlParser.IF, i)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def elsif_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Elsif_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Elsif_partContext,i)


        def else_part(self):
            return self.getTypedRuleContext(plsqlParser.Else_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_if_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)




    def if_statement(self):

        localctx = plsqlParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5137
            self.match(plsqlParser.IF)
            self.state = 5138
            self.condition()
            self.state = 5139
            self.match(plsqlParser.THEN)
            self.state = 5140
            self.seq_of_statements()
            self.state = 5144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.ELSIF:
                self.state = 5141
                self.elsif_part()
                self.state = 5146
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELSE:
                self.state = 5147
                self.else_part()


            self.state = 5150
            self.match(plsqlParser.END)
            self.state = 5151
            self.match(plsqlParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elsif_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSIF(self):
            return self.getToken(plsqlParser.ELSIF, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_elsif_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElsif_part" ):
                return visitor.visitElsif_part(self)
            else:
                return visitor.visitChildren(self)




    def elsif_part(self):

        localctx = plsqlParser.Elsif_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_elsif_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5153
            self.match(plsqlParser.ELSIF)
            self.state = 5154
            self.condition()
            self.state = 5155
            self.match(plsqlParser.THEN)
            self.state = 5156
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(plsqlParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_else_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_part" ):
                return visitor.visitElse_part(self)
            else:
                return visitor.visitChildren(self)




    def else_part(self):

        localctx = plsqlParser.Else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5158
            self.match(plsqlParser.ELSE)
            self.state = 5159
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LOOP)
            else:
                return self.getToken(plsqlParser.LOOP, i)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Label_nameContext,i)


        def WHILE(self):
            return self.getToken(plsqlParser.WHILE, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def cursor_loop_param(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_loop_paramContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_loop_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_statement" ):
                return visitor.visitLoop_statement(self)
            else:
                return visitor.visitChildren(self)




    def loop_statement(self):

        localctx = plsqlParser.Loop_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_loop_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,718,self._ctx)
            if la_ == 1:
                self.state = 5161
                self.label_name()


            self.state = 5168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.WHILE]:
                self.state = 5164
                self.match(plsqlParser.WHILE)
                self.state = 5165
                self.condition()
                pass
            elif token in [plsqlParser.FOR]:
                self.state = 5166
                self.match(plsqlParser.FOR)
                self.state = 5167
                self.cursor_loop_param()
                pass
            elif token in [plsqlParser.LOOP]:
                pass
            else:
                pass
            self.state = 5170
            self.match(plsqlParser.LOOP)
            self.state = 5171
            self.seq_of_statements()
            self.state = 5172
            self.match(plsqlParser.END)
            self.state = 5173
            self.match(plsqlParser.LOOP)
            self.state = 5175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5174
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_loop_paramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def lower_bound(self):
            return self.getTypedRuleContext(plsqlParser.Lower_boundContext,0)


        def upper_bound(self):
            return self.getTypedRuleContext(plsqlParser.Upper_boundContext,0)


        def REVERSE(self):
            return self.getToken(plsqlParser.REVERSE, 0)

        def record_name(self):
            return self.getTypedRuleContext(plsqlParser.Record_nameContext,0)


        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_loop_param

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_loop_param" ):
                return visitor.visitCursor_loop_param(self)
            else:
                return visitor.visitChildren(self)




    def cursor_loop_param(self):

        localctx = plsqlParser.Cursor_loop_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_cursor_loop_param)
        self._la = 0 # Token type
        try:
            self.state = 5198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,724,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5177
                self.index_name()
                self.state = 5178
                self.match(plsqlParser.IN)
                self.state = 5180
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,721,self._ctx)
                if la_ == 1:
                    self.state = 5179
                    self.match(plsqlParser.REVERSE)


                self.state = 5182
                self.lower_bound()
                self.state = 5183
                self.match(plsqlParser.T__0)
                self.state = 5184
                self.upper_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5186
                self.record_name()
                self.state = 5187
                self.match(plsqlParser.IN)
                self.state = 5196
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                    self.state = 5188
                    self.cursor_name()
                    self.state = 5190
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.LEFT_PAREN:
                        self.state = 5189
                        self.expression_list()


                    pass
                elif token in [plsqlParser.LEFT_PAREN]:
                    self.state = 5192
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 5193
                    self.select_statement()
                    self.state = 5194
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Forall_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORALL(self):
            return self.getToken(plsqlParser.FORALL, 0)

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def bounds_clause(self):
            return self.getTypedRuleContext(plsqlParser.Bounds_clauseContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(plsqlParser.Sql_statementContext,0)


        def SAVE(self):
            return self.getToken(plsqlParser.SAVE, 0)

        def EXCEPTIONS(self):
            return self.getToken(plsqlParser.EXCEPTIONS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_forall_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForall_statement" ):
                return visitor.visitForall_statement(self)
            else:
                return visitor.visitChildren(self)




    def forall_statement(self):

        localctx = plsqlParser.Forall_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_forall_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5200
            self.match(plsqlParser.FORALL)
            self.state = 5201
            self.index_name()
            self.state = 5202
            self.match(plsqlParser.IN)
            self.state = 5203
            self.bounds_clause()
            self.state = 5204
            self.sql_statement()
            self.state = 5207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SAVE:
                self.state = 5205
                self.match(plsqlParser.SAVE)
                self.state = 5206
                self.match(plsqlParser.EXCEPTIONS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bounds_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lower_bound(self):
            return self.getTypedRuleContext(plsqlParser.Lower_boundContext,0)


        def upper_bound(self):
            return self.getTypedRuleContext(plsqlParser.Upper_boundContext,0)


        def INDICES(self):
            return self.getToken(plsqlParser.INDICES, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def collection_name(self):
            return self.getTypedRuleContext(plsqlParser.Collection_nameContext,0)


        def between_bound(self):
            return self.getTypedRuleContext(plsqlParser.Between_boundContext,0)


        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_bounds_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBounds_clause" ):
                return visitor.visitBounds_clause(self)
            else:
                return visitor.visitChildren(self)




    def bounds_clause(self):

        localctx = plsqlParser.Bounds_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_bounds_clause)
        self._la = 0 # Token type
        try:
            self.state = 5222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,727,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5209
                self.lower_bound()
                self.state = 5210
                self.match(plsqlParser.T__0)
                self.state = 5211
                self.upper_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5213
                self.match(plsqlParser.INDICES)
                self.state = 5214
                self.match(plsqlParser.OF)
                self.state = 5215
                self.collection_name()
                self.state = 5217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.BETWEEN:
                    self.state = 5216
                    self.between_bound()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5219
                self.match(plsqlParser.VALUES)
                self.state = 5220
                self.match(plsqlParser.OF)
                self.state = 5221
                self.index_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Between_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(plsqlParser.BETWEEN, 0)

        def lower_bound(self):
            return self.getTypedRuleContext(plsqlParser.Lower_boundContext,0)


        def AND(self):
            return self.getToken(plsqlParser.AND, 0)

        def upper_bound(self):
            return self.getTypedRuleContext(plsqlParser.Upper_boundContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_between_bound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_bound" ):
                return visitor.visitBetween_bound(self)
            else:
                return visitor.visitChildren(self)




    def between_bound(self):

        localctx = plsqlParser.Between_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_between_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5224
            self.match(plsqlParser.BETWEEN)
            self.state = 5225
            self.lower_bound()
            self.state = 5226
            self.match(plsqlParser.AND)
            self.state = 5227
            self.upper_bound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lower_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lower_bound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLower_bound" ):
                return visitor.visitLower_bound(self)
            else:
                return visitor.visitChildren(self)




    def lower_bound(self):

        localctx = plsqlParser.Lower_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_lower_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5229
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upper_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_upper_bound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpper_bound" ):
                return visitor.visitUpper_bound(self)
            else:
                return visitor.visitChildren(self)




    def upper_bound(self):

        localctx = plsqlParser.Upper_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_upper_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5231
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_null_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_statement" ):
                return visitor.visitNull_statement(self)
            else:
                return visitor.visitChildren(self)




    def null_statement(self):

        localctx = plsqlParser.Null_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_null_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5233
            self.match(plsqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(plsqlParser.RAISE, 0)

        def exception_name(self):
            return self.getTypedRuleContext(plsqlParser.Exception_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_raise_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_statement" ):
                return visitor.visitRaise_statement(self)
            else:
                return visitor.visitChildren(self)




    def raise_statement(self):

        localctx = plsqlParser.Raise_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_raise_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5235
            self.match(plsqlParser.RAISE)
            self.state = 5237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5236
                self.exception_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_return_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)




    def return_statement(self):

        localctx = plsqlParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5239
            self.match(plsqlParser.RETURN)
            self.state = 5241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DISTINCT - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)) | (1 << (plsqlParser.NOT - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITION - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PRIOR - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELECT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUE - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 585)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.LEFT_PAREN - 585)) | (1 << (plsqlParser.PLUS_SIGN - 585)) | (1 << (plsqlParser.MINUS_SIGN - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5240
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routine_name(self):
            return self.getTypedRuleContext(plsqlParser.Routine_nameContext,0)


        def CALL(self):
            return self.getToken(plsqlParser.CALL, 0)

        def function_argument(self):
            return self.getTypedRuleContext(plsqlParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_call

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call" ):
                return visitor.visitFunction_call(self)
            else:
                return visitor.visitChildren(self)




    def function_call(self):

        localctx = plsqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,730,self._ctx)
            if la_ == 1:
                self.state = 5243
                self.match(plsqlParser.CALL)


            self.state = 5246
            self.routine_name()
            self.state = 5248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 5247
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(plsqlParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def EXCEPTION(self):
            return self.getToken(plsqlParser.EXCEPTION, 0)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def exception_handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Exception_handlerContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Exception_handlerContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_body

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = plsqlParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5250
            self.match(plsqlParser.BEGIN)
            self.state = 5251
            self.seq_of_statements()
            self.state = 5258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.EXCEPTION:
                self.state = 5252
                self.match(plsqlParser.EXCEPTION)
                self.state = 5254 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5253
                    self.exception_handler()
                    self.state = 5256 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.WHEN):
                        break



            self.state = 5260
            self.match(plsqlParser.END)
            self.state = 5262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,734,self._ctx)
            if la_ == 1:
                self.state = 5261
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_handlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def exception_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Exception_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Exception_nameContext,i)


        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OR)
            else:
                return self.getToken(plsqlParser.OR, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_exception_handler

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_handler" ):
                return visitor.visitException_handler(self)
            else:
                return visitor.visitChildren(self)




    def exception_handler(self):

        localctx = plsqlParser.Exception_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_exception_handler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5264
            self.match(plsqlParser.WHEN)
            self.state = 5265
            self.exception_name()
            self.state = 5270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.OR:
                self.state = 5266
                self.match(plsqlParser.OR)
                self.state = 5267
                self.exception_name()
                self.state = 5272
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5273
            self.match(plsqlParser.THEN)
            self.state = 5274
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_block" ):
                return visitor.visitTrigger_block(self)
            else:
                return visitor.visitChildren(self)




    def trigger_block(self):

        localctx = plsqlParser.Trigger_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_trigger_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CREATE - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECLARE - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PROCEDURE - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 5276
                    self.match(plsqlParser.DECLARE)


                self.state = 5280 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5279
                    self.declare_spec()
                    self.state = 5282 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CREATE - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PROCEDURE - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                        break



            self.state = 5286
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = plsqlParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DECLARE:
                self.state = 5288
                self.match(plsqlParser.DECLARE)


            self.state = 5292 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5291
                self.declare_spec()
                self.state = 5294 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CREATE - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PROCEDURE - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                    break

            self.state = 5296
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def execute_immediate(self):
            return self.getTypedRuleContext(plsqlParser.Execute_immediateContext,0)


        def data_manipulation_language_statements(self):
            return self.getTypedRuleContext(plsqlParser.Data_manipulation_language_statementsContext,0)


        def cursor_manipulation_statements(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_manipulation_statementsContext,0)


        def transaction_control_statements(self):
            return self.getTypedRuleContext(plsqlParser.Transaction_control_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_sql_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_statement" ):
                return visitor.visitSql_statement(self)
            else:
                return visitor.visitChildren(self)




    def sql_statement(self):

        localctx = plsqlParser.Sql_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_sql_statement)
        try:
            self.state = 5302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5298
                self.execute_immediate()
                pass
            elif token in [plsqlParser.DELETE, plsqlParser.EXPLAIN, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.SELECT, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5299
                self.data_manipulation_language_statements()
                pass
            elif token in [plsqlParser.CLOSE, plsqlParser.FETCH, plsqlParser.OPEN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5300
                self.cursor_manipulation_statements()
                pass
            elif token in [plsqlParser.COMMIT, plsqlParser.ROLLBACK, plsqlParser.SAVEPOINT, plsqlParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5301
                self.transaction_control_statements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_immediateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(plsqlParser.EXECUTE, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Into_clauseContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(plsqlParser.Using_clauseContext,0)


        def dynamic_returning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dynamic_returning_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_execute_immediate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_immediate" ):
                return visitor.visitExecute_immediate(self)
            else:
                return visitor.visitChildren(self)




    def execute_immediate(self):

        localctx = plsqlParser.Execute_immediateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_execute_immediate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5304
            self.match(plsqlParser.EXECUTE)
            self.state = 5305
            self.match(plsqlParser.IMMEDIATE)
            self.state = 5306
            self.expression(0)
            self.state = 5316
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BULK, plsqlParser.INTO]:
                self.state = 5307
                self.into_clause()
                self.state = 5309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.USING:
                    self.state = 5308
                    self.using_clause()


                pass
            elif token in [plsqlParser.USING]:
                self.state = 5311
                self.using_clause()
                self.state = 5313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.RETURN or _la==plsqlParser.RETURNING:
                    self.state = 5312
                    self.dynamic_returning_clause()


                pass
            elif token in [plsqlParser.RETURN, plsqlParser.RETURNING]:
                self.state = 5315
                self.dynamic_returning_clause()
                pass
            elif token in [plsqlParser.EOF, plsqlParser.SAVE, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dynamic_returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(plsqlParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_dynamic_returning_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamic_returning_clause" ):
                return visitor.visitDynamic_returning_clause(self)
            else:
                return visitor.visitChildren(self)




    def dynamic_returning_clause(self):

        localctx = plsqlParser.Dynamic_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_dynamic_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5318
            _la = self._input.LA(1)
            if not(_la==plsqlParser.RETURN or _la==plsqlParser.RETURNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5319
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_manipulation_language_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def merge_statement(self):
            return self.getTypedRuleContext(plsqlParser.Merge_statementContext,0)


        def lock_table_statement(self):
            return self.getTypedRuleContext(plsqlParser.Lock_table_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(plsqlParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(plsqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(plsqlParser.Insert_statementContext,0)


        def explain_statement(self):
            return self.getTypedRuleContext(plsqlParser.Explain_statementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_data_manipulation_language_statements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_manipulation_language_statements" ):
                return visitor.visitData_manipulation_language_statements(self)
            else:
                return visitor.visitChildren(self)




    def data_manipulation_language_statements(self):

        localctx = plsqlParser.Data_manipulation_language_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_data_manipulation_language_statements)
        try:
            self.state = 5328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MERGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5321
                self.merge_statement()
                pass
            elif token in [plsqlParser.LOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5322
                self.lock_table_statement()
                pass
            elif token in [plsqlParser.SELECT, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5323
                self.select_statement()
                pass
            elif token in [plsqlParser.UPDATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5324
                self.update_statement()
                pass
            elif token in [plsqlParser.DELETE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5325
                self.delete_statement()
                pass
            elif token in [plsqlParser.INSERT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5326
                self.insert_statement()
                pass
            elif token in [plsqlParser.EXPLAIN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5327
                self.explain_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_manipulation_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def close_statement(self):
            return self.getTypedRuleContext(plsqlParser.Close_statementContext,0)


        def open_statement(self):
            return self.getTypedRuleContext(plsqlParser.Open_statementContext,0)


        def fetch_statement(self):
            return self.getTypedRuleContext(plsqlParser.Fetch_statementContext,0)


        def open_for_statement(self):
            return self.getTypedRuleContext(plsqlParser.Open_for_statementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_manipulation_statements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_manipulation_statements" ):
                return visitor.visitCursor_manipulation_statements(self)
            else:
                return visitor.visitChildren(self)




    def cursor_manipulation_statements(self):

        localctx = plsqlParser.Cursor_manipulation_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_cursor_manipulation_statements)
        try:
            self.state = 5334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,746,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5330
                self.close_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5331
                self.open_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5332
                self.fetch_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5333
                self.open_for_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Close_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(plsqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_close_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClose_statement" ):
                return visitor.visitClose_statement(self)
            else:
                return visitor.visitChildren(self)




    def close_statement(self):

        localctx = plsqlParser.Close_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_close_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5336
            self.match(plsqlParser.CLOSE)
            self.state = 5337
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(plsqlParser.OPEN, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_open_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_statement" ):
                return visitor.visitOpen_statement(self)
            else:
                return visitor.visitChildren(self)




    def open_statement(self):

        localctx = plsqlParser.Open_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_open_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5339
            self.match(plsqlParser.OPEN)
            self.state = 5340
            self.cursor_name()
            self.state = 5342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 5341
                self.expression_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.it1 = None # Token

        def FETCH(self):
            return self.getToken(plsqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Variable_nameContext,i)


        def BULK(self):
            return self.getToken(plsqlParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(plsqlParser.COLLECT, 0)

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_fetch_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch_statement" ):
                return visitor.visitFetch_statement(self)
            else:
                return visitor.visitChildren(self)




    def fetch_statement(self):

        localctx = plsqlParser.Fetch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_fetch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5344
            self.match(plsqlParser.FETCH)
            self.state = 5345
            self.cursor_name()
            self.state = 5366
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INTO]:
                self.state = 5346
                localctx.it1 = self.match(plsqlParser.INTO)
                self.state = 5347
                self.variable_name()
                self.state = 5352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5348
                    self.match(plsqlParser.COMMA)
                    self.state = 5349
                    self.variable_name()
                    self.state = 5354
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [plsqlParser.BULK]:
                self.state = 5355
                self.match(plsqlParser.BULK)
                self.state = 5356
                self.match(plsqlParser.COLLECT)
                self.state = 5357
                self.match(plsqlParser.INTO)
                self.state = 5358
                self.variable_name()
                self.state = 5363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5359
                    self.match(plsqlParser.COMMA)
                    self.state = 5360
                    self.variable_name()
                    self.state = 5365
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_for_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(plsqlParser.OPEN, 0)

        def variable_name(self):
            return self.getTypedRuleContext(plsqlParser.Variable_nameContext,0)


        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(plsqlParser.Using_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_open_for_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_for_statement" ):
                return visitor.visitOpen_for_statement(self)
            else:
                return visitor.visitChildren(self)




    def open_for_statement(self):

        localctx = plsqlParser.Open_for_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_open_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5368
            self.match(plsqlParser.OPEN)
            self.state = 5369
            self.variable_name()
            self.state = 5370
            self.match(plsqlParser.FOR)
            self.state = 5373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,751,self._ctx)
            if la_ == 1:
                self.state = 5371
                self.select_statement()
                pass

            elif la_ == 2:
                self.state = 5372
                self.expression(0)
                pass


            self.state = 5376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.USING:
                self.state = 5375
                self.using_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_control_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_transaction_command(self):
            return self.getTypedRuleContext(plsqlParser.Set_transaction_commandContext,0)


        def set_constraint_command(self):
            return self.getTypedRuleContext(plsqlParser.Set_constraint_commandContext,0)


        def commit_statement(self):
            return self.getTypedRuleContext(plsqlParser.Commit_statementContext,0)


        def rollback_statement(self):
            return self.getTypedRuleContext(plsqlParser.Rollback_statementContext,0)


        def savepoint_statement(self):
            return self.getTypedRuleContext(plsqlParser.Savepoint_statementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_transaction_control_statements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransaction_control_statements" ):
                return visitor.visitTransaction_control_statements(self)
            else:
                return visitor.visitChildren(self)




    def transaction_control_statements(self):

        localctx = plsqlParser.Transaction_control_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_transaction_control_statements)
        try:
            self.state = 5383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,753,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5378
                self.set_transaction_command()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5379
                self.set_constraint_command()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5380
                self.commit_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5381
                self.rollback_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5382
                self.savepoint_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_transaction_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(plsqlParser.TRANSACTION, 0)

        def READ(self):
            return self.getToken(plsqlParser.READ, 0)

        def ISOLATION(self):
            return self.getToken(plsqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(plsqlParser.LEVEL, 0)

        def USE(self):
            return self.getToken(plsqlParser.USE, 0)

        def ROLLBACK(self):
            return self.getToken(plsqlParser.ROLLBACK, 0)

        def SEGMENT(self):
            return self.getToken(plsqlParser.SEGMENT, 0)

        def rollback_segment_name(self):
            return self.getTypedRuleContext(plsqlParser.Rollback_segment_nameContext,0)


        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(plsqlParser.WRITE, 0)

        def SERIALIZABLE(self):
            return self.getToken(plsqlParser.SERIALIZABLE, 0)

        def COMMITTED(self):
            return self.getToken(plsqlParser.COMMITTED, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_set_transaction_command

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_transaction_command" ):
                return visitor.visitSet_transaction_command(self)
            else:
                return visitor.visitChildren(self)




    def set_transaction_command(self):

        localctx = plsqlParser.Set_transaction_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_set_transaction_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5385
            self.match(plsqlParser.SET)
            self.state = 5386
            self.match(plsqlParser.TRANSACTION)
            self.state = 5400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.READ]:
                self.state = 5387
                self.match(plsqlParser.READ)
                self.state = 5388
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ONLY or _la==plsqlParser.WRITE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [plsqlParser.ISOLATION]:
                self.state = 5389
                self.match(plsqlParser.ISOLATION)
                self.state = 5390
                self.match(plsqlParser.LEVEL)
                self.state = 5394
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.SERIALIZABLE]:
                    self.state = 5391
                    self.match(plsqlParser.SERIALIZABLE)
                    pass
                elif token in [plsqlParser.READ]:
                    self.state = 5392
                    self.match(plsqlParser.READ)
                    self.state = 5393
                    self.match(plsqlParser.COMMITTED)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [plsqlParser.USE]:
                self.state = 5396
                self.match(plsqlParser.USE)
                self.state = 5397
                self.match(plsqlParser.ROLLBACK)
                self.state = 5398
                self.match(plsqlParser.SEGMENT)
                self.state = 5399
                self.rollback_segment_name()
                pass
            elif token in [plsqlParser.EOF, plsqlParser.NAME, plsqlParser.SAVE, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 5404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NAME:
                self.state = 5402
                self.match(plsqlParser.NAME)
                self.state = 5403
                self.quoted_string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_constraint_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(plsqlParser.CONSTRAINTS, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(plsqlParser.DEFERRED, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def constraint_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Constraint_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_set_constraint_command

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_constraint_command" ):
                return visitor.visitSet_constraint_command(self)
            else:
                return visitor.visitChildren(self)




    def set_constraint_command(self):

        localctx = plsqlParser.Set_constraint_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_set_constraint_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5406
            self.match(plsqlParser.SET)
            self.state = 5407
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CONSTRAINT or _la==plsqlParser.CONSTRAINTS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ALL]:
                self.state = 5408
                self.match(plsqlParser.ALL)
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 5409
                self.constraint_name()
                self.state = 5414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5410
                    self.match(plsqlParser.COMMA)
                    self.state = 5411
                    self.constraint_name()
                    self.state = 5416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 5419
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DEFERRED or _la==plsqlParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(plsqlParser.WORK, 0)

        def COMMENT(self):
            return self.getToken(plsqlParser.COMMENT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def write_clause(self):
            return self.getTypedRuleContext(plsqlParser.Write_clauseContext,0)


        def CORRUPT_XID(self):
            return self.getToken(plsqlParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(plsqlParser.CORRUPT_XID_ALL, 0)

        def COMMA(self):
            return self.getToken(plsqlParser.COMMA, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_commit_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommit_statement" ):
                return visitor.visitCommit_statement(self)
            else:
                return visitor.visitChildren(self)




    def commit_statement(self):

        localctx = plsqlParser.Commit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_commit_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5421
            self.match(plsqlParser.COMMIT)
            self.state = 5423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WORK:
                self.state = 5422
                self.match(plsqlParser.WORK)


            self.state = 5438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.COMMENT]:
                self.state = 5425
                self.match(plsqlParser.COMMENT)
                self.state = 5426
                self.expression(0)
                pass
            elif token in [plsqlParser.FORCE]:
                self.state = 5427
                self.match(plsqlParser.FORCE)
                self.state = 5436
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,761,self._ctx)
                if la_ == 1:
                    self.state = 5428
                    self.match(plsqlParser.CORRUPT_XID)
                    self.state = 5429
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 5430
                    self.match(plsqlParser.CORRUPT_XID_ALL)
                    pass

                elif la_ == 3:
                    self.state = 5431
                    self.expression(0)
                    self.state = 5434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 5432
                        self.match(plsqlParser.COMMA)
                        self.state = 5433
                        self.expression(0)


                    pass


                pass
            elif token in [plsqlParser.EOF, plsqlParser.SAVE, plsqlParser.WRITE, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 5441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WRITE:
                self.state = 5440
                self.write_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(plsqlParser.WRITE, 0)

        def WAIT(self):
            return self.getToken(plsqlParser.WAIT, 0)

        def NOWAIT(self):
            return self.getToken(plsqlParser.NOWAIT, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def BATCH(self):
            return self.getToken(plsqlParser.BATCH, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_write_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWrite_clause" ):
                return visitor.visitWrite_clause(self)
            else:
                return visitor.visitChildren(self)




    def write_clause(self):

        localctx = plsqlParser.Write_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_write_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5443
            self.match(plsqlParser.WRITE)
            self.state = 5445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOWAIT or _la==plsqlParser.WAIT:
                self.state = 5444
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOWAIT or _la==plsqlParser.WAIT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BATCH or _la==plsqlParser.IMMEDIATE:
                self.state = 5447
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BATCH or _la==plsqlParser.IMMEDIATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(plsqlParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(plsqlParser.WORK, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(plsqlParser.Savepoint_nameContext,0)


        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def SAVEPOINT(self):
            return self.getToken(plsqlParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_rollback_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback_statement" ):
                return visitor.visitRollback_statement(self)
            else:
                return visitor.visitChildren(self)




    def rollback_statement(self):

        localctx = plsqlParser.Rollback_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_rollback_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5450
            self.match(plsqlParser.ROLLBACK)
            self.state = 5452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WORK:
                self.state = 5451
                self.match(plsqlParser.WORK)


            self.state = 5461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TO]:
                self.state = 5454
                self.match(plsqlParser.TO)
                self.state = 5456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,767,self._ctx)
                if la_ == 1:
                    self.state = 5455
                    self.match(plsqlParser.SAVEPOINT)


                self.state = 5458
                self.savepoint_name()
                pass
            elif token in [plsqlParser.FORCE]:
                self.state = 5459
                self.match(plsqlParser.FORCE)
                self.state = 5460
                self.quoted_string()
                pass
            elif token in [plsqlParser.EOF, plsqlParser.SAVE, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(plsqlParser.SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(plsqlParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_savepoint_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepoint_statement" ):
                return visitor.visitSavepoint_statement(self)
            else:
                return visitor.visitChildren(self)




    def savepoint_statement(self):

        localctx = plsqlParser.Savepoint_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_savepoint_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5463
            self.match(plsqlParser.SAVEPOINT)
            self.state = 5464
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(plsqlParser.EXPLAIN, 0)

        def PLAN(self):
            return self.getToken(plsqlParser.PLAN, 0)

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(plsqlParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(plsqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(plsqlParser.Insert_statementContext,0)


        def merge_statement(self):
            return self.getTypedRuleContext(plsqlParser.Merge_statementContext,0)


        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def STATEMENT_ID(self):
            return self.getToken(plsqlParser.STATEMENT_ID, 0)

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_explain_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain_statement" ):
                return visitor.visitExplain_statement(self)
            else:
                return visitor.visitChildren(self)




    def explain_statement(self):

        localctx = plsqlParser.Explain_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_explain_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5466
            self.match(plsqlParser.EXPLAIN)
            self.state = 5467
            self.match(plsqlParser.PLAN)
            self.state = 5472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SET:
                self.state = 5468
                self.match(plsqlParser.SET)
                self.state = 5469
                self.match(plsqlParser.STATEMENT_ID)
                self.state = 5470
                self.match(plsqlParser.EQUALS_OP)
                self.state = 5471
                self.quoted_string()


            self.state = 5476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INTO:
                self.state = 5474
                self.match(plsqlParser.INTO)
                self.state = 5475
                self.tableview_name()


            self.state = 5478
            self.match(plsqlParser.FOR)
            self.state = 5484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SELECT, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                self.state = 5479
                self.select_statement()
                pass
            elif token in [plsqlParser.UPDATE]:
                self.state = 5480
                self.update_statement()
                pass
            elif token in [plsqlParser.DELETE]:
                self.state = 5481
                self.delete_statement()
                pass
            elif token in [plsqlParser.INSERT]:
                self.state = 5482
                self.insert_statement()
                pass
            elif token in [plsqlParser.MERGE]:
                self.state = 5483
                self.merge_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def subquery_factoring_clause(self):
            return self.getTypedRuleContext(plsqlParser.Subquery_factoring_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_select_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_statement" ):
                return visitor.visitSelect_statement(self)
            else:
                return visitor.visitChildren(self)




    def select_statement(self):

        localctx = plsqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WITH:
                self.state = 5486
                self.subquery_factoring_clause()


            self.state = 5489
            self.subquery(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_factoring_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def factoring_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Factoring_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Factoring_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_subquery_factoring_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_factoring_clause" ):
                return visitor.visitSubquery_factoring_clause(self)
            else:
                return visitor.visitChildren(self)




    def subquery_factoring_clause(self):

        localctx = plsqlParser.Subquery_factoring_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_subquery_factoring_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5491
            self.match(plsqlParser.WITH)
            self.state = 5492
            self.factoring_element()
            self.state = 5497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 5493
                self.match(plsqlParser.COMMA)
                self.state = 5494
                self.factoring_element()
                self.state = 5499
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factoring_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_name(self):
            return self.getTypedRuleContext(plsqlParser.Query_nameContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def search_clause(self):
            return self.getTypedRuleContext(plsqlParser.Search_clauseContext,0)


        def cycle_clause(self):
            return self.getTypedRuleContext(plsqlParser.Cycle_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_factoring_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactoring_element" ):
                return visitor.visitFactoring_element(self)
            else:
                return visitor.visitChildren(self)




    def factoring_element(self):

        localctx = plsqlParser.Factoring_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_factoring_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5500
            self.query_name()
            self.state = 5502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 5501
                self.paren_column_list()


            self.state = 5504
            self.match(plsqlParser.AS)
            self.state = 5505
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5506
            self.subquery(0)
            self.state = 5508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ORDER:
                self.state = 5507
                self.order_by_clause()


            self.state = 5510
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 5512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SEARCH:
                self.state = 5511
                self.search_clause()


            self.state = 5515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CYCLE:
                self.state = 5514
                self.cycle_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEARCH(self):
            return self.getToken(plsqlParser.SEARCH, 0)

        def FIRST(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FIRST)
            else:
                return self.getToken(plsqlParser.FIRST, i)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def DEPTH(self):
            return self.getToken(plsqlParser.DEPTH, 0)

        def BREADTH(self):
            return self.getToken(plsqlParser.BREADTH, 0)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ASC)
            else:
                return self.getToken(plsqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DESC)
            else:
                return self.getToken(plsqlParser.DESC, i)

        def NULLS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NULLS)
            else:
                return self.getToken(plsqlParser.NULLS, i)

        def LAST(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LAST)
            else:
                return self.getToken(plsqlParser.LAST, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_search_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_clause" ):
                return visitor.visitSearch_clause(self)
            else:
                return visitor.visitChildren(self)




    def search_clause(self):

        localctx = plsqlParser.Search_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_search_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5517
            self.match(plsqlParser.SEARCH)
            self.state = 5518
            _la = self._input.LA(1)
            if not(_la==plsqlParser.BREADTH or _la==plsqlParser.DEPTH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5519
            self.match(plsqlParser.FIRST)
            self.state = 5520
            self.match(plsqlParser.BY)
            self.state = 5521
            self.column_name()
            self.state = 5523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ASC:
                self.state = 5522
                self.match(plsqlParser.ASC)


            self.state = 5526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DESC:
                self.state = 5525
                self.match(plsqlParser.DESC)


            self.state = 5530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,780,self._ctx)
            if la_ == 1:
                self.state = 5528
                self.match(plsqlParser.NULLS)
                self.state = 5529
                self.match(plsqlParser.FIRST)


            self.state = 5534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NULLS:
                self.state = 5532
                self.match(plsqlParser.NULLS)
                self.state = 5533
                self.match(plsqlParser.LAST)


            self.state = 5554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 5536
                self.match(plsqlParser.COMMA)
                self.state = 5537
                self.column_name()
                self.state = 5539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ASC:
                    self.state = 5538
                    self.match(plsqlParser.ASC)


                self.state = 5542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DESC:
                    self.state = 5541
                    self.match(plsqlParser.DESC)


                self.state = 5546
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,784,self._ctx)
                if la_ == 1:
                    self.state = 5544
                    self.match(plsqlParser.NULLS)
                    self.state = 5545
                    self.match(plsqlParser.FIRST)


                self.state = 5550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NULLS:
                    self.state = 5548
                    self.match(plsqlParser.NULLS)
                    self.state = 5549
                    self.match(plsqlParser.LAST)


                self.state = 5556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5557
            self.match(plsqlParser.SET)
            self.state = 5558
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cycle_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CYCLE(self):
            return self.getToken(plsqlParser.CYCLE, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_cycle_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCycle_clause" ):
                return visitor.visitCycle_clause(self)
            else:
                return visitor.visitChildren(self)




    def cycle_clause(self):

        localctx = plsqlParser.Cycle_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_cycle_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5560
            self.match(plsqlParser.CYCLE)
            self.state = 5561
            self.column_name()
            self.state = 5566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 5562
                self.match(plsqlParser.COMMA)
                self.state = 5563
                self.column_name()
                self.state = 5568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5569
            self.match(plsqlParser.SET)
            self.state = 5570
            self.column_name()
            self.state = 5571
            self.match(plsqlParser.TO)
            self.state = 5572
            self.expression(0)
            self.state = 5573
            self.match(plsqlParser.DEFAULT)
            self.state = 5574
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_subquery

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SubqueryParenContext(SubqueryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.SubqueryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryParen" ):
                return visitor.visitSubqueryParen(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreSubqueryContext(SubqueryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.SubqueryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query_block(self):
            return self.getTypedRuleContext(plsqlParser.Query_blockContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreSubquery" ):
                return visitor.visitIgnoreSubquery(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryCompoundContext(SubqueryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.SubqueryContext
            super().__init__(parser)
            self.left = None # SubqueryContext
            self.op = None # Subquery_operation_partContext
            self.right = None # SubqueryContext
            self.copyFrom(ctx)

        def subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.SubqueryContext)
            else:
                return self.getTypedRuleContext(plsqlParser.SubqueryContext,i)

        def subquery_operation_part(self):
            return self.getTypedRuleContext(plsqlParser.Subquery_operation_partContext,0)

        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryCompound" ):
                return visitor.visitSubqueryCompound(self)
            else:
                return visitor.visitChildren(self)



    def subquery(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.SubqueryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 638
        self.enterRecursionRule(localctx, 638, self.RULE_subquery, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LEFT_PAREN]:
                localctx = plsqlParser.SubqueryParenContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5577
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 5578
                self.subquery(0)
                self.state = 5579
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.SELECT]:
                localctx = plsqlParser.IgnoreSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5581
                self.query_block()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 5592
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,790,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = plsqlParser.SubqueryCompoundContext(self, plsqlParser.SubqueryContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_subquery)
                    self.state = 5584
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 5585
                    localctx.op = self.subquery_operation_part()
                    self.state = 5586
                    localctx.right = self.subquery(0)
                    self.state = 5588
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,789,self._ctx)
                    if la_ == 1:
                        self.state = 5587
                        self.order_by_clause()

             
                self.state = 5594
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,790,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Subquery_operation_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(plsqlParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(plsqlParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(plsqlParser.EXCEPT, 0)

        def MINUS(self):
            return self.getToken(plsqlParser.MINUS, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_subquery_operation_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_operation_part" ):
                return visitor.visitSubquery_operation_part(self)
            else:
                return visitor.visitChildren(self)




    def subquery_operation_part(self):

        localctx = plsqlParser.Subquery_operation_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_subquery_operation_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5595
            _la = self._input.LA(1)
            if not(_la==plsqlParser.EXCEPT or _la==plsqlParser.INTERSECT or _la==plsqlParser.MINUS or _la==plsqlParser.UNION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ALL:
                self.state = 5596
                self.match(plsqlParser.ALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pref = None # Token
            self._selected_element = None # Selected_elementContext
            self.target_list = list() # of Selected_elementContexts

        def SELECT(self):
            return self.getToken(plsqlParser.SELECT, 0)

        def selected_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Selected_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Selected_elementContext,i)


        def into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Into_clauseContext,0)


        def from_clause(self):
            return self.getTypedRuleContext(plsqlParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def hierarchical_query_clause(self):
            return self.getTypedRuleContext(plsqlParser.Hierarchical_query_clauseContext,0)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Group_by_clauseContext,i)


        def having_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Having_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Having_clauseContext,i)


        def model_clause(self):
            return self.getTypedRuleContext(plsqlParser.Model_clauseContext,0)


        def for_update_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.For_update_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.For_update_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,i)


        def limit_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Limit_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Limit_clauseContext,i)


        def DISTINCT(self):
            return self.getToken(plsqlParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_query_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_block" ):
                return visitor.visitQuery_block(self)
            else:
                return visitor.visitChildren(self)




    def query_block(self):

        localctx = plsqlParser.Query_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_query_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5599
            self.match(plsqlParser.SELECT)
            self.state = 5601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,792,self._ctx)
            if la_ == 1:
                self.state = 5600
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ALL or _la==plsqlParser.DISTINCT or _la==plsqlParser.UNIQUE):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5603
            localctx._selected_element = self.selected_element()
            localctx.target_list.append(localctx._selected_element)
            self.state = 5608
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,793,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5604
                    self.match(plsqlParser.COMMA)
                    self.state = 5605
                    localctx._selected_element = self.selected_element()
                    localctx.target_list.append(localctx._selected_element) 
                self.state = 5610
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,793,self._ctx)

            self.state = 5612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,794,self._ctx)
            if la_ == 1:
                self.state = 5611
                self.into_clause()


            self.state = 5615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,795,self._ctx)
            if la_ == 1:
                self.state = 5614
                self.from_clause()


            self.state = 5618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,796,self._ctx)
            if la_ == 1:
                self.state = 5617
                self.where_clause()


            self.state = 5621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,797,self._ctx)
            if la_ == 1:
                self.state = 5620
                self.hierarchical_query_clause()


            self.state = 5627
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,799,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5625
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.GROUP]:
                        self.state = 5623
                        self.group_by_clause()
                        pass
                    elif token in [plsqlParser.HAVING]:
                        self.state = 5624
                        self.having_clause()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 5629
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,799,self._ctx)

            self.state = 5631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,800,self._ctx)
            if la_ == 1:
                self.state = 5630
                self.model_clause()


            self.state = 5638
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,802,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5636
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.FOR]:
                        self.state = 5633
                        self.for_update_clause()
                        pass
                    elif token in [plsqlParser.ORDER]:
                        self.state = 5634
                        self.order_by_clause()
                        pass
                    elif token in [plsqlParser.LIMIT]:
                        self.state = 5635
                        self.limit_clause()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 5640
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,802,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_selected_element

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Alias_exprContext(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Selected_elementContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.alias = None # Column_aliasContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias_expr" ):
                return visitor.visitAlias_expr(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreTableview_nameContext(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Selected_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreTableview_name" ):
                return visitor.visitIgnoreTableview_name(self)
            else:
                return visitor.visitChildren(self)


    class StarTableContext(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Selected_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)

        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)
        def star(self):
            return self.getTypedRuleContext(plsqlParser.StarContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarTable" ):
                return visitor.visitStarTable(self)
            else:
                return visitor.visitChildren(self)


    class Star1Context(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Selected_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def star(self):
            return self.getTypedRuleContext(plsqlParser.StarContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar1" ):
                return visitor.visitStar1(self)
            else:
                return visitor.visitChildren(self)



    def selected_element(self):

        localctx = plsqlParser.Selected_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_selected_element)
        try:
            self.state = 5651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,804,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.Star1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5641
                self.star()
                pass

            elif la_ == 2:
                localctx = plsqlParser.StarTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5642
                self.dot_id()
                self.state = 5643
                self.match(plsqlParser.PERIOD)
                self.state = 5644
                self.star()
                pass

            elif la_ == 3:
                localctx = plsqlParser.IgnoreTableview_nameContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5646
                self.tableview_name()
                pass

            elif la_ == 4:
                localctx = plsqlParser.Alias_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5647
                localctx.expr = self.expression(0)
                self.state = 5649
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,803,self._ctx)
                if la_ == 1:
                    self.state = 5648
                    localctx.alias = self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def table_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_refContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_refContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_from_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_clause" ):
                return visitor.visitFrom_clause(self)
            else:
                return visitor.visitChildren(self)




    def from_clause(self):

        localctx = plsqlParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5653
            self.match(plsqlParser.FROM)
            self.state = 5654
            self.table_ref(0)
            self.state = 5659
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,805,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5655
                    self.match(plsqlParser.COMMA)
                    self.state = 5656
                    self.table_ref(0) 
                self.state = 5661
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,805,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_ref_pivotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref(self):
            return self.getTypedRuleContext(plsqlParser.Table_refContext,0)


        def pivot_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_clauseContext,0)


        def unpivot_clause(self):
            return self.getTypedRuleContext(plsqlParser.Unpivot_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_ref_pivot

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_ref_pivot" ):
                return visitor.visitTable_ref_pivot(self)
            else:
                return visitor.visitChildren(self)




    def table_ref_pivot(self):

        localctx = plsqlParser.Table_ref_pivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_table_ref_pivot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5662
            self.table_ref(0)
            self.state = 5665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.PIVOT]:
                self.state = 5663
                self.pivot_clause()
                pass
            elif token in [plsqlParser.UNPIVOT]:
                self.state = 5664
                self.unpivot_clause()
                pass
            elif token in [plsqlParser.EOF]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_table_ref

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprContext(Table_refContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Table_refContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref(self):
            return self.getTypedRuleContext(plsqlParser.Table_refContext,0)

        def join_clause(self):
            return self.getTypedRuleContext(plsqlParser.Join_clauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExpr" ):
                return visitor.visitJoinExpr(self)
            else:
                return visitor.visitChildren(self)


    class TableRefSimpleContext(Table_refContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Table_refContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref_aux(self):
            return self.getTypedRuleContext(plsqlParser.Table_ref_auxContext,0)

        def flashback_query_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Flashback_query_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Flashback_query_clauseContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRefSimple" ):
                return visitor.visitTableRefSimple(self)
            else:
                return visitor.visitChildren(self)


    class TableRefAuxContext(Table_refContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Table_refContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref_aux(self):
            return self.getTypedRuleContext(plsqlParser.Table_ref_auxContext,0)

        def flashback_query_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Flashback_query_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Flashback_query_clauseContext,i)

        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRefAux" ):
                return visitor.visitTableRefAux(self)
            else:
                return visitor.visitChildren(self)



    def table_ref(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.Table_refContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 650
        self.enterRecursionRule(localctx, 650, self.RULE_table_ref, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,810,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.TableRefSimpleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5668
                self.table_ref_aux()
                self.state = 5672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,807,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5669
                        self.flashback_query_clause() 
                    self.state = 5674
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,807,self._ctx)

                pass

            elif la_ == 2:
                localctx = plsqlParser.TableRefAuxContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5675
                self.table_ref_aux()
                self.state = 5679
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,808,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5676
                        self.flashback_query_clause() 
                    self.state = 5681
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,808,self._ctx)

                self.state = 5683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,809,self._ctx)
                if la_ == 1:
                    self.state = 5682
                    self.table_alias()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 5691
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,811,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = plsqlParser.JoinExprContext(self, plsqlParser.Table_refContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_table_ref)
                    self.state = 5687
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 5688
                    self.join_clause() 
                self.state = 5693
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,811,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Table_ref_auxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_table_expression_clauseContext,0)


        def pivot_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_clauseContext,0)


        def unpivot_clause(self):
            return self.getTypedRuleContext(plsqlParser.Unpivot_clauseContext,0)


        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_ref_aux

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_ref_aux" ):
                return visitor.visitTable_ref_aux(self)
            else:
                return visitor.visitChildren(self)




    def table_ref_aux(self):

        localctx = plsqlParser.Table_ref_auxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_table_ref_aux)
        try:
            self.state = 5704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,813,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5694
                self.dml_table_expression_clause()
                self.state = 5697
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,812,self._ctx)
                if la_ == 1:
                    self.state = 5695
                    self.pivot_clause()

                elif la_ == 2:
                    self.state = 5696
                    self.unpivot_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5699
                self.match(plsqlParser.ONLY)
                self.state = 5700
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 5701
                self.dml_table_expression_clause()
                self.state = 5702
                self.match(plsqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(plsqlParser.JOIN, 0)

        def table_ref(self):
            return self.getTypedRuleContext(plsqlParser.Table_refContext,0)


        def query_partition_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Query_partition_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Query_partition_clauseContext,i)


        def join_type(self):
            return self.getTypedRuleContext(plsqlParser.Join_typeContext,0)


        def join_on_part(self):
            return self.getTypedRuleContext(plsqlParser.Join_on_partContext,0)


        def join_using_part(self):
            return self.getTypedRuleContext(plsqlParser.Join_using_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_join_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = plsqlParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION:
                self.state = 5706
                self.query_partition_clause()


            self.state = 5710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CROSS or ((((_la - 189)) & ~0x3f) == 0 and ((1 << (_la - 189)) & ((1 << (plsqlParser.FULL - 189)) | (1 << (plsqlParser.INNER - 189)) | (1 << (plsqlParser.LEFT - 189)))) != 0) or _la==plsqlParser.NATURAL or _la==plsqlParser.RIGHT:
                self.state = 5709
                self.join_type()


            self.state = 5712
            self.match(plsqlParser.JOIN)
            self.state = 5713
            self.table_ref(0)
            self.state = 5715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,816,self._ctx)
            if la_ == 1:
                self.state = 5714
                self.query_partition_clause()


            self.state = 5719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,817,self._ctx)
            if la_ == 1:
                self.state = 5717
                self.join_on_part()

            elif la_ == 2:
                self.state = 5718
                self.join_using_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_on_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_join_on_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_on_part" ):
                return visitor.visitJoin_on_part(self)
            else:
                return visitor.visitChildren(self)




    def join_on_part(self):

        localctx = plsqlParser.Join_on_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_join_on_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5721
            self.match(plsqlParser.ON)
            self.state = 5722
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_using_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_join_using_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_using_part" ):
                return visitor.visitJoin_using_part(self)
            else:
                return visitor.visitChildren(self)




    def join_using_part(self):

        localctx = plsqlParser.Join_using_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_join_using_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5724
            self.match(plsqlParser.USING)
            self.state = 5725
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5726
            self.column_name()
            self.state = 5731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 5727
                self.match(plsqlParser.COMMA)
                self.state = 5728
                self.column_name()
                self.state = 5733
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5734
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(plsqlParser.CROSS, 0)

        def INNER(self):
            return self.getToken(plsqlParser.INNER, 0)

        def NATURAL(self):
            return self.getToken(plsqlParser.NATURAL, 0)

        def FULL(self):
            return self.getToken(plsqlParser.FULL, 0)

        def LEFT(self):
            return self.getToken(plsqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(plsqlParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(plsqlParser.OUTER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_join_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_type" ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = plsqlParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.state = 5747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CROSS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5736
                self.match(plsqlParser.CROSS)
                pass
            elif token in [plsqlParser.FULL, plsqlParser.INNER, plsqlParser.LEFT, plsqlParser.NATURAL, plsqlParser.RIGHT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NATURAL:
                    self.state = 5737
                    self.match(plsqlParser.NATURAL)


                self.state = 5745
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.INNER]:
                    self.state = 5740
                    self.match(plsqlParser.INNER)
                    pass
                elif token in [plsqlParser.FULL, plsqlParser.LEFT, plsqlParser.RIGHT]:
                    self.state = 5741
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.FULL or _la==plsqlParser.LEFT or _la==plsqlParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5743
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.OUTER:
                        self.state = 5742
                        self.match(plsqlParser.OUTER)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_partition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_query_partition_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_partition_clause" ):
                return visitor.visitQuery_partition_clause(self)
            else:
                return visitor.visitChildren(self)




    def query_partition_clause(self):

        localctx = plsqlParser.Query_partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_query_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5749
            self.match(plsqlParser.PARTITION)
            self.state = 5750
            self.match(plsqlParser.BY)
            self.state = 5764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,824,self._ctx)
            if la_ == 1:
                self.state = 5751
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 5752
                self.subquery(0)
                self.state = 5753
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 5755
                self.expression_list()
                pass

            elif la_ == 3:
                self.state = 5756
                self.expression(0)
                self.state = 5761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,823,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5757
                        self.match(plsqlParser.COMMA)
                        self.state = 5758
                        self.expression(0) 
                    self.state = 5763
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,823,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flashback_query_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSIONS(self):
            return self.getToken(plsqlParser.VERSIONS, 0)

        def BETWEEN(self):
            return self.getToken(plsqlParser.BETWEEN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def SCN(self):
            return self.getToken(plsqlParser.SCN, 0)

        def TIMESTAMP(self):
            return self.getToken(plsqlParser.TIMESTAMP, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def SNAPSHOT(self):
            return self.getToken(plsqlParser.SNAPSHOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_flashback_query_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlashback_query_clause" ):
                return visitor.visitFlashback_query_clause(self)
            else:
                return visitor.visitChildren(self)




    def flashback_query_clause(self):

        localctx = plsqlParser.Flashback_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_flashback_query_clause)
        self._la = 0 # Token type
        try:
            self.state = 5774
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.VERSIONS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5766
                self.match(plsqlParser.VERSIONS)
                self.state = 5767
                self.match(plsqlParser.BETWEEN)
                self.state = 5768
                _la = self._input.LA(1)
                if not(_la==plsqlParser.SCN or _la==plsqlParser.TIMESTAMP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5769
                self.expression(0)
                pass
            elif token in [plsqlParser.AS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5770
                self.match(plsqlParser.AS)
                self.state = 5771
                self.match(plsqlParser.OF)
                self.state = 5772
                _la = self._input.LA(1)
                if not(_la==plsqlParser.SCN or _la==plsqlParser.SNAPSHOT or _la==plsqlParser.TIMESTAMP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5773
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(plsqlParser.PIVOT, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def pivot_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Pivot_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Pivot_elementContext,i)


        def pivot_for_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_for_clauseContext,0)


        def pivot_in_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_in_clauseContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def XML(self):
            return self.getToken(plsqlParser.XML, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_clause" ):
                return visitor.visitPivot_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_clause(self):

        localctx = plsqlParser.Pivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_pivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5776
            self.match(plsqlParser.PIVOT)
            self.state = 5778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.XML:
                self.state = 5777
                self.match(plsqlParser.XML)


            self.state = 5780
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5781
            self.pivot_element()
            self.state = 5786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 5782
                self.match(plsqlParser.COMMA)
                self.state = 5783
                self.pivot_element()
                self.state = 5788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5789
            self.pivot_for_clause()
            self.state = 5790
            self.pivot_in_clause()
            self.state = 5791
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function_name(self):
            return self.getTypedRuleContext(plsqlParser.Aggregate_function_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_element" ):
                return visitor.visitPivot_element(self)
            else:
                return visitor.visitChildren(self)




    def pivot_element(self):

        localctx = plsqlParser.Pivot_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_pivot_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5793
            self.aggregate_function_name()
            self.state = 5794
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5795
            self.expression(0)
            self.state = 5796
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 5798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5797
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_for_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_for_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_for_clause" ):
                return visitor.visitPivot_for_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_for_clause(self):

        localctx = plsqlParser.Pivot_for_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_pivot_for_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5800
            self.match(plsqlParser.FOR)
            self.state = 5813
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 5801
                self.column_name()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 5802
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 5803
                self.column_name()
                self.state = 5808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5804
                    self.match(plsqlParser.COMMA)
                    self.state = 5805
                    self.column_name()
                    self.state = 5810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5811
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ANY)
            else:
                return self.getToken(plsqlParser.ANY, i)

        def pivot_in_clause_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Pivot_in_clause_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Pivot_in_clause_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_in_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause" ):
                return visitor.visitPivot_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause(self):

        localctx = plsqlParser.Pivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_pivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5815
            self.match(plsqlParser.IN)
            self.state = 5816
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,833,self._ctx)
            if la_ == 1:
                self.state = 5817
                self.subquery(0)
                pass

            elif la_ == 2:
                self.state = 5818
                self.match(plsqlParser.ANY)
                self.state = 5823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5819
                    self.match(plsqlParser.COMMA)
                    self.state = 5820
                    self.match(plsqlParser.ANY)
                    self.state = 5825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 5826
                self.pivot_in_clause_element()
                self.state = 5831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5827
                    self.match(plsqlParser.COMMA)
                    self.state = 5828
                    self.pivot_in_clause_element()
                    self.state = 5833
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 5836
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_in_clause_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot_in_clause_elements(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_in_clause_elementsContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_in_clause_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause_element" ):
                return visitor.visitPivot_in_clause_element(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause_element(self):

        localctx = plsqlParser.Pivot_in_clause_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_pivot_in_clause_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5838
            self.pivot_in_clause_elements()
            self.state = 5840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5839
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_in_clause_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_in_clause_elements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause_elements" ):
                return visitor.visitPivot_in_clause_elements(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause_elements(self):

        localctx = plsqlParser.Pivot_in_clause_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_pivot_in_clause_elements)
        try:
            self.state = 5844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,835,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5842
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5843
                self.expression_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(plsqlParser.UNPIVOT, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def pivot_for_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_for_clauseContext,0)


        def unpivot_in_clause(self):
            return self.getTypedRuleContext(plsqlParser.Unpivot_in_clauseContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def NULLS(self):
            return self.getToken(plsqlParser.NULLS, 0)

        def INCLUDE(self):
            return self.getToken(plsqlParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(plsqlParser.EXCLUDE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_unpivot_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_clause" ):
                return visitor.visitUnpivot_clause(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_clause(self):

        localctx = plsqlParser.Unpivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_unpivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5846
            self.match(plsqlParser.UNPIVOT)
            self.state = 5849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.EXCLUDE or _la==plsqlParser.INCLUDE:
                self.state = 5847
                _la = self._input.LA(1)
                if not(_la==plsqlParser.EXCLUDE or _la==plsqlParser.INCLUDE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5848
                self.match(plsqlParser.NULLS)


            self.state = 5851
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 5852
                self.column_name()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 5853
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 5854
                self.column_name()
                self.state = 5859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5855
                    self.match(plsqlParser.COMMA)
                    self.state = 5856
                    self.column_name()
                    self.state = 5861
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5862
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5866
            self.pivot_for_clause()
            self.state = 5867
            self.unpivot_in_clause()
            self.state = 5868
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def unpivot_in_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Unpivot_in_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Unpivot_in_elementsContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_unpivot_in_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_in_clause" ):
                return visitor.visitUnpivot_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_in_clause(self):

        localctx = plsqlParser.Unpivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_unpivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5870
            self.match(plsqlParser.IN)
            self.state = 5871
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5872
            self.unpivot_in_elements()
            self.state = 5877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 5873
                self.match(plsqlParser.COMMA)
                self.state = 5874
                self.unpivot_in_elements()
                self.state = 5879
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5880
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_in_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConstantContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_unpivot_in_elements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_in_elements" ):
                return visitor.visitUnpivot_in_elements(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_in_elements(self):

        localctx = plsqlParser.Unpivot_in_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_unpivot_in_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5894
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 5882
                self.column_name()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 5883
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 5884
                self.column_name()
                self.state = 5889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5885
                    self.match(plsqlParser.COMMA)
                    self.state = 5886
                    self.column_name()
                    self.state = 5891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5892
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS:
                self.state = 5896
                self.match(plsqlParser.AS)
                self.state = 5909
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.DATE, plsqlParser.DBTIMEZONE, plsqlParser.DEFAULT, plsqlParser.FALSE, plsqlParser.INTERVAL, plsqlParser.MAXVALUE, plsqlParser.MINVALUE, plsqlParser.NULL, plsqlParser.SESSIONTIMEZONE, plsqlParser.TIMESTAMP, plsqlParser.TRUE, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING]:
                    self.state = 5897
                    self.constant()
                    pass
                elif token in [plsqlParser.LEFT_PAREN]:
                    self.state = 5898
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 5899
                    self.constant()
                    self.state = 5904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==plsqlParser.COMMA:
                        self.state = 5900
                        self.match(plsqlParser.COMMA)
                        self.state = 5901
                        self.constant()
                        self.state = 5906
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 5907
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hierarchical_query_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(plsqlParser.CONNECT, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def NOCYCLE(self):
            return self.getToken(plsqlParser.NOCYCLE, 0)

        def start_part(self):
            return self.getTypedRuleContext(plsqlParser.Start_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_hierarchical_query_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHierarchical_query_clause" ):
                return visitor.visitHierarchical_query_clause(self)
            else:
                return visitor.visitChildren(self)




    def hierarchical_query_clause(self):

        localctx = plsqlParser.Hierarchical_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_hierarchical_query_clause)
        try:
            self.state = 5930
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CONNECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5913
                self.match(plsqlParser.CONNECT)
                self.state = 5914
                self.match(plsqlParser.BY)
                self.state = 5916
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,845,self._ctx)
                if la_ == 1:
                    self.state = 5915
                    self.match(plsqlParser.NOCYCLE)


                self.state = 5918
                self.condition()
                self.state = 5920
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,846,self._ctx)
                if la_ == 1:
                    self.state = 5919
                    self.start_part()


                pass
            elif token in [plsqlParser.START]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5922
                self.start_part()
                self.state = 5923
                self.match(plsqlParser.CONNECT)
                self.state = 5924
                self.match(plsqlParser.BY)
                self.state = 5926
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,847,self._ctx)
                if la_ == 1:
                    self.state = 5925
                    self.match(plsqlParser.NOCYCLE)


                self.state = 5928
                self.condition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(plsqlParser.START, 0)

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_start_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStart_part" ):
                return visitor.visitStart_part(self)
            else:
                return visitor.visitChildren(self)




    def start_part(self):

        localctx = plsqlParser.Start_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_start_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5932
            self.match(plsqlParser.START)
            self.state = 5933
            self.match(plsqlParser.WITH)
            self.state = 5934
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(plsqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def group_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Group_by_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Group_by_elementsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_group_by_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_clause" ):
                return visitor.visitGroup_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_by_clause(self):

        localctx = plsqlParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_group_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5936
            self.match(plsqlParser.GROUP)
            self.state = 5937
            self.match(plsqlParser.BY)
            self.state = 5938
            self.group_by_elements()
            self.state = 5943
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,849,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5939
                    self.match(plsqlParser.COMMA)
                    self.state = 5940
                    self.group_by_elements() 
                self.state = 5945
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,849,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grouping_sets_clause(self):
            return self.getTypedRuleContext(plsqlParser.Grouping_sets_clauseContext,0)


        def rollup_cube_clause(self):
            return self.getTypedRuleContext(plsqlParser.Rollup_cube_clauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_group_by_elements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_elements" ):
                return visitor.visitGroup_by_elements(self)
            else:
                return visitor.visitChildren(self)




    def group_by_elements(self):

        localctx = plsqlParser.Group_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_group_by_elements)
        try:
            self.state = 5949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,850,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5946
                self.grouping_sets_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5947
                self.rollup_cube_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5948
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollup_cube_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Grouping_sets_elementsContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def ROLLUP(self):
            return self.getToken(plsqlParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(plsqlParser.CUBE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_rollup_cube_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollup_cube_clause" ):
                return visitor.visitRollup_cube_clause(self)
            else:
                return visitor.visitChildren(self)




    def rollup_cube_clause(self):

        localctx = plsqlParser.Rollup_cube_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_rollup_cube_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5951
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CUBE or _la==plsqlParser.ROLLUP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5952
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5953
            self.grouping_sets_elements()
            self.state = 5958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 5954
                self.match(plsqlParser.COMMA)
                self.state = 5955
                self.grouping_sets_elements()
                self.state = 5960
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5961
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(plsqlParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(plsqlParser.SETS, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Grouping_sets_elementsContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_grouping_sets_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_sets_clause" ):
                return visitor.visitGrouping_sets_clause(self)
            else:
                return visitor.visitChildren(self)




    def grouping_sets_clause(self):

        localctx = plsqlParser.Grouping_sets_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_grouping_sets_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5963
            self.match(plsqlParser.GROUPING)
            self.state = 5964
            self.match(plsqlParser.SETS)
            self.state = 5965
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5966
            self.grouping_sets_elements()
            self.state = 5971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 5967
                self.match(plsqlParser.COMMA)
                self.state = 5968
                self.grouping_sets_elements()
                self.state = 5973
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5974
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rollup_cube_clause(self):
            return self.getTypedRuleContext(plsqlParser.Rollup_cube_clauseContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_grouping_sets_elements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_sets_elements" ):
                return visitor.visitGrouping_sets_elements(self)
            else:
                return visitor.visitChildren(self)




    def grouping_sets_elements(self):

        localctx = plsqlParser.Grouping_sets_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_grouping_sets_elements)
        try:
            self.state = 5979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,853,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5976
                self.rollup_cube_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5977
                self.expression_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5978
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(plsqlParser.HAVING, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_having_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHaving_clause" ):
                return visitor.visitHaving_clause(self)
            else:
                return visitor.visitChildren(self)




    def having_clause(self):

        localctx = plsqlParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5981
            self.match(plsqlParser.HAVING)
            self.state = 5982
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODEL(self):
            return self.getToken(plsqlParser.MODEL, 0)

        def main_model(self):
            return self.getTypedRuleContext(plsqlParser.Main_modelContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Cell_reference_optionsContext,i)


        def return_rows_clause(self):
            return self.getTypedRuleContext(plsqlParser.Return_rows_clauseContext,0)


        def reference_model(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Reference_modelContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Reference_modelContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_clause" ):
                return visitor.visitModel_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_clause(self):

        localctx = plsqlParser.Model_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_model_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5984
            self.match(plsqlParser.MODEL)
            self.state = 5988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.IGNORE or _la==plsqlParser.KEEP or _la==plsqlParser.UNIQUE:
                self.state = 5985
                self.cell_reference_options()
                self.state = 5990
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN:
                self.state = 5991
                self.return_rows_clause()


            self.state = 5997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.REFERENCE:
                self.state = 5994
                self.reference_model()
                self.state = 5999
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6000
            self.main_model()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cell_reference_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAV(self):
            return self.getToken(plsqlParser.NAV, 0)

        def IGNORE(self):
            return self.getToken(plsqlParser.IGNORE, 0)

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def DIMENSION(self):
            return self.getToken(plsqlParser.DIMENSION, 0)

        def SINGLE(self):
            return self.getToken(plsqlParser.SINGLE, 0)

        def REFERENCE(self):
            return self.getToken(plsqlParser.REFERENCE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_cell_reference_options

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCell_reference_options" ):
                return visitor.visitCell_reference_options(self)
            else:
                return visitor.visitChildren(self)




    def cell_reference_options(self):

        localctx = plsqlParser.Cell_reference_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_cell_reference_options)
        self._la = 0 # Token type
        try:
            self.state = 6010
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.IGNORE, plsqlParser.KEEP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6002
                _la = self._input.LA(1)
                if not(_la==plsqlParser.IGNORE or _la==plsqlParser.KEEP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6003
                self.match(plsqlParser.NAV)
                pass
            elif token in [plsqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6004
                self.match(plsqlParser.UNIQUE)
                self.state = 6008
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.DIMENSION]:
                    self.state = 6005
                    self.match(plsqlParser.DIMENSION)
                    pass
                elif token in [plsqlParser.SINGLE]:
                    self.state = 6006
                    self.match(plsqlParser.SINGLE)
                    self.state = 6007
                    self.match(plsqlParser.REFERENCE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_rows_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def UPDATED(self):
            return self.getToken(plsqlParser.UPDATED, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_return_rows_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_rows_clause" ):
                return visitor.visitReturn_rows_clause(self)
            else:
                return visitor.visitChildren(self)




    def return_rows_clause(self):

        localctx = plsqlParser.Return_rows_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_return_rows_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6012
            self.match(plsqlParser.RETURN)
            self.state = 6013
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ALL or _la==plsqlParser.UPDATED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6014
            self.match(plsqlParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(plsqlParser.REFERENCE, 0)

        def reference_model_name(self):
            return self.getTypedRuleContext(plsqlParser.Reference_model_nameContext,0)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def model_column_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Model_column_clausesContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_reference_model

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_model" ):
                return visitor.visitReference_model(self)
            else:
                return visitor.visitChildren(self)




    def reference_model(self):

        localctx = plsqlParser.Reference_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_reference_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6016
            self.match(plsqlParser.REFERENCE)
            self.state = 6017
            self.reference_model_name()
            self.state = 6018
            self.match(plsqlParser.ON)
            self.state = 6019
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6020
            self.subquery(0)
            self.state = 6021
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 6022
            self.model_column_clauses()
            self.state = 6026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.IGNORE or _la==plsqlParser.KEEP or _la==plsqlParser.UNIQUE:
                self.state = 6023
                self.cell_reference_options()
                self.state = 6028
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Main_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_column_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Model_column_clausesContext,0)


        def model_rules_clause(self):
            return self.getTypedRuleContext(plsqlParser.Model_rules_clauseContext,0)


        def MAIN(self):
            return self.getToken(plsqlParser.MAIN, 0)

        def main_model_name(self):
            return self.getTypedRuleContext(plsqlParser.Main_model_nameContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_main_model

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain_model" ):
                return visitor.visitMain_model(self)
            else:
                return visitor.visitChildren(self)




    def main_model(self):

        localctx = plsqlParser.Main_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_main_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.MAIN:
                self.state = 6029
                self.match(plsqlParser.MAIN)
                self.state = 6030
                self.main_model_name()


            self.state = 6033
            self.model_column_clauses()
            self.state = 6037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.IGNORE or _la==plsqlParser.KEEP or _la==plsqlParser.UNIQUE:
                self.state = 6034
                self.cell_reference_options()
                self.state = 6039
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6040
            self.model_rules_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIMENSION(self):
            return self.getToken(plsqlParser.DIMENSION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def model_column_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Model_column_listContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Model_column_listContext,i)


        def MEASURES(self):
            return self.getToken(plsqlParser.MEASURES, 0)

        def model_column_partition_part(self):
            return self.getTypedRuleContext(plsqlParser.Model_column_partition_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_column_clauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_clauses" ):
                return visitor.visitModel_column_clauses(self)
            else:
                return visitor.visitChildren(self)




    def model_column_clauses(self):

        localctx = plsqlParser.Model_column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_model_column_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION:
                self.state = 6042
                self.model_column_partition_part()


            self.state = 6045
            self.match(plsqlParser.DIMENSION)
            self.state = 6046
            self.match(plsqlParser.BY)
            self.state = 6047
            self.model_column_list()
            self.state = 6048
            self.match(plsqlParser.MEASURES)
            self.state = 6049
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_column_partition_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def model_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Model_column_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_column_partition_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_partition_part" ):
                return visitor.visitModel_column_partition_part(self)
            else:
                return visitor.visitChildren(self)




    def model_column_partition_part(self):

        localctx = plsqlParser.Model_column_partition_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_model_column_partition_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6051
            self.match(plsqlParser.PARTITION)
            self.state = 6052
            self.match(plsqlParser.BY)
            self.state = 6053
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def model_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Model_columnContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Model_columnContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_model_column_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_list" ):
                return visitor.visitModel_column_list(self)
            else:
                return visitor.visitChildren(self)




    def model_column_list(self):

        localctx = plsqlParser.Model_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_model_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6055
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6056
            self.model_column()
            self.state = 6061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6057
                self.match(plsqlParser.COMMA)
                self.state = 6058
                self.model_column()
                self.state = 6063
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6064
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_column

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column" ):
                return visitor.visitModel_column(self)
            else:
                return visitor.visitChildren(self)




    def model_column(self):

        localctx = plsqlParser.Model_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_model_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6066
            self.expression(0)
            self.state = 6068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 6067
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_rules_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def model_rules_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Model_rules_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Model_rules_elementContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def model_rules_part(self):
            return self.getTypedRuleContext(plsqlParser.Model_rules_partContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_model_rules_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_clause" ):
                return visitor.visitModel_rules_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_clause(self):

        localctx = plsqlParser.Model_rules_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_model_rules_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RULES:
                self.state = 6070
                self.model_rules_part()


            self.state = 6073
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6074
            self.model_rules_element()
            self.state = 6079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6075
                self.match(plsqlParser.COMMA)
                self.state = 6076
                self.model_rules_element()
                self.state = 6081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6082
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_rules_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULES(self):
            return self.getToken(plsqlParser.RULES, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(plsqlParser.UPSERT, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def model_iterate_clause(self):
            return self.getTypedRuleContext(plsqlParser.Model_iterate_clauseContext,0)


        def AUTOMATIC(self):
            return self.getToken(plsqlParser.AUTOMATIC, 0)

        def SEQUENTIAL(self):
            return self.getToken(plsqlParser.SEQUENTIAL, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_model_rules_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_part" ):
                return visitor.visitModel_rules_part(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_part(self):

        localctx = plsqlParser.Model_rules_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_model_rules_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6084
            self.match(plsqlParser.RULES)
            self.state = 6090
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.UPDATE]:
                self.state = 6085
                self.match(plsqlParser.UPDATE)
                pass
            elif token in [plsqlParser.UPSERT]:
                self.state = 6086
                self.match(plsqlParser.UPSERT)
                self.state = 6088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ALL:
                    self.state = 6087
                    self.match(plsqlParser.ALL)


                pass
            elif token in [plsqlParser.AUTOMATIC, plsqlParser.ITERATE, plsqlParser.SEQUENTIAL, plsqlParser.LEFT_PAREN]:
                pass
            else:
                pass
            self.state = 6094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTOMATIC or _la==plsqlParser.SEQUENTIAL:
                self.state = 6092
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AUTOMATIC or _la==plsqlParser.SEQUENTIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6093
                self.match(plsqlParser.ORDER)


            self.state = 6097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ITERATE:
                self.state = 6096
                self.model_iterate_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_rules_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cell_assignment(self):
            return self.getTypedRuleContext(plsqlParser.Cell_assignmentContext,0)


        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(plsqlParser.UPSERT, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_model_rules_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_element" ):
                return visitor.visitModel_rules_element(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_element(self):

        localctx = plsqlParser.Model_rules_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_model_rules_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,872,self._ctx)
            if la_ == 1:
                self.state = 6099
                self.match(plsqlParser.UPDATE)

            elif la_ == 2:
                self.state = 6100
                self.match(plsqlParser.UPSERT)
                self.state = 6102
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,871,self._ctx)
                if la_ == 1:
                    self.state = 6101
                    self.match(plsqlParser.ALL)




            self.state = 6106
            self.cell_assignment()
            self.state = 6108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ORDER:
                self.state = 6107
                self.order_by_clause()


            self.state = 6110
            self.match(plsqlParser.EQUALS_OP)
            self.state = 6111
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cell_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_expression(self):
            return self.getTypedRuleContext(plsqlParser.Model_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cell_assignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCell_assignment" ):
                return visitor.visitCell_assignment(self)
            else:
                return visitor.visitChildren(self)




    def cell_assignment(self):

        localctx = plsqlParser.Cell_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_cell_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6113
            self.model_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_iterate_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(plsqlParser.ITERATE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def until_part(self):
            return self.getTypedRuleContext(plsqlParser.Until_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_iterate_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_iterate_clause" ):
                return visitor.visitModel_iterate_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_iterate_clause(self):

        localctx = plsqlParser.Model_iterate_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_model_iterate_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6115
            self.match(plsqlParser.ITERATE)
            self.state = 6116
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6117
            self.expression(0)
            self.state = 6118
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 6120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.UNTIL:
                self.state = 6119
                self.until_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Until_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(plsqlParser.UNTIL, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_until_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntil_part" ):
                return visitor.visitUntil_part(self)
            else:
                return visitor.visitChildren(self)




    def until_part(self):

        localctx = plsqlParser.Until_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_until_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6122
            self.match(plsqlParser.UNTIL)
            self.state = 6123
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6124
            self.condition()
            self.state = 6125
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def order_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Order_by_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Order_by_elementsContext,i)


        def SIBLINGS(self):
            return self.getToken(plsqlParser.SIBLINGS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_order_by_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = plsqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6127
            self.match(plsqlParser.ORDER)
            self.state = 6129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SIBLINGS:
                self.state = 6128
                self.match(plsqlParser.SIBLINGS)


            self.state = 6131
            self.match(plsqlParser.BY)
            self.state = 6132
            self.order_by_elements()
            self.state = 6137
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,876,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6133
                    self.match(plsqlParser.COMMA)
                    self.state = 6134
                    self.order_by_elements() 
                self.state = 6139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,876,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token
            self.nulls = None # Token

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(plsqlParser.NULLS, 0)

        def ASC(self):
            return self.getToken(plsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(plsqlParser.DESC, 0)

        def FIRST(self):
            return self.getToken(plsqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(plsqlParser.LAST, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_order_by_elements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_elements" ):
                return visitor.visitOrder_by_elements(self)
            else:
                return visitor.visitChildren(self)




    def order_by_elements(self):

        localctx = plsqlParser.Order_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_order_by_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6140
            self.expression(0)
            self.state = 6142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,877,self._ctx)
            if la_ == 1:
                self.state = 6141
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ASC or _la==plsqlParser.DESC):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,878,self._ctx)
            if la_ == 1:
                self.state = 6144
                self.match(plsqlParser.NULLS)
                self.state = 6145
                localctx.nulls = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FIRST or _la==plsqlParser.LAST):
                    localctx.nulls = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_update_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def for_update_of_part(self):
            return self.getTypedRuleContext(plsqlParser.For_update_of_partContext,0)


        def for_update_options(self):
            return self.getTypedRuleContext(plsqlParser.For_update_optionsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_for_update_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_clause" ):
                return visitor.visitFor_update_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_update_clause(self):

        localctx = plsqlParser.For_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_for_update_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6148
            self.match(plsqlParser.FOR)
            self.state = 6149
            self.match(plsqlParser.UPDATE)
            self.state = 6151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,879,self._ctx)
            if la_ == 1:
                self.state = 6150
                self.for_update_of_part()


            self.state = 6154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,880,self._ctx)
            if la_ == 1:
                self.state = 6153
                self.for_update_options()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_update_of_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_for_update_of_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_of_part" ):
                return visitor.visitFor_update_of_part(self)
            else:
                return visitor.visitChildren(self)




    def for_update_of_part(self):

        localctx = plsqlParser.For_update_of_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_for_update_of_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6156
            self.match(plsqlParser.OF)
            self.state = 6157
            self.column_name()
            self.state = 6162
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,881,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6158
                    self.match(plsqlParser.COMMA)
                    self.state = 6159
                    self.column_name() 
                self.state = 6164
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,881,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_update_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP_(self):
            return self.getToken(plsqlParser.SKIP_, 0)

        def LOCKED(self):
            return self.getToken(plsqlParser.LOCKED, 0)

        def NOWAIT(self):
            return self.getToken(plsqlParser.NOWAIT, 0)

        def WAIT(self):
            return self.getToken(plsqlParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_for_update_options

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_options" ):
                return visitor.visitFor_update_options(self)
            else:
                return visitor.visitChildren(self)




    def for_update_options(self):

        localctx = plsqlParser.For_update_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_for_update_options)
        try:
            self.state = 6170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SKIP_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6165
                self.match(plsqlParser.SKIP_)
                self.state = 6166
                self.match(plsqlParser.LOCKED)
                pass
            elif token in [plsqlParser.NOWAIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6167
                self.match(plsqlParser.NOWAIT)
                pass
            elif token in [plsqlParser.WAIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6168
                self.match(plsqlParser.WAIT)
                self.state = 6169
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(plsqlParser.LIMIT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_limit_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimit_clause" ):
                return visitor.visitLimit_clause(self)
            else:
                return visitor.visitChildren(self)




    def limit_clause(self):

        localctx = plsqlParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_limit_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6172
            self.match(plsqlParser.LIMIT)
            self.state = 6173
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(plsqlParser.General_table_refContext,0)


        def update_set_clause(self):
            return self.getTypedRuleContext(plsqlParser.Update_set_clauseContext,0)


        def from_clause(self):
            return self.getTypedRuleContext(plsqlParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_update_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_statement" ):
                return visitor.visitUpdate_statement(self)
            else:
                return visitor.visitChildren(self)




    def update_statement(self):

        localctx = plsqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6175
            self.match(plsqlParser.UPDATE)
            self.state = 6176
            self.general_table_ref()
            self.state = 6177
            self.update_set_clause()
            self.state = 6179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FROM:
                self.state = 6178
                self.from_clause()


            self.state = 6182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHERE:
                self.state = 6181
                self.where_clause()


            self.state = 6185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN or _la==plsqlParser.RETURNING:
                self.state = 6184
                self.static_returning_clause()


            self.state = 6188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 6187
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def column_based_update_set_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_based_update_set_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_based_update_set_clauseContext,i)


        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_update_set_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_set_clause" ):
                return visitor.visitUpdate_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def update_set_clause(self):

        localctx = plsqlParser.Update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_update_set_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6190
            self.match(plsqlParser.SET)
            self.state = 6206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,888,self._ctx)
            if la_ == 1:
                self.state = 6191
                self.column_based_update_set_clause()
                self.state = 6196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 6192
                    self.match(plsqlParser.COMMA)
                    self.state = 6193
                    self.column_based_update_set_clause()
                    self.state = 6198
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 6199
                self.match(plsqlParser.VALUE)
                self.state = 6200
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6201
                self.r_id()
                self.state = 6202
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 6203
                self.match(plsqlParser.EQUALS_OP)
                self.state = 6204
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_based_update_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_column_based_update_set_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_based_update_set_clause" ):
                return visitor.visitColumn_based_update_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def column_based_update_set_clause(self):

        localctx = plsqlParser.Column_based_update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_column_based_update_set_clause)
        try:
            self.state = 6216
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6208
                self.column_name()
                self.state = 6209
                self.match(plsqlParser.EQUALS_OP)
                self.state = 6210
                self.expression(0)
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6212
                self.paren_column_list()
                self.state = 6213
                self.match(plsqlParser.EQUALS_OP)
                self.state = 6214
                self.subquery(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(plsqlParser.General_table_refContext,0)


        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_delete_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement" ):
                return visitor.visitDelete_statement(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement(self):

        localctx = plsqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6218
            self.match(plsqlParser.DELETE)
            self.state = 6220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FROM:
                self.state = 6219
                self.match(plsqlParser.FROM)


            self.state = 6222
            self.general_table_ref()
            self.state = 6224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHERE:
                self.state = 6223
                self.where_clause()


            self.state = 6227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN or _la==plsqlParser.RETURNING:
                self.state = 6226
                self.static_returning_clause()


            self.state = 6230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 6229
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(plsqlParser.INSERT, 0)

        def single_table_insert(self):
            return self.getTypedRuleContext(plsqlParser.Single_table_insertContext,0)


        def multi_table_insert(self):
            return self.getTypedRuleContext(plsqlParser.Multi_table_insertContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_insert_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement" ):
                return visitor.visitInsert_statement(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement(self):

        localctx = plsqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_insert_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6232
            self.match(plsqlParser.INSERT)
            self.state = 6235
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INTO]:
                self.state = 6233
                self.single_table_insert()
                pass
            elif token in [plsqlParser.ALL, plsqlParser.FIRST, plsqlParser.WHEN]:
                self.state = 6234
                self.multi_table_insert()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_table_insertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(plsqlParser.Values_clauseContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Static_returning_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_single_table_insert

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_table_insert" ):
                return visitor.visitSingle_table_insert(self)
            else:
                return visitor.visitChildren(self)




    def single_table_insert(self):

        localctx = plsqlParser.Single_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_single_table_insert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6237
            self.insert_into_clause()
            self.state = 6243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.VALUES]:
                self.state = 6238
                self.values_clause()
                self.state = 6240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.RETURN or _la==plsqlParser.RETURNING:
                    self.state = 6239
                    self.static_returning_clause()


                pass
            elif token in [plsqlParser.SELECT, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                self.state = 6242
                self.select_statement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 6245
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_table_insertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def conditional_insert_clause(self):
            return self.getTypedRuleContext(plsqlParser.Conditional_insert_clauseContext,0)


        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_multi_table_insert

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_table_insert" ):
                return visitor.visitMulti_table_insert(self)
            else:
                return visitor.visitChildren(self)




    def multi_table_insert(self):

        localctx = plsqlParser.Multi_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_multi_table_insert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,899,self._ctx)
            if la_ == 1:
                self.state = 6248
                self.match(plsqlParser.ALL)
                self.state = 6250 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6249
                    self.multi_table_element()
                    self.state = 6252 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.INTO):
                        break

                pass

            elif la_ == 2:
                self.state = 6254
                self.conditional_insert_clause()
                pass


            self.state = 6257
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(plsqlParser.Values_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_multi_table_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_table_element" ):
                return visitor.visitMulti_table_element(self)
            else:
                return visitor.visitChildren(self)




    def multi_table_element(self):

        localctx = plsqlParser.Multi_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_multi_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6259
            self.insert_into_clause()
            self.state = 6261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.VALUES:
                self.state = 6260
                self.values_clause()


            self.state = 6264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 6263
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_insert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_insert_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Conditional_insert_when_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Conditional_insert_when_partContext,i)


        def conditional_insert_else_part(self):
            return self.getTypedRuleContext(plsqlParser.Conditional_insert_else_partContext,0)


        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def FIRST(self):
            return self.getToken(plsqlParser.FIRST, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_conditional_insert_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_clause" ):
                return visitor.visitConditional_insert_clause(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_clause(self):

        localctx = plsqlParser.Conditional_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_conditional_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ALL or _la==plsqlParser.FIRST:
                self.state = 6266
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ALL or _la==plsqlParser.FIRST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6270 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6269
                self.conditional_insert_when_part()
                self.state = 6272 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.WHEN):
                    break

            self.state = 6275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELSE:
                self.state = 6274
                self.conditional_insert_else_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_insert_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_conditional_insert_when_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_when_part" ):
                return visitor.visitConditional_insert_when_part(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_when_part(self):

        localctx = plsqlParser.Conditional_insert_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_conditional_insert_when_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6277
            self.match(plsqlParser.WHEN)
            self.state = 6278
            self.condition()
            self.state = 6279
            self.match(plsqlParser.THEN)
            self.state = 6281 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6280
                self.multi_table_element()
                self.state = 6283 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.INTO):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_insert_else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(plsqlParser.ELSE, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_conditional_insert_else_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_else_part" ):
                return visitor.visitConditional_insert_else_part(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_else_part(self):

        localctx = plsqlParser.Conditional_insert_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_conditional_insert_else_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6285
            self.match(plsqlParser.ELSE)
            self.state = 6287 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6286
                self.multi_table_element()
                self.state = 6289 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.INTO):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(plsqlParser.General_table_refContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_insert_into_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_into_clause" ):
                return visitor.visitInsert_into_clause(self)
            else:
                return visitor.visitChildren(self)




    def insert_into_clause(self):

        localctx = plsqlParser.Insert_into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_insert_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6291
            self.match(plsqlParser.INTO)
            self.state = 6292
            self.general_table_ref()
            self.state = 6294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,907,self._ctx)
            if la_ == 1:
                self.state = 6293
                self.paren_column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Expression_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_values_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValues_clause" ):
                return visitor.visitValues_clause(self)
            else:
                return visitor.visitChildren(self)




    def values_clause(self):

        localctx = plsqlParser.Values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_values_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6296
            self.match(plsqlParser.VALUES)
            self.state = 6297
            self.expression_list()
            self.state = 6302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6298
                self.match(plsqlParser.COMMA)
                self.state = 6299
                self.expression_list()
                self.state = 6304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(plsqlParser.MERGE, 0)

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def selected_tableview(self):
            return self.getTypedRuleContext(plsqlParser.Selected_tableviewContext,0)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def merge_update_clause(self):
            return self.getTypedRuleContext(plsqlParser.Merge_update_clauseContext,0)


        def merge_insert_clause(self):
            return self.getTypedRuleContext(plsqlParser.Merge_insert_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_statement" ):
                return visitor.visitMerge_statement(self)
            else:
                return visitor.visitChildren(self)




    def merge_statement(self):

        localctx = plsqlParser.Merge_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_merge_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6305
            self.match(plsqlParser.MERGE)
            self.state = 6306
            self.match(plsqlParser.INTO)
            self.state = 6307
            self.tableview_name()
            self.state = 6309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 6308
                self.table_alias()


            self.state = 6311
            self.match(plsqlParser.USING)
            self.state = 6312
            self.selected_tableview()
            self.state = 6313
            self.match(plsqlParser.ON)
            self.state = 6314
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6315
            self.condition()
            self.state = 6316
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 6325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,912,self._ctx)
            if la_ == 1:
                self.state = 6317
                self.merge_update_clause()
                self.state = 6319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WHEN:
                    self.state = 6318
                    self.merge_insert_clause()



            elif la_ == 2:
                self.state = 6321
                self.merge_insert_clause()
                self.state = 6323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WHEN:
                    self.state = 6322
                    self.merge_update_clause()




            self.state = 6328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 6327
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_update_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(plsqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def merge_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Merge_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Merge_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def merge_update_delete_part(self):
            return self.getTypedRuleContext(plsqlParser.Merge_update_delete_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_update_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_update_clause" ):
                return visitor.visitMerge_update_clause(self)
            else:
                return visitor.visitChildren(self)




    def merge_update_clause(self):

        localctx = plsqlParser.Merge_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_merge_update_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6330
            self.match(plsqlParser.WHEN)
            self.state = 6331
            self.match(plsqlParser.MATCHED)
            self.state = 6332
            self.match(plsqlParser.THEN)
            self.state = 6333
            self.match(plsqlParser.UPDATE)
            self.state = 6334
            self.match(plsqlParser.SET)
            self.state = 6335
            self.merge_element()
            self.state = 6340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6336
                self.match(plsqlParser.COMMA)
                self.state = 6337
                self.merge_element()
                self.state = 6342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHERE:
                self.state = 6343
                self.where_clause()


            self.state = 6347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,916,self._ctx)
            if la_ == 1:
                self.state = 6346
                self.merge_update_delete_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_element" ):
                return visitor.visitMerge_element(self)
            else:
                return visitor.visitChildren(self)




    def merge_element(self):

        localctx = plsqlParser.Merge_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_merge_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6349
            self.column_name()
            self.state = 6350
            self.match(plsqlParser.EQUALS_OP)
            self.state = 6351
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_update_delete_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_update_delete_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_update_delete_part" ):
                return visitor.visitMerge_update_delete_part(self)
            else:
                return visitor.visitChildren(self)




    def merge_update_delete_part(self):

        localctx = plsqlParser.Merge_update_delete_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_merge_update_delete_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6353
            self.match(plsqlParser.DELETE)
            self.state = 6354
            self.where_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_insert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(plsqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def INSERT(self):
            return self.getToken(plsqlParser.INSERT, 0)

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_insert_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_insert_clause" ):
                return visitor.visitMerge_insert_clause(self)
            else:
                return visitor.visitChildren(self)




    def merge_insert_clause(self):

        localctx = plsqlParser.Merge_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_merge_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6356
            self.match(plsqlParser.WHEN)
            self.state = 6357
            self.match(plsqlParser.NOT)
            self.state = 6358
            self.match(plsqlParser.MATCHED)
            self.state = 6359
            self.match(plsqlParser.THEN)
            self.state = 6360
            self.match(plsqlParser.INSERT)
            self.state = 6362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 6361
                self.paren_column_list()


            self.state = 6364
            self.match(plsqlParser.VALUES)
            self.state = 6365
            self.expression_list()
            self.state = 6367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHERE:
                self.state = 6366
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_tableviewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_selected_tableview

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelected_tableview" ):
                return visitor.visitSelected_tableview(self)
            else:
                return visitor.visitChildren(self)




    def selected_tableview(self):

        localctx = plsqlParser.Selected_tableviewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_selected_tableview)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 6369
                self.tableview_name()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 6370
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6371
                self.select_statement()
                self.state = 6372
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 6376
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_table_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(plsqlParser.LOCK, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def lock_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lock_table_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lock_table_elementContext,i)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def lock_mode(self):
            return self.getTypedRuleContext(plsqlParser.Lock_modeContext,0)


        def MODE(self):
            return self.getToken(plsqlParser.MODE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def wait_nowait_part(self):
            return self.getTypedRuleContext(plsqlParser.Wait_nowait_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lock_table_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_table_statement" ):
                return visitor.visitLock_table_statement(self)
            else:
                return visitor.visitChildren(self)




    def lock_table_statement(self):

        localctx = plsqlParser.Lock_table_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_lock_table_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6379
            self.match(plsqlParser.LOCK)
            self.state = 6380
            self.match(plsqlParser.TABLE)
            self.state = 6381
            self.lock_table_element()
            self.state = 6386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6382
                self.match(plsqlParser.COMMA)
                self.state = 6383
                self.lock_table_element()
                self.state = 6388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6389
            self.match(plsqlParser.IN)
            self.state = 6390
            self.lock_mode()
            self.state = 6391
            self.match(plsqlParser.MODE)
            self.state = 6393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOWAIT or _la==plsqlParser.WAIT:
                self.state = 6392
                self.wait_nowait_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_nowait_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(plsqlParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def NOWAIT(self):
            return self.getToken(plsqlParser.NOWAIT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_wait_nowait_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWait_nowait_part" ):
                return visitor.visitWait_nowait_part(self)
            else:
                return visitor.visitChildren(self)




    def wait_nowait_part(self):

        localctx = plsqlParser.Wait_nowait_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_wait_nowait_part)
        try:
            self.state = 6398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.WAIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6395
                self.match(plsqlParser.WAIT)
                self.state = 6396
                self.expression(0)
                pass
            elif token in [plsqlParser.NOWAIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6397
                self.match(plsqlParser.NOWAIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lock_table_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_table_element" ):
                return visitor.visitLock_table_element(self)
            else:
                return visitor.visitChildren(self)




    def lock_table_element(self):

        localctx = plsqlParser.Lock_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_lock_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6400
            self.tableview_name()
            self.state = 6402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION or _la==plsqlParser.SUBPARTITION:
                self.state = 6401
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_modeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def SHARE(self):
            return self.getToken(plsqlParser.SHARE, 0)

        def EXCLUSIVE(self):
            return self.getToken(plsqlParser.EXCLUSIVE, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_lock_mode

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_mode" ):
                return visitor.visitLock_mode(self)
            else:
                return visitor.visitChildren(self)




    def lock_mode(self):

        localctx = plsqlParser.Lock_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_lock_mode)
        self._la = 0 # Token type
        try:
            self.state = 6416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,926,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6404
                self.match(plsqlParser.ROW)
                self.state = 6405
                self.match(plsqlParser.SHARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6406
                self.match(plsqlParser.ROW)
                self.state = 6407
                self.match(plsqlParser.EXCLUSIVE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6408
                self.match(plsqlParser.SHARE)
                self.state = 6410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.UPDATE:
                    self.state = 6409
                    self.match(plsqlParser.UPDATE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6412
                self.match(plsqlParser.SHARE)
                self.state = 6413
                self.match(plsqlParser.ROW)
                self.state = 6414
                self.match(plsqlParser.EXCLUSIVE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6415
                self.match(plsqlParser.EXCLUSIVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_table_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_table_expression_clauseContext,0)


        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_general_table_ref

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_table_ref" ):
                return visitor.visitGeneral_table_ref(self)
            else:
                return visitor.visitChildren(self)




    def general_table_ref(self):

        localctx = plsqlParser.General_table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_general_table_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,927,self._ctx)
            if la_ == 1:
                self.state = 6418
                self.dml_table_expression_clause()
                pass

            elif la_ == 2:
                self.state = 6419
                self.match(plsqlParser.ONLY)
                self.state = 6420
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6421
                self.dml_table_expression_clause()
                self.state = 6422
                self.match(plsqlParser.RIGHT_PAREN)
                pass


            self.state = 6427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,928,self._ctx)
            if la_ == 1:
                self.state = 6426
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Static_returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(plsqlParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_static_returning_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatic_returning_clause" ):
                return visitor.visitStatic_returning_clause(self)
            else:
                return visitor.visitChildren(self)




    def static_returning_clause(self):

        localctx = plsqlParser.Static_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_static_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6429
            _la = self._input.LA(1)
            if not(_la==plsqlParser.RETURN or _la==plsqlParser.RETURNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6430
            self.expression(0)
            self.state = 6435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6431
                self.match(plsqlParser.COMMA)
                self.state = 6432
                self.expression(0)
                self.state = 6437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6438
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_logging_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(plsqlParser.LOG, 0)

        def ERRORS(self):
            return self.getToken(plsqlParser.ERRORS, 0)

        def error_logging_into_part(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_into_partContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def error_logging_reject_part(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_reject_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_error_logging_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_clause" ):
                return visitor.visitError_logging_clause(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_clause(self):

        localctx = plsqlParser.Error_logging_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_error_logging_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6440
            self.match(plsqlParser.LOG)
            self.state = 6441
            self.match(plsqlParser.ERRORS)
            self.state = 6443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,930,self._ctx)
            if la_ == 1:
                self.state = 6442
                self.error_logging_into_part()


            self.state = 6446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,931,self._ctx)
            if la_ == 1:
                self.state = 6445
                self.expression(0)


            self.state = 6449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REJECT:
                self.state = 6448
                self.error_logging_reject_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_logging_into_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_error_logging_into_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_into_part" ):
                return visitor.visitError_logging_into_part(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_into_part(self):

        localctx = plsqlParser.Error_logging_into_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_error_logging_into_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6451
            self.match(plsqlParser.INTO)
            self.state = 6452
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_logging_reject_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REJECT(self):
            return self.getToken(plsqlParser.REJECT, 0)

        def LIMIT(self):
            return self.getToken(plsqlParser.LIMIT, 0)

        def UNLIMITED(self):
            return self.getToken(plsqlParser.UNLIMITED, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_error_logging_reject_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_reject_part" ):
                return visitor.visitError_logging_reject_part(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_reject_part(self):

        localctx = plsqlParser.Error_logging_reject_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_error_logging_reject_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6454
            self.match(plsqlParser.REJECT)
            self.state = 6455
            self.match(plsqlParser.LIMIT)
            self.state = 6458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,933,self._ctx)
            if la_ == 1:
                self.state = 6456
                self.match(plsqlParser.UNLIMITED)
                pass

            elif la_ == 2:
                self.state = 6457
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_table_expression_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_collection_expression(self):
            return self.getTypedRuleContext(plsqlParser.Table_collection_expressionContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def subquery_restriction_clause(self):
            return self.getTypedRuleContext(plsqlParser.Subquery_restriction_clauseContext,0)


        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def sample_clause(self):
            return self.getTypedRuleContext(plsqlParser.Sample_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_dml_table_expression_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_table_expression_clause" ):
                return visitor.visitDml_table_expression_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_table_expression_clause(self):

        localctx = plsqlParser.Dml_table_expression_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_dml_table_expression_clause)
        self._la = 0 # Token type
        try:
            self.state = 6472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TABLE, plsqlParser.THE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6460
                self.table_collection_expression()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6461
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6462
                self.select_statement()
                self.state = 6464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WITH:
                    self.state = 6463
                    self.subquery_restriction_clause()


                self.state = 6466
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6468
                self.tableview_name()
                self.state = 6470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,935,self._ctx)
                if la_ == 1:
                    self.state = 6469
                    self.sample_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_collection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def THE(self):
            return self.getToken(plsqlParser.THE, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def PLUS_SIGN(self):
            return self.getToken(plsqlParser.PLUS_SIGN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_collection_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_collection_expression" ):
                return visitor.visitTable_collection_expression(self)
            else:
                return visitor.visitChildren(self)




    def table_collection_expression(self):

        localctx = plsqlParser.Table_collection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_table_collection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6474
            _la = self._input.LA(1)
            if not(_la==plsqlParser.TABLE or _la==plsqlParser.THE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,938,self._ctx)
            if la_ == 1:
                self.state = 6475
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6476
                self.subquery(0)
                self.state = 6477
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 6479
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6480
                self.expression(0)
                self.state = 6481
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 6485
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,937,self._ctx)
                if la_ == 1:
                    self.state = 6482
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 6483
                    self.match(plsqlParser.PLUS_SIGN)
                    self.state = 6484
                    self.match(plsqlParser.RIGHT_PAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_restriction_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def READ(self):
            return self.getToken(plsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def CHECK(self):
            return self.getToken(plsqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(plsqlParser.OPTION, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subquery_restriction_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_restriction_clause" ):
                return visitor.visitSubquery_restriction_clause(self)
            else:
                return visitor.visitChildren(self)




    def subquery_restriction_clause(self):

        localctx = plsqlParser.Subquery_restriction_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_subquery_restriction_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6489
            self.match(plsqlParser.WITH)
            self.state = 6498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.READ]:
                self.state = 6490
                self.match(plsqlParser.READ)
                self.state = 6491
                self.match(plsqlParser.ONLY)
                pass
            elif token in [plsqlParser.CHECK]:
                self.state = 6492
                self.match(plsqlParser.CHECK)
                self.state = 6493
                self.match(plsqlParser.OPTION)
                self.state = 6496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CONSTRAINT:
                    self.state = 6494
                    self.match(plsqlParser.CONSTRAINT)
                    self.state = 6495
                    self.constraint_name()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(plsqlParser.SAMPLE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def BLOCK(self):
            return self.getToken(plsqlParser.BLOCK, 0)

        def COMMA(self):
            return self.getToken(plsqlParser.COMMA, 0)

        def seed_part(self):
            return self.getTypedRuleContext(plsqlParser.Seed_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_sample_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_clause" ):
                return visitor.visitSample_clause(self)
            else:
                return visitor.visitChildren(self)




    def sample_clause(self):

        localctx = plsqlParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_sample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6500
            self.match(plsqlParser.SAMPLE)
            self.state = 6502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BLOCK:
                self.state = 6501
                self.match(plsqlParser.BLOCK)


            self.state = 6504
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6505
            self.expression(0)
            self.state = 6508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMMA:
                self.state = 6506
                self.match(plsqlParser.COMMA)
                self.state = 6507
                self.expression(0)


            self.state = 6510
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 6512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,943,self._ctx)
            if la_ == 1:
                self.state = 6511
                self.seed_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Seed_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEED(self):
            return self.getToken(plsqlParser.SEED, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_seed_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeed_part" ):
                return visitor.visitSeed_part(self)
            else:
                return visitor.visitChildren(self)




    def seed_part(self):

        localctx = plsqlParser.Seed_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_seed_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6514
            self.match(plsqlParser.SEED)
            self.state = 6515
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6516
            self.expression(0)
            self.state = 6517
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_expression" ):
                return visitor.visitCursor_expression(self)
            else:
                return visitor.visitChildren(self)




    def cursor_expression(self):

        localctx = plsqlParser.Cursor_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_cursor_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6519
            self.match(plsqlParser.CURSOR)
            self.state = 6520
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6521
            self.subquery(0)
            self.state = 6522
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_expression_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_list" ):
                return visitor.visitExpression_list(self)
            else:
                return visitor.visitChildren(self)




    def expression_list(self):

        localctx = plsqlParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6524
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DISTINCT - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)) | (1 << (plsqlParser.NOT - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITION - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PRIOR - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELECT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUE - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 585)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.LEFT_PAREN - 585)) | (1 << (plsqlParser.PLUS_SIGN - 585)) | (1 << (plsqlParser.MINUS_SIGN - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 6525
                self.expression(0)


            self.state = 6532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6528
                self.match(plsqlParser.COMMA)
                self.state = 6529
                self.expression(0)
                self.state = 6534
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6535
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_condition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = plsqlParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6537
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IgnoreExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def binary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreExpr" ):
                return visitor.visitIgnoreExpr(self)
            else:
                return visitor.visitChildren(self)


    class AndExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(plsqlParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExpr" ):
                return visitor.visitAndExpr(self)
            else:
                return visitor.visitChildren(self)


    class LikeExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Like_typeContext
            self._expression = None # ExpressionContext
            self.right = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def like_type(self):
            return self.getTypedRuleContext(plsqlParser.Like_typeContext,0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(plsqlParser.ESCAPE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikeExpr" ):
                return visitor.visitLikeExpr(self)
            else:
                return visitor.visitChildren(self)


    class RelExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Relational_operatorContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def relational_operator(self):
            return self.getTypedRuleContext(plsqlParser.Relational_operatorContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelExpr" ):
                return visitor.visitRelExpr(self)
            else:
                return visitor.visitChildren(self)


    class MemberExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # Binary_expressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def binary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,0)

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)
        def SUBMULTISET(self):
            return self.getToken(plsqlParser.SUBMULTISET, 0)
        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberExpr" ):
                return visitor.visitMemberExpr(self)
            else:
                return visitor.visitChildren(self)


    class BetweenExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self._expression = None # ExpressionContext
            self.right = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def AND(self):
            return self.getToken(plsqlParser.AND, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def BETWEEN(self):
            return self.getToken(plsqlParser.BETWEEN, 0)
        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetweenExpr" ):
                return visitor.visitBetweenExpr(self)
            else:
                return visitor.visitChildren(self)


    class CursorExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # Cursor_partContext
            self.copyFrom(ctx)

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)
        def cursor_part(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_partContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursorExpr" ):
                return visitor.visitCursorExpr(self)
            else:
                return visitor.visitChildren(self)


    class IsExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # Is_partContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)
        def is_part(self):
            return self.getTypedRuleContext(plsqlParser.Is_partContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsExpr" ):
                return visitor.visitIsExpr(self)
            else:
                return visitor.visitChildren(self)


    class NotExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)
        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpr" ):
                return visitor.visitNotExpr(self)
            else:
                return visitor.visitChildren(self)


    class InExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)
        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)
        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInExpr" ):
                return visitor.visitInExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpr" ):
                return visitor.visitParenExpr(self)
            else:
                return visitor.visitChildren(self)


    class OrExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrExpr" ):
                return visitor.visitOrExpr(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 814
        self.enterRecursionRule(localctx, 814, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,946,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.CursorExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 6540
                localctx.op = self.match(plsqlParser.CURSOR)
                self.state = 6541
                localctx.expr = self.cursor_part()
                pass

            elif la_ == 2:
                localctx = plsqlParser.NotExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6542
                localctx.op = self.match(plsqlParser.NOT)
                self.state = 6543
                localctx.expr = self.expression(5)
                pass

            elif la_ == 3:
                localctx = plsqlParser.IgnoreExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6544
                self.binary_expression(0)
                pass

            elif la_ == 4:
                localctx = plsqlParser.ParenExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6545
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6546
                self.expression(0)
                self.state = 6547
                self.match(plsqlParser.RIGHT_PAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 6603
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,954,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6601
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,953,self._ctx)
                    if la_ == 1:
                        localctx = plsqlParser.BetweenExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6551
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 6553
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.NOT:
                            self.state = 6552
                            self.match(plsqlParser.NOT)


                        self.state = 6555
                        localctx.op = self.match(plsqlParser.BETWEEN)
                        self.state = 6556
                        localctx._expression = self.expression(0)
                        localctx.right.append(localctx._expression)
                        self.state = 6557
                        self.match(plsqlParser.AND)
                        self.state = 6558
                        localctx._expression = self.expression(11)
                        localctx.right.append(localctx._expression)
                        pass

                    elif la_ == 2:
                        localctx = plsqlParser.RelExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6560
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 6561
                        localctx.op = self.relational_operator()
                        self.state = 6562
                        localctx.right = self.expression(9)
                        pass

                    elif la_ == 3:
                        localctx = plsqlParser.AndExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6564
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 6565
                        localctx.op = self.match(plsqlParser.AND)
                        self.state = 6566
                        localctx.right = self.expression(5)
                        pass

                    elif la_ == 4:
                        localctx = plsqlParser.OrExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6567
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6568
                        localctx.op = self.match(plsqlParser.OR)
                        self.state = 6569
                        localctx.right = self.expression(4)
                        pass

                    elif la_ == 5:
                        localctx = plsqlParser.IsExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6570
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 6571
                        localctx.op = self.match(plsqlParser.IS)
                        self.state = 6572
                        localctx.right = self.is_part()
                        pass

                    elif la_ == 6:
                        localctx = plsqlParser.InExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6573
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 6575
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.NOT:
                            self.state = 6574
                            self.match(plsqlParser.NOT)


                        self.state = 6577
                        localctx.op = self.match(plsqlParser.IN)
                        self.state = 6583
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,949,self._ctx)
                        if la_ == 1:
                            self.state = 6578
                            self.match(plsqlParser.LEFT_PAREN)
                            self.state = 6579
                            self.subquery(0)
                            self.state = 6580
                            self.match(plsqlParser.RIGHT_PAREN)
                            pass

                        elif la_ == 2:
                            self.state = 6582
                            self.expression_list()
                            pass


                        pass

                    elif la_ == 7:
                        localctx = plsqlParser.LikeExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6585
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 6587
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.NOT:
                            self.state = 6586
                            self.match(plsqlParser.NOT)


                        self.state = 6589
                        localctx.op = self.like_type()
                        self.state = 6590
                        localctx._expression = self.expression(0)
                        localctx.right.append(localctx._expression)
                        self.state = 6593
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,951,self._ctx)
                        if la_ == 1:
                            self.state = 6591
                            self.match(plsqlParser.ESCAPE)
                            self.state = 6592
                            localctx._expression = self.expression(0)
                            localctx.right.append(localctx._expression)


                        pass

                    elif la_ == 8:
                        localctx = plsqlParser.MemberExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6595
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 6596
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.MEMBER or _la==plsqlParser.SUBMULTISET):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 6598
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.OF:
                            self.state = 6597
                            self.match(plsqlParser.OF)


                        self.state = 6600
                        localctx.right = self.binary_expression(0)
                        pass

             
                self.state = 6605
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,954,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Is_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def NAN(self):
            return self.getToken(plsqlParser.NAN, 0)

        def PRESENT(self):
            return self.getToken(plsqlParser.PRESENT, 0)

        def INFINITE(self):
            return self.getToken(plsqlParser.INFINITE, 0)

        def A_LETTER(self):
            return self.getToken(plsqlParser.A_LETTER, 0)

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def EMPTY(self):
            return self.getToken(plsqlParser.EMPTY, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_specContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_is_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIs_part" ):
                return visitor.visitIs_part(self)
            else:
                return visitor.visitChildren(self)




    def is_part(self):

        localctx = plsqlParser.Is_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_is_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 6606
                self.match(plsqlParser.NOT)


            self.state = 6634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NULL]:
                self.state = 6609
                self.match(plsqlParser.NULL)
                pass
            elif token in [plsqlParser.NAN]:
                self.state = 6610
                self.match(plsqlParser.NAN)
                pass
            elif token in [plsqlParser.PRESENT]:
                self.state = 6611
                self.match(plsqlParser.PRESENT)
                pass
            elif token in [plsqlParser.INFINITE]:
                self.state = 6612
                self.match(plsqlParser.INFINITE)
                pass
            elif token in [plsqlParser.A_LETTER]:
                self.state = 6613
                self.match(plsqlParser.A_LETTER)
                self.state = 6614
                self.match(plsqlParser.SET)
                pass
            elif token in [plsqlParser.EMPTY]:
                self.state = 6615
                self.match(plsqlParser.EMPTY)
                pass
            elif token in [plsqlParser.OF]:
                self.state = 6616
                self.match(plsqlParser.OF)
                self.state = 6618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.TYPE:
                    self.state = 6617
                    self.match(plsqlParser.TYPE)


                self.state = 6620
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6622
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,957,self._ctx)
                if la_ == 1:
                    self.state = 6621
                    self.match(plsqlParser.ONLY)


                self.state = 6624
                self.type_spec()
                self.state = 6629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 6625
                    self.match(plsqlParser.COMMA)
                    self.state = 6626
                    self.type_spec()
                    self.state = 6631
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6632
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_part" ):
                return visitor.visitCursor_part(self)
            else:
                return visitor.visitChildren(self)




    def cursor_part(self):

        localctx = plsqlParser.Cursor_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_cursor_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6636
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6637
            self.subquery(0)
            self.state = 6638
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiset_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def SUBMULTISET(self):
            return self.getToken(plsqlParser.SUBMULTISET, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_multiset_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiset_type" ):
                return visitor.visitMultiset_type(self)
            else:
                return visitor.visitChildren(self)




    def multiset_type(self):

        localctx = plsqlParser.Multiset_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_multiset_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6640
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MEMBER or _la==plsqlParser.SUBMULTISET):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def not_equal_op(self):
            return self.getTypedRuleContext(plsqlParser.Not_equal_opContext,0)


        def LESS_THAN_OP(self):
            return self.getToken(plsqlParser.LESS_THAN_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(plsqlParser.GREATER_THAN_OP, 0)

        def less_than_or_equals_op(self):
            return self.getTypedRuleContext(plsqlParser.Less_than_or_equals_opContext,0)


        def greater_than_or_equals_op(self):
            return self.getTypedRuleContext(plsqlParser.Greater_than_or_equals_opContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_relational_operator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_operator" ):
                return visitor.visitRelational_operator(self)
            else:
                return visitor.visitChildren(self)




    def relational_operator(self):

        localctx = plsqlParser.Relational_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_relational_operator)
        try:
            self.state = 6648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,960,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6642
                self.match(plsqlParser.EQUALS_OP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6643
                self.not_equal_op()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6644
                self.match(plsqlParser.LESS_THAN_OP)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6645
                self.match(plsqlParser.GREATER_THAN_OP)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6646
                self.less_than_or_equals_op()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6647
                self.greater_than_or_equals_op()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Like_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(plsqlParser.LIKE, 0)

        def LIKEC(self):
            return self.getToken(plsqlParser.LIKEC, 0)

        def LIKE2(self):
            return self.getToken(plsqlParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(plsqlParser.LIKE4, 0)

        def ILIKE(self):
            return self.getToken(plsqlParser.ILIKE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_like_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike_type" ):
                return visitor.visitLike_type(self)
            else:
                return visitor.visitChildren(self)




    def like_type(self):

        localctx = plsqlParser.Like_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_like_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6650
            _la = self._input.LA(1)
            if not(((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & ((1 << (plsqlParser.ILIKE - 207)) | (1 << (plsqlParser.LIKE - 207)) | (1 << (plsqlParser.LIKE2 - 207)) | (1 << (plsqlParser.LIKE4 - 207)) | (1 << (plsqlParser.LIKEC - 207)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Like_escape_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPE(self):
            return self.getToken(plsqlParser.ESCAPE, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_like_escape_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike_escape_part" ):
                return visitor.visitLike_escape_part(self)
            else:
                return visitor.visitChildren(self)




    def like_escape_part(self):

        localctx = plsqlParser.Like_escape_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_like_escape_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6652
            self.match(plsqlParser.ESCAPE)
            self.state = 6653
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Between_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConcatenationContext,i)


        def AND(self):
            return self.getToken(plsqlParser.AND, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_between_elements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_elements" ):
                return visitor.visitBetween_elements(self)
            else:
                return visitor.visitChildren(self)




    def between_elements(self):

        localctx = plsqlParser.Between_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_between_elements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6655
            self.concatenation()
            self.state = 6656
            self.match(plsqlParser.AND)
            self.state = 6657
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConcatenationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_concatenation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation" ):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)




    def concatenation(self):

        localctx = plsqlParser.ConcatenationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_concatenation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6659
            self.binary_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_binary_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class BinaryExprContext(Binary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Binary_expressionContext
            super().__init__(parser)
            self.left = None # Binary_expressionContext
            self.op = None # Token
            self.right = None # Binary_expressionContext
            self.copyFrom(ctx)

        def binary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Binary_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,i)

        def ASTERISK(self):
            return self.getToken(plsqlParser.ASTERISK, 0)
        def SOLIDUS(self):
            return self.getToken(plsqlParser.SOLIDUS, 0)
        def PERCENT(self):
            return self.getToken(plsqlParser.PERCENT, 0)
        def PLUS_SIGN(self):
            return self.getToken(plsqlParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(plsqlParser.MINUS_SIGN, 0)
        def CONCATENATION_OP(self):
            return self.getToken(plsqlParser.CONCATENATION_OP, 0)
        def AT(self):
            return self.getToken(plsqlParser.AT, 0)
        def interval_expression(self):
            return self.getTypedRuleContext(plsqlParser.Interval_expressionContext,0)

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)
        def TIME(self):
            return self.getToken(plsqlParser.TIME, 0)
        def ZONE(self):
            return self.getToken(plsqlParser.ZONE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryExpr" ):
                return visitor.visitBinaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreBinaryExprContext(Binary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Binary_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Unary_expressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreBinaryExpr" ):
                return visitor.visitIgnoreBinaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenBinaryExprContext(Binary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Binary_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def binary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenBinaryExpr" ):
                return visitor.visitParenBinaryExpr(self)
            else:
                return visitor.visitChildren(self)



    def binary_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.Binary_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 832
        self.enterRecursionRule(localctx, 832, self.RULE_binary_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,961,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.ParenBinaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 6662
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6663
                self.binary_expression(0)
                self.state = 6664
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                localctx = plsqlParser.IgnoreBinaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6666
                self.unary_expression(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 6694
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,965,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6692
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,964,self._ctx)
                    if la_ == 1:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 6669
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 6670
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 622)) & ~0x3f) == 0 and ((1 << (_la - 622)) & ((1 << (plsqlParser.PERCENT - 622)) | (1 << (plsqlParser.ASTERISK - 622)) | (1 << (plsqlParser.SOLIDUS - 622)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 6671
                        localctx.right = self.binary_expression(7)
                        pass

                    elif la_ == 2:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 6672
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 6673
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.PLUS_SIGN or _la==plsqlParser.MINUS_SIGN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 6674
                        localctx.right = self.binary_expression(6)
                        pass

                    elif la_ == 3:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 6675
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 6676
                        localctx.op = self.match(plsqlParser.CONCATENATION_OP)
                        self.state = 6677
                        localctx.right = self.binary_expression(5)
                        pass

                    elif la_ == 4:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 6678
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6679
                        localctx.op = self.match(plsqlParser.T__1)
                        self.state = 6680
                        localctx.right = self.binary_expression(4)
                        pass

                    elif la_ == 5:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 6681
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 6690
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.AT]:
                            self.state = 6682
                            self.match(plsqlParser.AT)
                            self.state = 6687
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [plsqlParser.LOCAL]:
                                self.state = 6683
                                self.match(plsqlParser.LOCAL)
                                pass
                            elif token in [plsqlParser.TIME]:
                                self.state = 6684
                                self.match(plsqlParser.TIME)
                                self.state = 6685
                                self.match(plsqlParser.ZONE)
                                self.state = 6686
                                self.binary_expression(0)
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass
                        elif token in [plsqlParser.DAY, plsqlParser.YEAR]:
                            self.state = 6689
                            self.interval_expression()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 6696
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,965,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Interval_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(plsqlParser.DAY, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def SECOND(self):
            return self.getToken(plsqlParser.SECOND, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConcatenationContext,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def YEAR(self):
            return self.getToken(plsqlParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(plsqlParser.MONTH, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_interval_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval_expression" ):
                return visitor.visitInterval_expression(self)
            else:
                return visitor.visitChildren(self)




    def interval_expression(self):

        localctx = plsqlParser.Interval_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_interval_expression)
        self._la = 0 # Token type
        try:
            self.state = 6721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.DAY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6697
                self.match(plsqlParser.DAY)
                self.state = 6702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LEFT_PAREN:
                    self.state = 6698
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 6699
                    self.concatenation()
                    self.state = 6700
                    self.match(plsqlParser.RIGHT_PAREN)


                self.state = 6704
                self.match(plsqlParser.TO)
                self.state = 6705
                self.match(plsqlParser.SECOND)
                self.state = 6710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,967,self._ctx)
                if la_ == 1:
                    self.state = 6706
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 6707
                    self.concatenation()
                    self.state = 6708
                    self.match(plsqlParser.RIGHT_PAREN)


                pass
            elif token in [plsqlParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6712
                self.match(plsqlParser.YEAR)
                self.state = 6717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LEFT_PAREN:
                    self.state = 6713
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 6714
                    self.concatenation()
                    self.state = 6715
                    self.match(plsqlParser.RIGHT_PAREN)


                self.state = 6719
                self.match(plsqlParser.TO)
                self.state = 6720
                self.match(plsqlParser.MONTH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Unary_expressionContext,0)


        def LEFT_BRACKET(self):
            return self.getToken(plsqlParser.LEFT_BRACKET, 0)

        def model_expression_element(self):
            return self.getTypedRuleContext(plsqlParser.Model_expression_elementContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(plsqlParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_model_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_expression" ):
                return visitor.visitModel_expression(self)
            else:
                return visitor.visitChildren(self)




    def model_expression(self):

        localctx = plsqlParser.Model_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_model_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6723
            self.unary_expression(0)
            self.state = 6724
            self.match(plsqlParser.LEFT_BRACKET)
            self.state = 6725
            self.model_expression_element()
            self.state = 6726
            self.match(plsqlParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_expression_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ANY)
            else:
                return self.getToken(plsqlParser.ANY, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def single_column_for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Single_column_for_loopContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Single_column_for_loopContext,i)


        def multi_column_for_loop(self):
            return self.getTypedRuleContext(plsqlParser.Multi_column_for_loopContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_expression_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_expression_element" ):
                return visitor.visitModel_expression_element(self)
            else:
                return visitor.visitChildren(self)




    def model_expression_element(self):

        localctx = plsqlParser.Model_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_model_expression_element)
        self._la = 0 # Token type
        try:
            self.state = 6751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,974,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6730
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,970,self._ctx)
                if la_ == 1:
                    self.state = 6728
                    self.match(plsqlParser.ANY)
                    pass

                elif la_ == 2:
                    self.state = 6729
                    self.expression(0)
                    pass


                self.state = 6739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 6732
                    self.match(plsqlParser.COMMA)
                    self.state = 6735
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,971,self._ctx)
                    if la_ == 1:
                        self.state = 6733
                        self.match(plsqlParser.ANY)
                        pass

                    elif la_ == 2:
                        self.state = 6734
                        self.expression(0)
                        pass


                    self.state = 6741
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6742
                self.single_column_for_loop()
                self.state = 6747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 6743
                    self.match(plsqlParser.COMMA)
                    self.state = 6744
                    self.single_column_for_loop()
                    self.state = 6749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6750
                self.multi_column_for_loop()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_column_for_loopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ex1 = None # ExpressionContext
            self.ex2 = None # ExpressionContext
            self.ex3 = None # ExpressionContext

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def for_increment_decrement_type(self):
            return self.getTypedRuleContext(plsqlParser.For_increment_decrement_typeContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def for_like_part(self):
            return self.getTypedRuleContext(plsqlParser.For_like_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_single_column_for_loop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_column_for_loop" ):
                return visitor.visitSingle_column_for_loop(self)
            else:
                return visitor.visitChildren(self)




    def single_column_for_loop(self):

        localctx = plsqlParser.Single_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_single_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6753
            self.match(plsqlParser.FOR)
            self.state = 6754
            self.column_name()
            self.state = 6767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.IN]:
                self.state = 6755
                self.match(plsqlParser.IN)
                self.state = 6756
                self.expression_list()
                pass
            elif token in [plsqlParser.FROM, plsqlParser.LIKE]:
                self.state = 6758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LIKE:
                    self.state = 6757
                    self.for_like_part()


                self.state = 6760
                self.match(plsqlParser.FROM)
                self.state = 6761
                localctx.ex1 = self.expression(0)
                self.state = 6762
                self.match(plsqlParser.TO)
                self.state = 6763
                localctx.ex2 = self.expression(0)
                self.state = 6764
                self.for_increment_decrement_type()
                self.state = 6765
                localctx.ex3 = self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_like_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(plsqlParser.LIKE, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_for_like_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_like_part" ):
                return visitor.visitFor_like_part(self)
            else:
                return visitor.visitChildren(self)




    def for_like_part(self):

        localctx = plsqlParser.For_like_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_for_like_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6769
            self.match(plsqlParser.LIKE)
            self.state = 6770
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_increment_decrement_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(plsqlParser.INCREMENT, 0)

        def DECREMENT(self):
            return self.getToken(plsqlParser.DECREMENT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_for_increment_decrement_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_increment_decrement_type" ):
                return visitor.visitFor_increment_decrement_type(self)
            else:
                return visitor.visitChildren(self)




    def for_increment_decrement_type(self):

        localctx = plsqlParser.For_increment_decrement_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_for_increment_decrement_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6772
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DECREMENT or _la==plsqlParser.INCREMENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_column_for_loopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Expression_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_multi_column_for_loop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_column_for_loop" ):
                return visitor.visitMulti_column_for_loop(self)
            else:
                return visitor.visitChildren(self)




    def multi_column_for_loop(self):

        localctx = plsqlParser.Multi_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_multi_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6774
            self.match(plsqlParser.FOR)
            self.state = 6775
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6776
            self.column_name()
            self.state = 6781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6777
                self.match(plsqlParser.COMMA)
                self.state = 6778
                self.column_name()
                self.state = 6783
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6784
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 6785
            self.match(plsqlParser.IN)
            self.state = 6786
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,979,self._ctx)
            if la_ == 1:
                self.state = 6787
                self.subquery(0)
                pass

            elif la_ == 2:
                self.state = 6788
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6789
                self.expression_list()
                self.state = 6794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 6790
                    self.match(plsqlParser.COMMA)
                    self.state = 6791
                    self.expression_list()
                    self.state = 6796
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6797
                self.match(plsqlParser.RIGHT_PAREN)
                pass


            self.state = 6801
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_unary_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IgnoreUnaryExprContext(Unary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Unary_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def case_statement(self):
            return self.getTypedRuleContext(plsqlParser.Case_statementContext,0)

        def quantified_expression(self):
            return self.getTypedRuleContext(plsqlParser.Quantified_expressionContext,0)

        def standard_function(self):
            return self.getTypedRuleContext(plsqlParser.Standard_functionContext,0)

        def atom(self):
            return self.getTypedRuleContext(plsqlParser.AtomContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreUnaryExpr" ):
                return visitor.visitIgnoreUnaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class UnaryExprContext(Unary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Unary_expressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def unary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Unary_expressionContext,0)

        def MINUS_SIGN(self):
            return self.getToken(plsqlParser.MINUS_SIGN, 0)
        def PLUS_SIGN(self):
            return self.getToken(plsqlParser.PLUS_SIGN, 0)
        def PRIOR(self):
            return self.getToken(plsqlParser.PRIOR, 0)
        def CONNECT_BY_ROOT(self):
            return self.getToken(plsqlParser.CONNECT_BY_ROOT, 0)
        def NEW(self):
            return self.getToken(plsqlParser.NEW, 0)
        def DISTINCT(self):
            return self.getToken(plsqlParser.DISTINCT, 0)
        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)
        def model_expression_element(self):
            return self.getTypedRuleContext(plsqlParser.Model_expression_elementContext,0)

        def RIGHT_BRACKET(self):
            return self.getToken(plsqlParser.RIGHT_BRACKET, 0)
        def LEFT_BRACKET(self):
            return self.getToken(plsqlParser.LEFT_BRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpr" ):
                return visitor.visitUnaryExpr(self)
            else:
                return visitor.visitChildren(self)



    def unary_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.Unary_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 848
        self.enterRecursionRule(localctx, 848, self.RULE_unary_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,980,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 6804
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.PLUS_SIGN or _la==plsqlParser.MINUS_SIGN):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6805
                self.unary_expression(10)
                pass

            elif la_ == 2:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6806
                localctx.op = self.match(plsqlParser.PRIOR)
                self.state = 6807
                self.unary_expression(9)
                pass

            elif la_ == 3:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6808
                localctx.op = self.match(plsqlParser.CONNECT_BY_ROOT)
                self.state = 6809
                self.unary_expression(8)
                pass

            elif la_ == 4:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6810
                localctx.op = self.match(plsqlParser.NEW)
                self.state = 6811
                self.unary_expression(7)
                pass

            elif la_ == 5:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6812
                localctx.op = self.match(plsqlParser.DISTINCT)
                self.state = 6813
                self.unary_expression(6)
                pass

            elif la_ == 6:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6814
                localctx.op = self.match(plsqlParser.ALL)
                self.state = 6815
                self.unary_expression(5)
                pass

            elif la_ == 7:
                localctx = plsqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6816
                self.case_statement()
                pass

            elif la_ == 8:
                localctx = plsqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6817
                self.quantified_expression()
                pass

            elif la_ == 9:
                localctx = plsqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6818
                self.standard_function(0)
                pass

            elif la_ == 10:
                localctx = plsqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6819
                self.atom()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 6829
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,981,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = plsqlParser.UnaryExprContext(self, plsqlParser.Unary_expressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_unary_expression)
                    self.state = 6822
                    if not self.precpred(self._ctx, 11):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                    self.state = 6823
                    localctx.op = self.match(plsqlParser.LEFT_BRACKET)
                    self.state = 6824
                    self.model_expression_element()
                    self.state = 6825
                    self.match(plsqlParser.RIGHT_BRACKET) 
                self.state = 6831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,981,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def searched_case_statement(self):
            return self.getTypedRuleContext(plsqlParser.Searched_case_statementContext,0)


        def simple_case_statement(self):
            return self.getTypedRuleContext(plsqlParser.Simple_case_statementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_case_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_statement" ):
                return visitor.visitCase_statement(self)
            else:
                return visitor.visitChildren(self)




    def case_statement(self):

        localctx = plsqlParser.Case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_case_statement)
        try:
            self.state = 6834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,982,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6832
                self.searched_case_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6833
                self.simple_case_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def atom(self):
            return self.getTypedRuleContext(plsqlParser.AtomContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CASE)
            else:
                return self.getToken(plsqlParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Label_nameContext,i)


        def simple_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Simple_case_when_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Simple_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(plsqlParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_simple_case_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_case_statement" ):
                return visitor.visitSimple_case_statement(self)
            else:
                return visitor.visitChildren(self)




    def simple_case_statement(self):

        localctx = plsqlParser.Simple_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_simple_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 6836
                self.label_name()


            self.state = 6839
            localctx.ck1 = self.match(plsqlParser.CASE)
            self.state = 6840
            self.atom()
            self.state = 6842 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6841
                self.simple_case_when_part()
                self.state = 6844 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.WHEN):
                    break

            self.state = 6847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELSE:
                self.state = 6846
                self.case_else_part()


            self.state = 6849
            self.match(plsqlParser.END)
            self.state = 6851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,986,self._ctx)
            if la_ == 1:
                self.state = 6850
                self.match(plsqlParser.CASE)


            self.state = 6854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,987,self._ctx)
            if la_ == 1:
                self.state = 6853
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_case_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # ExpressionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_simple_case_when_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_case_when_part" ):
                return visitor.visitSimple_case_when_part(self)
            else:
                return visitor.visitChildren(self)




    def simple_case_when_part(self):

        localctx = plsqlParser.Simple_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_simple_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6856
            self.match(plsqlParser.WHEN)
            self.state = 6857
            localctx.whenExpr = self.expression(0)
            self.state = 6858
            self.match(plsqlParser.THEN)
            self.state = 6861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,988,self._ctx)
            if la_ == 1:
                self.state = 6859
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 6860
                localctx.thenExpr = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Searched_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CASE)
            else:
                return self.getToken(plsqlParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Label_nameContext,i)


        def searched_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Searched_case_when_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Searched_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(plsqlParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_searched_case_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearched_case_statement" ):
                return visitor.visitSearched_case_statement(self)
            else:
                return visitor.visitChildren(self)




    def searched_case_statement(self):

        localctx = plsqlParser.Searched_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_searched_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 6863
                self.label_name()


            self.state = 6866
            localctx.ck1 = self.match(plsqlParser.CASE)
            self.state = 6868 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6867
                self.searched_case_when_part()
                self.state = 6870 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.WHEN):
                    break

            self.state = 6873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELSE:
                self.state = 6872
                self.case_else_part()


            self.state = 6875
            self.match(plsqlParser.END)
            self.state = 6877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,992,self._ctx)
            if la_ == 1:
                self.state = 6876
                self.match(plsqlParser.CASE)


            self.state = 6880
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,993,self._ctx)
            if la_ == 1:
                self.state = 6879
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Searched_case_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # ExpressionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_searched_case_when_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearched_case_when_part" ):
                return visitor.visitSearched_case_when_part(self)
            else:
                return visitor.visitChildren(self)




    def searched_case_when_part(self):

        localctx = plsqlParser.Searched_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_searched_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6882
            self.match(plsqlParser.WHEN)
            self.state = 6883
            localctx.whenExpr = self.expression(0)
            self.state = 6884
            self.match(plsqlParser.THEN)
            self.state = 6887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,994,self._ctx)
            if la_ == 1:
                self.state = 6885
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 6886
                localctx.thenExpr = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(plsqlParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_case_else_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_else_part" ):
                return visitor.visitCase_else_part(self)
            else:
                return visitor.visitChildren(self)




    def case_else_part(self):

        localctx = plsqlParser.Case_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_case_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6889
            self.match(plsqlParser.ELSE)
            self.state = 6892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,995,self._ctx)
            if la_ == 1:
                self.state = 6890
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 6891
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_element(self):
            return self.getTypedRuleContext(plsqlParser.Table_elementContext,0)


        def outer_join_sign(self):
            return self.getTypedRuleContext(plsqlParser.Outer_join_signContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def constant(self):
            return self.getTypedRuleContext(plsqlParser.ConstantContext,0)


        def literal(self):
            return self.getTypedRuleContext(plsqlParser.LiteralContext,0)


        def general_element(self):
            return self.getTypedRuleContext(plsqlParser.General_elementContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def atom(self):
            return self.getTypedRuleContext(plsqlParser.AtomContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = plsqlParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_atom)
        try:
            self.state = 6912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,997,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6894
                self.table_element()
                self.state = 6895
                self.outer_join_sign()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6897
                self.bind_variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6898
                self.constant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6899
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6900
                self.general_element()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6901
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6902
                self.atom()
                self.state = 6903
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6910
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,996,self._ctx)
                if la_ == 1:
                    self.state = 6905
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 6906
                    self.subquery(0)
                    self.state = 6907
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 6909
                    self.expression_list()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_or_vectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def vector_expr(self):
            return self.getTypedRuleContext(plsqlParser.Vector_exprContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_expression_or_vector

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_or_vector" ):
                return visitor.visitExpression_or_vector(self)
            else:
                return visitor.visitChildren(self)




    def expression_or_vector(self):

        localctx = plsqlParser.Expression_or_vectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_expression_or_vector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6914
            self.expression(0)
            self.state = 6916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMMA:
                self.state = 6915
                self.vector_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_vector_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVector_expr" ):
                return visitor.visitVector_expr(self)
            else:
                return visitor.visitChildren(self)




    def vector_expr(self):

        localctx = plsqlParser.Vector_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_vector_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6918
            self.match(plsqlParser.COMMA)
            self.state = 6919
            self.expression(0)
            self.state = 6924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6920
                self.match(plsqlParser.COMMA)
                self.state = 6921
                self.expression(0)
                self.state = 6926
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Quantified_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOME(self):
            return self.getToken(plsqlParser.SOME, 0)

        def EXISTS(self):
            return self.getToken(plsqlParser.EXISTS, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def ANY(self):
            return self.getToken(plsqlParser.ANY, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_quantified_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantified_expression" ):
                return visitor.visitQuantified_expression(self)
            else:
                return visitor.visitChildren(self)




    def quantified_expression(self):

        localctx = plsqlParser.Quantified_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_quantified_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6927
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ALL or _la==plsqlParser.ANY or _la==plsqlParser.EXISTS or _la==plsqlParser.SOME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1000,self._ctx)
            if la_ == 1:
                self.state = 6928
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6929
                self.subquery(0)
                self.state = 6930
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 6932
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6933
                self.expression(0)
                self.state = 6934
                self.match(plsqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Standard_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_standard_function

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class AggregateCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(plsqlParser.Aggregate_windowed_functionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateCall" ):
                return visitor.visitAggregateCall(self)
            else:
                return visitor.visitChildren(self)


    class TodoCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)

        def function_argument_modeling(self):
            return self.getTypedRuleContext(plsqlParser.Function_argument_modelingContext,0)

        def using_clause(self):
            return self.getTypedRuleContext(plsqlParser.Using_clauseContext,0)

        def CHR(self):
            return self.getToken(plsqlParser.CHR, 0)
        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)
        def NCHAR_CS(self):
            return self.getToken(plsqlParser.NCHAR_CS, 0)
        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)
        def COLLECT(self):
            return self.getToken(plsqlParser.COLLECT, 0)
        def collect_order_by_part(self):
            return self.getTypedRuleContext(plsqlParser.Collect_order_by_partContext,0)

        def DISTINCT(self):
            return self.getToken(plsqlParser.DISTINCT, 0)
        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)
        def DECOMPOSE(self):
            return self.getToken(plsqlParser.DECOMPOSE, 0)
        def CANONICAL(self):
            return self.getToken(plsqlParser.CANONICAL, 0)
        def COMPATIBILITY(self):
            return self.getToken(plsqlParser.COMPATIBILITY, 0)
        def function_argument_analytic(self):
            return self.getTypedRuleContext(plsqlParser.Function_argument_analyticContext,0)

        def over_clause(self):
            return self.getTypedRuleContext(plsqlParser.Over_clauseContext,0)

        def FIRST_VALUE(self):
            return self.getToken(plsqlParser.FIRST_VALUE, 0)
        def LAST_VALUE(self):
            return self.getToken(plsqlParser.LAST_VALUE, 0)
        def respect_or_ignore_nulls(self):
            return self.getTypedRuleContext(plsqlParser.Respect_or_ignore_nullsContext,0)

        def standard_prediction_function_keyword(self):
            return self.getTypedRuleContext(plsqlParser.Standard_prediction_function_keywordContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)
        def cost_matrix_clause(self):
            return self.getTypedRuleContext(plsqlParser.Cost_matrix_clauseContext,0)

        def POSITION(self):
            return self.getToken(plsqlParser.POSITION, 0)
        def IN(self):
            return self.getToken(plsqlParser.IN, 0)
        def TRANSLATE(self):
            return self.getToken(plsqlParser.TRANSLATE, 0)
        def CHAR_CS(self):
            return self.getToken(plsqlParser.CHAR_CS, 0)
        def TREAT(self):
            return self.getToken(plsqlParser.TREAT, 0)
        def AS(self):
            return self.getToken(plsqlParser.AS, 0)
        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)

        def REF(self):
            return self.getToken(plsqlParser.REF, 0)
        def TRIM(self):
            return self.getToken(plsqlParser.TRIM, 0)
        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)
        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)

        def LEADING(self):
            return self.getToken(plsqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(plsqlParser.TRAILING, 0)
        def BOTH(self):
            return self.getToken(plsqlParser.BOTH, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTodoCall" ):
                return visitor.visitTodoCall(self)
            else:
                return visitor.visitChildren(self)


    class XmlCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def XMLAGG(self):
            return self.getToken(plsqlParser.XMLAGG, 0)
        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)
        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)

        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)
        def general_element(self):
            return self.getTypedRuleContext(plsqlParser.General_elementContext,0)

        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Xml_multiuse_expression_elementContext,i)

        def XMLCOLATTVAL(self):
            return self.getToken(plsqlParser.XMLCOLATTVAL, 0)
        def XMLFOREST(self):
            return self.getToken(plsqlParser.XMLFOREST, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)
        def XMLELEMENT(self):
            return self.getToken(plsqlParser.XMLELEMENT, 0)
        def xml_attributes_clause(self):
            return self.getTypedRuleContext(plsqlParser.Xml_attributes_clauseContext,0)

        def ENTITYESCAPING(self):
            return self.getToken(plsqlParser.ENTITYESCAPING, 0)
        def NOENTITYESCAPING(self):
            return self.getToken(plsqlParser.NOENTITYESCAPING, 0)
        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)
        def EVALNAME(self):
            return self.getToken(plsqlParser.EVALNAME, 0)
        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_aliasContext,i)

        def XMLEXISTS(self):
            return self.getToken(plsqlParser.XMLEXISTS, 0)
        def xml_passing_clause(self):
            return self.getTypedRuleContext(plsqlParser.Xml_passing_clauseContext,0)

        def XMLPARSE(self):
            return self.getToken(plsqlParser.XMLPARSE, 0)
        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConcatenationContext,i)

        def DOCUMENT(self):
            return self.getToken(plsqlParser.DOCUMENT, 0)
        def CONTENT(self):
            return self.getToken(plsqlParser.CONTENT, 0)
        def WELLFORMED(self):
            return self.getToken(plsqlParser.WELLFORMED, 0)
        def XMLPI(self):
            return self.getToken(plsqlParser.XMLPI, 0)
        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)

        def XMLQUERY(self):
            return self.getToken(plsqlParser.XMLQUERY, 0)
        def RETURNING(self):
            return self.getToken(plsqlParser.RETURNING, 0)
        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)
        def ON(self):
            return self.getToken(plsqlParser.ON, 0)
        def EMPTY(self):
            return self.getToken(plsqlParser.EMPTY, 0)
        def XMLROOT(self):
            return self.getToken(plsqlParser.XMLROOT, 0)
        def xmlroot_param_version_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlroot_param_version_partContext,0)

        def xmlroot_param_standalone_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlroot_param_standalone_partContext,0)

        def XMLSERIALIZE(self):
            return self.getToken(plsqlParser.XMLSERIALIZE, 0)
        def AS(self):
            return self.getToken(plsqlParser.AS, 0)
        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)

        def xmlserialize_param_enconding_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlserialize_param_enconding_partContext,0)

        def xmlserialize_param_version_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlserialize_param_version_partContext,0)

        def xmlserialize_param_ident_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlserialize_param_ident_partContext,0)

        def DEFAULTS(self):
            return self.getToken(plsqlParser.DEFAULTS, 0)
        def HIDE(self):
            return self.getToken(plsqlParser.HIDE, 0)
        def SHOW(self):
            return self.getToken(plsqlParser.SHOW, 0)
        def XMLTABLE(self):
            return self.getToken(plsqlParser.XMLTABLE, 0)
        def xml_namespaces_clause(self):
            return self.getTypedRuleContext(plsqlParser.Xml_namespaces_clauseContext,0)

        def COLUMNS(self):
            return self.getToken(plsqlParser.COLUMNS, 0)
        def xml_table_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Xml_table_columnContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Xml_table_columnContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlCall" ):
                return visitor.visitXmlCall(self)
            else:
                return visitor.visitChildren(self)


    class CastCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)
        def AS(self):
            return self.getToken(plsqlParser.AS, 0)
        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)
        def CAST(self):
            return self.getToken(plsqlParser.CAST, 0)
        def XMLCAST(self):
            return self.getToken(plsqlParser.XMLCAST, 0)
        def MULTISET(self):
            return self.getToken(plsqlParser.MULTISET, 0)
        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def atom(self):
            return self.getTypedRuleContext(plsqlParser.AtomContext,0)

        def standard_function(self):
            return self.getTypedRuleContext(plsqlParser.Standard_functionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastCall" ):
                return visitor.visitCastCall(self)
            else:
                return visitor.visitChildren(self)


    class ExtractCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)
        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)
        def EXTRACT(self):
            return self.getToken(plsqlParser.EXTRACT, 0)
        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtractCall" ):
                return visitor.visitExtractCall(self)
            else:
                return visitor.visitChildren(self)


    class WithinOrOverCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.name = None # Within_or_over_clause_keywordContext
            self.copyFrom(ctx)

        def function_argument(self):
            return self.getTypedRuleContext(plsqlParser.Function_argumentContext,0)

        def within_or_over_clause_keyword(self):
            return self.getTypedRuleContext(plsqlParser.Within_or_over_clause_keywordContext,0)

        def within_or_over_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Within_or_over_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Within_or_over_partContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithinOrOverCall" ):
                return visitor.visitWithinOrOverCall(self)
            else:
                return visitor.visitChildren(self)



    def standard_function(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.Standard_functionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 870
        self.enterRecursionRule(localctx, 870, self.RULE_standard_function, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1051,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.AggregateCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 6939
                self.aggregate_windowed_function()
                pass

            elif la_ == 2:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6940
                self.regular_id()
                self.state = 6941
                self.function_argument_modeling()
                self.state = 6943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1001,self._ctx)
                if la_ == 1:
                    self.state = 6942
                    self.using_clause()


                pass

            elif la_ == 3:
                localctx = plsqlParser.CastCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6945
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CAST or _la==plsqlParser.XMLCAST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6946
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6954
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1002,self._ctx)
                if la_ == 1:
                    self.state = 6947
                    self.match(plsqlParser.MULTISET)
                    self.state = 6948
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 6949
                    self.subquery(0)
                    self.state = 6950
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 6952
                    self.concatenation()
                    pass

                elif la_ == 3:
                    self.state = 6953
                    self.expression(0)
                    pass


                self.state = 6956
                self.match(plsqlParser.AS)
                self.state = 6957
                self.type_spec()
                self.state = 6958
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                localctx = plsqlParser.CastCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6962
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1003,self._ctx)
                if la_ == 1:
                    self.state = 6960
                    self.subquery(0)
                    pass

                elif la_ == 2:
                    self.state = 6961
                    self.atom()
                    pass


                self.state = 6964
                self.match(plsqlParser.T__2)
                self.state = 6965
                self.type_spec()
                pass

            elif la_ == 5:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6967
                self.match(plsqlParser.CHR)
                self.state = 6968
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6969
                self.concatenation()
                self.state = 6970
                self.match(plsqlParser.USING)
                self.state = 6971
                self.match(plsqlParser.NCHAR_CS)
                self.state = 6972
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6974
                self.match(plsqlParser.COLLECT)
                self.state = 6975
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6977
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1004,self._ctx)
                if la_ == 1:
                    self.state = 6976
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.DISTINCT or _la==plsqlParser.UNIQUE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 6979
                self.concatenation()
                self.state = 6981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ORDER:
                    self.state = 6980
                    self.collect_order_by_part()


                self.state = 6983
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                localctx = plsqlParser.WithinOrOverCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6985
                localctx.name = self.within_or_over_clause_keyword()
                self.state = 6986
                self.function_argument()
                self.state = 6988 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 6987
                        self.within_or_over_part()

                    else:
                        raise NoViableAltException(self)
                    self.state = 6990 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1006,self._ctx)

                pass

            elif la_ == 8:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6992
                self.match(plsqlParser.DECOMPOSE)
                self.state = 6993
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6994
                self.concatenation()
                self.state = 6996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CANONICAL or _la==plsqlParser.COMPATIBILITY:
                    self.state = 6995
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.CANONICAL or _la==plsqlParser.COMPATIBILITY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 6998
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 9:
                localctx = plsqlParser.ExtractCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7000
                localctx.name = self.match(plsqlParser.EXTRACT)
                self.state = 7001
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7004
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1008,self._ctx)
                if la_ == 1:
                    self.state = 7002
                    self.regular_id()
                    pass

                elif la_ == 2:
                    self.state = 7003
                    self.expression(0)
                    pass


                self.state = 7006
                self.match(plsqlParser.FROM)
                self.state = 7007
                self.concatenation()
                self.state = 7008
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 10:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7010
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FIRST_VALUE or _la==plsqlParser.LAST_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7011
                self.function_argument_analytic()
                self.state = 7013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IGNORE or _la==plsqlParser.RESPECT:
                    self.state = 7012
                    self.respect_or_ignore_nulls()


                self.state = 7015
                self.over_clause()
                pass

            elif la_ == 11:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7017
                self.standard_prediction_function_keyword()
                self.state = 7018
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7019
                self.expression(0)
                self.state = 7024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7020
                    self.match(plsqlParser.COMMA)
                    self.state = 7021
                    self.expression(0)
                    self.state = 7026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COST:
                    self.state = 7027
                    self.cost_matrix_clause()


                self.state = 7031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.USING:
                    self.state = 7030
                    self.using_clause()


                self.state = 7033
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 12:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7035
                self.match(plsqlParser.POSITION)
                self.state = 7036
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7037
                self.expression(0)
                self.state = 7038
                self.match(plsqlParser.IN)
                self.state = 7039
                self.expression(0)
                self.state = 7040
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 13:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7042
                self.match(plsqlParser.TRANSLATE)
                self.state = 7043
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7044
                self.expression(0)
                self.state = 7047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.USING:
                    self.state = 7045
                    self.match(plsqlParser.USING)
                    self.state = 7046
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.CHAR_CS or _la==plsqlParser.NCHAR_CS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7049
                    self.match(plsqlParser.COMMA)
                    self.state = 7050
                    self.expression(0)
                    self.state = 7055
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7056
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 14:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7058
                self.match(plsqlParser.TREAT)
                self.state = 7059
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7060
                self.expression(0)
                self.state = 7061
                self.match(plsqlParser.AS)
                self.state = 7063
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1015,self._ctx)
                if la_ == 1:
                    self.state = 7062
                    self.match(plsqlParser.REF)


                self.state = 7065
                self.type_spec()
                self.state = 7066
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 15:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7068
                self.match(plsqlParser.TRIM)
                self.state = 7069
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7077
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1018,self._ctx)
                if la_ == 1:
                    self.state = 7071
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.BOTH or _la==plsqlParser.LEADING or _la==plsqlParser.TRAILING:
                        self.state = 7070
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.BOTH or _la==plsqlParser.LEADING or _la==plsqlParser.TRAILING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 7074
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.NATIONAL_CHAR_STRING_LIT or _la==plsqlParser.CHAR_STRING:
                        self.state = 7073
                        self.quoted_string()


                    self.state = 7076
                    self.match(plsqlParser.FROM)


                self.state = 7079
                self.concatenation()
                self.state = 7080
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 16:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7082
                self.match(plsqlParser.XMLAGG)
                self.state = 7083
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7084
                self.expression(0)
                self.state = 7086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ORDER:
                    self.state = 7085
                    self.order_by_clause()


                self.state = 7088
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7091
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1020,self._ctx)
                if la_ == 1:
                    self.state = 7089
                    self.match(plsqlParser.PERIOD)
                    self.state = 7090
                    self.general_element()


                pass

            elif la_ == 17:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7093
                _la = self._input.LA(1)
                if not(_la==plsqlParser.XMLCOLATTVAL or _la==plsqlParser.XMLFOREST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7094
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7095
                self.xml_multiuse_expression_element()
                self.state = 7100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7096
                    self.match(plsqlParser.COMMA)
                    self.state = 7097
                    self.xml_multiuse_expression_element()
                    self.state = 7102
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7103
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7106
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1022,self._ctx)
                if la_ == 1:
                    self.state = 7104
                    self.match(plsqlParser.PERIOD)
                    self.state = 7105
                    self.general_element()


                pass

            elif la_ == 18:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7108
                self.match(plsqlParser.XMLELEMENT)
                self.state = 7109
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7111
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1023,self._ctx)
                if la_ == 1:
                    self.state = 7110
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.ENTITYESCAPING or _la==plsqlParser.NOENTITYESCAPING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7114
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1024,self._ctx)
                if la_ == 1:
                    self.state = 7113
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.EVALNAME or _la==plsqlParser.NAME):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7116
                self.expression(0)
                self.state = 7119
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1025,self._ctx)
                if la_ == 1:
                    self.state = 7117
                    self.match(plsqlParser.COMMA)
                    self.state = 7118
                    self.xml_attributes_clause()


                self.state = 7128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7121
                    self.match(plsqlParser.COMMA)
                    self.state = 7122
                    self.expression(0)
                    self.state = 7124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                        self.state = 7123
                        self.column_alias()


                    self.state = 7130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7131
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7134
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1028,self._ctx)
                if la_ == 1:
                    self.state = 7132
                    self.match(plsqlParser.PERIOD)
                    self.state = 7133
                    self.general_element()


                pass

            elif la_ == 19:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7136
                self.match(plsqlParser.XMLEXISTS)
                self.state = 7137
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7138
                self.expression(0)
                self.state = 7140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PASSING:
                    self.state = 7139
                    self.xml_passing_clause()


                self.state = 7142
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 20:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7144
                self.match(plsqlParser.XMLPARSE)
                self.state = 7145
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7146
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CONTENT or _la==plsqlParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7147
                self.concatenation()
                self.state = 7149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WELLFORMED:
                    self.state = 7148
                    self.match(plsqlParser.WELLFORMED)


                self.state = 7151
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7154
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1031,self._ctx)
                if la_ == 1:
                    self.state = 7152
                    self.match(plsqlParser.PERIOD)
                    self.state = 7153
                    self.general_element()


                pass

            elif la_ == 21:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7156
                self.match(plsqlParser.XMLPI)
                self.state = 7157
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7162
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.NAME]:
                    self.state = 7158
                    self.match(plsqlParser.NAME)
                    self.state = 7159
                    self.r_id()
                    pass
                elif token in [plsqlParser.EVALNAME]:
                    self.state = 7160
                    self.match(plsqlParser.EVALNAME)
                    self.state = 7161
                    self.concatenation()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 7164
                    self.match(plsqlParser.COMMA)
                    self.state = 7165
                    self.concatenation()


                self.state = 7168
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7171
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1034,self._ctx)
                if la_ == 1:
                    self.state = 7169
                    self.match(plsqlParser.PERIOD)
                    self.state = 7170
                    self.general_element()


                pass

            elif la_ == 22:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7173
                self.match(plsqlParser.XMLQUERY)
                self.state = 7174
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7175
                self.concatenation()
                self.state = 7177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PASSING:
                    self.state = 7176
                    self.xml_passing_clause()


                self.state = 7179
                self.match(plsqlParser.RETURNING)
                self.state = 7180
                self.match(plsqlParser.CONTENT)
                self.state = 7184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NULL:
                    self.state = 7181
                    self.match(plsqlParser.NULL)
                    self.state = 7182
                    self.match(plsqlParser.ON)
                    self.state = 7183
                    self.match(plsqlParser.EMPTY)


                self.state = 7186
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7189
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1037,self._ctx)
                if la_ == 1:
                    self.state = 7187
                    self.match(plsqlParser.PERIOD)
                    self.state = 7188
                    self.general_element()


                pass

            elif la_ == 23:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7191
                self.match(plsqlParser.XMLROOT)
                self.state = 7192
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7193
                self.concatenation()
                self.state = 7196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1038,self._ctx)
                if la_ == 1:
                    self.state = 7194
                    self.match(plsqlParser.COMMA)
                    self.state = 7195
                    self.xmlroot_param_version_part()


                self.state = 7200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 7198
                    self.match(plsqlParser.COMMA)
                    self.state = 7199
                    self.xmlroot_param_standalone_part()


                self.state = 7202
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1040,self._ctx)
                if la_ == 1:
                    self.state = 7203
                    self.match(plsqlParser.PERIOD)
                    self.state = 7204
                    self.general_element()


                pass

            elif la_ == 24:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7207
                self.match(plsqlParser.XMLSERIALIZE)
                self.state = 7208
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7209
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CONTENT or _la==plsqlParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7210
                self.concatenation()
                self.state = 7213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.AS:
                    self.state = 7211
                    self.match(plsqlParser.AS)
                    self.state = 7212
                    self.type_spec()


                self.state = 7216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ENCODING:
                    self.state = 7215
                    self.xmlserialize_param_enconding_part()


                self.state = 7219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.VERSION:
                    self.state = 7218
                    self.xmlserialize_param_version_part()


                self.state = 7222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.INDENT or _la==plsqlParser.NO:
                    self.state = 7221
                    self.xmlserialize_param_ident_part()


                self.state = 7226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.HIDE or _la==plsqlParser.SHOW:
                    self.state = 7224
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.HIDE or _la==plsqlParser.SHOW):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 7225
                    self.match(plsqlParser.DEFAULTS)


                self.state = 7228
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7231
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1046,self._ctx)
                if la_ == 1:
                    self.state = 7229
                    self.match(plsqlParser.PERIOD)
                    self.state = 7230
                    self.general_element()


                pass

            elif la_ == 25:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7233
                self.match(plsqlParser.XMLTABLE)
                self.state = 7234
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7236
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1047,self._ctx)
                if la_ == 1:
                    self.state = 7235
                    self.xml_namespaces_clause()


                self.state = 7238
                self.concatenation()
                self.state = 7240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PASSING:
                    self.state = 7239
                    self.xml_passing_clause()


                self.state = 7247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COLUMNS:
                    self.state = 7242
                    self.match(plsqlParser.COLUMNS)
                    self.state = 7243
                    self.xml_table_column()

                    self.state = 7244
                    self.match(plsqlParser.COMMA)
                    self.state = 7245
                    self.xml_table_column()


                self.state = 7249
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7252
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1050,self._ctx)
                if la_ == 1:
                    self.state = 7250
                    self.match(plsqlParser.PERIOD)
                    self.state = 7251
                    self.general_element()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 7261
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1052,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = plsqlParser.CastCallContext(self, plsqlParser.Standard_functionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_standard_function)
                    self.state = 7256
                    if not self.precpred(self._ctx, 22):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                    self.state = 7257
                    self.match(plsqlParser.T__2)
                    self.state = 7258
                    self.type_spec() 
                self.state = 7263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1052,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Aggregate_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None # StarContext
            self.pref = None # Token

        def over_clause_keyword(self):
            return self.getTypedRuleContext(plsqlParser.Over_clause_keywordContext,0)


        def function_argument_analytic(self):
            return self.getTypedRuleContext(plsqlParser.Function_argument_analyticContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(plsqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(plsqlParser.COUNT, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def star(self):
            return self.getTypedRuleContext(plsqlParser.StarContext,0)


        def DISTINCT(self):
            return self.getToken(plsqlParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_aggregate_windowed_function

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_windowed_function" ):
                return visitor.visitAggregate_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_windowed_function(self):

        localctx = plsqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 7282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7264
                self.over_clause_keyword()
                self.state = 7265
                self.function_argument_analytic()
                self.state = 7267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1053,self._ctx)
                if la_ == 1:
                    self.state = 7266
                    self.over_clause()


                pass
            elif token in [plsqlParser.COUNT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7269
                self.match(plsqlParser.COUNT)
                self.state = 7270
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7276
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.ASTERISK]:
                    self.state = 7271
                    localctx.args = self.star()
                    pass
                elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALL, plsqlParser.ANALYZE, plsqlParser.ANY, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONNECT_BY_ROOT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DISTINCT, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXISTS, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FALSE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITION, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIOR, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUE, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNIQUE, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.PLUS_SIGN, plsqlParser.MINUS_SIGN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                    self.state = 7273
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1054,self._ctx)
                    if la_ == 1:
                        self.state = 7272
                        localctx.pref = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.ALL or _la==plsqlParser.DISTINCT or _la==plsqlParser.UNIQUE):
                            localctx.pref = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 7275
                    self.concatenation()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7278
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7280
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1056,self._ctx)
                if la_ == 1:
                    self.state = 7279
                    self.over_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clause_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(plsqlParser.AVG, 0)

        def CORR(self):
            return self.getToken(plsqlParser.CORR, 0)

        def LAG(self):
            return self.getToken(plsqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(plsqlParser.LEAD, 0)

        def MAX(self):
            return self.getToken(plsqlParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(plsqlParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(plsqlParser.MIN, 0)

        def NTILE(self):
            return self.getToken(plsqlParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(plsqlParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(plsqlParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(plsqlParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(plsqlParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(plsqlParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(plsqlParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(plsqlParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(plsqlParser.COVAR_, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_over_clause_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause_keyword" ):
                return visitor.visitOver_clause_keyword(self)
            else:
                return visitor.visitChildren(self)




    def over_clause_keyword(self):

        localctx = plsqlParser.Over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7284
            _la = self._input.LA(1)
            if not(((((_la - 597)) & ~0x3f) == 0 and ((1 << (_la - 597)) & ((1 << (plsqlParser.AVG - 597)) | (1 << (plsqlParser.CORR - 597)) | (1 << (plsqlParser.LAG - 597)) | (1 << (plsqlParser.LEAD - 597)) | (1 << (plsqlParser.MAX - 597)) | (1 << (plsqlParser.MEDIAN - 597)) | (1 << (plsqlParser.MIN - 597)) | (1 << (plsqlParser.NTILE - 597)) | (1 << (plsqlParser.RATIO_TO_REPORT - 597)) | (1 << (plsqlParser.ROW_NUMBER - 597)) | (1 << (plsqlParser.SUM - 597)) | (1 << (plsqlParser.VARIANCE - 597)) | (1 << (plsqlParser.REGR_ - 597)) | (1 << (plsqlParser.STDDEV - 597)) | (1 << (plsqlParser.VAR_ - 597)) | (1 << (plsqlParser.COVAR_ - 597)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Within_or_over_clause_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUME_DIST(self):
            return self.getToken(plsqlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(plsqlParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(plsqlParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(plsqlParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(plsqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(plsqlParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(plsqlParser.RANK, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_within_or_over_clause_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithin_or_over_clause_keyword" ):
                return visitor.visitWithin_or_over_clause_keyword(self)
            else:
                return visitor.visitChildren(self)




    def within_or_over_clause_keyword(self):

        localctx = plsqlParser.Within_or_over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_within_or_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7286
            _la = self._input.LA(1)
            if not(((((_la - 590)) & ~0x3f) == 0 and ((1 << (_la - 590)) & ((1 << (plsqlParser.CUME_DIST - 590)) | (1 << (plsqlParser.DENSE_RANK - 590)) | (1 << (plsqlParser.LISTAGG - 590)) | (1 << (plsqlParser.PERCENT_RANK - 590)) | (1 << (plsqlParser.PERCENTILE_CONT - 590)) | (1 << (plsqlParser.PERCENTILE_DISC - 590)) | (1 << (plsqlParser.RANK - 590)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Standard_prediction_function_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREDICTION(self):
            return self.getToken(plsqlParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(plsqlParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(plsqlParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(plsqlParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(plsqlParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(plsqlParser.PREDICTION_SET, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_standard_prediction_function_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_prediction_function_keyword" ):
                return visitor.visitStandard_prediction_function_keyword(self)
            else:
                return visitor.visitChildren(self)




    def standard_prediction_function_keyword(self):

        localctx = plsqlParser.Standard_prediction_function_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_standard_prediction_function_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7288
            _la = self._input.LA(1)
            if not(((((_la - 584)) & ~0x3f) == 0 and ((1 << (_la - 584)) & ((1 << (plsqlParser.PREDICTION - 584)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 584)) | (1 << (plsqlParser.PREDICTION_COST - 584)) | (1 << (plsqlParser.PREDICTION_DETAILS - 584)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 584)) | (1 << (plsqlParser.PREDICTION_SET - 584)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(plsqlParser.OVER, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def query_partition_clause(self):
            return self.getTypedRuleContext(plsqlParser.Query_partition_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def windowing_clause(self):
            return self.getTypedRuleContext(plsqlParser.Windowing_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_over_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause" ):
                return visitor.visitOver_clause(self)
            else:
                return visitor.visitChildren(self)




    def over_clause(self):

        localctx = plsqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7290
            self.match(plsqlParser.OVER)
            self.state = 7291
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 7293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION:
                self.state = 7292
                self.query_partition_clause()


            self.state = 7299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ORDER:
                self.state = 7295
                self.order_by_clause()
                self.state = 7297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.RANGE or _la==plsqlParser.ROWS:
                    self.state = 7296
                    self.windowing_clause()




            self.state = 7301
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Windowing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowing_type(self):
            return self.getTypedRuleContext(plsqlParser.Windowing_typeContext,0)


        def BETWEEN(self):
            return self.getToken(plsqlParser.BETWEEN, 0)

        def windowing_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Windowing_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Windowing_elementsContext,i)


        def AND(self):
            return self.getToken(plsqlParser.AND, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_windowing_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_clause" ):
                return visitor.visitWindowing_clause(self)
            else:
                return visitor.visitChildren(self)




    def windowing_clause(self):

        localctx = plsqlParser.Windowing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_windowing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7303
            self.windowing_type()
            self.state = 7310
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BETWEEN]:
                self.state = 7304
                self.match(plsqlParser.BETWEEN)
                self.state = 7305
                self.windowing_elements()
                self.state = 7306
                self.match(plsqlParser.AND)
                self.state = 7307
                self.windowing_elements()
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALL, plsqlParser.ANALYZE, plsqlParser.ANY, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONNECT_BY_ROOT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DISTINCT, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXISTS, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FALSE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITION, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIOR, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUE, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.PLUS_SIGN, plsqlParser.MINUS_SIGN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                self.state = 7309
                self.windowing_elements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Windowing_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_windowing_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_type" ):
                return visitor.visitWindowing_type(self)
            else:
                return visitor.visitChildren(self)




    def windowing_type(self):

        localctx = plsqlParser.Windowing_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_windowing_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7312
            _la = self._input.LA(1)
            if not(_la==plsqlParser.RANGE or _la==plsqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Windowing_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(plsqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(plsqlParser.PRECEDING, 0)

        def CURRENT(self):
            return self.getToken(plsqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def FOLLOWING(self):
            return self.getToken(plsqlParser.FOLLOWING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_windowing_elements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_elements" ):
                return visitor.visitWindowing_elements(self)
            else:
                return visitor.visitChildren(self)




    def windowing_elements(self):

        localctx = plsqlParser.Windowing_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_windowing_elements)
        self._la = 0 # Token type
        try:
            self.state = 7321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1062,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7314
                self.match(plsqlParser.UNBOUNDED)
                self.state = 7315
                self.match(plsqlParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7316
                self.match(plsqlParser.CURRENT)
                self.state = 7317
                self.match(plsqlParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7318
                self.concatenation()
                self.state = 7319
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FOLLOWING or _la==plsqlParser.PRECEDING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def star(self):
            return self.getTypedRuleContext(plsqlParser.StarContext,0)


        def using_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Using_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Using_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_using_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing_clause" ):
                return visitor.visitUsing_clause(self)
            else:
                return visitor.visitChildren(self)




    def using_clause(self):

        localctx = plsqlParser.Using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_using_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7323
            self.match(plsqlParser.USING)
            self.state = 7333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1064,self._ctx)
            if la_ == 1:
                self.state = 7324
                self.star()
                pass

            elif la_ == 2:
                self.state = 7325
                self.using_element()
                self.state = 7330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1063,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 7326
                        self.match(plsqlParser.COMMA)
                        self.state = 7327
                        self.using_element() 
                    self.state = 7332
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1063,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selected_element(self):
            return self.getTypedRuleContext(plsqlParser.Selected_elementContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def OUT(self):
            return self.getToken(plsqlParser.OUT, 0)

        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_using_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing_element" ):
                return visitor.visitUsing_element(self)
            else:
                return visitor.visitChildren(self)




    def using_element(self):

        localctx = plsqlParser.Using_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_using_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1066,self._ctx)
            if la_ == 1:
                self.state = 7335
                self.match(plsqlParser.IN)
                self.state = 7337
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1065,self._ctx)
                if la_ == 1:
                    self.state = 7336
                    self.match(plsqlParser.OUT)



            elif la_ == 2:
                self.state = 7339
                self.match(plsqlParser.OUT)


            self.state = 7342
            self.selected_element()
            self.state = 7344
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1067,self._ctx)
            if la_ == 1:
                self.state = 7343
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collect_order_by_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_collect_order_by_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollect_order_by_part" ):
                return visitor.visitCollect_order_by_part(self)
            else:
                return visitor.visitChildren(self)




    def collect_order_by_part(self):

        localctx = plsqlParser.Collect_order_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_collect_order_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7346
            self.match(plsqlParser.ORDER)
            self.state = 7347
            self.match(plsqlParser.BY)
            self.state = 7348
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Within_or_over_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(plsqlParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(plsqlParser.GROUP, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def over_clause(self):
            return self.getTypedRuleContext(plsqlParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_within_or_over_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithin_or_over_part" ):
                return visitor.visitWithin_or_over_part(self)
            else:
                return visitor.visitChildren(self)




    def within_or_over_part(self):

        localctx = plsqlParser.Within_or_over_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_within_or_over_part)
        try:
            self.state = 7357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.WITHIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7350
                self.match(plsqlParser.WITHIN)
                self.state = 7351
                self.match(plsqlParser.GROUP)
                self.state = 7352
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7353
                self.order_by_clause()
                self.state = 7354
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.OVER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7356
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cost_matrix_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COST(self):
            return self.getToken(plsqlParser.COST, 0)

        def MODEL(self):
            return self.getToken(plsqlParser.MODEL, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def cost_class_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Cost_class_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Cost_class_nameContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def AUTO(self):
            return self.getToken(plsqlParser.AUTO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_cost_matrix_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCost_matrix_clause" ):
                return visitor.visitCost_matrix_clause(self)
            else:
                return visitor.visitChildren(self)




    def cost_matrix_clause(self):

        localctx = plsqlParser.Cost_matrix_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_cost_matrix_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7359
            self.match(plsqlParser.COST)
            self.state = 7377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MODEL]:
                self.state = 7360
                self.match(plsqlParser.MODEL)
                self.state = 7362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.AUTO:
                    self.state = 7361
                    self.match(plsqlParser.AUTO)


                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 7364
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7365
                self.cost_class_name()
                self.state = 7370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7366
                    self.match(plsqlParser.COMMA)
                    self.state = 7367
                    self.cost_class_name()
                    self.state = 7372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7373
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7374
                self.match(plsqlParser.VALUES)
                self.state = 7375
                self.expression_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_passing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSING(self):
            return self.getToken(plsqlParser.PASSING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(plsqlParser.COMMA, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_passing_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_passing_clause" ):
                return visitor.visitXml_passing_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_passing_clause(self):

        localctx = plsqlParser.Xml_passing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_xml_passing_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7379
            self.match(plsqlParser.PASSING)
            self.state = 7382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BY:
                self.state = 7380
                self.match(plsqlParser.BY)
                self.state = 7381
                self.match(plsqlParser.VALUE)


            self.state = 7384
            self.expression(0)
            self.state = 7386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 7385
                self.column_alias()


            self.state = 7388
            self.match(plsqlParser.COMMA)
            self.state = 7389
            self.expression(0)
            self.state = 7391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1074,self._ctx)
            if la_ == 1:
                self.state = 7390
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attributes_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(plsqlParser.XMLATTRIBUTES, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Xml_multiuse_expression_elementContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def ENTITYESCAPING(self):
            return self.getToken(plsqlParser.ENTITYESCAPING, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(plsqlParser.NOENTITYESCAPING, 0)

        def SCHEMACHECK(self):
            return self.getToken(plsqlParser.SCHEMACHECK, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(plsqlParser.NOSCHEMACHECK, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_xml_attributes_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_attributes_clause" ):
                return visitor.visitXml_attributes_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_attributes_clause(self):

        localctx = plsqlParser.Xml_attributes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_xml_attributes_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7393
            self.match(plsqlParser.XMLATTRIBUTES)
            self.state = 7394
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 7396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1075,self._ctx)
            if la_ == 1:
                self.state = 7395
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ENTITYESCAPING or _la==plsqlParser.NOENTITYESCAPING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1076,self._ctx)
            if la_ == 1:
                self.state = 7398
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOSCHEMACHECK or _la==plsqlParser.SCHEMACHECK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7401
            self.xml_multiuse_expression_element()
            self.state = 7406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 7402
                self.match(plsqlParser.COMMA)
                self.state = 7403
                self.xml_multiuse_expression_element()
                self.state = 7408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7409
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespaces_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLNAMESPACES(self):
            return self.getToken(plsqlParser.XMLNAMESPACES, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConcatenationContext,i)


        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_aliasContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def xml_general_default_part(self):
            return self.getTypedRuleContext(plsqlParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_namespaces_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_namespaces_clause" ):
                return visitor.visitXml_namespaces_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_namespaces_clause(self):

        localctx = plsqlParser.Xml_namespaces_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_xml_namespaces_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7411
            self.match(plsqlParser.XMLNAMESPACES)
            self.state = 7412
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 7416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1078,self._ctx)
            if la_ == 1:
                self.state = 7413
                self.concatenation()
                self.state = 7414
                self.column_alias()


            self.state = 7424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 7418
                self.match(plsqlParser.COMMA)
                self.state = 7419
                self.concatenation()
                self.state = 7420
                self.column_alias()
                self.state = 7426
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT:
                self.state = 7427
                self.xml_general_default_part()


            self.state = 7430
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_table_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_column_name(self):
            return self.getTypedRuleContext(plsqlParser.Xml_column_nameContext,0)


        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def ORDINALITY(self):
            return self.getToken(plsqlParser.ORDINALITY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def PATH(self):
            return self.getToken(plsqlParser.PATH, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def xml_general_default_part(self):
            return self.getTypedRuleContext(plsqlParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_table_column

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_table_column" ):
                return visitor.visitXml_table_column(self)
            else:
                return visitor.visitChildren(self)




    def xml_table_column(self):

        localctx = plsqlParser.Xml_table_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_xml_table_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7432
            self.xml_column_name()
            self.state = 7443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.FOR]:
                self.state = 7433
                self.match(plsqlParser.FOR)
                self.state = 7434
                self.match(plsqlParser.ORDINALITY)
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 7435
                self.type_spec()
                self.state = 7438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PATH:
                    self.state = 7436
                    self.match(plsqlParser.PATH)
                    self.state = 7437
                    self.concatenation()


                self.state = 7441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DEFAULT:
                    self.state = 7440
                    self.xml_general_default_part()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_general_default_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_general_default_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_general_default_part" ):
                return visitor.visitXml_general_default_part(self)
            else:
                return visitor.visitChildren(self)




    def xml_general_default_part(self):

        localctx = plsqlParser.Xml_general_default_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_xml_general_default_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7445
            self.match(plsqlParser.DEFAULT)
            self.state = 7446
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_multiuse_expression_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def EVALNAME(self):
            return self.getToken(plsqlParser.EVALNAME, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_multiuse_expression_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_multiuse_expression_element" ):
                return visitor.visitXml_multiuse_expression_element(self)
            else:
                return visitor.visitChildren(self)




    def xml_multiuse_expression_element(self):

        localctx = plsqlParser.Xml_multiuse_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_xml_multiuse_expression_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7448
            self.expression(0)
            self.state = 7455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS:
                self.state = 7449
                self.match(plsqlParser.AS)
                self.state = 7453
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1084,self._ctx)
                if la_ == 1:
                    self.state = 7450
                    self.id_expression()
                    pass

                elif la_ == 2:
                    self.state = 7451
                    self.match(plsqlParser.EVALNAME)
                    self.state = 7452
                    self.concatenation()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlroot_param_version_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(plsqlParser.VERSION, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlroot_param_version_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlroot_param_version_part" ):
                return visitor.visitXmlroot_param_version_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlroot_param_version_part(self):

        localctx = plsqlParser.Xmlroot_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_xmlroot_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7457
            self.match(plsqlParser.VERSION)
            self.state = 7461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1086,self._ctx)
            if la_ == 1:
                self.state = 7458
                self.match(plsqlParser.NO)
                self.state = 7459
                self.match(plsqlParser.VALUE)
                pass

            elif la_ == 2:
                self.state = 7460
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlroot_param_standalone_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(plsqlParser.STANDALONE, 0)

        def YES(self):
            return self.getToken(plsqlParser.YES, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_xmlroot_param_standalone_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlroot_param_standalone_part" ):
                return visitor.visitXmlroot_param_standalone_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlroot_param_standalone_part(self):

        localctx = plsqlParser.Xmlroot_param_standalone_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_xmlroot_param_standalone_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7463
            self.match(plsqlParser.STANDALONE)
            self.state = 7469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.YES]:
                self.state = 7464
                self.match(plsqlParser.YES)
                pass
            elif token in [plsqlParser.NO]:
                self.state = 7465
                self.match(plsqlParser.NO)
                self.state = 7467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.VALUE:
                    self.state = 7466
                    self.match(plsqlParser.VALUE)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlserialize_param_enconding_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODING(self):
            return self.getToken(plsqlParser.ENCODING, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlserialize_param_enconding_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_enconding_part" ):
                return visitor.visitXmlserialize_param_enconding_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_enconding_part(self):

        localctx = plsqlParser.Xmlserialize_param_enconding_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_xmlserialize_param_enconding_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7471
            self.match(plsqlParser.ENCODING)
            self.state = 7472
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlserialize_param_version_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(plsqlParser.VERSION, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlserialize_param_version_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_version_part" ):
                return visitor.visitXmlserialize_param_version_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_version_part(self):

        localctx = plsqlParser.Xmlserialize_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_xmlserialize_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7474
            self.match(plsqlParser.VERSION)
            self.state = 7475
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlserialize_param_ident_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def INDENT(self):
            return self.getToken(plsqlParser.INDENT, 0)

        def SIZE(self):
            return self.getToken(plsqlParser.SIZE, 0)

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlserialize_param_ident_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_ident_part" ):
                return visitor.visitXmlserialize_param_ident_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_ident_part(self):

        localctx = plsqlParser.Xmlserialize_param_ident_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_xmlserialize_param_ident_part)
        self._la = 0 # Token type
        try:
            self.state = 7485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7477
                self.match(plsqlParser.NO)
                self.state = 7478
                self.match(plsqlParser.INDENT)
                pass
            elif token in [plsqlParser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7479
                self.match(plsqlParser.INDENT)
                self.state = 7483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.SIZE:
                    self.state = 7480
                    self.match(plsqlParser.SIZE)
                    self.state = 7481
                    self.match(plsqlParser.EQUALS_OP)
                    self.state = 7482
                    self.concatenation()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_plus_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOLIDUS(self):
            return self.getToken(plsqlParser.SOLIDUS, 0)

        def whenever_command(self):
            return self.getTypedRuleContext(plsqlParser.Whenever_commandContext,0)


        def exit_command(self):
            return self.getTypedRuleContext(plsqlParser.Exit_commandContext,0)


        def prompt_command(self):
            return self.getTypedRuleContext(plsqlParser.Prompt_commandContext,0)


        def set_command(self):
            return self.getTypedRuleContext(plsqlParser.Set_commandContext,0)


        def show_errors_command(self):
            return self.getTypedRuleContext(plsqlParser.Show_errors_commandContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_sql_plus_command

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_plus_command" ):
                return visitor.visitSql_plus_command(self)
            else:
                return visitor.visitChildren(self)




    def sql_plus_command(self):

        localctx = plsqlParser.Sql_plus_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_sql_plus_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SOLIDUS]:
                self.state = 7487
                self.match(plsqlParser.SOLIDUS)
                pass
            elif token in [plsqlParser.WHENEVER]:
                self.state = 7488
                self.whenever_command()
                pass
            elif token in [plsqlParser.EXIT]:
                self.state = 7489
                self.exit_command()
                pass
            elif token in [plsqlParser.PROMPT]:
                self.state = 7490
                self.prompt_command()
                pass
            elif token in [plsqlParser.SET]:
                self.state = 7491
                self.set_command()
                pass
            elif token in [plsqlParser.SHOW]:
                self.state = 7492
                self.show_errors_command()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Whenever_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHENEVER(self):
            return self.getToken(plsqlParser.WHENEVER, 0)

        def SQLERROR(self):
            return self.getToken(plsqlParser.SQLERROR, 0)

        def OSERROR(self):
            return self.getToken(plsqlParser.OSERROR, 0)

        def EXIT(self):
            return self.getToken(plsqlParser.EXIT, 0)

        def CONTINUE(self):
            return self.getToken(plsqlParser.CONTINUE, 0)

        def SUCCESS(self):
            return self.getToken(plsqlParser.SUCCESS, 0)

        def FAILURE(self):
            return self.getToken(plsqlParser.FAILURE, 0)

        def WARNING(self):
            return self.getToken(plsqlParser.WARNING, 0)

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(plsqlParser.ROLLBACK, 0)

        def NONE(self):
            return self.getToken(plsqlParser.NONE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_whenever_command

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenever_command" ):
                return visitor.visitWhenever_command(self)
            else:
                return visitor.visitChildren(self)




    def whenever_command(self):

        localctx = plsqlParser.Whenever_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_whenever_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7495
            self.match(plsqlParser.WHENEVER)
            self.state = 7496
            _la = self._input.LA(1)
            if not(_la==plsqlParser.OSERROR or _la==plsqlParser.SQLERROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7502
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.EXIT]:
                self.state = 7497
                self.match(plsqlParser.EXIT)
                self.state = 7498
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FAILURE or _la==plsqlParser.SUCCESS or _la==plsqlParser.WARNING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7499
                _la = self._input.LA(1)
                if not(_la==plsqlParser.COMMIT or _la==plsqlParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [plsqlParser.CONTINUE]:
                self.state = 7500
                self.match(plsqlParser.CONTINUE)
                self.state = 7501
                _la = self._input.LA(1)
                if not(_la==plsqlParser.COMMIT or _la==plsqlParser.NONE or _la==plsqlParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Regular_idContext,i)


        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(plsqlParser.OFF, 0)

        def numeric(self):
            return self.getTypedRuleContext(plsqlParser.NumericContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_set_command

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_command" ):
                return visitor.visitSet_command(self)
            else:
                return visitor.visitChildren(self)




    def set_command(self):

        localctx = plsqlParser.Set_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_set_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7504
            self.match(plsqlParser.SET)
            self.state = 7505
            self.regular_id()
            self.state = 7511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1093,self._ctx)
            if la_ == 1:
                self.state = 7506
                self.match(plsqlParser.CHAR_STRING)
                pass

            elif la_ == 2:
                self.state = 7507
                self.match(plsqlParser.ON)
                pass

            elif la_ == 3:
                self.state = 7508
                self.match(plsqlParser.OFF)
                pass

            elif la_ == 4:
                self.state = 7509
                self.numeric()
                pass

            elif la_ == 5:
                self.state = 7510
                self.regular_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exit_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(plsqlParser.EXIT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_exit_command

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_command" ):
                return visitor.visitExit_command(self)
            else:
                return visitor.visitChildren(self)




    def exit_command(self):

        localctx = plsqlParser.Exit_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_exit_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7513
            self.match(plsqlParser.EXIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prompt_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROMPT(self):
            return self.getToken(plsqlParser.PROMPT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_prompt_command

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrompt_command" ):
                return visitor.visitPrompt_command(self)
            else:
                return visitor.visitChildren(self)




    def prompt_command(self):

        localctx = plsqlParser.Prompt_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_prompt_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7515
            self.match(plsqlParser.PROMPT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_errors_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(plsqlParser.SHOW, 0)

        def ERR(self):
            return self.getToken(plsqlParser.ERR, 0)

        def ERRORS(self):
            return self.getToken(plsqlParser.ERRORS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_show_errors_command

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShow_errors_command" ):
                return visitor.visitShow_errors_command(self)
            else:
                return visitor.visitChildren(self)




    def show_errors_command(self):

        localctx = plsqlParser.Show_errors_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_show_errors_command)
        try:
            self.state = 7521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1094,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7517
                self.match(plsqlParser.SHOW)
                self.state = 7518
                self.match(plsqlParser.ERR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7519
                self.match(plsqlParser.SHOW)
                self.state = 7520
                self.match(plsqlParser.ERRORS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_extension_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_partition_extension_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_extension_clause" ):
                return visitor.visitPartition_extension_clause(self)
            else:
                return visitor.visitChildren(self)




    def partition_extension_clause(self):

        localctx = plsqlParser.Partition_extension_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_partition_extension_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7523
            _la = self._input.LA(1)
            if not(_la==plsqlParser.PARTITION or _la==plsqlParser.SUBPARTITION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FOR:
                self.state = 7524
                self.match(plsqlParser.FOR)


            self.state = 7527
            self.expression_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def alias_quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Alias_quoted_stringContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_column_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = plsqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.state = 7537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1098,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.AS:
                    self.state = 7529
                    self.match(plsqlParser.AS)


                self.state = 7534
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                    self.state = 7532
                    self.r_id()
                    pass
                elif token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                    self.state = 7533
                    self.alias_quoted_string()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7536
                self.match(plsqlParser.AS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def alias_quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Alias_quoted_stringContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = plsqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS:
                self.state = 7539
                self.match(plsqlParser.AS)


            self.state = 7544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 7542
                self.r_id()
                pass
            elif token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                self.state = 7543
                self.alias_quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alias_quoted_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alias_quoted_string

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias_quoted_string" ):
                return visitor.visitAlias_quoted_string(self)
            else:
                return visitor.visitChildren(self)




    def alias_quoted_string(self):

        localctx = plsqlParser.Alias_quoted_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_alias_quoted_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7546
            self.quoted_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(plsqlParser.WHERE, 0)

        def current_of_clause(self):
            return self.getTypedRuleContext(plsqlParser.Current_of_clauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_where_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhere_clause" ):
                return visitor.visitWhere_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_clause(self):

        localctx = plsqlParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7548
            self.match(plsqlParser.WHERE)
            self.state = 7551
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CURRENT]:
                self.state = 7549
                self.current_of_clause()
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALL, plsqlParser.ANALYZE, plsqlParser.ANY, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONNECT_BY_ROOT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DISTINCT, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXISTS, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FALSE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NOT, plsqlParser.NVL, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITION, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIOR, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUE, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.PLUS_SIGN, plsqlParser.MINUS_SIGN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                self.state = 7550
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Current_of_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(plsqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_current_of_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrent_of_clause" ):
                return visitor.visitCurrent_of_clause(self)
            else:
                return visitor.visitChildren(self)




    def current_of_clause(self):

        localctx = plsqlParser.Current_of_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_current_of_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7553
            self.match(plsqlParser.CURRENT)
            self.state = 7554
            self.match(plsqlParser.OF)
            self.state = 7555
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Variable_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def BULK(self):
            return self.getToken(plsqlParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(plsqlParser.COLLECT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_into_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInto_clause" ):
                return visitor.visitInto_clause(self)
            else:
                return visitor.visitChildren(self)




    def into_clause(self):

        localctx = plsqlParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_into_clause)
        try:
            self.state = 7577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INTO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7557
                self.match(plsqlParser.INTO)
                self.state = 7558
                self.variable_name()
                self.state = 7563
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1102,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 7559
                        self.match(plsqlParser.COMMA)
                        self.state = 7560
                        self.variable_name() 
                    self.state = 7565
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1102,self._ctx)

                pass
            elif token in [plsqlParser.BULK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7566
                self.match(plsqlParser.BULK)
                self.state = 7567
                self.match(plsqlParser.COLLECT)
                self.state = 7568
                self.match(plsqlParser.INTO)
                self.state = 7569
                self.variable_name()
                self.state = 7574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1103,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 7570
                        self.match(plsqlParser.COMMA)
                        self.state = 7571
                        self.variable_name() 
                    self.state = 7576
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1103,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_column_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_column_name" ):
                return visitor.visitXml_column_name(self)
            else:
                return visitor.visitChildren(self)




    def xml_column_name(self):

        localctx = plsqlParser.Xml_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_xml_column_name)
        try:
            self.state = 7581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7579
                self.r_id()
                pass
            elif token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7580
                self.quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cost_class_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cost_class_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCost_class_name" ):
                return visitor.visitCost_class_name(self)
            else:
                return visitor.visitChildren(self)




    def cost_class_name(self):

        localctx = plsqlParser.Cost_class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_cost_class_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7583
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_attribute_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_name" ):
                return visitor.visitAttribute_name(self)
            else:
                return visitor.visitChildren(self)




    def attribute_name(self):

        localctx = plsqlParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_attribute_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7585
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_savepoint_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepoint_name" ):
                return visitor.visitSavepoint_name(self)
            else:
                return visitor.visitChildren(self)




    def savepoint_name(self):

        localctx = plsqlParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7587
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_segment_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_rollback_segment_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback_segment_name" ):
                return visitor.visitRollback_segment_name(self)
            else:
                return visitor.visitChildren(self)




    def rollback_segment_name(self):

        localctx = plsqlParser.Rollback_segment_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_rollback_segment_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7589
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_var_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_var_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_var_name" ):
                return visitor.visitTable_var_name(self)
            else:
                return visitor.visitChildren(self)




    def table_var_name(self):

        localctx = plsqlParser.Table_var_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_table_var_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7591
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_schema_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_name" ):
                return visitor.visitSchema_name(self)
            else:
                return visitor.visitChildren(self)




    def schema_name(self):

        localctx = plsqlParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7593
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Routine_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def AT_SIGN(self):
            return self.getToken(plsqlParser.AT_SIGN, 0)

        def link_name(self):
            return self.getTypedRuleContext(plsqlParser.Link_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_routine_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutine_name" ):
                return visitor.visitRoutine_name(self)
            else:
                return visitor.visitChildren(self)




    def routine_name(self):

        localctx = plsqlParser.Routine_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_routine_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7595
            self.r_id()
            self.state = 7600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 7596
                self.match(plsqlParser.PERIOD)
                self.state = 7597
                self.id_expression()
                self.state = 7602
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AT_SIGN:
                self.state = 7603
                self.match(plsqlParser.AT_SIGN)
                self.state = 7604
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_name" ):
                return visitor.visitPackage_name(self)
            else:
                return visitor.visitChildren(self)




    def package_name(self):

        localctx = plsqlParser.Package_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_package_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7607
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implementation_type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_implementation_type_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplementation_type_name" ):
                return visitor.visitImplementation_type_name(self)
            else:
                return visitor.visitChildren(self)




    def implementation_type_name(self):

        localctx = plsqlParser.Implementation_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_implementation_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7609
            self.r_id()
            self.state = 7612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 7610
                self.match(plsqlParser.PERIOD)
                self.state = 7611
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_parameter_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_name" ):
                return visitor.visitParameter_name(self)
            else:
                return visitor.visitChildren(self)




    def parameter_name(self):

        localctx = plsqlParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_parameter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7614
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_model_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_reference_model_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_model_name" ):
                return visitor.visitReference_model_name(self)
            else:
                return visitor.visitChildren(self)




    def reference_model_name(self):

        localctx = plsqlParser.Reference_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_reference_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7616
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Main_model_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_main_model_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain_model_name" ):
                return visitor.visitMain_model_name(self)
            else:
                return visitor.visitChildren(self)




    def main_model_name(self):

        localctx = plsqlParser.Main_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_main_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7618
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_aggregate_function_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_function_name" ):
                return visitor.visitAggregate_function_name(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_function_name(self):

        localctx = plsqlParser.Aggregate_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_aggregate_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7620
            self.r_id()
            self.state = 7625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 7621
                self.match(plsqlParser.PERIOD)
                self.state = 7622
                self.id_expression()
                self.state = 7627
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_query_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_name" ):
                return visitor.visitQuery_name(self)
            else:
                return visitor.visitChildren(self)




    def query_name(self):

        localctx = plsqlParser.Query_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_query_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7628
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def AT_SIGN(self):
            return self.getToken(plsqlParser.AT_SIGN, 0)

        def link_name(self):
            return self.getTypedRuleContext(plsqlParser.Link_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_constraint_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_name" ):
                return visitor.visitConstraint_name(self)
            else:
                return visitor.visitChildren(self)




    def constraint_name(self):

        localctx = plsqlParser.Constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_constraint_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7630
            self.r_id()
            self.state = 7635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 7631
                self.match(plsqlParser.PERIOD)
                self.state = 7632
                self.id_expression()
                self.state = 7637
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AT_SIGN:
                self.state = 7638
                self.match(plsqlParser.AT_SIGN)
                self.state = 7639
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_label_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_name" ):
                return visitor.visitLabel_name(self)
            else:
                return visitor.visitChildren(self)




    def label_name(self):

        localctx = plsqlParser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_label_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7642
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_type_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = plsqlParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7644
            self.id_expression()
            self.state = 7649
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7645
                    self.match(plsqlParser.PERIOD)
                    self.state = 7646
                    self.id_expression() 
                self.state = 7651
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_sequence_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_name" ):
                return visitor.visitSequence_name(self)
            else:
                return visitor.visitChildren(self)




    def sequence_name(self):

        localctx = plsqlParser.Sequence_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_sequence_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7652
            self.id_expression()
            self.state = 7657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 7653
                self.match(plsqlParser.PERIOD)
                self.state = 7654
                self.id_expression()
                self.state = 7659
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_exception_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_name" ):
                return visitor.visitException_name(self)
            else:
                return visitor.visitChildren(self)




    def exception_name(self):

        localctx = plsqlParser.Exception_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_exception_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7660
            self.r_id()
            self.state = 7665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 7661
                self.match(plsqlParser.PERIOD)
                self.state = 7662
                self.id_expression()
                self.state = 7667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_name" ):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)




    def function_name(self):

        localctx = plsqlParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7668
            self.r_id()
            self.state = 7671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 7669
                self.match(plsqlParser.PERIOD)
                self.state = 7670
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_procedure_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_name" ):
                return visitor.visitProcedure_name(self)
            else:
                return visitor.visitChildren(self)




    def procedure_name(self):

        localctx = plsqlParser.Procedure_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_procedure_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7673
            self.r_id()
            self.state = 7676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 7674
                self.match(plsqlParser.PERIOD)
                self.state = 7675
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_name" ):
                return visitor.visitTrigger_name(self)
            else:
                return visitor.visitChildren(self)




    def trigger_name(self):

        localctx = plsqlParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_trigger_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7678
            self.r_id()
            self.state = 7681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 7679
                self.match(plsqlParser.PERIOD)
                self.state = 7680
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_variable_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_name" ):
                return visitor.visitVariable_name(self)
            else:
                return visitor.visitChildren(self)




    def variable_name(self):

        localctx = plsqlParser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_variable_name)
        try:
            self.state = 7685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7683
                self.dot_id()
                pass
            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7684
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_index_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_name" ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = plsqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7687
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_name" ):
                return visitor.visitCursor_name(self)
            else:
                return visitor.visitChildren(self)




    def cursor_name(self):

        localctx = plsqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_cursor_name)
        try:
            self.state = 7691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7689
                self.r_id()
                pass
            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7690
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_record_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_name" ):
                return visitor.visitRecord_name(self)
            else:
                return visitor.visitChildren(self)




    def record_name(self):

        localctx = plsqlParser.Record_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_record_name)
        try:
            self.state = 7695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7693
                self.r_id()
                pass
            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7694
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_collection_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollection_name" ):
                return visitor.visitCollection_name(self)
            else:
                return visitor.visitChildren(self)




    def collection_name(self):

        localctx = plsqlParser.Collection_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_collection_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7697
            self.r_id()
            self.state = 7700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 7698
                self.match(plsqlParser.PERIOD)
                self.state = 7699
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Link_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_link_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLink_name" ):
                return visitor.visitLink_name(self)
            else:
                return visitor.visitChildren(self)




    def link_name(self):

        localctx = plsqlParser.Link_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_link_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7702
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_column_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = plsqlParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7704
            self.r_id()
            self.state = 7709
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7705
                    self.match(plsqlParser.PERIOD)
                    self.state = 7706
                    self.id_expression() 
                self.state = 7711
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tableview_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def AT_SIGN(self):
            return self.getToken(plsqlParser.AT_SIGN, 0)

        def link_name(self):
            return self.getTypedRuleContext(plsqlParser.Link_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_tableview_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableview_name" ):
                return visitor.visitTableview_name(self)
            else:
                return visitor.visitChildren(self)




    def tableview_name(self):

        localctx = plsqlParser.Tableview_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_tableview_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7712
            self.dot_id()
            self.state = 7716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1123,self._ctx)
            if la_ == 1:
                self.state = 7713
                self.match(plsqlParser.AT_SIGN)
                self.state = 7714
                self.link_name()

            elif la_ == 2:
                self.state = 7715
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._id_expression = None # Id_expressionContext
            self.fields = list() # of Id_expressionContexts

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_dot_id

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDot_id" ):
                return visitor.visitDot_id(self)
            else:
                return visitor.visitChildren(self)




    def dot_id(self):

        localctx = plsqlParser.Dot_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_dot_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7718
            localctx._id_expression = self.id_expression()
            localctx.fields.append(localctx._id_expression)
            self.state = 7723
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7719
                    self.match(plsqlParser.PERIOD)
                    self.state = 7720
                    localctx._id_expression = self.id_expression()
                    localctx.fields.append(localctx._id_expression) 
                self.state = 7725
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(plsqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_star

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar" ):
                return visitor.visitStar(self)
            else:
                return visitor.visitChildren(self)




    def star(self):

        localctx = plsqlParser.StarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_star)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7726
            self.match(plsqlParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keep_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def DENSE_RANK(self):
            return self.getToken(plsqlParser.DENSE_RANK, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def FIRST(self):
            return self.getToken(plsqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(plsqlParser.LAST, 0)

        def over_clause(self):
            return self.getTypedRuleContext(plsqlParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_keep_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeep_clause" ):
                return visitor.visitKeep_clause(self)
            else:
                return visitor.visitChildren(self)




    def keep_clause(self):

        localctx = plsqlParser.Keep_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_keep_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7728
            self.match(plsqlParser.KEEP)
            self.state = 7729
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 7730
            self.match(plsqlParser.DENSE_RANK)
            self.state = 7731
            _la = self._input.LA(1)
            if not(_la==plsqlParser.FIRST or _la==plsqlParser.LAST):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7732
            self.order_by_clause()
            self.state = 7733
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 7735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1125,self._ctx)
            if la_ == 1:
                self.state = 7734
                self.over_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._argument = None # ArgumentContext
            self.argument_list = list() # of ArgumentContexts

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def keep_clause(self):
            return self.getTypedRuleContext(plsqlParser.Keep_clauseContext,0)


        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ArgumentContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_argument

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument" ):
                return visitor.visitFunction_argument(self)
            else:
                return visitor.visitChildren(self)




    def function_argument(self):

        localctx = plsqlParser.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_function_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7737
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 7739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DISTINCT - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)) | (1 << (plsqlParser.NOT - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITION - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PRIOR - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELECT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUE - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 585)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.LEFT_PAREN - 585)) | (1 << (plsqlParser.PLUS_SIGN - 585)) | (1 << (plsqlParser.MINUS_SIGN - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 7738
                localctx._argument = self.argument()
                localctx.argument_list.append(localctx._argument)


            self.state = 7745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 7741
                self.match(plsqlParser.COMMA)
                self.state = 7742
                localctx._argument = self.argument()
                localctx.argument_list.append(localctx._argument)
                self.state = 7747
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7748
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 7750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1128,self._ctx)
            if la_ == 1:
                self.state = 7749
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argument_analyticContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def keep_clause(self):
            return self.getTypedRuleContext(plsqlParser.Keep_clauseContext,0)


        def respect_or_ignore_nulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Respect_or_ignore_nullsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Respect_or_ignore_nullsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_argument_analytic

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument_analytic" ):
                return visitor.visitFunction_argument_analytic(self)
            else:
                return visitor.visitChildren(self)




    def function_argument_analytic(self):

        localctx = plsqlParser.Function_argument_analyticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_function_argument_analytic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7752
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 7757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DISTINCT - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)) | (1 << (plsqlParser.NOT - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITION - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.PRIOR - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELECT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUE - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 585)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)) | (1 << (plsqlParser.LEFT_PAREN - 585)) | (1 << (plsqlParser.PLUS_SIGN - 585)) | (1 << (plsqlParser.MINUS_SIGN - 585)) | (1 << (plsqlParser.BINDVAR - 585)) | (1 << (plsqlParser.COLON - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 7753
                self.argument()
                self.state = 7755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IGNORE or _la==plsqlParser.RESPECT:
                    self.state = 7754
                    self.respect_or_ignore_nulls()




            self.state = 7766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 7759
                self.match(plsqlParser.COMMA)
                self.state = 7760
                self.argument()
                self.state = 7762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IGNORE or _la==plsqlParser.RESPECT:
                    self.state = 7761
                    self.respect_or_ignore_nulls()


                self.state = 7768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7769
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 7771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1133,self._ctx)
            if la_ == 1:
                self.state = 7770
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argument_modelingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def star(self):
            return self.getTypedRuleContext(plsqlParser.StarContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def keep_clause(self):
            return self.getTypedRuleContext(plsqlParser.Keep_clauseContext,0)


        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.NumericContext)
            else:
                return self.getTypedRuleContext(plsqlParser.NumericContext,i)


        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NULL)
            else:
                return self.getToken(plsqlParser.NULL, i)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_argument_modeling

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument_modeling" ):
                return visitor.visitFunction_argument_modeling(self)
            else:
                return visitor.visitChildren(self)




    def function_argument_modeling(self):

        localctx = plsqlParser.Function_argument_modelingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_function_argument_modeling)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7773
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 7774
            self.column_name()
            self.state = 7787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMMA:
                self.state = 7775
                self.match(plsqlParser.COMMA)
                self.state = 7778
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT]:
                    self.state = 7776
                    self.numeric()
                    pass
                elif token in [plsqlParser.NULL]:
                    self.state = 7777
                    self.match(plsqlParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 7780
                    self.match(plsqlParser.COMMA)
                    self.state = 7783
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT]:
                        self.state = 7781
                        self.numeric()
                        pass
                    elif token in [plsqlParser.NULL]:
                        self.state = 7782
                        self.match(plsqlParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 7789
            self.match(plsqlParser.USING)
            self.state = 7809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1141,self._ctx)
            if la_ == 1:
                self.state = 7790
                self.tableview_name()
                self.state = 7791
                self.match(plsqlParser.PERIOD)
                self.state = 7792
                self.star()
                pass

            elif la_ == 2:
                self.state = 7794
                self.star()
                pass

            elif la_ == 3:
                self.state = 7795
                self.expression(0)
                self.state = 7797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 7796
                    self.column_alias()


                self.state = 7806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7799
                    self.match(plsqlParser.COMMA)
                    self.state = 7800
                    self.expression(0)
                    self.state = 7802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 585)) | (1 << (plsqlParser.CHAR_STRING - 585)) | (1 << (plsqlParser.DELIMITED_ID - 585)))) != 0) or _la==plsqlParser.REGULAR_ID:
                        self.state = 7801
                        self.column_alias()


                    self.state = 7808
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 7811
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 7813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1142,self._ctx)
            if la_ == 1:
                self.state = 7812
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Respect_or_ignore_nullsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(plsqlParser.NULLS, 0)

        def RESPECT(self):
            return self.getToken(plsqlParser.RESPECT, 0)

        def IGNORE(self):
            return self.getToken(plsqlParser.IGNORE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_respect_or_ignore_nulls

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRespect_or_ignore_nulls" ):
                return visitor.visitRespect_or_ignore_nulls(self)
            else:
                return visitor.visitChildren(self)




    def respect_or_ignore_nulls(self):

        localctx = plsqlParser.Respect_or_ignore_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_respect_or_ignore_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7815
            _la = self._input.LA(1)
            if not(_la==plsqlParser.IGNORE or _la==plsqlParser.RESPECT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7816
            self.match(plsqlParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(plsqlParser.GREATER_THAN_OP, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_argument

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = plsqlParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1143,self._ctx)
            if la_ == 1:
                self.state = 7818
                self.r_id()
                self.state = 7819
                self.match(plsqlParser.EQUALS_OP)
                self.state = 7820
                self.match(plsqlParser.GREATER_THAN_OP)


            self.state = 7824
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(plsqlParser.DatatypeContext,0)


        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def REF(self):
            return self.getToken(plsqlParser.REF, 0)

        def PERCENT_ROWTYPE(self):
            return self.getToken(plsqlParser.PERCENT_ROWTYPE, 0)

        def PERCENT_TYPE(self):
            return self.getToken(plsqlParser.PERCENT_TYPE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_type_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_spec" ):
                return visitor.visitType_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_spec(self):

        localctx = plsqlParser.Type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_type_spec)
        self._la = 0 # Token type
        try:
            self.state = 7834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7826
                self.datatype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7828
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1144,self._ctx)
                if la_ == 1:
                    self.state = 7827
                    self.match(plsqlParser.REF)


                self.state = 7830
                self.type_name()
                self.state = 7832
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1145,self._ctx)
                if la_ == 1:
                    self.state = 7831
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.PERCENT_ROWTYPE or _la==plsqlParser.PERCENT_TYPE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_datatype_element(self):
            return self.getTypedRuleContext(plsqlParser.Native_datatype_elementContext,0)


        def precision_part(self):
            return self.getTypedRuleContext(plsqlParser.Precision_partContext,0)


        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def TIME(self):
            return self.getToken(plsqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(plsqlParser.ZONE, 0)

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def INTERVAL(self):
            return self.getToken(plsqlParser.INTERVAL, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def YEAR(self):
            return self.getToken(plsqlParser.YEAR, 0)

        def DAY(self):
            return self.getToken(plsqlParser.DAY, 0)

        def MONTH(self):
            return self.getToken(plsqlParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(plsqlParser.SECOND, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_datatype

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatatype" ):
                return visitor.visitDatatype(self)
            else:
                return visitor.visitChildren(self)




    def datatype(self):

        localctx = plsqlParser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_datatype)
        self._la = 0 # Token type
        try:
            self.state = 7864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BOOLEAN, plsqlParser.CHAR, plsqlParser.CHARACTER, plsqlParser.CLOB, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.FLOAT, plsqlParser.HOUR, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.LONG, plsqlParser.MINUTE, plsqlParser.MLSLABEL, plsqlParser.MONTH, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NCHAR, plsqlParser.NCLOB, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.RAW, plsqlParser.REAL, plsqlParser.ROWID, plsqlParser.SECOND, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SMALLINT, plsqlParser.STRING, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.UROWID, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.YEAR, plsqlParser.YMINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7836
                self.native_datatype_element()
                self.state = 7838
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1147,self._ctx)
                if la_ == 1:
                    self.state = 7837
                    self.precision_part()


                self.state = 7846
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1149,self._ctx)
                if la_ == 1:
                    self.state = 7840
                    self.match(plsqlParser.WITH)
                    self.state = 7842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.LOCAL:
                        self.state = 7841
                        self.match(plsqlParser.LOCAL)


                    self.state = 7844
                    self.match(plsqlParser.TIME)
                    self.state = 7845
                    self.match(plsqlParser.ZONE)


                pass
            elif token in [plsqlParser.INTERVAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7848
                self.match(plsqlParser.INTERVAL)
                self.state = 7849
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DAY or _la==plsqlParser.YEAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LEFT_PAREN:
                    self.state = 7850
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 7851
                    self.expression(0)
                    self.state = 7852
                    self.match(plsqlParser.RIGHT_PAREN)


                self.state = 7856
                self.match(plsqlParser.TO)
                self.state = 7857
                _la = self._input.LA(1)
                if not(_la==plsqlParser.MONTH or _la==plsqlParser.SECOND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7862
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1151,self._ctx)
                if la_ == 1:
                    self.state = 7858
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 7859
                    self.expression(0)
                    self.state = 7860
                    self.match(plsqlParser.RIGHT_PAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precision_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.NumericContext)
            else:
                return self.getTypedRuleContext(plsqlParser.NumericContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self):
            return self.getToken(plsqlParser.COMMA, 0)

        def CHAR(self):
            return self.getToken(plsqlParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(plsqlParser.BYTE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_precision_part

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecision_part" ):
                return visitor.visitPrecision_part(self)
            else:
                return visitor.visitChildren(self)




    def precision_part(self):

        localctx = plsqlParser.Precision_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_precision_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7866
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 7867
            self.numeric()
            self.state = 7870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMMA:
                self.state = 7868
                self.match(plsqlParser.COMMA)
                self.state = 7869
                self.numeric()


            self.state = 7873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BYTE or _la==plsqlParser.CHAR:
                self.state = 7872
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BYTE or _la==plsqlParser.CHAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7875
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Native_datatype_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_INTEGER(self):
            return self.getToken(plsqlParser.BINARY_INTEGER, 0)

        def PLS_INTEGER(self):
            return self.getToken(plsqlParser.PLS_INTEGER, 0)

        def NATURAL(self):
            return self.getToken(plsqlParser.NATURAL, 0)

        def BINARY_FLOAT(self):
            return self.getToken(plsqlParser.BINARY_FLOAT, 0)

        def BINARY_DOUBLE(self):
            return self.getToken(plsqlParser.BINARY_DOUBLE, 0)

        def NATURALN(self):
            return self.getToken(plsqlParser.NATURALN, 0)

        def POSITIVE(self):
            return self.getToken(plsqlParser.POSITIVE, 0)

        def POSITIVEN(self):
            return self.getToken(plsqlParser.POSITIVEN, 0)

        def SIGNTYPE(self):
            return self.getToken(plsqlParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(plsqlParser.SIMPLE_INTEGER, 0)

        def NVARCHAR2(self):
            return self.getToken(plsqlParser.NVARCHAR2, 0)

        def DEC(self):
            return self.getToken(plsqlParser.DEC, 0)

        def INTEGER(self):
            return self.getToken(plsqlParser.INTEGER, 0)

        def INT(self):
            return self.getToken(plsqlParser.INT, 0)

        def NUMERIC(self):
            return self.getToken(plsqlParser.NUMERIC, 0)

        def SMALLINT(self):
            return self.getToken(plsqlParser.SMALLINT, 0)

        def NUMBER(self):
            return self.getToken(plsqlParser.NUMBER, 0)

        def DECIMAL(self):
            return self.getToken(plsqlParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(plsqlParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(plsqlParser.PRECISION, 0)

        def FLOAT(self):
            return self.getToken(plsqlParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(plsqlParser.REAL, 0)

        def NCHAR(self):
            return self.getToken(plsqlParser.NCHAR, 0)

        def LONG(self):
            return self.getToken(plsqlParser.LONG, 0)

        def RAW(self):
            return self.getToken(plsqlParser.RAW, 0)

        def CHAR(self):
            return self.getToken(plsqlParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(plsqlParser.CHARACTER, 0)

        def VARCHAR2(self):
            return self.getToken(plsqlParser.VARCHAR2, 0)

        def VARCHAR(self):
            return self.getToken(plsqlParser.VARCHAR, 0)

        def STRING(self):
            return self.getToken(plsqlParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(plsqlParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(plsqlParser.DATE, 0)

        def ROWID(self):
            return self.getToken(plsqlParser.ROWID, 0)

        def UROWID(self):
            return self.getToken(plsqlParser.UROWID, 0)

        def YEAR(self):
            return self.getToken(plsqlParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(plsqlParser.MONTH, 0)

        def DAY(self):
            return self.getToken(plsqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(plsqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(plsqlParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(plsqlParser.SECOND, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(plsqlParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(plsqlParser.TIMEZONE_MINUTE, 0)

        def TIMEZONE_REGION(self):
            return self.getToken(plsqlParser.TIMEZONE_REGION, 0)

        def TIMEZONE_ABBR(self):
            return self.getToken(plsqlParser.TIMEZONE_ABBR, 0)

        def TIMESTAMP(self):
            return self.getToken(plsqlParser.TIMESTAMP, 0)

        def TIMESTAMP_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0)

        def TIMESTAMP_TZ_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0)

        def TIMESTAMP_LTZ_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0)

        def YMINTERVAL_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0)

        def DSINTERVAL_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0)

        def BFILE(self):
            return self.getToken(plsqlParser.BFILE, 0)

        def BLOB(self):
            return self.getToken(plsqlParser.BLOB, 0)

        def CLOB(self):
            return self.getToken(plsqlParser.CLOB, 0)

        def NCLOB(self):
            return self.getToken(plsqlParser.NCLOB, 0)

        def MLSLABEL(self):
            return self.getToken(plsqlParser.MLSLABEL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_native_datatype_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNative_datatype_element" ):
                return visitor.visitNative_datatype_element(self)
            else:
                return visitor.visitChildren(self)




    def native_datatype_element(self):

        localctx = plsqlParser.Native_datatype_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_native_datatype_element)
        try:
            self.state = 7937
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BINARY_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7877
                self.match(plsqlParser.BINARY_INTEGER)
                pass
            elif token in [plsqlParser.PLS_INTEGER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7878
                self.match(plsqlParser.PLS_INTEGER)
                pass
            elif token in [plsqlParser.NATURAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7879
                self.match(plsqlParser.NATURAL)
                pass
            elif token in [plsqlParser.BINARY_FLOAT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7880
                self.match(plsqlParser.BINARY_FLOAT)
                pass
            elif token in [plsqlParser.BINARY_DOUBLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7881
                self.match(plsqlParser.BINARY_DOUBLE)
                pass
            elif token in [plsqlParser.NATURALN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7882
                self.match(plsqlParser.NATURALN)
                pass
            elif token in [plsqlParser.POSITIVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 7883
                self.match(plsqlParser.POSITIVE)
                pass
            elif token in [plsqlParser.POSITIVEN]:
                self.enterOuterAlt(localctx, 8)
                self.state = 7884
                self.match(plsqlParser.POSITIVEN)
                pass
            elif token in [plsqlParser.SIGNTYPE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 7885
                self.match(plsqlParser.SIGNTYPE)
                pass
            elif token in [plsqlParser.SIMPLE_INTEGER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 7886
                self.match(plsqlParser.SIMPLE_INTEGER)
                pass
            elif token in [plsqlParser.NVARCHAR2]:
                self.enterOuterAlt(localctx, 11)
                self.state = 7887
                self.match(plsqlParser.NVARCHAR2)
                pass
            elif token in [plsqlParser.DEC]:
                self.enterOuterAlt(localctx, 12)
                self.state = 7888
                self.match(plsqlParser.DEC)
                pass
            elif token in [plsqlParser.INTEGER]:
                self.enterOuterAlt(localctx, 13)
                self.state = 7889
                self.match(plsqlParser.INTEGER)
                pass
            elif token in [plsqlParser.INT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 7890
                self.match(plsqlParser.INT)
                pass
            elif token in [plsqlParser.NUMERIC]:
                self.enterOuterAlt(localctx, 15)
                self.state = 7891
                self.match(plsqlParser.NUMERIC)
                pass
            elif token in [plsqlParser.SMALLINT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 7892
                self.match(plsqlParser.SMALLINT)
                pass
            elif token in [plsqlParser.NUMBER]:
                self.enterOuterAlt(localctx, 17)
                self.state = 7893
                self.match(plsqlParser.NUMBER)
                pass
            elif token in [plsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 18)
                self.state = 7894
                self.match(plsqlParser.DECIMAL)
                pass
            elif token in [plsqlParser.DOUBLE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 7895
                self.match(plsqlParser.DOUBLE)
                self.state = 7897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1155,self._ctx)
                if la_ == 1:
                    self.state = 7896
                    self.match(plsqlParser.PRECISION)


                pass
            elif token in [plsqlParser.FLOAT]:
                self.enterOuterAlt(localctx, 20)
                self.state = 7899
                self.match(plsqlParser.FLOAT)
                pass
            elif token in [plsqlParser.REAL]:
                self.enterOuterAlt(localctx, 21)
                self.state = 7900
                self.match(plsqlParser.REAL)
                pass
            elif token in [plsqlParser.NCHAR]:
                self.enterOuterAlt(localctx, 22)
                self.state = 7901
                self.match(plsqlParser.NCHAR)
                pass
            elif token in [plsqlParser.LONG]:
                self.enterOuterAlt(localctx, 23)
                self.state = 7902
                self.match(plsqlParser.LONG)
                self.state = 7904
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1156,self._ctx)
                if la_ == 1:
                    self.state = 7903
                    self.match(plsqlParser.RAW)


                pass
            elif token in [plsqlParser.CHAR]:
                self.enterOuterAlt(localctx, 24)
                self.state = 7906
                self.match(plsqlParser.CHAR)
                pass
            elif token in [plsqlParser.CHARACTER]:
                self.enterOuterAlt(localctx, 25)
                self.state = 7907
                self.match(plsqlParser.CHARACTER)
                pass
            elif token in [plsqlParser.VARCHAR2]:
                self.enterOuterAlt(localctx, 26)
                self.state = 7908
                self.match(plsqlParser.VARCHAR2)
                pass
            elif token in [plsqlParser.VARCHAR]:
                self.enterOuterAlt(localctx, 27)
                self.state = 7909
                self.match(plsqlParser.VARCHAR)
                pass
            elif token in [plsqlParser.STRING]:
                self.enterOuterAlt(localctx, 28)
                self.state = 7910
                self.match(plsqlParser.STRING)
                pass
            elif token in [plsqlParser.RAW]:
                self.enterOuterAlt(localctx, 29)
                self.state = 7911
                self.match(plsqlParser.RAW)
                pass
            elif token in [plsqlParser.BOOLEAN]:
                self.enterOuterAlt(localctx, 30)
                self.state = 7912
                self.match(plsqlParser.BOOLEAN)
                pass
            elif token in [plsqlParser.DATE]:
                self.enterOuterAlt(localctx, 31)
                self.state = 7913
                self.match(plsqlParser.DATE)
                pass
            elif token in [plsqlParser.ROWID]:
                self.enterOuterAlt(localctx, 32)
                self.state = 7914
                self.match(plsqlParser.ROWID)
                pass
            elif token in [plsqlParser.UROWID]:
                self.enterOuterAlt(localctx, 33)
                self.state = 7915
                self.match(plsqlParser.UROWID)
                pass
            elif token in [plsqlParser.YEAR]:
                self.enterOuterAlt(localctx, 34)
                self.state = 7916
                self.match(plsqlParser.YEAR)
                pass
            elif token in [plsqlParser.MONTH]:
                self.enterOuterAlt(localctx, 35)
                self.state = 7917
                self.match(plsqlParser.MONTH)
                pass
            elif token in [plsqlParser.DAY]:
                self.enterOuterAlt(localctx, 36)
                self.state = 7918
                self.match(plsqlParser.DAY)
                pass
            elif token in [plsqlParser.HOUR]:
                self.enterOuterAlt(localctx, 37)
                self.state = 7919
                self.match(plsqlParser.HOUR)
                pass
            elif token in [plsqlParser.MINUTE]:
                self.enterOuterAlt(localctx, 38)
                self.state = 7920
                self.match(plsqlParser.MINUTE)
                pass
            elif token in [plsqlParser.SECOND]:
                self.enterOuterAlt(localctx, 39)
                self.state = 7921
                self.match(plsqlParser.SECOND)
                pass
            elif token in [plsqlParser.TIMEZONE_HOUR]:
                self.enterOuterAlt(localctx, 40)
                self.state = 7922
                self.match(plsqlParser.TIMEZONE_HOUR)
                pass
            elif token in [plsqlParser.TIMEZONE_MINUTE]:
                self.enterOuterAlt(localctx, 41)
                self.state = 7923
                self.match(plsqlParser.TIMEZONE_MINUTE)
                pass
            elif token in [plsqlParser.TIMEZONE_REGION]:
                self.enterOuterAlt(localctx, 42)
                self.state = 7924
                self.match(plsqlParser.TIMEZONE_REGION)
                pass
            elif token in [plsqlParser.TIMEZONE_ABBR]:
                self.enterOuterAlt(localctx, 43)
                self.state = 7925
                self.match(plsqlParser.TIMEZONE_ABBR)
                pass
            elif token in [plsqlParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 44)
                self.state = 7926
                self.match(plsqlParser.TIMESTAMP)
                pass
            elif token in [plsqlParser.TIMESTAMP_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 45)
                self.state = 7927
                self.match(plsqlParser.TIMESTAMP_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 46)
                self.state = 7928
                self.match(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 47)
                self.state = 7929
                self.match(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.YMINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 48)
                self.state = 7930
                self.match(plsqlParser.YMINTERVAL_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.DSINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 49)
                self.state = 7931
                self.match(plsqlParser.DSINTERVAL_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.BFILE]:
                self.enterOuterAlt(localctx, 50)
                self.state = 7932
                self.match(plsqlParser.BFILE)
                pass
            elif token in [plsqlParser.BLOB]:
                self.enterOuterAlt(localctx, 51)
                self.state = 7933
                self.match(plsqlParser.BLOB)
                pass
            elif token in [plsqlParser.CLOB]:
                self.enterOuterAlt(localctx, 52)
                self.state = 7934
                self.match(plsqlParser.CLOB)
                pass
            elif token in [plsqlParser.NCLOB]:
                self.enterOuterAlt(localctx, 53)
                self.state = 7935
                self.match(plsqlParser.NCLOB)
                pass
            elif token in [plsqlParser.MLSLABEL]:
                self.enterOuterAlt(localctx, 54)
                self.state = 7936
                self.match(plsqlParser.MLSLABEL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bind_variableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINDVAR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.BINDVAR)
            else:
                return self.getToken(plsqlParser.BINDVAR, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COLON)
            else:
                return self.getToken(plsqlParser.COLON, i)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def general_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.General_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.General_elementContext,i)


        def INDICATOR(self):
            return self.getToken(plsqlParser.INDICATOR, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_bind_variable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBind_variable" ):
                return visitor.visitBind_variable(self)
            else:
                return visitor.visitChildren(self)




    def bind_variable(self):

        localctx = plsqlParser.Bind_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_bind_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7942
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BINDVAR]:
                self.state = 7939
                self.match(plsqlParser.BINDVAR)
                pass
            elif token in [plsqlParser.COLON]:
                self.state = 7940
                self.match(plsqlParser.COLON)
                self.state = 7941
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1161,self._ctx)
            if la_ == 1:
                self.state = 7945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.INDICATOR:
                    self.state = 7944
                    self.match(plsqlParser.INDICATOR)


                self.state = 7950
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.BINDVAR]:
                    self.state = 7947
                    self.match(plsqlParser.BINDVAR)
                    pass
                elif token in [plsqlParser.COLON]:
                    self.state = 7948
                    self.match(plsqlParser.COLON)
                    self.state = 7949
                    self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 7958
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7954
                    self.match(plsqlParser.PERIOD)
                    self.state = 7955
                    self.general_element() 
                self.state = 7960
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_general_element

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FuncCallContext(General_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.General_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)

        def function_argument(self):
            return self.getTypedRuleContext(plsqlParser.Function_argumentContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncCall" ):
                return visitor.visitFuncCall(self)
            else:
                return visitor.visitChildren(self)


    class IdentifierContext(General_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.General_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def general_element(self):

        localctx = plsqlParser.General_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_general_element)
        try:
            self.state = 7965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1163,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.FuncCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 7961
                self.dot_id()
                self.state = 7962
                self.function_argument()
                pass

            elif la_ == 2:
                localctx = plsqlParser.IdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 7964
                self.dot_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_element" ):
                return visitor.visitTable_element(self)
            else:
                return visitor.visitChildren(self)




    def table_element(self):

        localctx = plsqlParser.Table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_table_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7967
            self.dot_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(plsqlParser.TIMESTAMP, 0)

        def quoted_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Quoted_stringContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,i)


        def bind_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Bind_variableContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Bind_variableContext,i)


        def AT(self):
            return self.getToken(plsqlParser.AT, 0)

        def TIME(self):
            return self.getToken(plsqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(plsqlParser.ZONE, 0)

        def INTERVAL(self):
            return self.getToken(plsqlParser.INTERVAL, 0)

        def DAY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DAY)
            else:
                return self.getToken(plsqlParser.DAY, i)

        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.HOUR)
            else:
                return self.getToken(plsqlParser.HOUR, i)

        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.MINUTE)
            else:
                return self.getToken(plsqlParser.MINUTE, i)

        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SECOND)
            else:
                return self.getToken(plsqlParser.SECOND, i)

        def general_element(self):
            return self.getTypedRuleContext(plsqlParser.General_elementContext,0)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def COMMA(self):
            return self.getToken(plsqlParser.COMMA, 0)

        def numeric(self):
            return self.getTypedRuleContext(plsqlParser.NumericContext,0)


        def DATE(self):
            return self.getToken(plsqlParser.DATE, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def TRUE(self):
            return self.getToken(plsqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(plsqlParser.FALSE, 0)

        def DBTIMEZONE(self):
            return self.getToken(plsqlParser.DBTIMEZONE, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(plsqlParser.SESSIONTIMEZONE, 0)

        def MINVALUE(self):
            return self.getToken(plsqlParser.MINVALUE, 0)

        def MAXVALUE(self):
            return self.getToken(plsqlParser.MAXVALUE, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_constant

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = plsqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 8031
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7969
                self.match(plsqlParser.TIMESTAMP)
                self.state = 7972
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                    self.state = 7970
                    self.quoted_string()
                    pass
                elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                    self.state = 7971
                    self.bind_variable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7978
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1165,self._ctx)
                if la_ == 1:
                    self.state = 7974
                    self.match(plsqlParser.AT)
                    self.state = 7975
                    self.match(plsqlParser.TIME)
                    self.state = 7976
                    self.match(plsqlParser.ZONE)
                    self.state = 7977
                    self.quoted_string()


                pass
            elif token in [plsqlParser.INTERVAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7980
                self.match(plsqlParser.INTERVAL)
                self.state = 7984
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                    self.state = 7981
                    self.quoted_string()
                    pass
                elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                    self.state = 7982
                    self.bind_variable()
                    pass
                elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                    self.state = 7983
                    self.general_element()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7986
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DAY or _la==plsqlParser.HOUR or _la==plsqlParser.MINUTE or _la==plsqlParser.SECOND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8000
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1170,self._ctx)
                if la_ == 1:
                    self.state = 7987
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 7990
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.UNSIGNED_INTEGER]:
                        self.state = 7988
                        self.match(plsqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                        self.state = 7989
                        self.bind_variable()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 7997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 7992
                        self.match(plsqlParser.COMMA)
                        self.state = 7995
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.UNSIGNED_INTEGER]:
                            self.state = 7993
                            self.match(plsqlParser.UNSIGNED_INTEGER)
                            pass
                        elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                            self.state = 7994
                            self.bind_variable()
                            pass
                        else:
                            raise NoViableAltException(self)



                    self.state = 7999
                    self.match(plsqlParser.RIGHT_PAREN)


                self.state = 8017
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1174,self._ctx)
                if la_ == 1:
                    self.state = 8002
                    self.match(plsqlParser.TO)
                    self.state = 8015
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.DAY]:
                        self.state = 8003
                        self.match(plsqlParser.DAY)
                        pass
                    elif token in [plsqlParser.HOUR]:
                        self.state = 8004
                        self.match(plsqlParser.HOUR)
                        pass
                    elif token in [plsqlParser.MINUTE]:
                        self.state = 8005
                        self.match(plsqlParser.MINUTE)
                        pass
                    elif token in [plsqlParser.SECOND]:
                        self.state = 8006
                        self.match(plsqlParser.SECOND)
                        self.state = 8013
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1172,self._ctx)
                        if la_ == 1:
                            self.state = 8007
                            self.match(plsqlParser.LEFT_PAREN)
                            self.state = 8010
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [plsqlParser.UNSIGNED_INTEGER]:
                                self.state = 8008
                                self.match(plsqlParser.UNSIGNED_INTEGER)
                                pass
                            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                                self.state = 8009
                                self.bind_variable()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 8012
                            self.match(plsqlParser.RIGHT_PAREN)


                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8019
                self.numeric()
                pass
            elif token in [plsqlParser.DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8020
                self.match(plsqlParser.DATE)
                self.state = 8021
                self.quoted_string()
                pass
            elif token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8022
                self.quoted_string()
                pass
            elif token in [plsqlParser.NULL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8023
                self.match(plsqlParser.NULL)
                pass
            elif token in [plsqlParser.TRUE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8024
                self.match(plsqlParser.TRUE)
                pass
            elif token in [plsqlParser.FALSE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8025
                self.match(plsqlParser.FALSE)
                pass
            elif token in [plsqlParser.DBTIMEZONE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 8026
                self.match(plsqlParser.DBTIMEZONE)
                pass
            elif token in [plsqlParser.SESSIONTIMEZONE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 8027
                self.match(plsqlParser.SESSIONTIMEZONE)
                pass
            elif token in [plsqlParser.MINVALUE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 8028
                self.match(plsqlParser.MINVALUE)
                pass
            elif token in [plsqlParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 8029
                self.match(plsqlParser.MAXVALUE)
                pass
            elif token in [plsqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 8030
                self.match(plsqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def APPROXIMATE_NUM_LIT(self):
            return self.getToken(plsqlParser.APPROXIMATE_NUM_LIT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_numeric

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric" ):
                return visitor.visitNumeric(self)
            else:
                return visitor.visitChildren(self)




    def numeric(self):

        localctx = plsqlParser.NumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_numeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8033
            _la = self._input.LA(1)
            if not(_la==plsqlParser.UNSIGNED_INTEGER or _la==plsqlParser.APPROXIMATE_NUM_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_negativeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(plsqlParser.MINUS_SIGN, 0)

        def numeric(self):
            return self.getTypedRuleContext(plsqlParser.NumericContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_numeric_negative

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_negative" ):
                return visitor.visitNumeric_negative(self)
            else:
                return visitor.visitChildren(self)




    def numeric_negative(self):

        localctx = plsqlParser.Numeric_negativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_numeric_negative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8035
            self.match(plsqlParser.MINUS_SIGN)
            self.state = 8036
            self.numeric()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Quoted_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def NATIONAL_CHAR_STRING_LIT(self):
            return self.getToken(plsqlParser.NATIONAL_CHAR_STRING_LIT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_quoted_string

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuoted_string" ):
                return visitor.visitQuoted_string(self)
            else:
                return visitor.visitChildren(self)




    def quoted_string(self):

        localctx = plsqlParser.Quoted_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_quoted_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8038
            _la = self._input.LA(1)
            if not(_la==plsqlParser.NATIONAL_CHAR_STRING_LIT or _la==plsqlParser.CHAR_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class R_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_r_id

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitR_id" ):
                return visitor.visitR_id(self)
            else:
                return visitor.visitChildren(self)




    def r_id(self):

        localctx = plsqlParser.R_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_r_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8040
            self.dot_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def DELIMITED_ID(self):
            return self.getToken(plsqlParser.DELIMITED_ID, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_id_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitId_expression" ):
                return visitor.visitId_expression(self)
            else:
                return visitor.visitChildren(self)




    def id_expression(self):

        localctx = plsqlParser.Id_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_id_expression)
        try:
            self.state = 8044
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8042
                self.regular_id()
                pass
            elif token in [plsqlParser.DELIMITED_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8043
                self.match(plsqlParser.DELIMITED_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_equal_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_EQUAL_OP(self):
            return self.getToken(plsqlParser.NOT_EQUAL_OP, 0)

        def LESS_THAN_OP(self):
            return self.getToken(plsqlParser.LESS_THAN_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(plsqlParser.GREATER_THAN_OP, 0)

        def EXCLAMATION_OPERATOR_PART(self):
            return self.getToken(plsqlParser.EXCLAMATION_OPERATOR_PART, 0)

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def CARRET_OPERATOR_PART(self):
            return self.getToken(plsqlParser.CARRET_OPERATOR_PART, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_not_equal_op

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_equal_op" ):
                return visitor.visitNot_equal_op(self)
            else:
                return visitor.visitChildren(self)




    def not_equal_op(self):

        localctx = plsqlParser.Not_equal_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_not_equal_op)
        try:
            self.state = 8053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NOT_EQUAL_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8046
                self.match(plsqlParser.NOT_EQUAL_OP)
                pass
            elif token in [plsqlParser.LESS_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8047
                self.match(plsqlParser.LESS_THAN_OP)
                self.state = 8048
                self.match(plsqlParser.GREATER_THAN_OP)
                pass
            elif token in [plsqlParser.EXCLAMATION_OPERATOR_PART]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8049
                self.match(plsqlParser.EXCLAMATION_OPERATOR_PART)
                self.state = 8050
                self.match(plsqlParser.EQUALS_OP)
                pass
            elif token in [plsqlParser.CARRET_OPERATOR_PART]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8051
                self.match(plsqlParser.CARRET_OPERATOR_PART)
                self.state = 8052
                self.match(plsqlParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Greater_than_or_equals_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER_THAN_OR_EQUALS_OP(self):
            return self.getToken(plsqlParser.GREATER_THAN_OR_EQUALS_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(plsqlParser.GREATER_THAN_OP, 0)

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_greater_than_or_equals_op

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGreater_than_or_equals_op" ):
                return visitor.visitGreater_than_or_equals_op(self)
            else:
                return visitor.visitChildren(self)




    def greater_than_or_equals_op(self):

        localctx = plsqlParser.Greater_than_or_equals_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_greater_than_or_equals_op)
        try:
            self.state = 8058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.GREATER_THAN_OR_EQUALS_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8055
                self.match(plsqlParser.GREATER_THAN_OR_EQUALS_OP)
                pass
            elif token in [plsqlParser.GREATER_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8056
                self.match(plsqlParser.GREATER_THAN_OP)
                self.state = 8057
                self.match(plsqlParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Less_than_or_equals_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN_OR_EQUALS_OP(self):
            return self.getToken(plsqlParser.LESS_THAN_OR_EQUALS_OP, 0)

        def LESS_THAN_OP(self):
            return self.getToken(plsqlParser.LESS_THAN_OP, 0)

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_less_than_or_equals_op

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLess_than_or_equals_op" ):
                return visitor.visitLess_than_or_equals_op(self)
            else:
                return visitor.visitChildren(self)




    def less_than_or_equals_op(self):

        localctx = plsqlParser.Less_than_or_equals_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_less_than_or_equals_op)
        try:
            self.state = 8063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LESS_THAN_OR_EQUALS_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8060
                self.match(plsqlParser.LESS_THAN_OR_EQUALS_OP)
                pass
            elif token in [plsqlParser.LESS_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8061
                self.match(plsqlParser.LESS_THAN_OP)
                self.state = 8062
                self.match(plsqlParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Concatenation_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONCATENATION_OP(self):
            return self.getToken(plsqlParser.CONCATENATION_OP, 0)

        def VERTICAL_BAR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.VERTICAL_BAR)
            else:
                return self.getToken(plsqlParser.VERTICAL_BAR, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_concatenation_op

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation_op" ):
                return visitor.visitConcatenation_op(self)
            else:
                return visitor.visitChildren(self)




    def concatenation_op(self):

        localctx = plsqlParser.Concatenation_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_concatenation_op)
        try:
            self.state = 8068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CONCATENATION_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8065
                self.match(plsqlParser.CONCATENATION_OP)
                pass
            elif token in [plsqlParser.VERTICAL_BAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8066
                self.match(plsqlParser.VERTICAL_BAR)
                self.state = 8067
                self.match(plsqlParser.VERTICAL_BAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Outer_join_signContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def PLUS_SIGN(self):
            return self.getToken(plsqlParser.PLUS_SIGN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_outer_join_sign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOuter_join_sign" ):
                return visitor.visitOuter_join_sign(self)
            else:
                return visitor.visitChildren(self)




    def outer_join_sign(self):

        localctx = plsqlParser.Outer_join_signContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_outer_join_sign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8070
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 8071
            self.match(plsqlParser.PLUS_SIGN)
            self.state = 8072
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regular_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGULAR_ID(self):
            return self.getToken(plsqlParser.REGULAR_ID, 0)

        def A_LETTER(self):
            return self.getToken(plsqlParser.A_LETTER, 0)

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(plsqlParser.AFTER, 0)

        def AGENT(self):
            return self.getToken(plsqlParser.AGENT, 0)

        def AGGREGATE(self):
            return self.getToken(plsqlParser.AGGREGATE, 0)

        def ANALYZE(self):
            return self.getToken(plsqlParser.ANALYZE, 0)

        def ARRAY(self):
            return self.getToken(plsqlParser.ARRAY, 0)

        def ASSOCIATE(self):
            return self.getToken(plsqlParser.ASSOCIATE, 0)

        def AT(self):
            return self.getToken(plsqlParser.AT, 0)

        def ATTRIBUTE(self):
            return self.getToken(plsqlParser.ATTRIBUTE, 0)

        def AUDIT(self):
            return self.getToken(plsqlParser.AUDIT, 0)

        def AUTHID(self):
            return self.getToken(plsqlParser.AUTHID, 0)

        def AUTO(self):
            return self.getToken(plsqlParser.AUTO, 0)

        def AUTOMATIC(self):
            return self.getToken(plsqlParser.AUTOMATIC, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0)

        def BATCH(self):
            return self.getToken(plsqlParser.BATCH, 0)

        def BEFORE(self):
            return self.getToken(plsqlParser.BEFORE, 0)

        def BFILE(self):
            return self.getToken(plsqlParser.BFILE, 0)

        def BINARY_DOUBLE(self):
            return self.getToken(plsqlParser.BINARY_DOUBLE, 0)

        def BINARY_FLOAT(self):
            return self.getToken(plsqlParser.BINARY_FLOAT, 0)

        def BINARY_INTEGER(self):
            return self.getToken(plsqlParser.BINARY_INTEGER, 0)

        def BLOB(self):
            return self.getToken(plsqlParser.BLOB, 0)

        def BLOCK(self):
            return self.getToken(plsqlParser.BLOCK, 0)

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def BOOLEAN(self):
            return self.getToken(plsqlParser.BOOLEAN, 0)

        def BOTH(self):
            return self.getToken(plsqlParser.BOTH, 0)

        def BULK(self):
            return self.getToken(plsqlParser.BULK, 0)

        def BYTE(self):
            return self.getToken(plsqlParser.BYTE, 0)

        def C_LETTER(self):
            return self.getToken(plsqlParser.C_LETTER, 0)

        def CALL(self):
            return self.getToken(plsqlParser.CALL, 0)

        def CANONICAL(self):
            return self.getToken(plsqlParser.CANONICAL, 0)

        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def CAST(self):
            return self.getToken(plsqlParser.CAST, 0)

        def CHAR(self):
            return self.getToken(plsqlParser.CHAR, 0)

        def CHAR_CS(self):
            return self.getToken(plsqlParser.CHAR_CS, 0)

        def CHARACTER(self):
            return self.getToken(plsqlParser.CHARACTER, 0)

        def CHR(self):
            return self.getToken(plsqlParser.CHR, 0)

        def CLOB(self):
            return self.getToken(plsqlParser.CLOB, 0)

        def CLOSE(self):
            return self.getToken(plsqlParser.CLOSE, 0)

        def CLUSTER(self):
            return self.getToken(plsqlParser.CLUSTER, 0)

        def COALESCE(self):
            return self.getToken(plsqlParser.COALESCE, 0)

        def COLLECT(self):
            return self.getToken(plsqlParser.COLLECT, 0)

        def COLUMNS(self):
            return self.getToken(plsqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(plsqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(plsqlParser.COMMITTED, 0)

        def COMPATIBILITY(self):
            return self.getToken(plsqlParser.COMPATIBILITY, 0)

        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def COMPOUND(self):
            return self.getToken(plsqlParser.COMPOUND, 0)

        def CONCAT(self):
            return self.getToken(plsqlParser.CONCAT, 0)

        def CONSTANT(self):
            return self.getToken(plsqlParser.CONSTANT, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(plsqlParser.CONSTRAINTS, 0)

        def CONSTRUCTOR(self):
            return self.getToken(plsqlParser.CONSTRUCTOR, 0)

        def CONTENT(self):
            return self.getToken(plsqlParser.CONTENT, 0)

        def CONTEXT(self):
            return self.getToken(plsqlParser.CONTEXT, 0)

        def CONTINUE(self):
            return self.getToken(plsqlParser.CONTINUE, 0)

        def CONVERT(self):
            return self.getToken(plsqlParser.CONVERT, 0)

        def CORRUPT_XID(self):
            return self.getToken(plsqlParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(plsqlParser.CORRUPT_XID_ALL, 0)

        def COST(self):
            return self.getToken(plsqlParser.COST, 0)

        def COUNT(self):
            return self.getToken(plsqlParser.COUNT, 0)

        def CROSS(self):
            return self.getToken(plsqlParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(plsqlParser.CUBE, 0)

        def CURRENT_USER(self):
            return self.getToken(plsqlParser.CURRENT_USER, 0)

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)

        def CUSTOMDATUM(self):
            return self.getToken(plsqlParser.CUSTOMDATUM, 0)

        def CYCLE(self):
            return self.getToken(plsqlParser.CYCLE, 0)

        def DATA(self):
            return self.getToken(plsqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(plsqlParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(plsqlParser.DATE, 0)

        def DAY(self):
            return self.getToken(plsqlParser.DAY, 0)

        def DB_ROLE_CHANGE(self):
            return self.getToken(plsqlParser.DB_ROLE_CHANGE, 0)

        def DBTIMEZONE(self):
            return self.getToken(plsqlParser.DBTIMEZONE, 0)

        def DDL(self):
            return self.getToken(plsqlParser.DDL, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def DEC(self):
            return self.getToken(plsqlParser.DEC, 0)

        def DECIMAL(self):
            return self.getToken(plsqlParser.DECIMAL, 0)

        def DECODE(self):
            return self.getToken(plsqlParser.DECODE, 0)

        def DECOMPOSE(self):
            return self.getToken(plsqlParser.DECOMPOSE, 0)

        def DECREMENT(self):
            return self.getToken(plsqlParser.DECREMENT, 0)

        def DEFAULTS(self):
            return self.getToken(plsqlParser.DEFAULTS, 0)

        def DEFERRED(self):
            return self.getToken(plsqlParser.DEFERRED, 0)

        def DEFINER(self):
            return self.getToken(plsqlParser.DEFINER, 0)

        def DETERMINISTIC(self):
            return self.getToken(plsqlParser.DETERMINISTIC, 0)

        def DIMENSION(self):
            return self.getToken(plsqlParser.DIMENSION, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def DISASSOCIATE(self):
            return self.getToken(plsqlParser.DISASSOCIATE, 0)

        def DOCUMENT(self):
            return self.getToken(plsqlParser.DOCUMENT, 0)

        def DOUBLE(self):
            return self.getToken(plsqlParser.DOUBLE, 0)

        def DSINTERVAL_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0)

        def EACH(self):
            return self.getToken(plsqlParser.EACH, 0)

        def ELEMENT(self):
            return self.getToken(plsqlParser.ELEMENT, 0)

        def EMPTY(self):
            return self.getToken(plsqlParser.EMPTY, 0)

        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def ENCODING(self):
            return self.getToken(plsqlParser.ENCODING, 0)

        def ENTITYESCAPING(self):
            return self.getToken(plsqlParser.ENTITYESCAPING, 0)

        def ERR(self):
            return self.getToken(plsqlParser.ERR, 0)

        def ERRORS(self):
            return self.getToken(plsqlParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(plsqlParser.ESCAPE, 0)

        def EVALNAME(self):
            return self.getToken(plsqlParser.EVALNAME, 0)

        def EXCEPTION(self):
            return self.getToken(plsqlParser.EXCEPTION, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(plsqlParser.EXCEPTION_INIT, 0)

        def EXCEPTIONS(self):
            return self.getToken(plsqlParser.EXCEPTIONS, 0)

        def EXCLUDE(self):
            return self.getToken(plsqlParser.EXCLUDE, 0)

        def EXECUTE(self):
            return self.getToken(plsqlParser.EXECUTE, 0)

        def EXIT(self):
            return self.getToken(plsqlParser.EXIT, 0)

        def EXPLAIN(self):
            return self.getToken(plsqlParser.EXPLAIN, 0)

        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(plsqlParser.EXTRACT, 0)

        def FAILURE(self):
            return self.getToken(plsqlParser.FAILURE, 0)

        def FINAL(self):
            return self.getToken(plsqlParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(plsqlParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(plsqlParser.FIRST_VALUE, 0)

        def FLOAT(self):
            return self.getToken(plsqlParser.FLOAT, 0)

        def FOLLOWING(self):
            return self.getToken(plsqlParser.FOLLOWING, 0)

        def FOLLOWS(self):
            return self.getToken(plsqlParser.FOLLOWS, 0)

        def FORALL(self):
            return self.getToken(plsqlParser.FORALL, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def FULL(self):
            return self.getToken(plsqlParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def GROUPING(self):
            return self.getToken(plsqlParser.GROUPING, 0)

        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def HIDE(self):
            return self.getToken(plsqlParser.HIDE, 0)

        def HOUR(self):
            return self.getToken(plsqlParser.HOUR, 0)

        def IGNORE(self):
            return self.getToken(plsqlParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def INCLUDE(self):
            return self.getToken(plsqlParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(plsqlParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(plsqlParser.INCREMENT, 0)

        def INDENT(self):
            return self.getToken(plsqlParser.INDENT, 0)

        def INDEXED(self):
            return self.getToken(plsqlParser.INDEXED, 0)

        def INDICATOR(self):
            return self.getToken(plsqlParser.INDICATOR, 0)

        def INDICES(self):
            return self.getToken(plsqlParser.INDICES, 0)

        def INFINITE(self):
            return self.getToken(plsqlParser.INFINITE, 0)

        def INLINE(self):
            return self.getToken(plsqlParser.INLINE, 0)

        def INNER(self):
            return self.getToken(plsqlParser.INNER, 0)

        def INOUT(self):
            return self.getToken(plsqlParser.INOUT, 0)

        def INSTANTIABLE(self):
            return self.getToken(plsqlParser.INSTANTIABLE, 0)

        def INSTEAD(self):
            return self.getToken(plsqlParser.INSTEAD, 0)

        def INT(self):
            return self.getToken(plsqlParser.INT, 0)

        def INTEGER(self):
            return self.getToken(plsqlParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(plsqlParser.INTERVAL, 0)

        def INVALIDATE(self):
            return self.getToken(plsqlParser.INVALIDATE, 0)

        def ISOLATION(self):
            return self.getToken(plsqlParser.ISOLATION, 0)

        def ITERATE(self):
            return self.getToken(plsqlParser.ITERATE, 0)

        def JAVA(self):
            return self.getToken(plsqlParser.JAVA, 0)

        def JOIN(self):
            return self.getToken(plsqlParser.JOIN, 0)

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def LANGUAGE(self):
            return self.getToken(plsqlParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(plsqlParser.LAST, 0)

        def LAST_VALUE(self):
            return self.getToken(plsqlParser.LAST_VALUE, 0)

        def LEADING(self):
            return self.getToken(plsqlParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(plsqlParser.LEFT, 0)

        def LEVEL(self):
            return self.getToken(plsqlParser.LEVEL, 0)

        def LIBRARY(self):
            return self.getToken(plsqlParser.LIBRARY, 0)

        def LIKE2(self):
            return self.getToken(plsqlParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(plsqlParser.LIKE4, 0)

        def LIKEC(self):
            return self.getToken(plsqlParser.LIKEC, 0)

        def LIMIT(self):
            return self.getToken(plsqlParser.LIMIT, 0)

        def LIST(self):
            return self.getToken(plsqlParser.LIST, 0)

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def LOCKED(self):
            return self.getToken(plsqlParser.LOCKED, 0)

        def LOG(self):
            return self.getToken(plsqlParser.LOG, 0)

        def LOGOFF(self):
            return self.getToken(plsqlParser.LOGOFF, 0)

        def LOGON(self):
            return self.getToken(plsqlParser.LOGON, 0)

        def LONG(self):
            return self.getToken(plsqlParser.LONG, 0)

        def LOOP(self):
            return self.getToken(plsqlParser.LOOP, 0)

        def MAIN(self):
            return self.getToken(plsqlParser.MAIN, 0)

        def MAP(self):
            return self.getToken(plsqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(plsqlParser.MATCHED, 0)

        def MAXVALUE(self):
            return self.getToken(plsqlParser.MAXVALUE, 0)

        def MEASURES(self):
            return self.getToken(plsqlParser.MEASURES, 0)

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def MERGE(self):
            return self.getToken(plsqlParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(plsqlParser.MINUTE, 0)

        def MINVALUE(self):
            return self.getToken(plsqlParser.MINVALUE, 0)

        def MLSLABEL(self):
            return self.getToken(plsqlParser.MLSLABEL, 0)

        def MODEL(self):
            return self.getToken(plsqlParser.MODEL, 0)

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def MONTH(self):
            return self.getToken(plsqlParser.MONTH, 0)

        def MULTISET(self):
            return self.getToken(plsqlParser.MULTISET, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def NAN(self):
            return self.getToken(plsqlParser.NAN, 0)

        def NATURAL(self):
            return self.getToken(plsqlParser.NATURAL, 0)

        def NATURALN(self):
            return self.getToken(plsqlParser.NATURALN, 0)

        def NAV(self):
            return self.getToken(plsqlParser.NAV, 0)

        def NCHAR(self):
            return self.getToken(plsqlParser.NCHAR, 0)

        def NCHAR_CS(self):
            return self.getToken(plsqlParser.NCHAR_CS, 0)

        def NCLOB(self):
            return self.getToken(plsqlParser.NCLOB, 0)

        def NESTED(self):
            return self.getToken(plsqlParser.NESTED, 0)

        def NEW(self):
            return self.getToken(plsqlParser.NEW, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def NOAUDIT(self):
            return self.getToken(plsqlParser.NOAUDIT, 0)

        def NOCOPY(self):
            return self.getToken(plsqlParser.NOCOPY, 0)

        def NOCYCLE(self):
            return self.getToken(plsqlParser.NOCYCLE, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(plsqlParser.NOENTITYESCAPING, 0)

        def NONE(self):
            return self.getToken(plsqlParser.NONE, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(plsqlParser.NOSCHEMACHECK, 0)

        def NULLS(self):
            return self.getToken(plsqlParser.NULLS, 0)

        def NUMBER(self):
            return self.getToken(plsqlParser.NUMBER, 0)

        def NUMERIC(self):
            return self.getToken(plsqlParser.NUMERIC, 0)

        def NVARCHAR2(self):
            return self.getToken(plsqlParser.NVARCHAR2, 0)

        def NVL(self):
            return self.getToken(plsqlParser.NVL, 0)

        def OBJECT(self):
            return self.getToken(plsqlParser.OBJECT, 0)

        def OFF(self):
            return self.getToken(plsqlParser.OFF, 0)

        def OID(self):
            return self.getToken(plsqlParser.OID, 0)

        def OLD(self):
            return self.getToken(plsqlParser.OLD, 0)

        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def OPEN(self):
            return self.getToken(plsqlParser.OPEN, 0)

        def ORADATA(self):
            return self.getToken(plsqlParser.ORADATA, 0)

        def ORDINALITY(self):
            return self.getToken(plsqlParser.ORDINALITY, 0)

        def OSERROR(self):
            return self.getToken(plsqlParser.OSERROR, 0)

        def OUT(self):
            return self.getToken(plsqlParser.OUT, 0)

        def OUTER(self):
            return self.getToken(plsqlParser.OUTER, 0)

        def OVER(self):
            return self.getToken(plsqlParser.OVER, 0)

        def OVERRIDING(self):
            return self.getToken(plsqlParser.OVERRIDING, 0)

        def PACKAGE(self):
            return self.getToken(plsqlParser.PACKAGE, 0)

        def PARALLEL_ENABLE(self):
            return self.getToken(plsqlParser.PARALLEL_ENABLE, 0)

        def PARAMETERS(self):
            return self.getToken(plsqlParser.PARAMETERS, 0)

        def PARENT(self):
            return self.getToken(plsqlParser.PARENT, 0)

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def PASSING(self):
            return self.getToken(plsqlParser.PASSING, 0)

        def PATH(self):
            return self.getToken(plsqlParser.PATH, 0)

        def PIPELINED(self):
            return self.getToken(plsqlParser.PIPELINED, 0)

        def PLAN(self):
            return self.getToken(plsqlParser.PLAN, 0)

        def PLS_INTEGER(self):
            return self.getToken(plsqlParser.PLS_INTEGER, 0)

        def POSITIVE(self):
            return self.getToken(plsqlParser.POSITIVE, 0)

        def POSITIVEN(self):
            return self.getToken(plsqlParser.POSITIVEN, 0)

        def PRAGMA(self):
            return self.getToken(plsqlParser.PRAGMA, 0)

        def PRECEDING(self):
            return self.getToken(plsqlParser.PRECEDING, 0)

        def PRECISION(self):
            return self.getToken(plsqlParser.PRECISION, 0)

        def PRESENT(self):
            return self.getToken(plsqlParser.PRESENT, 0)

        def RAISE(self):
            return self.getToken(plsqlParser.RAISE, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def RAW(self):
            return self.getToken(plsqlParser.RAW, 0)

        def READ(self):
            return self.getToken(plsqlParser.READ, 0)

        def REAL(self):
            return self.getToken(plsqlParser.REAL, 0)

        def RECORD(self):
            return self.getToken(plsqlParser.RECORD, 0)

        def REF(self):
            return self.getToken(plsqlParser.REF, 0)

        def REFERENCE(self):
            return self.getToken(plsqlParser.REFERENCE, 0)

        def REFERENCING(self):
            return self.getToken(plsqlParser.REFERENCING, 0)

        def REJECT(self):
            return self.getToken(plsqlParser.REJECT, 0)

        def RELIES_ON(self):
            return self.getToken(plsqlParser.RELIES_ON, 0)

        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def RESPECT(self):
            return self.getToken(plsqlParser.RESPECT, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(plsqlParser.RESTRICT_REFERENCES, 0)

        def RESULT(self):
            return self.getToken(plsqlParser.RESULT, 0)

        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def RETURNING(self):
            return self.getToken(plsqlParser.RETURNING, 0)

        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def REVERSE(self):
            return self.getToken(plsqlParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(plsqlParser.RIGHT, 0)

        def ROLLBACK(self):
            return self.getToken(plsqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(plsqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def ROWID(self):
            return self.getToken(plsqlParser.ROWID, 0)

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def RULES(self):
            return self.getToken(plsqlParser.RULES, 0)

        def SAMPLE(self):
            return self.getToken(plsqlParser.SAMPLE, 0)

        def SAVE(self):
            return self.getToken(plsqlParser.SAVE, 0)

        def SAVEPOINT(self):
            return self.getToken(plsqlParser.SAVEPOINT, 0)

        def SCHEMA(self):
            return self.getToken(plsqlParser.SCHEMA, 0)

        def SCHEMACHECK(self):
            return self.getToken(plsqlParser.SCHEMACHECK, 0)

        def SCN(self):
            return self.getToken(plsqlParser.SCN, 0)

        def SECOND(self):
            return self.getToken(plsqlParser.SECOND, 0)

        def SEED(self):
            return self.getToken(plsqlParser.SEED, 0)

        def SEGMENT(self):
            return self.getToken(plsqlParser.SEGMENT, 0)

        def SELF(self):
            return self.getToken(plsqlParser.SELF, 0)

        def SEQUENTIAL(self):
            return self.getToken(plsqlParser.SEQUENTIAL, 0)

        def SERIALIZABLE(self):
            return self.getToken(plsqlParser.SERIALIZABLE, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(plsqlParser.SERIALLY_REUSABLE, 0)

        def SERVERERROR(self):
            return self.getToken(plsqlParser.SERVERERROR, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(plsqlParser.SESSIONTIMEZONE, 0)

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def SETS(self):
            return self.getToken(plsqlParser.SETS, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(plsqlParser.SHOW, 0)

        def SHUTDOWN(self):
            return self.getToken(plsqlParser.SHUTDOWN, 0)

        def SIBLINGS(self):
            return self.getToken(plsqlParser.SIBLINGS, 0)

        def SIGNTYPE(self):
            return self.getToken(plsqlParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(plsqlParser.SIMPLE_INTEGER, 0)

        def SINGLE(self):
            return self.getToken(plsqlParser.SINGLE, 0)

        def SIZE(self):
            return self.getToken(plsqlParser.SIZE, 0)

        def SKIP_(self):
            return self.getToken(plsqlParser.SKIP_, 0)

        def SMALLINT(self):
            return self.getToken(plsqlParser.SMALLINT, 0)

        def SNAPSHOT(self):
            return self.getToken(plsqlParser.SNAPSHOT, 0)

        def SOME(self):
            return self.getToken(plsqlParser.SOME, 0)

        def SPECIFICATION(self):
            return self.getToken(plsqlParser.SPECIFICATION, 0)

        def SQLDATA(self):
            return self.getToken(plsqlParser.SQLDATA, 0)

        def SQLERROR(self):
            return self.getToken(plsqlParser.SQLERROR, 0)

        def STANDALONE(self):
            return self.getToken(plsqlParser.STANDALONE, 0)

        def STARTUP(self):
            return self.getToken(plsqlParser.STARTUP, 0)

        def STATEMENT(self):
            return self.getToken(plsqlParser.STATEMENT, 0)

        def STATEMENT_ID(self):
            return self.getToken(plsqlParser.STATEMENT_ID, 0)

        def STATIC(self):
            return self.getToken(plsqlParser.STATIC, 0)

        def STATISTICS(self):
            return self.getToken(plsqlParser.STATISTICS, 0)

        def STRING(self):
            return self.getToken(plsqlParser.STRING, 0)

        def SUBMULTISET(self):
            return self.getToken(plsqlParser.SUBMULTISET, 0)

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(plsqlParser.SUBSTITUTABLE, 0)

        def SUBSTRING(self):
            return self.getToken(plsqlParser.SUBSTRING, 0)

        def SUBTYPE(self):
            return self.getToken(plsqlParser.SUBTYPE, 0)

        def SUCCESS(self):
            return self.getToken(plsqlParser.SUCCESS, 0)

        def SUSPEND(self):
            return self.getToken(plsqlParser.SUSPEND, 0)

        def TABLES(self):
            return self.getToken(plsqlParser.TABLES, 0)

        def TIME(self):
            return self.getToken(plsqlParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(plsqlParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0)

        def TIMESTAMP_TZ_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0)

        def TIMESTAMP_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0)

        def TIMEZONE_ABBR(self):
            return self.getToken(plsqlParser.TIMEZONE_ABBR, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(plsqlParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(plsqlParser.TIMEZONE_MINUTE, 0)

        def TIMEZONE_REGION(self):
            return self.getToken(plsqlParser.TIMEZONE_REGION, 0)

        def TO_CHAR(self):
            return self.getToken(plsqlParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(plsqlParser.TO_DATE, 0)

        def TRAILING(self):
            return self.getToken(plsqlParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(plsqlParser.TRANSACTION, 0)

        def TRANSLATE(self):
            return self.getToken(plsqlParser.TRANSLATE, 0)

        def TREAT(self):
            return self.getToken(plsqlParser.TREAT, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def TRIM(self):
            return self.getToken(plsqlParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(plsqlParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(plsqlParser.UNBOUNDED, 0)

        def UNDER(self):
            return self.getToken(plsqlParser.UNDER, 0)

        def UNLIMITED(self):
            return self.getToken(plsqlParser.UNLIMITED, 0)

        def UNTIL(self):
            return self.getToken(plsqlParser.UNTIL, 0)

        def UPDATED(self):
            return self.getToken(plsqlParser.UPDATED, 0)

        def UPSERT(self):
            return self.getToken(plsqlParser.UPSERT, 0)

        def UROWID(self):
            return self.getToken(plsqlParser.UROWID, 0)

        def USE(self):
            return self.getToken(plsqlParser.USE, 0)

        def VALIDATE(self):
            return self.getToken(plsqlParser.VALIDATE, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def VARCHAR(self):
            return self.getToken(plsqlParser.VARCHAR, 0)

        def VARCHAR2(self):
            return self.getToken(plsqlParser.VARCHAR2, 0)

        def VARIABLE(self):
            return self.getToken(plsqlParser.VARIABLE, 0)

        def VARRAY(self):
            return self.getToken(plsqlParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(plsqlParser.VARYING, 0)

        def VERBOSE(self):
            return self.getToken(plsqlParser.VERBOSE, 0)

        def VERSION(self):
            return self.getToken(plsqlParser.VERSION, 0)

        def VERSIONS(self):
            return self.getToken(plsqlParser.VERSIONS, 0)

        def WAIT(self):
            return self.getToken(plsqlParser.WAIT, 0)

        def WARNING(self):
            return self.getToken(plsqlParser.WARNING, 0)

        def WELLFORMED(self):
            return self.getToken(plsqlParser.WELLFORMED, 0)

        def WHENEVER(self):
            return self.getToken(plsqlParser.WHENEVER, 0)

        def WHILE(self):
            return self.getToken(plsqlParser.WHILE, 0)

        def WITHIN(self):
            return self.getToken(plsqlParser.WITHIN, 0)

        def WORK(self):
            return self.getToken(plsqlParser.WORK, 0)

        def WRITE(self):
            return self.getToken(plsqlParser.WRITE, 0)

        def XML(self):
            return self.getToken(plsqlParser.XML, 0)

        def XMLAGG(self):
            return self.getToken(plsqlParser.XMLAGG, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(plsqlParser.XMLATTRIBUTES, 0)

        def XMLCAST(self):
            return self.getToken(plsqlParser.XMLCAST, 0)

        def XMLCOLATTVAL(self):
            return self.getToken(plsqlParser.XMLCOLATTVAL, 0)

        def XMLELEMENT(self):
            return self.getToken(plsqlParser.XMLELEMENT, 0)

        def XMLEXISTS(self):
            return self.getToken(plsqlParser.XMLEXISTS, 0)

        def XMLFOREST(self):
            return self.getToken(plsqlParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(plsqlParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(plsqlParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(plsqlParser.XMLPI, 0)

        def XMLQUERY(self):
            return self.getToken(plsqlParser.XMLQUERY, 0)

        def XMLROOT(self):
            return self.getToken(plsqlParser.XMLROOT, 0)

        def XMLSERIALIZE(self):
            return self.getToken(plsqlParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(plsqlParser.XMLTABLE, 0)

        def YEAR(self):
            return self.getToken(plsqlParser.YEAR, 0)

        def YES(self):
            return self.getToken(plsqlParser.YES, 0)

        def YMINTERVAL_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0)

        def ZONE(self):
            return self.getToken(plsqlParser.ZONE, 0)

        def PREDICTION(self):
            return self.getToken(plsqlParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(plsqlParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(plsqlParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(plsqlParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(plsqlParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(plsqlParser.PREDICTION_SET, 0)

        def CUME_DIST(self):
            return self.getToken(plsqlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(plsqlParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(plsqlParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(plsqlParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(plsqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(plsqlParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(plsqlParser.RANK, 0)

        def AVG(self):
            return self.getToken(plsqlParser.AVG, 0)

        def CORR(self):
            return self.getToken(plsqlParser.CORR, 0)

        def LAG(self):
            return self.getToken(plsqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(plsqlParser.LEAD, 0)

        def MAX(self):
            return self.getToken(plsqlParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(plsqlParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(plsqlParser.MIN, 0)

        def NTILE(self):
            return self.getToken(plsqlParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(plsqlParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(plsqlParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(plsqlParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(plsqlParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(plsqlParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(plsqlParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(plsqlParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(plsqlParser.COVAR_, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_regular_id

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegular_id" ):
                return visitor.visitRegular_id(self)
            else:
                return visitor.visitChildren(self)




    def regular_id(self):

        localctx = plsqlParser.Regular_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_regular_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8074
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)) | (1 << (plsqlParser.LIBRARY - 197)) | (1 << (plsqlParser.LIKE2 - 197)) | (1 << (plsqlParser.LIKE4 - 197)) | (1 << (plsqlParser.LIKEC - 197)) | (1 << (plsqlParser.LIMIT - 197)) | (1 << (plsqlParser.LIST - 197)) | (1 << (plsqlParser.LOCAL - 197)))) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (plsqlParser.LOCKED - 265)) | (1 << (plsqlParser.LOG - 265)) | (1 << (plsqlParser.LOGOFF - 265)) | (1 << (plsqlParser.LOGON - 265)) | (1 << (plsqlParser.LONG - 265)) | (1 << (plsqlParser.LOOP - 265)) | (1 << (plsqlParser.MAIN - 265)) | (1 << (plsqlParser.MAP - 265)) | (1 << (plsqlParser.MATCHED - 265)) | (1 << (plsqlParser.MAXVALUE - 265)) | (1 << (plsqlParser.MEASURES - 265)) | (1 << (plsqlParser.MEMBER - 265)) | (1 << (plsqlParser.MERGE - 265)) | (1 << (plsqlParser.MINUTE - 265)) | (1 << (plsqlParser.MINVALUE - 265)) | (1 << (plsqlParser.MLSLABEL - 265)) | (1 << (plsqlParser.MODEL - 265)) | (1 << (plsqlParser.MODIFY - 265)) | (1 << (plsqlParser.MONTH - 265)) | (1 << (plsqlParser.MULTISET - 265)) | (1 << (plsqlParser.NAME - 265)) | (1 << (plsqlParser.NAN - 265)) | (1 << (plsqlParser.NATURAL - 265)) | (1 << (plsqlParser.NATURALN - 265)) | (1 << (plsqlParser.NAV - 265)) | (1 << (plsqlParser.NCHAR - 265)) | (1 << (plsqlParser.NCHAR_CS - 265)) | (1 << (plsqlParser.NCLOB - 265)) | (1 << (plsqlParser.NESTED - 265)) | (1 << (plsqlParser.NEW - 265)) | (1 << (plsqlParser.NO - 265)) | (1 << (plsqlParser.NOAUDIT - 265)) | (1 << (plsqlParser.NOCOPY - 265)) | (1 << (plsqlParser.NOCYCLE - 265)) | (1 << (plsqlParser.NOENTITYESCAPING - 265)) | (1 << (plsqlParser.NONE - 265)) | (1 << (plsqlParser.NOSCHEMACHECK - 265)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)) | (1 << (plsqlParser.PRECEDING - 329)) | (1 << (plsqlParser.PRECISION - 329)) | (1 << (plsqlParser.PRESENT - 329)) | (1 << (plsqlParser.RAISE - 329)) | (1 << (plsqlParser.RANGE - 329)) | (1 << (plsqlParser.RAW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)) | (1 << (plsqlParser.SEED - 393)) | (1 << (plsqlParser.SEGMENT - 393)) | (1 << (plsqlParser.SELF - 393)) | (1 << (plsqlParser.SEQUENTIAL - 393)) | (1 << (plsqlParser.SERIALIZABLE - 393)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 393)) | (1 << (plsqlParser.SERVERERROR - 393)) | (1 << (plsqlParser.SESSIONTIMEZONE - 393)) | (1 << (plsqlParser.SET - 393)) | (1 << (plsqlParser.SETS - 393)) | (1 << (plsqlParser.SETTINGS - 393)) | (1 << (plsqlParser.SHOW - 393)) | (1 << (plsqlParser.SHUTDOWN - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (plsqlParser.SIBLINGS - 457)) | (1 << (plsqlParser.SIGNTYPE - 457)) | (1 << (plsqlParser.SIMPLE_INTEGER - 457)) | (1 << (plsqlParser.SINGLE - 457)) | (1 << (plsqlParser.SIZE - 457)) | (1 << (plsqlParser.SKIP_ - 457)) | (1 << (plsqlParser.SMALLINT - 457)) | (1 << (plsqlParser.SNAPSHOT - 457)) | (1 << (plsqlParser.SOME - 457)) | (1 << (plsqlParser.SPECIFICATION - 457)) | (1 << (plsqlParser.SQLDATA - 457)) | (1 << (plsqlParser.SQLERROR - 457)) | (1 << (plsqlParser.STANDALONE - 457)) | (1 << (plsqlParser.STARTUP - 457)) | (1 << (plsqlParser.STATEMENT - 457)) | (1 << (plsqlParser.STATEMENT_ID - 457)) | (1 << (plsqlParser.STATIC - 457)) | (1 << (plsqlParser.STATISTICS - 457)) | (1 << (plsqlParser.STRING - 457)) | (1 << (plsqlParser.SUBMULTISET - 457)) | (1 << (plsqlParser.SUBPARTITION - 457)) | (1 << (plsqlParser.SUBSTITUTABLE - 457)) | (1 << (plsqlParser.SUBSTRING - 457)) | (1 << (plsqlParser.SUBTYPE - 457)) | (1 << (plsqlParser.SUCCESS - 457)) | (1 << (plsqlParser.SUSPEND - 457)) | (1 << (plsqlParser.TABLES - 457)) | (1 << (plsqlParser.TIME - 457)) | (1 << (plsqlParser.TIMESTAMP - 457)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 457)) | (1 << (plsqlParser.TIMEZONE_ABBR - 457)) | (1 << (plsqlParser.TIMEZONE_HOUR - 457)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 457)) | (1 << (plsqlParser.TIMEZONE_REGION - 457)) | (1 << (plsqlParser.TO_CHAR - 457)) | (1 << (plsqlParser.TO_DATE - 457)) | (1 << (plsqlParser.TRAILING - 457)) | (1 << (plsqlParser.TRANSACTION - 457)) | (1 << (plsqlParser.TRANSLATE - 457)) | (1 << (plsqlParser.TREAT - 457)) | (1 << (plsqlParser.TRIGGER - 457)) | (1 << (plsqlParser.TRIM - 457)) | (1 << (plsqlParser.TRUNCATE - 457)) | (1 << (plsqlParser.TYPE - 457)) | (1 << (plsqlParser.UNBOUNDED - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (plsqlParser.UNDER - 521)) | (1 << (plsqlParser.UNLIMITED - 521)) | (1 << (plsqlParser.UNTIL - 521)) | (1 << (plsqlParser.UPDATED - 521)) | (1 << (plsqlParser.UPSERT - 521)) | (1 << (plsqlParser.UROWID - 521)) | (1 << (plsqlParser.USE - 521)) | (1 << (plsqlParser.VALIDATE - 521)) | (1 << (plsqlParser.VALUE - 521)) | (1 << (plsqlParser.VARCHAR - 521)) | (1 << (plsqlParser.VARCHAR2 - 521)) | (1 << (plsqlParser.VARIABLE - 521)) | (1 << (plsqlParser.VARRAY - 521)) | (1 << (plsqlParser.VARYING - 521)) | (1 << (plsqlParser.VERBOSE - 521)) | (1 << (plsqlParser.VERSION - 521)) | (1 << (plsqlParser.VERSIONS - 521)) | (1 << (plsqlParser.WAIT - 521)) | (1 << (plsqlParser.WARNING - 521)) | (1 << (plsqlParser.WELLFORMED - 521)) | (1 << (plsqlParser.WHENEVER - 521)) | (1 << (plsqlParser.WHILE - 521)) | (1 << (plsqlParser.WITHIN - 521)) | (1 << (plsqlParser.WORK - 521)) | (1 << (plsqlParser.WRITE - 521)) | (1 << (plsqlParser.XML - 521)) | (1 << (plsqlParser.XMLAGG - 521)) | (1 << (plsqlParser.XMLATTRIBUTES - 521)) | (1 << (plsqlParser.XMLCAST - 521)) | (1 << (plsqlParser.XMLCOLATTVAL - 521)) | (1 << (plsqlParser.XMLELEMENT - 521)) | (1 << (plsqlParser.XMLEXISTS - 521)) | (1 << (plsqlParser.XMLFOREST - 521)) | (1 << (plsqlParser.XMLNAMESPACES - 521)) | (1 << (plsqlParser.XMLPARSE - 521)) | (1 << (plsqlParser.XMLPI - 521)) | (1 << (plsqlParser.XMLQUERY - 521)) | (1 << (plsqlParser.XMLROOT - 521)) | (1 << (plsqlParser.XMLSERIALIZE - 521)) | (1 << (plsqlParser.XMLTABLE - 521)) | (1 << (plsqlParser.YEAR - 521)) | (1 << (plsqlParser.YES - 521)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 521)) | (1 << (plsqlParser.ZONE - 521)) | (1 << (plsqlParser.PREDICTION - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (plsqlParser.PREDICTION_BOUNDS - 585)) | (1 << (plsqlParser.PREDICTION_COST - 585)) | (1 << (plsqlParser.PREDICTION_DETAILS - 585)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 585)) | (1 << (plsqlParser.PREDICTION_SET - 585)) | (1 << (plsqlParser.CUME_DIST - 585)) | (1 << (plsqlParser.DENSE_RANK - 585)) | (1 << (plsqlParser.LISTAGG - 585)) | (1 << (plsqlParser.PERCENT_RANK - 585)) | (1 << (plsqlParser.PERCENTILE_CONT - 585)) | (1 << (plsqlParser.PERCENTILE_DISC - 585)) | (1 << (plsqlParser.RANK - 585)) | (1 << (plsqlParser.AVG - 585)) | (1 << (plsqlParser.CORR - 585)) | (1 << (plsqlParser.LAG - 585)) | (1 << (plsqlParser.LEAD - 585)) | (1 << (plsqlParser.MAX - 585)) | (1 << (plsqlParser.MEDIAN - 585)) | (1 << (plsqlParser.MIN - 585)) | (1 << (plsqlParser.NTILE - 585)) | (1 << (plsqlParser.RATIO_TO_REPORT - 585)) | (1 << (plsqlParser.ROW_NUMBER - 585)) | (1 << (plsqlParser.SUM - 585)) | (1 << (plsqlParser.VARIANCE - 585)) | (1 << (plsqlParser.REGR_ - 585)) | (1 << (plsqlParser.STDDEV - 585)) | (1 << (plsqlParser.VAR_ - 585)) | (1 << (plsqlParser.COVAR_ - 585)))) != 0) or _la==plsqlParser.REGULAR_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[319] = self.subquery_sempred
        self._predicates[325] = self.table_ref_sempred
        self._predicates[407] = self.expression_sempred
        self._predicates[416] = self.binary_expression_sempred
        self._predicates[424] = self.unary_expression_sempred
        self._predicates[435] = self.standard_function_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def subquery_sempred(self, localctx:SubqueryContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def table_ref_sempred(self, localctx:Table_refContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 7)
         

    def binary_expression_sempred(self, localctx:Binary_expressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 7)
         

    def unary_expression_sempred(self, localctx:Unary_expressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 11)
         

    def standard_function_sempred(self, localctx:Standard_functionContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         




